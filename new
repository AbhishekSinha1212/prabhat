
CREATE TABLE Physical_Only
(
	Phy_A                CHAR(18)  NOT NULL ,
	Phy_B                CHAR(18)  NULL ,
	Phy_C                CHAR(18)  NULL 
);

CREATE UNIQUE INDEX XPKPhysical_Only ON Physical_Only
(Phy_A   ASC);

ALTER TABLE Physical_Only
	ADD CONSTRAINT  XPKPhysical_Only PRIMARY KEY (Phy_A);

CREATE TABLE Physical2
(
	Phy_D_H              CHAR(18)  NOT NULL ,
	Phy_E                CHAR(18)  NOT NULL ,
	Phy_F                CHAR(18)  NULL ,
	Phy_G                CHAR(18)  NULL ,
	Phy_H                CHAR(18)  NULL ,
	Phy_A                CHAR(18)  NULL 
);

CREATE UNIQUE INDEX XPKPhysical2 ON Physical2
(Phy_D_H   ASC,Phy_E   ASC);

ALTER TABLE Physical2
	ADD CONSTRAINT  XPKPhysical2 PRIMARY KEY (Phy_D_H,Phy_E);

ALTER TABLE Physical2
	ADD (
CONSTRAINT R_1 FOREIGN KEY (Phy_A) REFERENCES Physical_Only (Phy_A) ON DELETE SET NULL);

CREATE  TRIGGER  tD_Physical_Only AFTER DELETE ON Physical_Only for each row
-- erwin Builtin Trigger
-- DELETE trigger on Physical_Only 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* Physical_Only  Physical2 on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b397", PARENT_OWNER="", PARENT_TABLE="Physical_Only"
    CHILD_OWNER="", CHILD_TABLE="Physical2"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="Phy_A" */
    UPDATE Physical2
      SET
        /* %SetFK(Physical2,NULL) */
        Physical2.Phy_A = NULL
      WHERE
        /* %JoinFKPK(Physical2,:%Old," = "," AND") */
        Physical2.Phy_A = :old.Phy_A;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_Physical_Only AFTER UPDATE ON Physical_Only for each row
-- erwin Builtin Trigger
-- UPDATE trigger on Physical_Only 
DECLARE NUMROWS INTEGER;
BEGIN
  /* Physical_Only  Physical2 on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000d81c", PARENT_OWNER="", PARENT_TABLE="Physical_Only"
    CHILD_OWNER="", CHILD_TABLE="Physical2"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="Phy_A" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.Phy_A <> :new.Phy_A
  THEN
    UPDATE Physical2
      SET
        /* %SetFK(Physical2,NULL) */
        Physical2.Phy_A = NULL
      WHERE
        /* %JoinFKPK(Physical2,:%Old," = ",",") */
        Physical2.Phy_A = :old.Phy_A;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_Physical2 BEFORE INSERT ON Physical2 for each row
-- erwin Builtin Trigger
-- INSERT trigger on Physical2 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* Physical_Only  Physical2 on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="000103b5", PARENT_OWNER="", PARENT_TABLE="Physical_Only"
    CHILD_OWNER="", CHILD_TABLE="Physical2"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="Phy_A" */
    UPDATE Physical2
      SET
        /* %SetFK(Physical2,NULL) */
        Physical2.Phy_A = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM Physical_Only
            WHERE
              /* %JoinFKPK(:%New,Physical_Only," = "," AND") */
              :new.Phy_A = Physical_Only.Phy_A
        ) 
        /* %JoinPKPK(Physical2,:%New," = "," AND") */
         and Physical2.Phy_D_H = :new.Phy_D_H AND
        Physical2.Phy_E = :new.Phy_E;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_Physical2 AFTER UPDATE ON Physical2 for each row
-- erwin Builtin Trigger
-- UPDATE trigger on Physical2 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* Physical_Only  Physical2 on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001000e", PARENT_OWNER="", PARENT_TABLE="Physical_Only"
    CHILD_OWNER="", CHILD_TABLE="Physical2"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="Phy_A" */
  SELECT count(*) INTO NUMROWS
    FROM Physical_Only
    WHERE
      /* %JoinFKPK(:%New,Physical_Only," = "," AND") */
      :new.Phy_A = Physical_Only.Phy_A;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.Phy_A IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update Physical2 because Physical_Only does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/

