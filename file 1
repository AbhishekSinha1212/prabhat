
CREATE TYPE [standard_string]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [standard_number]
	FROM INTEGER NULL
go

CREATE TYPE [first_name]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [last_name]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [address]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [director]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [city]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [manager]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [state]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [title]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [zip_code]
	FROM INTEGER NULL
go

CREATE TYPE [phone]
	FROM INTEGER NULL
go

CREATE TYPE [address_2]
	FROM VARCHAR(20) NULL
go

CREATE RULE [Movie_genre]
	AS @col IN ('AA', 'AN', 'CO', 'DO', 'DR', 'FA', 'CL', 'HO', 'MY', 'SF', 'WS')
go

CREATE TABLE [CUSTOMER]
( 
	[customer_address]   [address] ,
	[customer_city]      [city] ,
	[customer_first_name] [first_name] ,
	[customer_last_name] [last_name] ,
	[customer_state]     [state] ,
	[customer_zip_code]  [zip_code] ,
	[email]              varchar  NULL ,
	[customer_number]    integer  NOT NULL 
)
go

CREATE TABLE [CUSTOMER_CREDIT]
( 
	[credit_card]        integer  NULL ,
	[credit_card_exp]    integer  NULL ,
	[status_code]        varchar(20)  NULL ,
	[customer_number]    integer  NOT NULL 
)
go

CREATE TABLE [EMPLOYEE]
( 
	[employee_first_name] [first_name] ,
	[employee_address]   [address] ,
	[employee_phone]     [phone] ,
	[store_number]       integer  NULL ,
	[employee_address_2] [address_2] ,
	[email]              varchar(20)  NULL ,
	[salary]             integer  NULL ,
	[hire_date]          datetime  NULL ,
	[soc_sec_number]     integer  NULL ,
	[employee_number]    varchar(20)  NOT NULL ,
	[supervisor]         varchar(20)  NOT NULL 
)
go

CREATE TABLE [MOVIE]
( 
	[movie_title]        [title] ,
	[movie_director]     [director] ,
	[description]        varchar(20)  NULL ,
	[star_1_name]        [first_name] ,
	[rating]             varchar  NULL ,
	[star_2_name]        [first_name] ,
	[movie_number]       integer  NOT NULL ,
	[genre]              varchar(2)  NULL ,
	[rental_rate]        numeric  NULL ,
	[movie_url]          varchar  NULL ,
	[movie_clip]         varbinary  NULL 
)
go

CREATE TABLE [MOVIE_COPY]
( 
	[general_condition]  varchar(20)  NULL ,
	[movie_format]       varchar(20)  NULL ,
	[movie_copy_number]  integer  NOT NULL ,
	[movie_number]       integer  NOT NULL 
)
go

CREATE TABLE [MOVIE_RENTAL_RECORD]
( 
	[rental_date]        datetime  NULL ,
	[due_date]           datetime  NULL ,
	[rental_status]      varchar(20)  NULL ,
	[payment_transaction_number] integer  NULL ,
	[overdue_charge]     integer  NULL ,
	[rental_rate]        integer  NULL ,
	[employee_phone]     [phone]  NOT NULL ,
	[soc_sec_number]     integer  NOT NULL ,
	[rental_record_date] datetime  NOT NULL ,
	[movie_copy_number]  integer  NOT NULL ,
	[movie_number]       integer  NOT NULL ,
	[customer_number]    integer  NOT NULL 
)
go

CREATE TABLE [MOVIE_STORE]
( 
	[movie_number]       integer  NOT NULL ,
	[store_number]       integer  NOT NULL 
)
go

CREATE TABLE [PAYMENT]
( 
	[payment_transaction_number] integer  NOT NULL ,
	[payment_type]       char(18)  NULL ,
	[payment_amount]     numeric  NULL ,
	[payment_date]       datetime  NULL ,
	[payment_status]     varchar(1)  NULL ,
	[employee_number]    varchar(20)  NOT NULL ,
	[customer_number]    integer  NULL ,
	[customer_no]        integer  NULL ,
	[check_bank_number]  integer  NULL ,
	[check_number]       integer  NULL ,
	[epay_vendor_number] integer  NULL ,
	[epay_account_number] integer  NULL ,
	[credit_card_number] char(18)  NULL ,
	[credit_card_exp]    datetime  NULL ,
	[credit_card_type]   char(18)  NULL 
)
go

CREATE TABLE [STORE]
( 
	[store_manager]      [manager] ,
	[store_address]      [address] ,
	[store_address_2]    [address_2] ,
	[store_phone]        [phone] ,
	[store_city]         [city] ,
	[store_state]        [state] ,
	[store_zip_code]     [zip_code] ,
	[store_number]       integer  NOT NULL 
)
go

ALTER TABLE [CUSTOMER]
	ADD CONSTRAINT [XPKCUSTOMER] PRIMARY KEY  CLUSTERED ([customer_number] ASC)
go

ALTER TABLE [CUSTOMER]
	ADD CONSTRAINT [XAK1CUSTOMER] UNIQUE ([customer_address]  ASC)
go

CREATE NONCLUSTERED INDEX [XIE1CUSTOMER] ON [CUSTOMER]
( 
	[customer_last_name]  ASC
)
go

ALTER TABLE [CUSTOMER_CREDIT]
	ADD CONSTRAINT [XPKCUSTOMER_CREDIT] PRIMARY KEY  CLUSTERED ([customer_number] ASC)
go

ALTER TABLE [EMPLOYEE]
	ADD CONSTRAINT [XPKEMPLOYEE] PRIMARY KEY  CLUSTERED ([employee_number] ASC)
go

ALTER TABLE [EMPLOYEE]
	ADD CONSTRAINT [XAK1EMPLOYEE] UNIQUE ([soc_sec_number]  ASC,[employee_phone]  ASC)
go

CREATE NONCLUSTERED INDEX [XIE1EMPLOYEE] ON [EMPLOYEE]
( 
	[employee_first_name]  ASC
)
go

ALTER TABLE [MOVIE]
	ADD CONSTRAINT [XPKMOVIE] PRIMARY KEY  CLUSTERED ([movie_number] ASC)
go

ALTER TABLE [MOVIE]
	ADD CONSTRAINT [XAK1MOVIE] UNIQUE ([movie_title]  ASC)
go

ALTER TABLE [MOVIE_COPY]
	ADD CONSTRAINT [XPKMOVIE_COPY] PRIMARY KEY  CLUSTERED ([movie_copy_number] ASC,[movie_number] ASC)
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [XPKMOVIE_RENTAL_RECORD] PRIMARY KEY  CLUSTERED ([rental_record_date] ASC,[movie_copy_number] ASC,[movie_number] ASC,[soc_sec_number] ASC,[employee_phone] ASC,[customer_number] ASC)
go

ALTER TABLE [MOVIE_STORE]
	ADD CONSTRAINT [XPKMOVIE_STORE] PRIMARY KEY  CLUSTERED ([movie_number] ASC,[store_number] ASC)
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [XPKPAYMENT] PRIMARY KEY  CLUSTERED ([payment_transaction_number] ASC)
go

ALTER TABLE [STORE]
	ADD CONSTRAINT [XPKSTORE] PRIMARY KEY  CLUSTERED ([store_number] ASC)
go

CREATE NONCLUSTERED INDEX [XIE1STORE] ON [STORE]
( 
	[store_manager]       ASC
)
go


ALTER TABLE [EMPLOYEE]
	ADD CONSTRAINT [employs_is] FOREIGN KEY ([store_number]) REFERENCES [STORE]([store_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EMPLOYEE]
	ADD CONSTRAINT [reports_to] FOREIGN KEY ([supervisor]) REFERENCES [EMPLOYEE]([employee_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


exec sp_bindrule '[Movie_genre]', '[MOVIE].[genre]'
go


ALTER TABLE [MOVIE_COPY]
	ADD CONSTRAINT [is_rented_as] FOREIGN KEY ([movie_number]) REFERENCES [MOVIE]([movie_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [completes] FOREIGN KEY ([soc_sec_number],[employee_phone]) REFERENCES [EMPLOYEE]([soc_sec_number],[employee_phone])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [is_rented_under] FOREIGN KEY ([movie_copy_number],[movie_number]) REFERENCES [MOVIE_COPY]([movie_copy_number],[movie_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [R_8_1] FOREIGN KEY ([customer_number]) REFERENCES [CUSTOMER]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [R_8_2] FOREIGN KEY ([customer_number]) REFERENCES [CUSTOMER_CREDIT]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [is_made_on] FOREIGN KEY ([payment_transaction_number]) REFERENCES [PAYMENT]([payment_transaction_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [MOVIE_STORE]
	ADD CONSTRAINT [rents] FOREIGN KEY ([movie_number]) REFERENCES [MOVIE]([movie_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_STORE]
	ADD CONSTRAINT [is_in] FOREIGN KEY ([store_number]) REFERENCES [STORE]([store_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [receives] FOREIGN KEY ([employee_number]) REFERENCES [EMPLOYEE]([employee_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [R_7_1] FOREIGN KEY ([customer_no]) REFERENCES [CUSTOMER]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [R_7_2] FOREIGN KEY ([customer_number]) REFERENCES [CUSTOMER_CREDIT]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


CREATE TRIGGER tD_CUSTOMER ON CUSTOMER FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CUSTOMER */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CUSTOMER makes PAYMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00023ca2", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.customer_no = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CUSTOMER because PAYMENT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER rents under MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_1", 
    FK_CONSTRAINT="R_8_1", FK_COLUMNS="customer_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CUSTOMER because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CUSTOMER ON CUSTOMER FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CUSTOMER */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @inscustomer_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CUSTOMER makes PAYMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002812c", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.customer_no = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CUSTOMER because PAYMENT exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER rents under MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_1", 
    FK_CONSTRAINT="R_8_1", FK_COLUMNS="customer_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CUSTOMER because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CUSTOMER_CREDIT ON CUSTOMER_CREDIT FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CUSTOMER_CREDIT */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CUSTOMER_CREDIT makes PAYMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000252ef", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CUSTOMER_CREDIT because PAYMENT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER_CREDIT rents under MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_2", 
    FK_CONSTRAINT="R_8_2", FK_COLUMNS="customer_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CUSTOMER_CREDIT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CUSTOMER_CREDIT ON CUSTOMER_CREDIT FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CUSTOMER_CREDIT */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @inscustomer_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CUSTOMER_CREDIT makes PAYMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00028f6e", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CUSTOMER_CREDIT because PAYMENT exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER_CREDIT rents under MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_2", 
    FK_CONSTRAINT="R_8_2", FK_COLUMNS="customer_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.customer_number = deleted.customer_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CUSTOMER_CREDIT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EMPLOYEE ON EMPLOYEE FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EMPLOYEE */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* EMPLOYEE receives PAYMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005ca33", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.employee_number = deleted.employee_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete EMPLOYEE because PAYMENT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE reports to EMPLOYEE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="reports to", C2P_VERB_PHRASE="supervises", 
    FK_CONSTRAINT="reports_to", FK_COLUMNS="supervisor" */
    IF EXISTS (
      SELECT * FROM deleted,EMPLOYEE
      WHERE
        /*  %JoinFKPK(EMPLOYEE,deleted," = "," AND") */
        EMPLOYEE.supervisor = deleted.employee_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete EMPLOYEE because EMPLOYEE exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE completes MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="completes", C2P_VERB_PHRASE="is completed by", 
    FK_CONSTRAINT="completes", FK_COLUMNS="soc_sec_number""employee_phone" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.employee_phone = deleted.employee_phone AND
        MOVIE_RENTAL_RECORD.soc_sec_number = deleted.soc_sec_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete EMPLOYEE because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE reports to EMPLOYEE on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="reports to", C2P_VERB_PHRASE="supervises", 
    FK_CONSTRAINT="reports_to", FK_COLUMNS="supervisor" */
    IF EXISTS (SELECT * FROM deleted,EMPLOYEE
      WHERE
        /* %JoinFKPK(deleted,EMPLOYEE," = "," AND") */
        deleted.supervisor = EMPLOYEE.employee_number AND
        NOT EXISTS (
          SELECT * FROM EMPLOYEE
          WHERE
            /* %JoinFKPK(EMPLOYEE,EMPLOYEE," = "," AND") */
            EMPLOYEE.supervisor = EMPLOYEE.employee_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EMPLOYEE because EMPLOYEE exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* STORE employs is EMPLOYEE on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="employs is", C2P_VERB_PHRASE="is employed by", 
    FK_CONSTRAINT="employs_is", FK_COLUMNS="store_number" */
    IF EXISTS (SELECT * FROM deleted,STORE
      WHERE
        /* %JoinFKPK(deleted,STORE," = "," AND") */
        deleted.store_number = STORE.store_number AND
        NOT EXISTS (
          SELECT * FROM EMPLOYEE
          WHERE
            /* %JoinFKPK(EMPLOYEE,STORE," = "," AND") */
            EMPLOYEE.store_number = STORE.store_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EMPLOYEE because STORE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EMPLOYEE ON EMPLOYEE FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EMPLOYEE */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insemployee_number varchar(20),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* EMPLOYEE receives PAYMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0006b124", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(employee_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.employee_number = deleted.employee_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update EMPLOYEE because PAYMENT exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE reports to EMPLOYEE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="reports to", C2P_VERB_PHRASE="supervises", 
    FK_CONSTRAINT="reports_to", FK_COLUMNS="supervisor" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(employee_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EMPLOYEE
      WHERE
        /*  %JoinFKPK(EMPLOYEE,deleted," = "," AND") */
        EMPLOYEE.supervisor = deleted.employee_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update EMPLOYEE because EMPLOYEE exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE completes MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="completes", C2P_VERB_PHRASE="is completed by", 
    FK_CONSTRAINT="completes", FK_COLUMNS="soc_sec_number""employee_phone" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(employee_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.employee_phone = deleted.employee_phone AND
        MOVIE_RENTAL_RECORD.soc_sec_number = deleted.soc_sec_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update EMPLOYEE because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE reports to EMPLOYEE on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="reports to", C2P_VERB_PHRASE="supervises", 
    FK_CONSTRAINT="reports_to", FK_COLUMNS="supervisor" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(supervisor)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,EMPLOYEE
        WHERE
          /* %JoinFKPK(inserted,EMPLOYEE) */
          inserted.supervisor = EMPLOYEE.employee_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.supervisor IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EMPLOYEE because EMPLOYEE does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* STORE employs is EMPLOYEE on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="employs is", C2P_VERB_PHRASE="is employed by", 
    FK_CONSTRAINT="employs_is", FK_COLUMNS="store_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(store_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,STORE
        WHERE
          /* %JoinFKPK(inserted,STORE) */
          inserted.store_number = STORE.store_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.store_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EMPLOYEE because STORE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_MOVIE ON MOVIE FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on MOVIE */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* MOVIE rents MOVIE_STORE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020519", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="rents", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="rents", FK_COLUMNS="movie_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_STORE
      WHERE
        /*  %JoinFKPK(MOVIE_STORE,deleted," = "," AND") */
        MOVIE_STORE.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete MOVIE because MOVIE_STORE exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* MOVIE is rented as MOVIE_COPY on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_COPY"
    P2C_VERB_PHRASE="is rented as", C2P_VERB_PHRASE="is a copy of a", 
    FK_CONSTRAINT="is_rented_as", FK_COLUMNS="movie_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_COPY
      WHERE
        /*  %JoinFKPK(MOVIE_COPY,deleted," = "," AND") */
        MOVIE_COPY.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete MOVIE because MOVIE_COPY exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_MOVIE ON MOVIE FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on MOVIE */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insmovie_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* MOVIE rents MOVIE_STORE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00025bdf", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="rents", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="rents", FK_COLUMNS="movie_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(movie_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_STORE
      WHERE
        /*  %JoinFKPK(MOVIE_STORE,deleted," = "," AND") */
        MOVIE_STORE.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update MOVIE because MOVIE_STORE exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* MOVIE is rented as MOVIE_COPY on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_COPY"
    P2C_VERB_PHRASE="is rented as", C2P_VERB_PHRASE="is a copy of a", 
    FK_CONSTRAINT="is_rented_as", FK_COLUMNS="movie_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(movie_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_COPY
      WHERE
        /*  %JoinFKPK(MOVIE_COPY,deleted," = "," AND") */
        MOVIE_COPY.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update MOVIE because MOVIE_COPY exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_MOVIE_COPY ON MOVIE_COPY FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on MOVIE_COPY */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* MOVIE_COPY is rented under MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002a2e2", PARENT_OWNER="", PARENT_TABLE="MOVIE_COPY"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is rented under", C2P_VERB_PHRASE="records rental of a", 
    FK_CONSTRAINT="is_rented_under", FK_COLUMNS="movie_copy_number""movie_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.movie_copy_number = deleted.movie_copy_number AND
        MOVIE_RENTAL_RECORD.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete MOVIE_COPY because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* MOVIE is rented as MOVIE_COPY on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_COPY"
    P2C_VERB_PHRASE="is rented as", C2P_VERB_PHRASE="is a copy of a", 
    FK_CONSTRAINT="is_rented_as", FK_COLUMNS="movie_number" */
    IF EXISTS (SELECT * FROM deleted,MOVIE
      WHERE
        /* %JoinFKPK(deleted,MOVIE," = "," AND") */
        deleted.movie_number = MOVIE.movie_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_COPY
          WHERE
            /* %JoinFKPK(MOVIE_COPY,MOVIE," = "," AND") */
            MOVIE_COPY.movie_number = MOVIE.movie_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_COPY because MOVIE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_MOVIE_COPY ON MOVIE_COPY FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on MOVIE_COPY */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insmovie_copy_number integer, 
           @insmovie_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* MOVIE_COPY is rented under MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f7a7", PARENT_OWNER="", PARENT_TABLE="MOVIE_COPY"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is rented under", C2P_VERB_PHRASE="records rental of a", 
    FK_CONSTRAINT="is_rented_under", FK_COLUMNS="movie_copy_number""movie_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(movie_copy_number) OR
    UPDATE(movie_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.movie_copy_number = deleted.movie_copy_number AND
        MOVIE_RENTAL_RECORD.movie_number = deleted.movie_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update MOVIE_COPY because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* MOVIE is rented as MOVIE_COPY on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_COPY"
    P2C_VERB_PHRASE="is rented as", C2P_VERB_PHRASE="is a copy of a", 
    FK_CONSTRAINT="is_rented_as", FK_COLUMNS="movie_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(movie_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,MOVIE
        WHERE
          /* %JoinFKPK(inserted,MOVIE) */
          inserted.movie_number = MOVIE.movie_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_COPY because MOVIE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_MOVIE_RENTAL_RECORD ON MOVIE_RENTAL_RECORD FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on MOVIE_RENTAL_RECORD */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PAYMENT is made on MOVIE_RENTAL_RECORD on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007d2af", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number" */
    IF EXISTS (SELECT * FROM deleted,PAYMENT
      WHERE
        /* %JoinFKPK(deleted,PAYMENT," = "," AND") */
        deleted.payment_transaction_number = PAYMENT.payment_transaction_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_RENTAL_RECORD
          WHERE
            /* %JoinFKPK(MOVIE_RENTAL_RECORD,PAYMENT," = "," AND") */
            MOVIE_RENTAL_RECORD.payment_transaction_number = PAYMENT.payment_transaction_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_RENTAL_RECORD because PAYMENT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER_CREDIT rents under MOVIE_RENTAL_RECORD on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_2", 
    FK_CONSTRAINT="R_8_2", FK_COLUMNS="customer_number" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER_CREDIT
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER_CREDIT," = "," AND") */
        deleted.customer_number = CUSTOMER_CREDIT.customer_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_RENTAL_RECORD
          WHERE
            /* %JoinFKPK(MOVIE_RENTAL_RECORD,CUSTOMER_CREDIT," = "," AND") */
            MOVIE_RENTAL_RECORD.customer_number = CUSTOMER_CREDIT.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_RENTAL_RECORD because CUSTOMER_CREDIT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER rents under MOVIE_RENTAL_RECORD on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_1", 
    FK_CONSTRAINT="R_8_1", FK_COLUMNS="customer_number" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER," = "," AND") */
        deleted.customer_number = CUSTOMER.customer_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_RENTAL_RECORD
          WHERE
            /* %JoinFKPK(MOVIE_RENTAL_RECORD,CUSTOMER," = "," AND") */
            MOVIE_RENTAL_RECORD.customer_number = CUSTOMER.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_RENTAL_RECORD because CUSTOMER exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* MOVIE_COPY is rented under MOVIE_RENTAL_RECORD on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE_COPY"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is rented under", C2P_VERB_PHRASE="records rental of a", 
    FK_CONSTRAINT="is_rented_under", FK_COLUMNS="movie_copy_number""movie_number" */
    IF EXISTS (SELECT * FROM deleted,MOVIE_COPY
      WHERE
        /* %JoinFKPK(deleted,MOVIE_COPY," = "," AND") */
        deleted.movie_copy_number = MOVIE_COPY.movie_copy_number AND
        deleted.movie_number = MOVIE_COPY.movie_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_RENTAL_RECORD
          WHERE
            /* %JoinFKPK(MOVIE_RENTAL_RECORD,MOVIE_COPY," = "," AND") */
            MOVIE_RENTAL_RECORD.movie_copy_number = MOVIE_COPY.movie_copy_number AND
            MOVIE_RENTAL_RECORD.movie_number = MOVIE_COPY.movie_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_RENTAL_RECORD because MOVIE_COPY exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE completes MOVIE_RENTAL_RECORD on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="completes", C2P_VERB_PHRASE="is completed by", 
    FK_CONSTRAINT="completes", FK_COLUMNS="soc_sec_number""employee_phone" */
    IF EXISTS (SELECT * FROM deleted,EMPLOYEE
      WHERE
        /* %JoinFKPK(deleted,EMPLOYEE," = "," AND") */
        deleted.employee_phone = EMPLOYEE.employee_phone AND
        deleted.soc_sec_number = EMPLOYEE.soc_sec_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_RENTAL_RECORD
          WHERE
            /* %JoinFKPK(MOVIE_RENTAL_RECORD,EMPLOYEE," = "," AND") */
            MOVIE_RENTAL_RECORD.employee_phone = EMPLOYEE.employee_phone AND
            MOVIE_RENTAL_RECORD.soc_sec_number = EMPLOYEE.soc_sec_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_RENTAL_RECORD because EMPLOYEE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_MOVIE_RENTAL_RECORD ON MOVIE_RENTAL_RECORD FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on MOVIE_RENTAL_RECORD */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insemployee_phone phone, 
           @inssoc_sec_number integer, 
           @insrental_record_date datetime, 
           @insmovie_copy_number integer, 
           @insmovie_number integer, 
           @inscustomer_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PAYMENT is made on MOVIE_RENTAL_RECORD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00080e14", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(payment_transaction_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,PAYMENT
        WHERE
          /* %JoinFKPK(inserted,PAYMENT) */
          inserted.payment_transaction_number = PAYMENT.payment_transaction_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.payment_transaction_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_RENTAL_RECORD because PAYMENT does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER_CREDIT rents under MOVIE_RENTAL_RECORD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_2", 
    FK_CONSTRAINT="R_8_2", FK_COLUMNS="customer_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER_CREDIT
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER_CREDIT) */
          inserted.customer_number = CUSTOMER_CREDIT.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_RENTAL_RECORD because CUSTOMER_CREDIT does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER rents under MOVIE_RENTAL_RECORD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="rents under", C2P_VERB_PHRASE="identifies_1", 
    FK_CONSTRAINT="R_8_1", FK_COLUMNS="customer_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER) */
          inserted.customer_number = CUSTOMER.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_RENTAL_RECORD because CUSTOMER does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* MOVIE_COPY is rented under MOVIE_RENTAL_RECORD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE_COPY"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is rented under", C2P_VERB_PHRASE="records rental of a", 
    FK_CONSTRAINT="is_rented_under", FK_COLUMNS="movie_copy_number""movie_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(movie_copy_number) OR
    UPDATE(movie_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,MOVIE_COPY
        WHERE
          /* %JoinFKPK(inserted,MOVIE_COPY) */
          inserted.movie_copy_number = MOVIE_COPY.movie_copy_number and
          inserted.movie_number = MOVIE_COPY.movie_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_RENTAL_RECORD because MOVIE_COPY does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE completes MOVIE_RENTAL_RECORD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="completes", C2P_VERB_PHRASE="is completed by", 
    FK_CONSTRAINT="completes", FK_COLUMNS="soc_sec_number""employee_phone" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(employee_phone) OR
    UPDATE(soc_sec_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,EMPLOYEE
        WHERE
          /* %JoinFKPK(inserted,EMPLOYEE) */
          inserted.employee_phone = EMPLOYEE.employee_phone and
          inserted.soc_sec_number = EMPLOYEE.soc_sec_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_RENTAL_RECORD because EMPLOYEE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_MOVIE_STORE ON MOVIE_STORE FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on MOVIE_STORE */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* STORE is in MOVIE_STORE on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00027dfc", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="is in", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="is_in", FK_COLUMNS="store_number" */
    IF EXISTS (SELECT * FROM deleted,STORE
      WHERE
        /* %JoinFKPK(deleted,STORE," = "," AND") */
        deleted.store_number = STORE.store_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_STORE
          WHERE
            /* %JoinFKPK(MOVIE_STORE,STORE," = "," AND") */
            MOVIE_STORE.store_number = STORE.store_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_STORE because STORE exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* MOVIE rents MOVIE_STORE on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="rents", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="rents", FK_COLUMNS="movie_number" */
    IF EXISTS (SELECT * FROM deleted,MOVIE
      WHERE
        /* %JoinFKPK(deleted,MOVIE," = "," AND") */
        deleted.movie_number = MOVIE.movie_number AND
        NOT EXISTS (
          SELECT * FROM MOVIE_STORE
          WHERE
            /* %JoinFKPK(MOVIE_STORE,MOVIE," = "," AND") */
            MOVIE_STORE.movie_number = MOVIE.movie_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last MOVIE_STORE because MOVIE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_MOVIE_STORE ON MOVIE_STORE FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on MOVIE_STORE */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insmovie_number integer, 
           @insstore_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* STORE is in MOVIE_STORE on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c07b", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="is in", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="is_in", FK_COLUMNS="store_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(store_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,STORE
        WHERE
          /* %JoinFKPK(inserted,STORE) */
          inserted.store_number = STORE.store_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_STORE because STORE does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* MOVIE rents MOVIE_STORE on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MOVIE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="rents", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="rents", FK_COLUMNS="movie_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(movie_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,MOVIE
        WHERE
          /* %JoinFKPK(inserted,MOVIE) */
          inserted.movie_number = MOVIE.movie_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update MOVIE_STORE because MOVIE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PAYMENT ON PAYMENT FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PAYMENT */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PAYMENT is made on MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005232d", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.payment_transaction_number = deleted.payment_transaction_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PAYMENT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER_CREDIT makes PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER_CREDIT
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER_CREDIT," = "," AND") */
        deleted.customer_number = CUSTOMER_CREDIT.customer_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,CUSTOMER_CREDIT," = "," AND") */
            PAYMENT.customer_number = CUSTOMER_CREDIT.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because CUSTOMER_CREDIT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER makes PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER," = "," AND") */
        deleted.customer_no = CUSTOMER.customer_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,CUSTOMER," = "," AND") */
            PAYMENT.customer_no = CUSTOMER.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because CUSTOMER exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE receives PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
    IF EXISTS (SELECT * FROM deleted,EMPLOYEE
      WHERE
        /* %JoinFKPK(deleted,EMPLOYEE," = "," AND") */
        deleted.employee_number = EMPLOYEE.employee_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,EMPLOYEE," = "," AND") */
            PAYMENT.employee_number = EMPLOYEE.employee_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because EMPLOYEE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PAYMENT ON PAYMENT FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PAYMENT */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @inspayment_transaction_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PAYMENT is made on MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005e050", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(payment_transaction_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.payment_transaction_number = deleted.payment_transaction_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PAYMENT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER_CREDIT makes PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER_CREDIT
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER_CREDIT) */
          inserted.customer_number = CUSTOMER_CREDIT.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.customer_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because CUSTOMER_CREDIT does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER makes PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_no)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER) */
          inserted.customer_no = CUSTOMER.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.customer_no IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because CUSTOMER does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE receives PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(employee_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,EMPLOYEE
        WHERE
          /* %JoinFKPK(inserted,EMPLOYEE) */
          inserted.employee_number = EMPLOYEE.employee_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.employee_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because EMPLOYEE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_STORE ON STORE FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on STORE */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* STORE is in MOVIE_STORE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000217ef", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="is in", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="is_in", FK_COLUMNS="store_number" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_STORE
      WHERE
        /*  %JoinFKPK(MOVIE_STORE,deleted," = "," AND") */
        MOVIE_STORE.store_number = deleted.store_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete STORE because MOVIE_STORE exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* STORE employs is EMPLOYEE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="employs is", C2P_VERB_PHRASE="is employed by", 
    FK_CONSTRAINT="employs_is", FK_COLUMNS="store_number" */
    IF EXISTS (
      SELECT * FROM deleted,EMPLOYEE
      WHERE
        /*  %JoinFKPK(EMPLOYEE,deleted," = "," AND") */
        EMPLOYEE.store_number = deleted.store_number
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete STORE because EMPLOYEE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_STORE ON STORE FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on STORE */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insstore_number integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* STORE is in MOVIE_STORE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002416b", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_STORE"
    P2C_VERB_PHRASE="is in", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="is_in", FK_COLUMNS="store_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(store_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_STORE
      WHERE
        /*  %JoinFKPK(MOVIE_STORE,deleted," = "," AND") */
        MOVIE_STORE.store_number = deleted.store_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update STORE because MOVIE_STORE exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* STORE employs is EMPLOYEE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="STORE"
    CHILD_OWNER="", CHILD_TABLE="EMPLOYEE"
    P2C_VERB_PHRASE="employs is", C2P_VERB_PHRASE="is employed by", 
    FK_CONSTRAINT="employs_is", FK_COLUMNS="store_number" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(store_number)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EMPLOYEE
      WHERE
        /*  %JoinFKPK(EMPLOYEE,deleted," = "," AND") */
        EMPLOYEE.store_number = deleted.store_number
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update STORE because EMPLOYEE exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




ALTER TABLE [PAYMENT]
DROP CONSTRAINT [receives]
go

ALTER TABLE [PAYMENT]
DROP CONSTRAINT [R_7_1]
go

ALTER TABLE [PAYMENT]
DROP CONSTRAINT [R_7_2]
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
DROP CONSTRAINT [is_made_on]
go

ALTER TABLE [PAYMENT]
DROP CONSTRAINT [XPKPAYMENT]
go

execute sp_rename '[PAYMENT]', 'PAYMENT831I3102000'
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
ADD [cfc]  char(18)  NULL
go

CREATE TABLE [E_10]
( 
	[cfc]                char(18)  NOT NULL ,
	[xcf]                char(18)  NULL 
)
go

CREATE TABLE [PAYMENT]
( 
	[payment_transaction_number] integer  NOT NULL ,
	[payment_type]       char(18)  NULL ,
	[payment_amount]     numeric  NULL ,
	[payment_date]       datetime  NULL ,
	[payment_status]     varchar(1)  NULL ,
	[employee_number]    varchar(20)  NOT NULL ,
	[customer_number]    integer  NULL ,
	[customer_no]        integer  NULL ,
	[check_bank_number]  integer  NULL ,
	[check_number]       integer  NULL ,
	[epay_vendor_number] integer  NULL ,
	[epay_account_number] integer  NULL ,
	[credit_card_number] char(18)  NULL ,
	[credit_card_exp]    datetime  NULL ,
	[credit_card_type]   char(18)  NULL ,
	[cfc]                char(18)  NOT NULL 
)
go

ALTER TABLE [E_10]
ADD CONSTRAINT [XPKE_10] PRIMARY KEY  CLUSTERED ([cfc] ASC)
go

ALTER TABLE [PAYMENT]
ADD CONSTRAINT [XPKPAYMENT] PRIMARY KEY  CLUSTERED ([payment_transaction_number] ASC,[cfc] ASC)
go


INSERT INTO [PAYMENT] ([payment_transaction_number], [payment_type], [customer_number], [customer_no], [payment_amount], [payment_date], [payment_status], [employee_number], [check_bank_number], [check_number], [epay_vendor_number], [epay_account_number], [credit_card_number], [credit_card_exp], [credit_card_type]) SELECT [payment_transaction_number], [payment_type], [customer_number], [customer_no], CONVERT(numeric,payment_amount), [payment_date], [payment_status], [employee_number], [check_bank_number], [check_number], [epay_vendor_number], [epay_account_number], [credit_card_number], [credit_card_exp], [credit_card_type] FROM PAYMENT831I3102000

go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [receives] FOREIGN KEY ([employee_number]) REFERENCES [EMPLOYEE]([employee_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [R_7_1] FOREIGN KEY ([customer_no]) REFERENCES [CUSTOMER]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [R_7_2] FOREIGN KEY ([customer_number]) REFERENCES [CUSTOMER_CREDIT]([customer_number])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PAYMENT]
	ADD CONSTRAINT [R_14] FOREIGN KEY ([cfc]) REFERENCES [E_10]([cfc])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [MOVIE_RENTAL_RECORD]
	ADD CONSTRAINT [is_made_on] FOREIGN KEY ([payment_transaction_number],[cfc]) REFERENCES [PAYMENT]([payment_transaction_number],[cfc])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


CREATE TRIGGER tD_E_10 ON E_10 FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on E_10 */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* E_10  PAYMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f702", PARENT_OWNER="", PARENT_TABLE="E_10"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="cfc" */
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.cfc = deleted.cfc
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete E_10 because PAYMENT exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_E_10 ON E_10 FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on E_10 */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @inscfc char(18),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* E_10  PAYMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00010f98", PARENT_OWNER="", PARENT_TABLE="E_10"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="cfc" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(cfc)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PAYMENT
      WHERE
        /*  %JoinFKPK(PAYMENT,deleted," = "," AND") */
        PAYMENT.cfc = deleted.cfc
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update E_10 because PAYMENT exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PAYMENT ON PAYMENT FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PAYMENT */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PAYMENT is made on MOVIE_RENTAL_RECORD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00062017", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number""cfc" */
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.payment_transaction_number = deleted.payment_transaction_number AND
        MOVIE_RENTAL_RECORD.cfc = deleted.cfc
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PAYMENT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* E_10  PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="E_10"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="cfc" */
    IF EXISTS (SELECT * FROM deleted,E_10
      WHERE
        /* %JoinFKPK(deleted,E_10," = "," AND") */
        deleted.cfc = E_10.cfc AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,E_10," = "," AND") */
            PAYMENT.cfc = E_10.cfc
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because E_10 exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER_CREDIT makes PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER_CREDIT
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER_CREDIT," = "," AND") */
        deleted.customer_number = CUSTOMER_CREDIT.customer_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,CUSTOMER_CREDIT," = "," AND") */
            PAYMENT.customer_number = CUSTOMER_CREDIT.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because CUSTOMER_CREDIT exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CUSTOMER makes PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
    IF EXISTS (SELECT * FROM deleted,CUSTOMER
      WHERE
        /* %JoinFKPK(deleted,CUSTOMER," = "," AND") */
        deleted.customer_no = CUSTOMER.customer_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,CUSTOMER," = "," AND") */
            PAYMENT.customer_no = CUSTOMER.customer_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because CUSTOMER exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* EMPLOYEE receives PAYMENT on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
    IF EXISTS (SELECT * FROM deleted,EMPLOYEE
      WHERE
        /* %JoinFKPK(deleted,EMPLOYEE," = "," AND") */
        deleted.employee_number = EMPLOYEE.employee_number AND
        NOT EXISTS (
          SELECT * FROM PAYMENT
          WHERE
            /* %JoinFKPK(PAYMENT,EMPLOYEE," = "," AND") */
            PAYMENT.employee_number = EMPLOYEE.employee_number
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PAYMENT because EMPLOYEE exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PAYMENT ON PAYMENT FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PAYMENT */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @inspayment_transaction_number integer, 
           @inscfc char(18),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PAYMENT is made on MOVIE_RENTAL_RECORD on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00073008", PARENT_OWNER="", PARENT_TABLE="PAYMENT"
    CHILD_OWNER="", CHILD_TABLE="MOVIE_RENTAL_RECORD"
    P2C_VERB_PHRASE="is made on", C2P_VERB_PHRASE="requires", 
    FK_CONSTRAINT="is_made_on", FK_COLUMNS="payment_transaction_number""cfc" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(payment_transaction_number) OR
    UPDATE(cfc)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,MOVIE_RENTAL_RECORD
      WHERE
        /*  %JoinFKPK(MOVIE_RENTAL_RECORD,deleted," = "," AND") */
        MOVIE_RENTAL_RECORD.payment_transaction_number = deleted.payment_transaction_number AND
        MOVIE_RENTAL_RECORD.cfc = deleted.cfc
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PAYMENT because MOVIE_RENTAL_RECORD exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* E_10  PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="E_10"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="cfc" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(cfc)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,E_10
        WHERE
          /* %JoinFKPK(inserted,E_10) */
          inserted.cfc = E_10.cfc
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because E_10 does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER_CREDIT makes PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER_CREDIT"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_2", FK_COLUMNS="customer_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER_CREDIT
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER_CREDIT) */
          inserted.customer_number = CUSTOMER_CREDIT.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.customer_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because CUSTOMER_CREDIT does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CUSTOMER makes PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CUSTOMER"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="makes", C2P_VERB_PHRASE="is made by", 
    FK_CONSTRAINT="R_7_1", FK_COLUMNS="customer_no" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(customer_no)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CUSTOMER
        WHERE
          /* %JoinFKPK(inserted,CUSTOMER) */
          inserted.customer_no = CUSTOMER.customer_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.customer_no IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because CUSTOMER does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* EMPLOYEE receives PAYMENT on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="PAYMENT"
    P2C_VERB_PHRASE="receives", C2P_VERB_PHRASE="is received by", 
    FK_CONSTRAINT="receives", FK_COLUMNS="employee_number" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(employee_number)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,EMPLOYEE
        WHERE
          /* %JoinFKPK(inserted,EMPLOYEE) */
          inserted.employee_number = EMPLOYEE.employee_number
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.employee_number IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PAYMENT because EMPLOYEE does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




DROP TABLE IF EXISTS PAYMENT831I3102000
go
