
CREATE TABLE AB_BULL
(
	BULL_CD               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	CONV_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	YRLG_SUIT_IND         CHAR(1)
			       NOT NULL ,
	SMN_LAB_IND           CHAR(1)
			       NOT NULL ,
	OSEAS_SPLR_PTPT_CD    CHAR(4)
			       NOT NULL ,
	LIC_BULL_IND          CHAR(1)
			       NOT NULL ,
	RQSTR_PTPT_CD         CHAR(4)
			       NOT NULL ,
	PS_BULL_RANK          CHAR(1)
			       NOT NULL ,
	YRLG_SUIT_USER_ID     CHAR(8)
			      ,
	YRLG_SUIT_UPD_TIME    TIMESTAMP
			      ,
	INT_IND               CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0187_01 CHECK ( INT_IND IN ('Y', 'N') ),
	INT_UPD_USER_ID       CHAR(8)
			      ,
	INT_UPD_TIME          TIMESTAMP
			      ,
	WM_IND                CHAR(1)
			       CONSTRAINT  C0187_02 CHECK ( WM_IND IN ('Y', 'N') ),
	WM_UPD_USER_ID        CHAR(8)
			      ,
	WM_UPD_TIME           TIMESTAMP
			      ,
	CONV_DATE_D           DATE
			      ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	conv_date             CHAR(18)
			      ,
	conv_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0187_02 ON AB_BULL
(
	MKTG_BRD_CD          ASC
);

CREATE INDEX XIE0187_01 ON AB_BULL
(
	RQSTR_PTPT_CD        ASC
);

CREATE INDEX XIE0187_02 ON AB_BULL
(
	UPD_TIME             ASC
);

CREATE TABLE AB_BULL_CMT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 2005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BULL_CD               INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	CMT_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CMT_SRCE              CHAR(50)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	CMT_TP_CD             CHAR(4)
			       NOT NULL 
);

CREATE INDEX XIE0575_01 ON AB_BULL_CMT
(
	UPD_TIME             ASC
);

CREATE TABLE AB_BULL_CMT_TP
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			      
);

CREATE INDEX XIE0035_01 ON AB_BULL_CMT_TP
(
	UPD_TIME             ASC
);

CREATE TABLE AB_EMPL_ROLE_REF
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE AB_EMPL_TP
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE AB_EMPL_WKLD_CNSTR
(
	EMPL_PTPT_CD          CHAR(4)
			       NOT NULL ,
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	AB_EMPL_TP_CD         CHAR(3)
			       NOT NULL  CONSTRAINT  C0135_01 CHECK ( AB_EMPL_TP_CD IN ('ABT', 'DEL') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GIS_PT_ID             INTEGER
			       NOT NULL ,
	PREF_ST_DATE          DATE
			      ,
	PREF_END_DATE         DATE
			      ,
	PREF_COW_CNT          SMALLINT
			      ,
	MAX_COWS_DAY          SMALLINT
			      ,
	MAX_COWS_VST          SMALLINT
			      ,
	NC_YRLG_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0135_02 CHECK ( NC_YRLG_IND IN ('Y','N') ),
	SYNC_YRLG_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0135_03 CHECK ( SYNC_YRLG_IND IN ('Y','N') ),
	SYNC_COW_IND          CHAR(1)
			       NOT NULL  CONSTRAINT  C0135_04 CHECK ( SYNC_COW_IND IN ('Y','N') ),
	DIY_DLVRY_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0135_05 CHECK ( DIY_DLVRY_IND IN ('Y','N') ),
	BASE_MAP_REF          CHAR(10)
			      
);

CREATE INDEX XFK0135_04 ON AB_EMPL_WKLD_CNSTR
(
	AB_EMPL_TP_CD        ASC
);

CREATE TABLE AB_FLD_EMPL
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CHK_DIGIT             DECIMAL(1)
			       NOT NULL ,
	ALT_AREA_CD           CHAR(3)
			       NOT NULL ,
	ALT_PHONE_NUM         CHAR(7)
			       NOT NULL ,
	ST_DATE_STS_CD        CHAR(1)
			       NOT NULL ,
	OVERALL_SIZE          SMALLINT
			       NOT NULL ,
	FRST_WORK_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	EMPL_YRS              SMALLINT
			       NOT NULL ,
	INSEM_PAY_RATE        DECIMAL(3,2)
			       NOT NULL ,
	MIN_INSEM_PAID        SMALLINT
			       NOT NULL ,
	MIN_INSEM_ST_DATE     INTEGER
			       NOT NULL  DEFAULT 0,
	MIN_INSEM_END_DATE    INTEGER
			       NOT NULL  DEFAULT 0,
	ALIAS                 CHAR(36)
			       NOT NULL ,
	PARTNER_NAME          CHAR(36)
			       NOT NULL ,
	CMT                   CHAR(100)
			       NOT NULL ,
	FRST_WORK_DATE_D      DATE
			      ,
	MIN_INSEM_ST_DATE_D   DATE
			      ,
	MIN_INSEM_END_DATE_D  DATE
			      ,
	min_insem_end_date    CHAR(18)
			      ,
	frst_work_date_d      CHAR(18)
			      ,
	frst_work_date        CHAR(18)
			      ,
	min_insem_st_date_d   CHAR(18)
			      ,
	min_insem_end_date_d  CHAR(18)
			      ,
	min_insem_st_date     CHAR(18)
			      
);

CREATE INDEX XIE0373_01 ON AB_FLD_EMPL
(
	UPD_TIME             ASC
);

CREATE TABLE AB_GRP
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(15)
			       NOT NULL ,
	MAIN_TECH_PTPT_CD     CHAR(4)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	CLOSED_IND            CHAR(1)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SMN_TP_CD             CHAR(1)
			       NOT NULL ,
	TECH_SV_TP_CD         CHAR(1)
			       NOT NULL  CONSTRAINT  C0111_01 CHECK ( TECH_SV_TP_CD IN ('D','T', ' ') ),
	SMN_DIST_PT_NUM       SMALLINT
			       NOT NULL ,
	DFLT_GRP_IND          CHAR(1)
			       CONSTRAINT  C0111_02 CHECK ( DFLT_GRP_IND IN ('Y', 'N') ),
	RGN_ID                INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			      ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	st_date               CHAR(18)
			      ,
	closed_ind            CHAR(18)
			      ,
	smn_dist_pt_num       CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	rgn_id                CHAR(18)
			      ,
	smn_tp_cd             CHAR(18)
			      ,
	tech_sv_tp_cd         CHAR(18)
			      ,
	dflt_grp_ind          CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	main_tech_ptpt_cd     CHAR(18)
			      ,
	supr_ptpt_cd          CHAR(18)
			      
);

CREATE INDEX XFK0111_01 ON AB_GRP
(
	TECH_SV_TP_CD        ASC
);

CREATE INDEX XFK0111_02 ON AB_GRP
(
	RGN_ID               ASC
);

CREATE INDEX XIE0111_01 ON AB_GRP
(
	SUPR_PTPT_CD         ASC
);

CREATE INDEX XIE0111_02 ON AB_GRP
(
	MAIN_TECH_PTPT_CD    ASC
);

CREATE INDEX XIE0111_03 ON AB_GRP
(
	CTCT_PTPT_CD         ASC
);

CREATE TABLE AB_GRP_COMB
(
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	AMALG_ST_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	ALCN_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	ALCN_END_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	AMALG_END_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	DESP_GRP_RGN_CD       CHAR(4)
			       NOT NULL ,
	DESP_GRP_NUM          INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			      ,
	AMALG_ST_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	AMALG_END_DATE_D      DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ALCN_ST_DATE_D        DATE
			      ,
	ALCN_END_DATE_D       DATE
			      ,
	alcn_st_date          CHAR(18)
			      ,
	alcn_end_date         CHAR(18)
			      ,
	amalg_st_date         CHAR(18)
			      ,
	amalg_end_date        CHAR(18)
			      ,
	amalg_st_date_d       CHAR(18)
			      ,
	alcn_st_date_d        CHAR(18)
			      ,
	alcn_end_date_d       CHAR(18)
			      ,
	amalg_end_date_d      CHAR(18)
			      ,
	desp_grp_rgn_cd       CHAR(18)
			      ,
	desp_grp_num          CHAR(18)
			      ,
	CONSTRAINT C0164_01 CHECK ( ALCN_ST_DATE = 0 AND ALCN_END_DATE = 0 OR ALCN_ST_DATE >= AMALG_ST_DATE AND ALCN_END_DATE <= AMALG_END_DATE  ) 
);

CREATE INDEX XIE0164_01 ON AB_GRP_COMB
(
	DESP_GRP_RGN_CD      ASC,
	DESP_GRP_NUM         ASC
);

CREATE INDEX XIE0164_02 ON AB_GRP_COMB
(
	UPD_TIME             ASC
);

CREATE TABLE AB_GRP_DLVRY_INST
(
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	DLVRY_INST_CD         CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			       NOT NULL 
);

CREATE TABLE AB_GRP_ERR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 400005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STD_SOF_ERR           SMALLINT
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL 
);

CREATE TABLE AB_GRP_LLL_SMN
(
	DEMAND_DATE           DATE
			       NOT NULL ,
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NC_DOSE_CNT           SMALLINT
			      ,
	SYNC_DOSE_CNT         SMALLINT
			      ,
	NC_ADJ_TTL            SMALLINT
			      ,
	SYNC_ADJ_TTL          SMALLINT
			      ,
	DESP_DATE             DATE
			       NOT NULL ,
	CONSTRAINT C0018_02 CHECK ( NC_DOSE_CNT IS NOT NULL OR SYNC_DOSE_CNT IS NOT NULL ) 
);

CREATE TABLE AB_GRP_SHELF_POSN
(
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHELF_NUM             SMALLINT
			       NOT NULL ,
	DESP_DATE             DATE
			       NOT NULL 
);

CREATE INDEX XIE0661_01 ON AB_GRP_SHELF_POSN
(
	UPD_TIME             ASC
);

CREATE TABLE AB_GRP_SZE_ADJ
(
	ACT_HERD_CNT          SMALLINT
			       NOT NULL  CONSTRAINT  C0076_01 CHECK ( ACT_HERD_CNT BETWEEN 1 AND 10 ),
	FRST_STG_MTNG         CHAR(1)
			       NOT NULL  CONSTRAINT  C0076_02 CHECK ( FRST_STG_MTNG IN ('Y', 'N') ),
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PCT_ADJ               DECIMAL(3,1)
			       NOT NULL  CONSTRAINT  C0076_03 CHECK ( PCT_ADJ >= 0.0 )
);

CREATE TABLE AB_GRP_WSTG
(
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	AB_SCHEME_CD          DECIMAL(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	WSTG_PCT              DECIMAL(5,2)
			       NOT NULL 
);

CREATE INDEX XIE0302_01 ON AB_GRP_WSTG
(
	UPD_TIME             ASC
);

CREATE TABLE AB_MNGT_RPT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 300005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RUN_DATE              DATE
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			      ,
	RPT_SCTN_NUM          SMALLINT
			       NOT NULL 
);

CREATE TABLE AB_MTNG_PLAN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIMESTAMP         TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	INSEM_CD              CHAR(1)
			       NOT NULL  CONSTRAINT  C0042_01 CHECK ( INSEM_CD IN ('D', 'T', ' ') ),
	CAN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_SYST_CD          DECIMAL(1)
			       NOT NULL ,
	PLAN_CHRG_CD          CHAR(1)
			       NOT NULL  CONSTRAINT  C0042_02 CHECK ( PLAN_CHRG_CD IN ('P','I','N','S') ),
	MOB_COW_CNT           SMALLINT
			       NOT NULL ,
	MOB_YRLG_CNT          SMALLINT
			       NOT NULL ,
	MOB_ALT_BRD_CD        CHAR(1)
			       NOT NULL ,
	COW_CNT               SMALLINT
			       NOT NULL ,
	YRLG_CNT              SMALLINT
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	VET_PTPT_CD           CHAR(4)
			       NOT NULL ,
	MOB_MAP_REF           CHAR(10)
			       NOT NULL ,
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	VST_SEQ               SMALLINT
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	AB_GRP_LOCK_IND       CHAR(1)
			       NOT NULL ,
	LIC_COW_CNT           INTEGER
			       NOT NULL ,
	LIC_YRLG_CNT          INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	SPS_FRZ_SPLY_IND      CHAR(1)
			       CONSTRAINT  C0042_03 CHECK ( SPS_FRZ_SPLY_IND IN ('Y','N') ),
	PS_FRZ_SPLY_IND       CHAR(1)
			       CONSTRAINT  C0042_04 CHECK ( PS_FRZ_SPLY_IND IN ('Y','N') ),
	USER_ID               CHAR(8)
			      ,
	RQST_PTPT_CD          CHAR(4)
			      ,
	MTNG_PLAN_STS_CD      CHAR(4)
			       CONSTRAINT  C0042_05 CHECK ( MTNG_PLAN_STS_CD IN ('SC','SN') ),
	AUTH_CMT              CHAR(50)
			      ,
	PRNT_NUM              SMALLINT
			      ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CAN_DATE_D            DATE
			      ,
	SIRE_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			      ,
	st_date_d             CHAR(18)
			      ,
	can_date              CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	insem_cd              CHAR(18)
			      ,
	mtng_syst_cd          CHAR(18)
			      ,
	mob_alt_brd_cd        CHAR(18)
			      ,
	cow_cnt               CHAR(18)
			      ,
	yrlg_cnt              CHAR(18)
			      ,
	ab_grp_rgn_cd         CHAR(18)
			      ,
	ab_grp_num            CHAR(18)
			      ,
	sps_frz_sply_ind      CHAR(18)
			      ,
	mtng_plan_sts_cd      CHAR(18)
			      ,
	plan_chrg_cd          CHAR(18)
			      ,
	ps_frz_sply_ind       CHAR(18)
			      ,
	sire_brd_cd           CHAR(18)
			      ,
	core_prod_cd          CHAR(18)
			      ,
	rqst_ptpt_cd          CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	can_date_d            CHAR(18)
			      ,
	CONSTRAINT C0042_06 CHECK ( MOB_ALT_BRD_CD IN ('F','J','X','O') OR SSN < 2001 ) ,
	CONSTRAINT C0042_07 CHECK ( SIRE_BRD_CD <> '  ' OR PLAN_CHRG_CD='N' ) ,
	CONSTRAINT C0042_08 CHECK ( SSN < 2001 OR MTNG_SYST_CD = 1 AND MTNG_PLAN_STS_CD IS NULL OR MTNG_SYST_CD = 3 AND MTNG_PLAN_STS_CD IS NOT NULL  ) 
);

CREATE INDEX XFK0042_07 ON AB_MTNG_PLAN
(
	SIRE_BRD_CD          ASC
);

CREATE INDEX XIE0042_01 ON AB_MTNG_PLAN
(
	SPS_FRZ_SPLY_IND     ASC,
	CAN_DATE             ASC
);

CREATE INDEX XIE0042_02 ON AB_MTNG_PLAN
(
	ST_DATE              ASC,
	SSN                  ASC,
	CAN_DATE             ASC
);

CREATE INDEX XIE0042_03 ON AB_MTNG_PLAN
(
	PLAN_CHRG_CD         ASC,
	END_DATE             ASC,
	MAP_REF              ASC,
	HERD_NUM             ASC,
	SSN                  ASC,
	NUM                  ASC
);

CREATE INDEX XIE0042_04 ON AB_MTNG_PLAN
(
	VET_PTPT_CD          ASC
);

CREATE INDEX XIE0042_05 ON AB_MTNG_PLAN
(
	CTCT_PTPT_CD         ASC
);

CREATE INDEX XIE0042_06 ON AB_MTNG_PLAN
(
	MOB_MAP_REF          ASC
);

CREATE INDEX XIE0042_08 ON AB_MTNG_PLAN
(
	RQST_PTPT_CD         ASC
);

CREATE INDEX XIE0042_09 ON AB_MTNG_PLAN
(
	UPD_TIMESTAMP        ASC
);

CREATE TABLE AB_MTNG_PLAN_ERR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 3000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	STD_SOF_ERR_CD        SMALLINT
			       NOT NULL ,
	ERR_STS_CD            CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0072_01 CHECK ( ERR_STS_CD IN ('N','Y','H') )
);

CREATE INDEX XFK0072_03 ON AB_MTNG_PLAN_ERR
(
	ERR_STS_CD           ASC
);

CREATE TABLE AB_MTNG_PLAN_HIST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL ,
	CAN_DATE              INTEGER
			       NOT NULL ,
	INSEM_CD              CHAR(1)
			       NOT NULL ,
	MTNG_SYST_CD          DECIMAL(1)
			       NOT NULL ,
	PLAN_CHRG_CD          CHAR(1)
			       NOT NULL ,
	MOB_COW_CNT           SMALLINT
			       NOT NULL ,
	MOB_YRLG_CNT          SMALLINT
			       NOT NULL ,
	MOB_ALT_BRD_CD        CHAR(1)
			       NOT NULL ,
	COW_CNT               SMALLINT
			       NOT NULL ,
	YRLG_CNT              SMALLINT
			       NOT NULL ,
	SIRE_BRD_CD           CHAR(2)
			       NOT NULL ,
	MOB_MAP_REF           CHAR(10)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	VET_PTPT_CD           CHAR(4)
			       NOT NULL ,
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	VST_SEQ               SMALLINT
			       NOT NULL ,
	AB_GRP_LOCK_IND       CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	LIC_COW_CNT           INTEGER
			       NOT NULL ,
	LIC_YRLG_CNT          INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	SPS_FRZ_SPLY_IND      CHAR(1)
			      ,
	PS_FRZ_SPLY_IND       CHAR(1)
			      ,
	RQST_PTPT_CD          CHAR(4)
			      ,
	MTNG_PLAN_STS_CD      CHAR(4)
			      ,
	AUTH_CMT              CHAR(50)
			      ,
	PRNT_NUM              SMALLINT
			      ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	CAN_DATE_D            DATE
			      ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CORE_PROD_CD          CHAR(4)
			      ,
	UPD_TIMESTAMP         TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	can_date              CHAR(18)
			      ,
	can_date_d            CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0625_01 ON AB_MTNG_PLAN_HIST
(
	AB_GRP_RGN_CD        ASC,
	AB_GRP_NUM           ASC
);

CREATE INDEX XFK0625_03 ON AB_MTNG_PLAN_HIST
(
	SIRE_BRD_CD          ASC
);

CREATE INDEX XIE0625_01 ON AB_MTNG_PLAN_HIST
(
	UPD_TIMESTAMP        ASC
);

CREATE INDEX XIE0625_02 ON AB_MTNG_PLAN_HIST
(
	UPD_TIME             ASC
);

CREATE TABLE AB_MTNG_PLAN_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL 
);

CREATE TABLE AB_MTNG_PLAN_STS
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE AB_SCENR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	RNGE_ST_DATE          DATE
			       NOT NULL ,
	RNGE_END_DATE         DATE
			       NOT NULL ,
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CREATE_USER_ID        CHAR(8)
			       NOT NULL ,
	LAST_RUN_TIME         TIMESTAMP
			      ,
	UPD_USER_ID           CHAR(8)
			      ,
	LOAD_TIME             TIMESTAMP
			      ,
	LOAD_USER_ID          CHAR(8)
			      
);

CREATE TABLE AB_SCENR_GRP_PLANS
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	AB_MTNG_PLAN_NUM      SMALLINT
			       NOT NULL ,
	AB_SCENR_GRP_ID       INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CNSTR_MAND_IND        CHAR(1)
			       NOT NULL  CONSTRAINT  C0137_01 CHECK ( CNSTR_MAND_IND IN ('Y', 'N') ),
	VST_SEQ               SMALLINT
			       NOT NULL ,
	USE_CNSTR_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0137_02 CHECK ( USE_CNSTR_IND IN ('Y','N') ),
	CNSTR_TP_CD           CHAR(1)
			       NOT NULL  CONSTRAINT  C0137_03 CHECK ( CNSTR_TP_CD IN ('F','U', 'O') )
);

CREATE INDEX XFK0137_03 ON AB_SCENR_GRP_PLANS
(
	CNSTR_TP_CD          ASC
);

CREATE TABLE AB_SCENR_GRP_PROF
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 5005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	AB_SCRT_PAD_ID        INTEGER
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AB_EMPL_TP_CD         CHAR(3)
			       CONSTRAINT  C0138_01 CHECK ( AB_EMPL_TP_CD IN ('ABT', 'DEL') ),
	EMPL_PTPT_CD          CHAR(4)
			      ,
	AB_SCENR_ID           INTEGER
			       NOT NULL ,
	MAX_COWS_DAY          SMALLINT
			       NOT NULL ,
	MAX_COWS_VST          SMALLINT
			       NOT NULL ,
	NC_YRLG_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0138_02 CHECK ( NC_YRLG_IND IN ('Y','N') ),
	SYNC_YRLG_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0138_03 CHECK ( SYNC_YRLG_IND IN ('Y','N') ),
	SYNC_COW_IND          CHAR(1)
			       NOT NULL  CONSTRAINT  C0138_04 CHECK ( SYNC_COW_IND IN ('Y','N') ),
	DIY_DLVRY_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0138_05 CHECK ( DIY_DLVRY_IND IN ('Y','N') ),
	KM                    SMALLINT
			      ,
	COST                  DECIMAL(7,2)
			      ,
	EST_COW_CNT           SMALLINT
			      ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	INSEM_TP_CD           CHAR(1)
			      ,
	LOCK_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0138_06 CHECK ( LOCK_IND IN ('Y','N') ),
	SMN_TP_CD             CHAR(1)
			      ,
	AB_GRP_RGN_CD         CHAR(4)
			      ,
	AB_GRP_NUM            INTEGER
			      ,
	AB_GRP_NAME           CHAR(15)
			      ,
	CTCT_PTPT_CD          CHAR(4)
			      ,
	SUPR_PTPT_CD          CHAR(4)
			      ,
	MAIN_TECH_PTPT_CD     CHAR(4)
			      ,
	ST_DATE               DATE
			      ,
	END_DATE              DATE
			      ,
	SMN_DIST_PT_NUM       SMALLINT
			      ,
	USE_GRP_IND           CHAR(1)
			       NOT NULL  DEFAULT 'Y' CONSTRAINT  C0138_07 CHECK ( USE_GRP_IND IN ('Y','N') )
);

CREATE INDEX XFK0138_01 ON AB_SCENR_GRP_PROF
(
	AB_SCRT_PAD_ID       ASC,
	EMPL_PTPT_CD         ASC,
	AB_EMPL_TP_CD        ASC
);

CREATE INDEX XFK0138_03 ON AB_SCENR_GRP_PROF
(
	AB_GRP_RGN_CD        ASC,
	AB_GRP_NUM           ASC
);

CREATE TABLE AB_SCRT_PAD
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	DMND_RFRSH_TIME       TIMESTAMP
			      ,
	DMND_RFRSH_USER_ID    CHAR(8)
			      ,
	DMND_ST_DATE          DATE
			       NOT NULL ,
	DMND_END_DATE         DATE
			       NOT NULL 
);

CREATE TABLE AB_SCRT_PAD_DM
(
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE AB_SCRT_PAD_DMND
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	DMND_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EST_INSEM_CNT         DECIMAL(6,2)
			       NOT NULL 
);

CREATE TABLE AB_SCRT_PAD_USER
(
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE AB_TECH_HERD
(
	AB_TECH_PTPT_CD       CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	WORK_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	ab_tech_ptpt_cd       CHAR(18)
			      
);

CREATE TABLE AB_TECH_REVIEW_RESPONSE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	REVIEW_ID             INTEGER
			       NOT NULL ,
	REVIEW_VERSION        SMALLINT
			       NOT NULL ,
	RESPONSE_DATE         DATE
			      ,
	RCD_TIME              TIMESTAMP
			       NOT NULL ,
	TECH_PTPT_CD          CHAR(4)
			      ,
	SUPR_PTPT_CD          CHAR(4)
			      ,
	SUPERMATE_PTPT_CD     CHAR(4)
			      ,
	HERD_OWNER_PTPT_CD    CHAR(4)
			      ,
	RM_RGN_CD             CHAR(4)
			      ,
	RM_AREA_CD            SMALLINT
			      ,
	DM_AREA_CD            SMALLINT
			      ,
	CONSTRAINT C0697_01 CHECK ( RM_RGN_CD IS NULL AND RM_AREA_CD IS NULL AND DM_AREA_CD IS NULL OR RM_RGN_CD IS NOT NULL AND RM_AREA_CD IS NOT NULL AND DM_AREA_CD IS NOT NULL ) 
);

CREATE INDEX XIE0697_01 ON AB_TECH_REVIEW_RESPONSE
(
	RESPONSE_DATE        ASC
);

CREATE TABLE ACCT_ANLYS_GRP
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	INT_CHRG_IND          CHAR(1)
			       NOT NULL  CONSTRAINT  C0329_01 CHECK ( INT_CHRG_IND IN ('Y', 'N') ),
	int_chrg_ind          CHAR(18)
			      
);

CREATE TABLE ACTUATE_PSWD_CHANGE_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PSWD_HASH             CHAR(40)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			       NOT NULL ,
	CURRENT_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0884_01 CHECK ( CURRENT_IND in ('Y','N') )
);

CREATE INDEX XIE0884_01 ON ACTUATE_PSWD_CHANGE_LOG
(
	USER_ID              ASC,
	PSWD_HASH            ASC
);

CREATE TABLE AD_HOC_RPRT_CTRL
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_TIME              INTEGER
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcd_date              CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      
);

CREATE TABLE ADD_DCO_NUM
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	HERD_DTL_RCD_DATE     INTEGER
			       NOT NULL  DEFAULT 0,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_DTL_RCD_DATE_D   DATE
			       NOT NULL  DEFAULT '0001-01-01',
	herd_dtl_rcd_date     CHAR(18)
			      ,
	herd_dtl_rcd_date_d   CHAR(18)
			      
);

CREATE INDEX XIE0015_01 ON ADD_DCO_NUM
(
	SPLY_DCO_CD          ASC,
	SPLY_DCO_NUM         ASC,
	HERD_DTL_RCD_DATE    ASC
);

CREATE INDEX XIE0015_02 ON ADD_DCO_NUM
(
	UPD_TIME             ASC
);

CREATE TABLE ADDR_FMT
(
	CD                    CHAR(4)
			       NOT NULL  CONSTRAINT  C0102_01 CHECK ( CD IN ('STR ', 'BOX ', 'BAG ','RD  ', 'RDO ', 'PLCE') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE ADDR_USE
(
	CD                    CHAR(4)
			       NOT NULL  CONSTRAINT  C0103_01 CHECK ( CD IN ('MAIL', 'SITE') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE AE_BRD
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL ,
	ABBR                  CHAR(6)
			       NOT NULL 
);

CREATE TABLE AE_ERR
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE AE_ERR_SUMM
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_ERR_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ERR_CNT               INTEGER
			       NOT NULL ,
	RESOLVED_ERR_CNT      INTEGER
			       NOT NULL ,
	NEW_ERR_CNT           INTEGER
			       NOT NULL 
);

CREATE TABLE AE_EXTR_ERR
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	AE_ERR_CD             SMALLINT
			       NOT NULL ,
	EVENT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RSLV_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	EVENT_DATE_D          DATE
			      ,
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	RSLV_DATE_D           DATE
			      ,
	create_date           CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      ,
	event_date            CHAR(18)
			      ,
	event_date_d          CHAR(18)
			      ,
	rslv_date             CHAR(18)
			      ,
	rslv_date_d           CHAR(18)
			      
);

CREATE TABLE AE_HERD_AVG
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CALC_TIME             INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AE_PROC_CD            CHAR(1)
			       NOT NULL ,
	HT_IND                CHAR(1)
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	FAT_BV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	PROT_BV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	VOL_BV                INTEGER
			       NOT NULL ,
	VOL_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	LWGT_BV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	SURV_BV               DECIMAL(5,1)
			       NOT NULL ,
	SURV_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	AE_BRD_1_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_2_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_3_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_4_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_5_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_6_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_7_16TH         INTEGER
			       NOT NULL ,
	AE_BRD_8_16TH         INTEGER
			       NOT NULL ,
	SIRE_OFFL_ANC_PCT     SMALLINT
			       NOT NULL ,
	ALL_RCD_ANC_PCT       SMALLINT
			       NOT NULL ,
	FERT_BV               DECIMAL(5,1)
			      ,
	FERT_BV_REL           DECIMAL(3,1)
			      ,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	SC_BV                 DECIMAL(5,2)
			      ,
	SC_BV_REL             DECIMAL(3,1)
			      ,
	calc_date_d           CHAR(18)
			      ,
	calc_date             CHAR(18)
			      
);

CREATE INDEX XIE0493_01 ON AE_HERD_AVG
(
	UPD_TIME             ASC
);

CREATE TABLE AE_RUN_SUMM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	RULE_ID               INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			      ,
	BIRTH_SSN             INTEGER
			      ,
	MEAN                  DOUBLE
			      ,
	COUNT                 INTEGER
			      ,
	STD_DEV               DOUBLE
			      
);

CREATE TABLE AE_RUN_SUMM_PCT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	RULE_ID               INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			      ,
	PERCENTAGE            INTEGER
			       NOT NULL ,
	MIN                   DOUBLE
			      ,
	MAX                   DOUBLE
			      ,
	COUNT                 INTEGER
			      
);

CREATE TABLE AE_RUN_SUMM_RULE
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(150)
			       NOT NULL 
);

CREATE TABLE AE_SIRE_TRANS
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	TRANS_TP_CD           SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	REVERSE_IND           CHAR(1)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PGM_ID                CHAR(8)
			       NOT NULL ,
	CHRG_UNIT_CNT         INTEGER
			       NOT NULL ,
	CMT                   CHAR(40)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE_D                DATE
			      ,
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0449_01 ON AE_SIRE_TRANS
(
	ANML_KEY             ASC,
	DATE                 ASC
);

CREATE INDEX XIE0449_02 ON AE_SIRE_TRANS
(
	PTPT_CD              ASC,
	DATE                 ASC
);

CREATE INDEX XIE0449_03 ON AE_SIRE_TRANS
(
	ANML_KEY             ASC,
	TRANS_TP_CD          ASC,
	DATE                 ASC
);

CREATE TABLE AFFECT_BODY_PART
(
	BODY_PART_CD          CHAR(3)
			       NOT NULL ,
	ANML_MEDICAL_TREATMENT_ID  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE AHB_HERD
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	AHB_HERD_NUM          INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE AHB_NUM
(
	AHB_HERD_NUM          INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			      ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              DATE
			       NOT NULL  DEFAULT '0001-01-01'
);

CREATE INDEX XIE0632_01 ON AHB_NUM
(
	UPD_TIME             ASC
);

CREATE TABLE ALLELE
(
	LOCUS_CD              CHAR(10)
			       NOT NULL ,
	ALLELE_CD             CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ALLELE_ISAG           INTEGER
			      
);

CREATE TABLE ALLELE_ACTION
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE ANIMAL
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SIRE_ANML_KEY         INTEGER
			       NOT NULL ,
	RCPNT_ANML_KEY        INTEGER
			       NOT NULL ,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SIRE_OFFL_CD          DECIMAL(1)
			       NOT NULL ,
	BRTH_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	BRTH_DATE_EST_IND     DECIMAL(1)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	SPS_STS_CD            DECIMAL(1)
			       NOT NULL ,
	ANML_ID_OFFL_CD       DECIMAL(1)
			       NOT NULL ,
	CM_SUIT_IND           CHAR(1)
			       NOT NULL ,
	CM_UNSUIT_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_ORGN_CD          CHAR(1)
			       NOT NULL ,
	BRTH_CTRY_CD          CHAR(3)
			       NOT NULL ,
	MARKING               CHAR(12)
			       NOT NULL ,
	SMN_USABLE_IND        DECIMAL(1)
			       NOT NULL ,
	MAF_APPR_NUM          INTEGER
			       NOT NULL ,
	FOR_SALE_IND          DECIMAL(1)
			       NOT NULL ,
	BL_TP_CERT_NUM        CHAR(12)
			       NOT NULL ,
	BL_TP_PTPT_CD         CHAR(4)
			       NOT NULL ,
	TOP_REG_CD            DECIMAL(1)
			       NOT NULL ,
	TOP_REG_PTPT_CD       CHAR(4)
			       NOT NULL ,
	TOP_REG_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	ID_ANML_ADD_DATE      INTEGER
			       NOT NULL  DEFAULT 0,
	EBL_STS_CD            CHAR(1)
			       NOT NULL ,
	DAM_OFFL_CD           DECIMAL(1)
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL ,
	CM_UNSUIT_RSN         CHAR(50)
			       NOT NULL ,
	BRTH_DATE_D           DATE
			      ,
	CM_UNSUIT_DATE_D      DATE
			      ,
	TOP_REG_DATE_D        DATE
			      ,
	ID_ANML_ADD_DATE_D    DATE
			      ,
	INBRD_COEFF           DECIMAL(5,2)
			      ,
	AE_BRD_CD             SMALLINT
			      ,
	NORTH_AMERICA_HF_PCT  DECIMAL(5,2)
			      ,
	cm_unsuit_date        CHAR(18)
			      ,
	top_reg_date          CHAR(18)
			      ,
	id_anml_add_date      CHAR(18)
			      ,
	id_anml_add_date_d    CHAR(18)
			      ,
	top_reg_date_d        CHAR(18)
			      ,
	brth_date             CHAR(18)
			      ,
	cm_unsuit_date_d      CHAR(18)
			      ,
	brth_date_d           CHAR(18)
			      ,
	sire_anml_key         CHAR(18)
			      ,
	dam_anml_key          CHAR(18)
			      ,
	sire_offl_cd          CHAR(18)
			      ,
	dam_offl_cd           CHAR(18)
			      
);

CREATE INDEX XFK0001_01 ON ANIMAL
(
	SIRE_ANML_KEY        ASC
);

CREATE INDEX XFK0001_02 ON ANIMAL
(
	DAM_ANML_KEY         ASC
);

CREATE INDEX XFK0001_03 ON ANIMAL
(
	RCPNT_ANML_KEY       ASC
);

CREATE INDEX XIE0001_01 ON ANIMAL
(
	NAME                 ASC
);

CREATE INDEX XIE0001_02 ON ANIMAL
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0001_03 ON ANIMAL
(
	BRTH_DATE_D          ASC,
	SEX_CD               ASC
);

CREATE TABLE ANIMAL_EXT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TDM_BASE_ANML_IND     CHAR(1)
			       CONSTRAINT  C0366_01 CHECK ( TDM_BASE_ANML_IND IN ('Y','N') ),
	CVM_PROB              DECIMAL(8,7)
			       CONSTRAINT  C0366_02 CHECK ( CVM_PROB between 0 and 1 )
);

CREATE TABLE ANML_ANCESTRY_LOG
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PREV_SIRE_ANML_KEY    INTEGER
			      ,
	PREV_SIRE_OFFL_CD     DECIMAL(1)
			      ,
	PREV_DAM_ANML_KEY     INTEGER
			      ,
	PREV_DAM_OFFL_CD      DECIMAL(1)
			      ,
	USER_ID               CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE ANML_CARCASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROCESSOR_PARTY_ID    INTEGER
			      ,
	KILL_DATE             DATE
			       NOT NULL ,
	CARCASS_VAL           DECIMAL(7,2)
			      ,
	WEIGHT                DECIMAL(7,2)
			       NOT NULL ,
	DATA_SOURCE_CD        CHAR(1)
			       NOT NULL ,
	CAT_CD                CHAR(2)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	FAT_CLASS             CHAR(4)
			       NOT NULL ,
	MUSCLE_SCORE          SMALLINT
			       CONSTRAINT  C0604_01 CHECK ( MUSCLE_SCORE IN (1, 2, 3) ),
	WEIGHT_CLASS          CHAR(4)
			      ,
	data_source_cd        CHAR(18)
			      
);

CREATE TABLE ANML_CHAR
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE ANML_DT_ERR
(
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0515_01 CHECK ( DT_CD IN ('EBL') ),
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	ERR_TIME              DECIMAL(12)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ERR_CD                SMALLINT
			       NOT NULL ,
	ANML_ID               CHAR(12)
			       NOT NULL ,
	PLATE_NUM             CHAR(10)
			       NOT NULL ,
	RSLT                  DECIMAL(9,3)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0515_01 ON ANML_DT_ERR
(
	DT_CD                ASC,
	RGN_CD               ASC,
	HERD_CD              ASC,
	ERR_TIME             ASC
);

CREATE TABLE ANML_DT_HOLD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0512_01 CHECK ( DT_CD IN ('EBL') ),
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	COW_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	PLATE_NUM             CHAR(10)
			       NOT NULL ,
	RSLT                  DECIMAL(9,3)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	CREATE_TIME           INTEGER
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	create_date           CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      ,
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE TABLE ANML_DT_RSLT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0506_01 CHECK ( DT_CD IN ('EBL') ),
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_KEY              INTEGER
			       NOT NULL ,
	PLATE_NUM             CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RSLT                  DECIMAL(9,3)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0506_03 ON ANML_DT_RSLT
(
	DT_CD                ASC,
	PLATE_NUM            ASC
);

CREATE INDEX XIE0506_02 ON ANML_DT_RSLT
(
	ANML_KEY             ASC,
	DT_CD                ASC
);

CREATE TABLE ANML_DT_STS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0509_01 CHECK ( DT_CD IN ('EBL') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DT_STS_CD             SMALLINT
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	BL_TEST_RQRD_CD       CHAR(1)
			       NOT NULL ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0509_01 ON ANML_DT_STS
(
	DT_STS_CD            ASC,
	DT_CD                ASC,
	ANML_KEY             ASC
);

CREATE TABLE ANML_DT_TAG
(
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0518_01 CHECK ( DT_CD IN ('EBL') ),
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0518_01 ON ANML_DT_TAG
(
	ANML_KEY             ASC,
	DT_CD                ASC
);

CREATE TABLE ANML_EVENT
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			      
);

CREATE INDEX XIE0463_01 ON ANML_EVENT
(
	UPD_TIME             ASC
);

CREATE TABLE ANML_FATE
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(40)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE ANML_FULL_MODEL_ANCESTRY
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	SIRE_ANML_KEY         INTEGER
			      ,
	DAM_ANML_KEY          INTEGER
			      
);

CREATE TABLE ANML_KEY_CTRL
(
	JOB_NAME              CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	INCREMENT             SMALLINT
			       NOT NULL 
);

CREATE TABLE ANML_LOCN_AUDIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 4815000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_NUM_ST_DATE      INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  TIMESTAMP
			       NOT NULL ,
	PGM_ID                CHAR(30)
			      ,
	XFER_IN_DATE_D        DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ANML_NUM_ST_DATE_D    DATE
			      ,
	anml_num_st_date      CHAR(18)
			      ,
	anml_num_st_date_d    CHAR(18)
			      ,
	xfer_in_date          CHAR(18)
			      ,
	xfer_in_date_d        CHAR(18)
			      
);

CREATE INDEX XFK0079_01 ON ANML_LOCN_AUDIT
(
	ANML_KEY             ASC,
	XFER_IN_DATE         ASC,
	ANML_NUM_ST_DATE     ASC
);

CREATE TABLE ANML_LOCUS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ALLELE_1_CD           CHAR(1)
			       NOT NULL ,
	ALLELE_1_PROB         DECIMAL(3,2)
			       NOT NULL ,
	ALLELE_2_CD           CHAR(1)
			       NOT NULL ,
	ALLELE_2_PROB         DECIMAL(3,2)
			       NOT NULL ,
	PHNTP_CD              CHAR(2)
			       NOT NULL ,
	PHNTP_MTHD_CD         CHAR(1)
			       NOT NULL ,
	PHNTP_PTPT_CD         CHAR(4)
			       NOT NULL ,
	GNTP_MTHD_CD          CHAR(1)
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_DATE_D            DATE
			      ,
	SMPL_ID               CHAR(20)
			      ,
	TEST_DATE             DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	UPD_PGM_ID            CHAR(8)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      
);

CREATE INDEX XFK0151_02 ON ANML_LOCUS
(
	ALLELE_1_CD          ASC,
	CATTLE_LOCUS_CD      ASC
);

CREATE INDEX XFK0151_03 ON ANML_LOCUS
(
	ALLELE_2_CD          ASC,
	CATTLE_LOCUS_CD      ASC
);

CREATE INDEX XFK0151_04 ON ANML_LOCUS
(
	CATTLE_LOCUS_CD      ASC,
	PHNTP_CD             ASC
);

CREATE INDEX XIE0151_01 ON ANML_LOCUS
(
	PHNTP_PTPT_CD        ASC
);

CREATE INDEX XIE0151_02 ON ANML_LOCUS
(
	UPD_TIME             ASC
);

CREATE TABLE ANML_LOCUS_AUDIT
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	ALLELE_1_CD           CHAR(1)
			       NOT NULL ,
	ALLELE_1_PROB         DECIMAL(3,2)
			       NOT NULL ,
	ALLELE_2_CD           CHAR(1)
			       NOT NULL ,
	ALLELE_2_PROB         DECIMAL(3,2)
			       NOT NULL ,
	PHNTP_MTHD_CD         CHAR(1)
			       NOT NULL ,
	PHNTP_PTPT_CD         CHAR(4)
			       NOT NULL ,
	GNTP_MTHD_CD          CHAR(1)
			      ,
	RCD_DATE              DATE
			      ,
	SMPL_ID               CHAR(20)
			      ,
	TEST_DATE             DATE
			      ,
	UPD_USER_ID           CHAR(8)
			      ,
	UPD_PGM_ID            CHAR(8)
			      
);

CREATE INDEX XIE0833_01 ON ANML_LOCUS_AUDIT
(
	ANML_KEY             ASC,
	CATTLE_LOCUS_CD      ASC
)
 CLUSTER;

CREATE INDEX XIE0833_02 ON ANML_LOCUS_AUDIT
(
	PHNTP_PTPT_CD        ASC
);

CREATE TABLE ANML_MEDICAL_TREATMENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 6000001
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	HLTH_COND_CD          CHAR(2)
			      ,
	HLTH_PROD_CD          CHAR(6)
			      ,
	SEPARATION_DATE       DATE
			      ,
	DOSE_CNT              SMALLINT
			      ,
	DOSE                  DECIMAL(9,2)
			      ,
	DOSE_UOM_CD           CHAR(4)
			      ,
	END_DATE              DATE
			      ,
	END_TIME_CD           CHAR(2)
			      ,
	RETURN_DATE           DATE
			      ,
	RETURN_TIME_CD        CHAR(2)
			      ,
	VET_RECCOM_MILK_WITHHOLD  SMALLINT
			      ,
	VET_RECCOM_MEAT_WITHHOLD  SMALLINT
			      ,
	CMT                   CHAR(50)
			      ,
	BATCH_ID              CHAR(10)
			      ,
	BATCH_EXPIRY_DATE     DATE
			      ,
	CONSTRAINT C0844_01 CHECK ( HLTH_COND_CD IS NOT NULL OR HLTH_PROD_CD IS NOT NULL ) ,
	CONSTRAINT C0844_02 CHECK ( HLTH_PROD_CD IS NOT NULL OR BATCH_ID IS NULL AND BATCH_EXPIRY_DATE IS NULL ) 
);

CREATE TABLE ANML_MOVE
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SHIFT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COW_NUM_ALPHA         CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	SHIFT_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	shift_date            CHAR(18)
			      ,
	shift_date_d          CHAR(18)
			      
);

CREATE TABLE ANML_NAME_IDX
(
	NAME_1_10             CHAR(10)
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(30)
			       NOT NULL 
);

CREATE INDEX XFK0716_02 ON ANML_NAME_IDX
(
	BRD_CD               ASC
);

CREATE INDEX XIE0716_01 ON ANML_NAME_IDX
(
	NAME_1_10            ASC
);

CREATE INDEX XIE0716_02 ON ANML_NAME_IDX
(
	UPD_TIME             ASC
);

CREATE TABLE ANML_OWNR
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	OWNR_TP_CD            CHAR(1)
			       NOT NULL ,
	OWNR_CNT              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	INVC_NUM              INTEGER
			       NOT NULL ,
	INVC_LINE             SMALLINT
			       NOT NULL ,
	SALE_PRICE            DECIMAL(9,2)
			       NOT NULL ,
	RTND_STRAW_CNT        INTEGER
			       NOT NULL ,
	XFER_RCD_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	XFER_RCD_DATE_D       DATE
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	xfer_rcd_date         CHAR(18)
			      ,
	xfer_rcd_date_d       CHAR(18)
			      ,
	anml_key              CHAR(18)
			      ,
	ownr_tp_cd            CHAR(18)
			      ,
	ownr_cnt              CHAR(18)
			      
);

CREATE INDEX XIE0005_01 ON ANML_OWNR
(
	OWNR_PTPT_CD         ASC
);

CREATE INDEX XIE0005_02 ON ANML_OWNR
(
	XFER_RCD_DATE        ASC
);

CREATE INDEX XIE0005_03 ON ANML_OWNR
(
	UPD_TIME             ASC
);

CREATE TABLE ANML_SAMPLE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	RCD_DATE              DATE
			       NOT NULL  DEFAULT CURRENT DATE,
	ANML_KEY              INTEGER
			      ,
	ANML_REF              CHAR(20)
			      ,
	SEX_CD                CHAR(1)
			       CONSTRAINT  C0839_01 CHECK ( SEX_CD IN ('M','F') ),
	DEPT_PARTY_ID         INTEGER
			       NOT NULL ,
	RQST_USER_ID          CHAR(8)
			      ,
	RQST_DATE             DATE
			      ,
	ANML_TP_CD            CHAR(4)
			      ,
	SAMPLE_MATTER_CD      CHAR(4)
			       NOT NULL ,
	COLLECT_PARTY_ID      INTEGER
			      ,
	COLLECT_DATE          DATE
			      ,
	LIC_DESP_DATE         DATE
			      ,
	COURIER_NUM           CHAR(20)
			      ,
	RCVD_DATE             DATE
			      ,
	PYMT_AUTH_DATE        DATE
			      ,
	CMT                   VARCHAR(50)
			      ,
	CONSTRAINT C0839_02 CHECK ( ANML_REF IS NOT NULL AND SEX_CD IS NOT NULL OR ANML_REF IS NULL AND SEX_CD IS NULL ) 
);

CREATE TABLE ANML_SEL_REF
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0175_01 CHECK ( CD IN ('N', 'M', 'O') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE ANML_SMPL_MTR
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE ANML_SPS_STS_LOG
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	OLD_SPS_STS_CD        DECIMAL(1)
			       NOT NULL ,
	NEW_SPS_STS_CD        DECIMAL(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE TABLE ANML_TREE
(
	LEVEL                 INTEGER
			      ,
	ANML_KEY              INTEGER
			      ,
	MAP_REF               CHAR(15)
			      ,
	HERD_NUM              INTEGER
			      ,
	SEX_CD                CHAR(1)
			      
);

CREATE INDEX ANML_TREE_IDX1 ON ANML_TREE
(
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE INDEX ANML_TREE_IDX2 ON ANML_TREE
(
	ANML_KEY             ASC
);

CREATE TABLE ANML_WGH
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	WGT_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	LWGT_PROC_STS_CD      CHAR(1)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	LWGT_DATA_SRCE_CD     CHAR(1)
			       NOT NULL ,
	ANML_WGT_CNT          INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	DEL_RSN               CHAR(30)
			       NOT NULL ,
	WGT_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	wgt_date_d            CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	wgt_date              CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      
);

CREATE INDEX XIE0399_01 ON ANML_WGH
(
	LWGT_PROC_STS_CD     ASC
);

CREATE TABLE ANML_XFER
(
	CERT_NUM              DECIMAL(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	SELLER_PTPT_CD        CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TERM_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TERM_RSN_CD           CHAR(1)
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	BUYER_PTPT_CD         CHAR(4)
			      ,
	BUYER_MAP_REF         CHAR(10)
			      ,
	BUYER_HERD_NUM        SMALLINT
			      ,
	CREATE_TIME           TIMESTAMP
			      ,
	CARD_CREATE_TIME      TIMESTAMP
			      ,
	EMAIL_SENT_TIME       TIMESTAMP
			      ,
	ANML_XFER_COMM_CD     CHAR(1)
			       CONSTRAINT  C0224_01 CHECK ( ANML_XFER_COMM_CD IN ('U', 'N', 'S', 'B', 'V') ),
	TERM_DATE_D           DATE
			      ,
	PRINT_DATE_D          DATE
			      ,
	term_date             CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      ,
	term_date_d           CHAR(18)
			      ,
	seller_ptpt_cd        CHAR(18)
			      ,
	print_date            CHAR(18)
			      ,
	buyer_ptpt_cd         CHAR(18)
			      ,
	CONSTRAINT C0224_02 CHECK ( ANML_XFER_COMM_CD = 'S' AND EMAIL_SENT_TIME IS NOT NULL OR ANML_XFER_COMM_CD != 'S' AND EMAIL_SENT_TIME IS NULL  ) ,
	CONSTRAINT C0224_03 CHECK ( BUYER_PTPT_CD IS NULL AND BUYER_MAP_REF IS NULL AND BUYER_HERD_NUM IS NULL AND CREATE_TIME IS NULL OR BUYER_PTPT_CD IS NOT NULL AND BUYER_MAP_REF IS  NOT NULL AND BUYER_HERD_NUM IS NOT NULL AND CREATE_TIME IS NOT NULL  ) ,
	CONSTRAINT C0224_04 CHECK ( CARD_CREATE_TIME IS NULL AND ANML_XFER_COMM_CD IS NULL OR BUYER_PTPT_CD IS NOT NULL  ) 
);

CREATE INDEX XFK0224_03 ON ANML_XFER
(
	BUYER_MAP_REF        ASC,
	BUYER_HERD_NUM       ASC
);

CREATE INDEX XIE0224_01 ON ANML_XFER
(
	ANML_KEY             ASC,
	TERM_DATE            ASC
);

CREATE INDEX XIE0224_03 ON ANML_XFER
(
	SELLER_PTPT_CD       ASC
);

CREATE INDEX XIE0224_04 ON ANML_XFER
(
	BUYER_PTPT_CD        ASC
);

CREATE TABLE ANML_XFER_CARD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	XFER_CARD_NUM         SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	ID_TP_CD              CHAR(1)
			       NOT NULL ,
	LOT_NUM               SMALLINT
			       NOT NULL 
);

CREATE TABLE ANSWER_SET
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE ANSWER_VALUE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANSWER_SET_ID         INTEGER
			      ,
	TEXT                  CHAR(50)
			      ,
	NUMBER                DECIMAL(7,3)
			      ,
	DATE                  DATE
			      ,
	TIME                  TIME
			      ,
	text                  CHAR(18)
			      ,
	number                CHAR(18)
			      ,
	CONSTRAINT C0699_01 CHECK ( TEXT IS NOT NULL AND NUMBER IS NULL AND DATE IS NULL AND TIME IS NULL OR TEXT IS NULL AND NUMBER IS NOT NULL AND DATE IS NULL AND TIME IS NULL OR TEXT IS NULL AND NUMBER IS NULL AND DATE IS NOT NULL AND TIME IS NULL OR TEXT IS NULL AND NUMBER IS NULL AND DATE IS NULL AND TIME IS NOT NULL  ) 
);

CREATE TABLE APPL_PGM
(
	APPL_NAME             CHAR(30)
			       NOT NULL ,
	PGM_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE APPL_WORK_GRP
(
	WORK_GRP_NAME         CHAR(30)
			       NOT NULL ,
	APPL_NAME             CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE APPLICATION
(
	NAME                  CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(100)
			       NOT NULL 
);

CREATE TABLE AR_CMT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	STD_AR_CMT_CD         SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRINT_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	print_date            CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      
);

CREATE INDEX XFK0400_01 ON AR_CMT
(
	STD_AR_CMT_CD        ASC
);

CREATE TABLE AREA_TRAIT
(
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ECON_WGT_BW           DECIMAL(6,4)
			      ,
	ECON_WGT_PW           DECIMAL(6,4)
			      ,
	DCO_BASIC_PAYOUT      DECIMAL(7,4)
			      ,
	ECON_WGT_LW           DECIMAL(6,4)
			      ,
	BW_REL_VAR_COMP       DECIMAL(11,4)
			      ,
	PW_REL_VAR_COMP       DECIMAL(11,4)
			      ,
	ECON_WGT_HI           DECIMAL(6,2)
			      
);

CREATE TABLE AUTO_RPRT_RQST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(3)
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	PARM                  CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	RPRT_CHRG_CD          CHAR(1)
			       NOT NULL ,
	COPY_CNT              SMALLINT
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CREATE_PGM_ID         CHAR(8)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	DESP_INST             CHAR(10)
			       NOT NULL ,
	RQST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rqst_date             CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	rprt_tp_cd            CHAR(18)
			      
);

CREATE INDEX XFK0532_02 ON AUTO_RPRT_RQST
(
	OUTPUT_CAT_CD        ASC,
	OUTPUT_CAT_PTPT_CD   ASC
);

CREATE INDEX XFK0532_03 ON AUTO_RPRT_RQST
(
	OUTPUT_CAT_PTPT_CD   ASC,
	RPRT_TP_CD           ASC
);

CREATE INDEX XIE0532_01 ON AUTO_RPRT_RQST
(
	RCPNT_PTPT_CD        ASC
);

CREATE TABLE AVAIL_RPRT_DLVRY
(
	RPRT_CD               CHAR(3)
			       NOT NULL ,
	RPRT_DLVRY_CD         CHAR(1)
			       NOT NULL  CONSTRAINT  C0176_01 CHECK ( RPRT_DLVRY_CD IN ('F', 'I', 'L', 'E', 'P') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE AY_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_79              CHAR(1)
			       NOT NULL ,
	TRAIT_80              CHAR(1)
			       NOT NULL ,
	TRAIT_81              CHAR(1)
			       NOT NULL ,
	TRAIT_82              CHAR(1)
			       NOT NULL ,
	TRAIT_83              CHAR(1)
			       NOT NULL ,
	TRAIT_84              CHAR(1)
			       NOT NULL ,
	TRAIT_85              CHAR(1)
			       NOT NULL ,
	TRAIT_86              CHAR(1)
			       NOT NULL ,
	TRAIT_87              CHAR(1)
			       NOT NULL ,
	TRAIT_88              CHAR(1)
			       NOT NULL ,
	TRAIT_89              CHAR(1)
			       NOT NULL 
);

CREATE TABLE BARCD_ANML
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	BARCD_PRODN_CD        DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0521_01 CHECK ( BARCD_PRODN_CD in (0,8,9) ),
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	BARCD_MAP_STS_CD      CHAR(1)
			       NOT NULL  CONSTRAINT  C0521_02 CHECK ( BARCD_MAP_STS_CD IN ('U','M','D') ),
	PROC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ANML_ID               CHAR(12)
			      ,
	proc_date             CHAR(18)
			      ,
	proc_date_d           CHAR(18)
			      ,
	CONSTRAINT C0521_03 CHECK ( ANML_KEY IS NULL OR ANML_ID IS NULL ) 
);

CREATE TABLE BATCH_JOB
(
	NUM                   INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	READER_NAME           CHAR(8)
			       NOT NULL ,
	CLASS_CD              CHAR(1)
			       NOT NULL ,
	STS_CD                CHAR(4)
			       NOT NULL ,
	PRIORITY_CD           DECIMAL(1)
			       NOT NULL ,
	RUN_SCRIPT            VARCHAR(512)
			       NOT NULL ,
	SUBMIT_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_TIME               TIMESTAMP
			      ,
	END_TIME              TIMESTAMP
			      ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	TITLE                 CHAR(50)
			      ,
	PROC_ID               INTEGER
			      ,
	OUTPUT                BLOB(2097152)
			      ,
	INITIATOR_ID          SMALLINT
			      ,
	RESOLVED_CMT          VARCHAR(150)
			      ,
	RESOLVED_TIME         TIMESTAMP
			      ,
	CPU_TIME_REAL         DECIMAL(9,2)
			      ,
	CPU_TIME_USER         DECIMAL(9,2)
			      ,
	CPU_TIME_SYSTEM       DECIMAL(9,2)
			      ,
	DEST_CD               CHAR(2)
			       NOT NULL  DEFAULT 'PS' CONSTRAINT  C0660_02 CHECK ( DEST_CD IN ('PS','AC','UA','UP') )
);

CREATE INDEX XFK0660_03 ON BATCH_JOB
(
	READER_NAME          ASC
);

CREATE INDEX XFK0660_07 ON BATCH_JOB
(
	STS_CD               ASC
);

CREATE INDEX XIE0660_01 ON BATCH_JOB
(
	ST_TIME              ASC,
	USER_ID              ASC
);

CREATE INDEX XIE0660_02 ON BATCH_JOB
(
	ST_TIME              DESC,
	SUBMIT_TIME          DESC
);

CREATE INDEX XIE0660_03 ON BATCH_JOB
(
	UPD_TIME             ASC
);

CREATE TABLE BATCH_JOB_CLASS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE BATCH_JOB_DATA
(
	JOB_NUM               INTEGER
			       NOT NULL ,
	FILE_NUM              SMALLINT
			       NOT NULL ,
	LINE_NUM              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INPUT_DATA            VARCHAR(400)
			       NOT NULL 
);

CREATE TABLE BATCH_JOB_DATA_HIST
(
	JOB_NUM               INTEGER
			       NOT NULL ,
	FILE_NUM              SMALLINT
			       NOT NULL ,
	LINE_NUM              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INPUT_DATA            VARCHAR(400)
			       NOT NULL 
);

CREATE TABLE BATCH_JOB_HIST
(
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	READER_NAME           CHAR(8)
			       NOT NULL ,
	CLASS_CD              CHAR(1)
			       NOT NULL ,
	STS_CD                CHAR(4)
			       NOT NULL ,
	PRIORITY_CD           DECIMAL(1)
			       NOT NULL ,
	RUN_SCRIPT            VARCHAR(512)
			       NOT NULL ,
	SUBMIT_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_TIME               TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	END_TIME              TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       NOT NULL ,
	TITLE                 CHAR(50)
			      ,
	PROC_ID               INTEGER
			      ,
	OUTPUT                BLOB(2097152)
			      ,
	INITIATOR_ID          SMALLINT
			      ,
	RESOLVED_CMT          VARCHAR(150)
			      ,
	RESOLVED_TIME         TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	CPU_TIME_REAL         DECIMAL(9,2)
			      ,
	CPU_TIME_USER         DECIMAL(9,2)
			      ,
	CPU_TIME_SYSTEM       DECIMAL(9,2)
			      ,
	DEST_CD               CHAR(2)
			       NOT NULL 
);

CREATE INDEX XIE0417_01 ON BATCH_JOB_HIST
(
	ST_TIME              ASC,
	USER_ID              ASC
);

CREATE INDEX XIE0417_02 ON BATCH_JOB_HIST
(
	ST_TIME              DESC,
	SUBMIT_TIME          DESC
);

CREATE TABLE BATCH_JOB_INITIATOR
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CLASS_CD_1            CHAR(1)
			      ,
	CLASS_CD_2            CHAR(1)
			      ,
	CLASS_CD_3            CHAR(1)
			      ,
	CLASS_CD_4            CHAR(1)
			      ,
	ACTIVE_IND            CHAR(1)
			       NOT NULL  CONSTRAINT  C0657_01 CHECK ( ACTIVE_IND in ('Y','N') ),
	JOB_NUM               INTEGER
			      
);

CREATE TABLE BATCH_JOB_INITIATOR_SHIFT
(
	INITIATOR_ID          SMALLINT
			       NOT NULL ,
	OPERATOR_SHIFT_CD     CHAR(4)
			       NOT NULL  CONSTRAINT  C0658_01 CHECK ( OPERATOR_SHIFT_CD IN ('P','E','N','A') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CLASS_CD_1            CHAR(1)
			      ,
	CLASS_CD_2            CHAR(1)
			      ,
	CLASS_CD_3            CHAR(1)
			      ,
	CLASS_CD_4            CHAR(1)
			      
);

CREATE TABLE BATCH_JOB_READER
(
	NAME                  CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROC_NUM              CHAR(8)
			       NOT NULL ,
	TITLE                 CHAR(50)
			       NOT NULL ,
	RUN_PARM              VARCHAR(512)
			       NOT NULL ,
	CLASS_CD              CHAR(1)
			       NOT NULL ,
	PRIORITY_CD           DECIMAL(1)
			       NOT NULL ,
	STS_CD                CHAR(4)
			       NOT NULL ,
	DEST_CD               CHAR(2)
			       NOT NULL  DEFAULT 'PS' CONSTRAINT  C0659_02 CHECK ( DEST_CD IN ('PS','AC','UA','UP') )
);

CREATE TABLE BATCH_JOB_REPORT
(
	PROC_NUM              CHAR(8)
			       NOT NULL ,
	RPRT_NAME             CHAR(8)
			       NOT NULL ,
	JOB_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FILE_NAME             CHAR(128)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(1)
			       NOT NULL  CONSTRAINT  C0729_01 CHECK ( RPRT_TP_CD IN ('P', 'L', 'S', 'W', 'D') ),
	PRINTER_ID            CHAR(50)
			      ,
	COPIES                SMALLINT
			       NOT NULL ,
	AFP_DEF               CHAR(6)
			      ,
	STS_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0729_02 CHECK ( STS_CD IN ('U', 'P', 'E', 'F') ),
	FORM_CD               CHAR(4)
			       NOT NULL ,
	CLASS_CD              CHAR(1)
			       NOT NULL  CONSTRAINT  C0729_04 CHECK ( CLASS_CD IN ('8', 'A', 'C', 'D', 'J', 'K', 'L', 'N', 'O', 'P', 'S', 'T', 'U', 'X', 'Z') ),
	DEST_CD               CHAR(2)
			       NOT NULL  DEFAULT 'PS' CONSTRAINT  C0729_03 CHECK ( DEST_CD IN ('PS','AC','UA','UP') )
);

CREATE INDEX XFK0729_05 ON BATCH_JOB_REPORT
(
	DEST_CD              ASC
);

CREATE INDEX XIE0729_01 ON BATCH_JOB_REPORT
(
	STS_CD               ASC,
	CREATE_TIME          ASC,
	JOB_NUM              ASC
);

CREATE TABLE BATCH_JOB_REPORT_HIST
(
	PROC_NUM              CHAR(8)
			       NOT NULL ,
	RPRT_NAME             CHAR(8)
			       NOT NULL ,
	JOB_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FILE_NAME             CHAR(128)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(1)
			       NOT NULL ,
	PRINTER_ID            CHAR(50)
			      ,
	COPIES                SMALLINT
			       NOT NULL ,
	AFP_DEF               CHAR(6)
			      ,
	STS_CD                CHAR(1)
			       NOT NULL ,
	FORM_CD               CHAR(4)
			       NOT NULL ,
	CLASS_CD              CHAR(1)
			       NOT NULL ,
	DEST_CD               CHAR(2)
			       NOT NULL 
);

CREATE INDEX XIE0419_01 ON BATCH_JOB_REPORT_HIST
(
	STS_CD               ASC,
	CREATE_TIME          ASC,
	JOB_NUM              ASC
);

CREATE TABLE BATCH_JOB_REPORT_REF
(
	PROC_NUM              CHAR(8)
			       NOT NULL ,
	RPRT_NAME             CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL 
);

CREATE TABLE BATCH_UPD_ERR
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ERR_LVL_CD            DECIMAL(1)
			       NOT NULL ,
	ERR_CAT_CD            CHAR(3)
			       NOT NULL ,
	HALT_IND              CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(99)
			       NOT NULL ,
	RSLV_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0210_01 CHECK ( RSLV_IND IN ('Y', 'N') ),
	CONSTRAINT C0210_02 CHECK ( RSLV_IND = 'N' OR ERR_LVL_CD = 3 ) 
);

CREATE INDEX XIE0210_01 ON BATCH_UPD_ERR
(
	UPD_TIME             ASC
);

CREATE TABLE BODY_COND_SCORE_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	BODY_COND_BV          DECIMAL(5,2)
			       NOT NULL ,
	BODY_COND_BV_REL      DECIMAL(3,1)
			       NOT NULL ,
	DTR_CNT               INTEGER
			       NOT NULL 
);

CREATE TABLE BODY_COND_SCORE_BV_RSLT_HIST
(
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BODY_COND_BV          DECIMAL(5,2)
			       NOT NULL ,
	BODY_COND_BV_REL      DECIMAL(3,1)
			       NOT NULL ,
	DTR_CNT               INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL 
);

CREATE INDEX XIE0666_01 ON BODY_COND_SCORE_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE BODY_COND_SCORE_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			      ,
	AVG_BODY_COND_BV      DECIMAL(5,2)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE BODY_COND_SCORE_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_BODY_COND_BV      DECIMAL(5,2)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE BODY_PART
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE BOG_BULL_DCSN
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 2005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BULL_CD               INTEGER
			       NOT NULL ,
	AE_RUN_DATE           DATE
			       NOT NULL ,
	DCSN_CD               CHAR(3)
			       NOT NULL ,
	RSN_CD                CHAR(2)
			      ,
	CMT                   CHAR(50)
			      
);

CREATE INDEX XIE0725_01 ON BOG_BULL_DCSN
(
	BULL_CD              ASC,
	AE_RUN_DATE          ASC,
	ID                   ASC
)
 CLUSTER;

CREATE INDEX XIE0725_02 ON BOG_BULL_DCSN
(
	UPD_TIME             ASC
);

CREATE TABLE BOG_BULL_DCSN_REF
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	CMT_RQRD_IND          CHAR(1)
			       NOT NULL  CONSTRAINT  C0723_01 CHECK ( CMT_RQRD_IND IN ('Y', 'N') )
);

CREATE INDEX XIE0723_01 ON BOG_BULL_DCSN_REF
(
	UPD_TIME             ASC
);

CREATE TABLE BOG_BULL_RSN_REF
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	CMT_RQRD_IND          CHAR(1)
			       NOT NULL  CONSTRAINT  C0724_01 CHECK ( CMT_RQRD_IND IN ('Y', 'N') )
);

CREATE INDEX XIE0724_01 ON BOG_BULL_RSN_REF
(
	UPD_TIME             ASC
);

CREATE TABLE BRAT_COANCESTRY
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	ANML_KEY_1            INTEGER
			       NOT NULL ,
	ANML_KEY_2            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COANCESTRY            DECIMAL(5,1)
			       NOT NULL 
);

CREATE TABLE BRAT_LOG
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LOG_TEXT              VARCHAR(255)
			       NOT NULL 
);

CREATE TABLE BRAT_RSLT
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BW                    DECIMAL(5,1)
			      ,
	BW_TEAM_1             DECIMAL(5,1)
			      ,
	BW_TEAM_2             DECIMAL(5,1)
			      ,
	BEEPS_1               INTEGER
			      ,
	BEEPS_2               INTEGER
			      ,
	BEEPS_3               INTEGER
			      ,
	DIFF_BW               DECIMAL(5,1)
			      ,
	TEAM_1_ANML_KEY_1     INTEGER
			      ,
	TEAM_1_ANML_KEY_2     INTEGER
			      ,
	TEAM_1_ANML_KEY_3     INTEGER
			      ,
	TEAM_1_ANML_KEY_4     INTEGER
			      ,
	TEAM_1_ANML_KEY_5     INTEGER
			      ,
	TEAM_1_ANML_KEY_6     INTEGER
			      ,
	TEAM_1_ANML_KEY_7     INTEGER
			      ,
	TEAM_1_ANML_KEY_8     INTEGER
			      ,
	TEAM_1_ANML_KEY_9     INTEGER
			      ,
	TEAM_1_ANML_KEY_10    INTEGER
			      ,
	TEAM_1_ANML_KEY_11    INTEGER
			      ,
	TEAM_1_ANML_KEY_12    INTEGER
			      ,
	TEAM_1_ANML_KEY_13    INTEGER
			      ,
	TEAM_2_ANML_KEY_1     INTEGER
			      ,
	TEAM_2_ANML_KEY_2     INTEGER
			      ,
	TEAM_2_ANML_KEY_3     INTEGER
			      ,
	TEAM_2_ANML_KEY_4     INTEGER
			      ,
	TEAM_2_ANML_KEY_5     INTEGER
			      ,
	TEAM_2_ANML_KEY_6     INTEGER
			      ,
	TEAM_2_ANML_KEY_7     INTEGER
			      ,
	TEAM_2_ANML_KEY_8     INTEGER
			      ,
	TEAM_2_ANML_KEY_9     INTEGER
			      ,
	TEAM_2_ANML_KEY_10    INTEGER
			      ,
	TEAM_2_ANML_KEY_11    INTEGER
			      ,
	TEAM_2_ANML_KEY_12    INTEGER
			      ,
	TEAM_2_ANML_KEY_13    INTEGER
			      
);

CREATE TABLE BRAT_RUN_BULL
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MAX_POSN              INTEGER
			      ,
	MIN_POSN              INTEGER
			      
);

CREATE TABLE BRAT_RUN_DATA
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RSLT_IND              INTEGER
			       NOT NULL  DEFAULT 0,
	RUN_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RUNNING_IND           INTEGER
			       NOT NULL  DEFAULT 0,
	PROGRESS_BAR          INTEGER
			       NOT NULL ,
	PROGRESS_TEXT         VARCHAR(255)
			      ,
	RQRD_BULL_CNT         INTEGER
			      ,
	BRD_CD                INTEGER
			      ,
	COANCESTRY_IND        INTEGER
			       NOT NULL  DEFAULT 0,
	BW_WEIGHTING          INTEGER
			      ,
	BEEPS_WEIGHTING       INTEGER
			      
);

CREATE TABLE BRD_SOC
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DEF_MIN_16TH          SMALLINT
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL 
);

CREATE TABLE BRD_STEP_STS_REF
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0248_01 CHECK ( CD IN ('A', 'B', 'C') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE BRD_XLATE
(
	DESCR                 CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BRD_CD                CHAR(2)
			       NOT NULL 
);

CREATE INDEX XFK0605_01 ON BRD_XLATE
(
	BRD_CD               ASC
);

CREATE TABLE BREED
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHORT_ABBR            CHAR(1)
			       NOT NULL ,
	LONG_ABBR             CHAR(3)
			       NOT NULL ,
	FAT_FACT              SMALLINT
			       NOT NULL ,
	BSOC_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL 
);

CREATE INDEX XIE0003_01 ON BREED
(
	UPD_TIME             ASC
);

CREATE TABLE BRTH_ID
(
	PFX                   CHAR(4)
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcd_date              CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	pfx                   CHAR(18)
			      ,
	yr                    CHAR(18)
			      ,
	num                   CHAR(18)
			      
);

CREATE INDEX XIE0186_01 ON BRTH_ID
(
	UPD_TIME             ASC
);

CREATE TABLE BSNS_RULE_ERR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 800005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MSG                   VARCHAR(2000)
			       NOT NULL ,
	MSG_UPD_USER          CHAR(8)
			       NOT NULL ,
	MSG_UPD_TIME          TIMESTAMP
			       NOT NULL ,
	USER_HINT             VARCHAR(2000)
			      ,
	HINT_UPD_USER         CHAR(8)
			      ,
	HINT_UPD_TIME         TIMESTAMP
			      ,
	ERR_LVL_CD            SMALLINT
			      ,
	HALT_IND              CHAR(1)
			       CONSTRAINT  C0576_01 CHECK ( HALT_IND IN ('Y', 'N') ),
	ERR_RCPNT_CD          CHAR(4)
			      
);

CREATE TABLE BSNS_UNIT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE BSOC_ANML_ID
(
	BSOC_PTPT_CD          CHAR(4)
			       NOT NULL ,
	HDBK_NUM              CHAR(6)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	TATTOO_CD             CHAR(8)
			       NOT NULL ,
	CONV_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CONV_DATE_D           DATE
			      ,
	conv_date             CHAR(18)
			      ,
	bsoc_ptpt_cd          CHAR(18)
			      ,
	hdbk_num              CHAR(18)
			      ,
	sex_cd                CHAR(18)
			      ,
	conv_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0188_01 ON BSOC_ANML_ID
(
	UPD_TIME             ASC
);

CREATE TABLE BSOC_MEMB
(
	MEMB_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	MEMB_TP_CD            CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	CR_LMT                DECIMAL(7,2)
			       NOT NULL ,
	CR_RESTRICT_CD        CHAR(2)
			       NOT NULL ,
	OS_DEBT_ADMIN_CHRG    DECIMAL(5,2)
			       NOT NULL ,
	WARD                  CHAR(2)
			       NOT NULL ,
	BRANCH                SMALLINT
			       NOT NULL ,
	ORG_PTPT_CD_2         CHAR(4)
			       NOT NULL ,
	STUD_NAME             CHAR(20)
			      ,
	END_RSN               CHAR(20)
			       NOT NULL ,
	MEMB_NUM              INTEGER
			       NOT NULL ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	memb_ptpt_cd          CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	st_date               CHAR(18)
			      
);

CREATE INDEX XFK0063_01 ON BSOC_MEMB
(
	ORG_PTPT_CD          ASC,
	STUD_NAME            ASC
);

CREATE INDEX XIE0063_01 ON BSOC_MEMB
(
	UPD_TIME             ASC
);

CREATE TABLE BSOC_MEMB_TP
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	END_DATE              DATE
			      ,
	SORT_SEQ              SMALLINT
			       NOT NULL 
);

CREATE TABLE BSOC_MTNG_AUDIT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MATE_ANML_KEY         INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL ,
	MTNG_CHRG_TP_CD       CHAR(1)
			       NOT NULL ,
	UPD_DATE_D            DATE
			      ,
	MTNG_DATE_D           DATE
			      ,
	mtng_date_d           CHAR(18)
			      ,
	mtng_date             CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      
);

CREATE INDEX XFK0022_02 ON BSOC_MTNG_AUDIT
(
	MATE_ANML_KEY        ASC
);

CREATE TABLE BULL_ACQ_APPROACH
(
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_SOURCE_CD         CHAR(2)
			       CONSTRAINT  C0425_01 CHECK ( DAM_SOURCE_CD IN ('LS', 'FA', 'SR', 'FO', 'BS') ),
	DAM_INSP_CD           CHAR(2)
			       CONSTRAINT  C0425_04 CHECK ( DAM_INSP_CD IN ('CI', 'SI', 'II', 'FI', 'NP', 'NI', 'RY') ),
	DAM_DECISION_CD       CHAR(2)
			      ,
	BULL_ACQ_CORR_CD      SMALLINT
			       CONSTRAINT  C0425_02 CHECK ( BULL_ACQ_CORR_CD IN (0, 2, 4, 6, 8, 10, 12, 14, 16) ),
	CORR_DATE             DATE
			      ,
	BREEDER_PARTY_ID      INTEGER
			       NOT NULL ,
	MTNG_1_ANML_KEY       INTEGER
			      ,
	MTNG_2_ANML_KEY       INTEGER
			      ,
	MTNG_3_ANML_KEY       INTEGER
			      ,
	CONTRACT_PRICE        INTEGER
			      ,
	CALF_STS_CD           CHAR(2)
			      ,
	ET_RCPNT_ANML_KEY     INTEGER
			      ,
	CMT                   CHAR(66)
			      ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	CONTRACT_RETURN_DATE  DATE
			      ,
	CONTRACT_DECISION_CD  CHAR(4)
			      ,
	INSP_BULL_ACQ_MGR_ID  INTEGER
			      ,
	PLANNED_DAM_INSP_DATE  DATE
			      ,
	PLANNED_INSEM_DATE    DATE
			      ,
	EMBRYO_PRODN_METHOD_CD  CHAR(1)
			       CONSTRAINT  C0425_06 CHECK ( EMBRYO_PRODN_METHOD_CD IN ('M','I') ),
	BULL_ACQ_MGR_ID       INTEGER
			      ,
	dam_decision_cd       CHAR(18)
			      ,
	mtng_1_anml_key       CHAR(18)
			      ,
	mtng_2_anml_key       CHAR(18)
			      ,
	mtng_3_anml_key       CHAR(18)
			      ,
	contract_price        CHAR(18)
			      ,
	proving_scheme_cd     CHAR(18)
			      ,
	cmt                   CHAR(18)
			      ,
	breeder_party_id      CHAR(18)
			      ,
	CONSTRAINT C0425_05 CHECK ( PROVING_SCHEME_CD = 'SPSA' and SSN <= 1997 OR PROVING_SCHEME_CD <> 'SPSA' ) 
);

CREATE INDEX XIE0425_01 ON BULL_ACQ_APPROACH
(
	BREEDER_PARTY_ID     ASC,
	SSN                  ASC,
	DAM_ANML_KEY         ASC,
	NUM                  ASC
);

CREATE INDEX XIE0425_02 ON BULL_ACQ_APPROACH
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_APPROACH_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_DECISION_CD       CHAR(2)
			      ,
	MTNG_1_ANML_KEY       INTEGER
			      ,
	MTNG_2_ANML_KEY       INTEGER
			      ,
	MTNG_3_ANML_KEY       INTEGER
			      ,
	CONTRACT_PRICE        INTEGER
			      ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE INDEX XIE0877_01 ON BULL_ACQ_APPROACH_LOG
(
	DAM_ANML_KEY         ASC,
	SSN                  ASC,
	NUM                  ASC
);

CREATE INDEX XIE0877_02 ON BULL_ACQ_APPROACH_LOG
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_APPROACH_RCPNT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	DOC_NUM               CHAR(12)
			      ,
	ET_RCPNT_ANML_KEY     INTEGER
			      ,
	CALF_STS_CD           CHAR(2)
			      ,
	CMT                   CHAR(50)
			      ,
	ANML_REF              CHAR(20)
			      ,
	IMPLANT_DATE          DATE
			      ,
	doc_num               CHAR(18)
			      ,
	et_rcpnt_anml_key     CHAR(18)
			      ,
	dam_anml_key          CHAR(18)
			      ,
	ssn                   CHAR(18)
			      ,
	num                   CHAR(18)
			      ,
	anml_ref              CHAR(18)
			      ,
	CONSTRAINT C0882_01 CHECK ( DOC_NUM IS NULL AND ET_RCPNT_ANML_KEY IS NULL OR DOC_NUM IS NOT NULL AND ET_RCPNT_ANML_KEY IS NOT NULL ) ,
	CONSTRAINT C0882_02 CHECK ( ANML_REF IS NULL AND IMPLANT_DATE IS NULL OR ANML_REF IS NOT NULL ) 
);

CREATE INDEX XIE0882_01 ON BULL_ACQ_APPROACH_RCPNT
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_CALF_DCSN
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	DESCR                 CHAR(60)
			       NOT NULL ,
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0435_01 ON BULL_ACQ_CALF_DCSN
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_CONTRACT_DECISION
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE BULL_ACQ_DAM_DCSN
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TERM_IND              DECIMAL(1)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	DESCR                 CHAR(60)
			       NOT NULL ,
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0426_01 ON BULL_ACQ_DAM_DCSN
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_EMBRYO_EVENT
(
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	EVENT_DATE            DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EMBRYO_PRODN_METHOD_CD  CHAR(1)
			      ,
	FRZ_EMBRYO_CNT        SMALLINT
			      ,
	FRESH_EMBRYO_CNT      SMALLINT
			      ,
	THAW_EMBRYO_CNT       SMALLINT
			      ,
	CMT                   CHAR(50)
			      ,
	embryo_prodn_method_cd  CHAR(18)
			      ,
	event_date            CHAR(18)
			      ,
	CONSTRAINT C0881_01 CHECK ( FRZ_EMBRYO_CNT IS NOT NULL OR FRESH_EMBRYO_CNT IS NOT NULL OR THAW_EMBRYO_CNT IS NOT NULL ) ,
	CONSTRAINT C0881_02 CHECK ( THAW_EMBRYO_CNT IS NULL OR FRZ_EMBRYO_CNT IS NULL AND FRESH_EMBRYO_CNT IS NULL ) ,
	CONSTRAINT C0881_03 CHECK ( FRZ_EMBRYO_CNT IS NULL AND FRESH_EMBRYO_CNT IS NULL OR EMBRYO_PRODN_METHOD_CD IS NOT NULL ) 
);

CREATE INDEX XIE0881_01 ON BULL_ACQ_EMBRYO_EVENT
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ACQ_MGR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			      ,
	DM_AREA_CD            SMALLINT
			      ,
	SSN                   SMALLINT
			      
);

CREATE TABLE BULL_ACQ_SIRE_DECISION
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TERM_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0857_01 CHECK ( TERM_IND IN ('Y', 'N') ),
	END_DATE              DATE
			      ,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE BULL_BREEDER
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TB_CLEAR_IND          CHAR(1)
			       CONSTRAINT  C0840_03 CHECK ( TB_CLEAR_IND IN ('Y','N') ),
	TB_CLEAR_YRS          SMALLINT
			      ,
	JOHNES_TOT_TEST       SMALLINT
			      ,
	JOHNES_POS_TEST       SMALLINT
			      ,
	EBL_TOT_TEST          SMALLINT
			      ,
	EBL_POS_TEST          SMALLINT
			      ,
	PS_STRAW_CNT          SMALLINT
			      ,
	OPTM_STRAW_CNT        SMALLINT
			      ,
	NOM_STRAW_CNT         SMALLINT
			      ,
	CMT                   VARCHAR(255)
			      ,
	CONSTRAINT C0840_01 CHECK ( TB_CLEAR_YRS IS NULL OR TB_CLEAR_IND = 'Y' ) 
);

CREATE TABLE BULL_CALF_ASSUM
(
	SSN                   SMALLINT
			       NOT NULL ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CVM_ADJ               DECIMAL(3,1)
			      ,
	PROGENY_TEST_TARGET   SMALLINT
			      ,
	FINAL_BULL_SEL_ADJ    DECIMAL(3,1)
			      ,
	BULL_ENTRY_ADJ        DECIMAL(3,1)
			      ,
	INSP_ADJ              DECIMAL(3,1)
			      
);

CREATE TABLE BULL_CALF_CONTRACT_ASSUM
(
	SSN                   SMALLINT
			       NOT NULL ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	CONTRACT_TP_CD        CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INSP_PER_CONTRACT     DECIMAL(3,1)
			      ,
	BULL_CALF_PCT         SMALLINT
			      ,
	CONTRACTS_PER_BULL_CALF  DECIMAL(3,1)
			      ,
	IN_CALF_COWS_PER_BULL_CALF  DECIMAL(3,1)
			      ,
	EMBRYOS_PER_COLLECT   DECIMAL(3,1)
			      ,
	FULL_SIBLING_ADJ      DECIMAL(3,1)
			      ,
	COLLECT_PER_DAM       DECIMAL(3,1)
			      ,
	NON_RETURN_RATE       DECIMAL(4,1)
			      
);

CREATE TABLE BULL_CALF_CONTRACT_SIRE_ASSUM
(
	BULL_PARENT_DECISION_ID  INTEGER
			       NOT NULL ,
	CONTRACT_TP_CD        CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BULL_CALF_TARGET      SMALLINT
			      
);

CREATE TABLE BULL_MKTR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 63000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SMN_SPLR_BRAND_CD     CHAR(4)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	CUSTOMATE_BULL_IND    CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0550_01 CHECK ( CUSTOMATE_BULL_IND IN ('Y','N') ),
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE INDEX XFK0550_02 ON BULL_MKTR
(
	SMN_SPLR_BRAND_CD    ASC
);

CREATE INDEX XIE0550_01 ON BULL_MKTR
(
	ANML_KEY             ASC,
	ST_DATE              ASC
);

CREATE INDEX XIE0550_03 ON BULL_MKTR
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0550_04 ON BULL_MKTR
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_ROSTER_RPT
(
	BULL_CD               INTEGER
			       NOT NULL ,
	TRGT_LVL              CHAR(10)
			       NOT NULL ,
	SAR_SHORT_DESCR       CHAR(2)
			       NOT NULL ,
	CALC_TP               CHAR(20)
			       NOT NULL ,
	ANML_GRP_CD           CHAR(10)
			      ,
	LAST_DESP_DATE        DATE
			      ,
	DOSE_CNT              DECIMAL(7,2)
			      ,
	SORT_ORD              DECIMAL(7,2)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE BULL_TEAM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SMN_PRSRVTN_CD        CHAR(4)
			       NOT NULL  CONSTRAINT  C0581_01 CHECK ( SMN_PRSRVTN_CD IN ('LLL','FRZ') ),
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	TEAM_STS_CD           CHAR(1)
			       NOT NULL  CONSTRAINT  C0581_03 CHECK ( TEAM_STS_CD IN ('A', 'R', 'C') ),
	TEAM_NAME             CHAR(20)
			      
);

CREATE INDEX XIE0581_01 ON BULL_TEAM
(
	UPD_TIME             ASC
);

CREATE TABLE BULL_TEAM_ASSGN
(
	BULL_CD               INTEGER
			       NOT NULL ,
	BULL_TEAM_ID          INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	CONSTRAINT C0582_01 CHECK ( END_DATE IS NULL OR END_DATE > ST_DATE ) 
);

CREATE INDEX XIE0582_01 ON BULL_TEAM_ASSGN
(
	UPD_TIME             ASC
);

CREATE TABLE BW_PW_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	LW                    DECIMAL(5,1)
			      
);

CREATE TABLE BW_PW_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	LW                    DECIMAL(5,1)
			      
);

CREATE INDEX XIE0776_01 ON BW_PW_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE BW_PW_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	AVG_BW                DECIMAL(5,1)
			      ,
	AVG_PW                DECIMAL(5,1)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE BW_PW_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_BW                DECIMAL(5,1)
			       NOT NULL ,
	AVG_PW                DECIMAL(5,1)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE CALENDAR
(
	CAL_FULL_DATE         DATE
			       NOT NULL ,
	CAL_DAY               SMALLINT
			      ,
	CAL_DAY_NAME          CHAR(9)
			      ,
	CAL_DAY_IN_WEEK       SMALLINT
			      ,
	CAL_DAY_IN_YEAR       SMALLINT
			      ,
	CAL_WEEK              SMALLINT
			      ,
	CAL_WEEK_IN_MONTH     SMALLINT
			      ,
	CAL_MONTH             SMALLINT
			      ,
	CAL_MONTH_NAME        CHAR(9)
			      ,
	CAL_YEAR              SMALLINT
			      ,
	CAL_MONTH_YEAR        CHAR(6)
			      ,
	LAST_UPD_CAL_DAY      SMALLINT
			      ,
	FIN_FULL_DATE         DATE
			      ,
	FIN_DAY               SMALLINT
			      ,
	FIN_DAY_NAME          CHAR(9)
			      ,
	FIN_DAY_IN_WEEK       SMALLINT
			      ,
	FIN_DAY_IN_YEAR       SMALLINT
			      ,
	FIN_WEEK              SMALLINT
			      ,
	FIN_WEEK_IN_MONTH     SMALLINT
			      ,
	FIN_MONTH             SMALLINT
			      ,
	FIN_MONTH_NAME        CHAR(9)
			      ,
	FIN_YEAR              SMALLINT
			      ,
	FIN_MONTH_YEAR        CHAR(6)
			      ,
	LAST_UPD_FIN_DAY      SMALLINT
			      ,
	SSN_FULL_DATE         DATE
			      ,
	SSN_DAY               SMALLINT
			      ,
	SSN_DAY_NAME          CHAR(9)
			      ,
	SSN_DAY_IN_WEEK       SMALLINT
			      ,
	SSN_DAY_IN_YEAR       SMALLINT
			      ,
	SSN_WEEK              SMALLINT
			      ,
	SSN_WEEK_IN_MONTH     SMALLINT
			      ,
	SSN_MONTH             SMALLINT
			      ,
	SSN_MONTH_NAME        CHAR(9)
			      ,
	SSN_YEAR              SMALLINT
			      ,
	SSN_MONTH_YEAR        CHAR(6)
			      ,
	LAST_UPD_SSN_DAY      SMALLINT
			      ,
	MATING_SSN            CHAR(9)
			      ,
	SALES_SSN             CHAR(9)
			      ,
	CAL_INT_DATE          INTEGER
			       NOT NULL ,
	MTH_WEEK_ENDS         SMALLINT
			      ,
	MTH_WEEK_ENDS_NAME    CHAR(9)
			      ,
	WEEK_DESCR            CHAR(20)
			      ,
	PROCESS_DATE          DATE
			      ,
	REL_SSN_IND           SMALLINT
			      ,
	REL_CAL_YEAR_IND      SMALLINT
			      ,
	REL_FIN_YEAR_IND      SMALLINT
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE CALF_DEFECT
(
	RPRT_YR               SMALLINT
			       NOT NULL ,
	RPRT_NUM              SMALLINT
			       NOT NULL ,
	RPRT_LINE_NUM         SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SIRE_ANML_KEY         INTEGER
			       NOT NULL ,
	DEFECT_CAT_CD         CHAR(4)
			       NOT NULL ,
	DEFECT_CD             CHAR(2)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			      ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			      ,
	DAM_ANML_KEY          INTEGER
			      ,
	CLVG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CLVG_SEQ              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			      ,
	BRTH_ID_PFX           CHAR(4)
			      ,
	BRTH_ID_YR            SMALLINT
			      ,
	BRTH_ID_NUM           SMALLINT
			      ,
	VFY_IND               CHAR(1)
			       NOT NULL ,
	VFY_RSLT_CD           CHAR(2)
			      ,
	CMT                   CHAR(65)
			      ,
	CLVG_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	clvg_date             CHAR(18)
			      ,
	clvg_date_d           CHAR(18)
			      ,
	CONSTRAINT C0542_01 CHECK ( BRTH_ID_PFX IS NULL AND BRTH_ID_YR IS NULL AND BRTH_ID_NUM IS NULL OR BRTH_ID_PFX IS NOT NULL AND BRTH_ID_YR IS NOT  NULL AND BRTH_ID_NUM IS NOT NULL  ) 
);

CREATE INDEX XIE0542_03 ON CALF_DEFECT
(
	DAM_ANML_KEY         ASC,
	CLVG_DATE            ASC,
	CLVG_SEQ             ASC
);

CREATE TABLE CALF_DEFECT_ACT
(
	RPRT_YR               SMALLINT
			       NOT NULL ,
	RPRT_NUM              SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CTCT_MTHD_CD          CHAR(2)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ptpt_cd               CHAR(18)
			      ,
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0543_01 ON CALF_DEFECT_ACT
(
	PTPT_CD              ASC
);

CREATE TABLE CALF_DEFECT_RPRT
(
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcd_date              CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      
);

CREATE TABLE CALF_PURCH_COND
(
	BRTH_ID_PFX           CHAR(4)
			       NOT NULL ,
	BRTH_ID_YR            SMALLINT
			       NOT NULL ,
	BRTH_ID_NUM           SMALLINT
			       NOT NULL ,
	PURCH_COND_CD         CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RESOLVED_DATE         DATE
			      ,
	STS_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0854_01 CHECK ( STS_CD IN ('O', 'S', 'D') )
);

CREATE TABLE CALF_PURCH_COND_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CALF_PURCH_EVAL
(
	BRTH_ID_PFX           CHAR(4)
			       NOT NULL ,
	BRTH_ID_YR            SMALLINT
			       NOT NULL ,
	BRTH_ID_NUM           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	SIRE_ANML_KEY         INTEGER
			      ,
	PYMT_AUTH_CD          CHAR(1)
			      ,
	ANML_ON_FARM_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0448_02 CHECK ( ANML_ON_FARM_IND IN ('Y', 'N') ),
	STRAW_CNT             SMALLINT
			      ,
	WGT                   SMALLINT
			      ,
	WHITE_PCT             SMALLINT
			      ,
	CMT                   CHAR(50)
			      ,
	MINDA_UPD_DATE        DATE
			      ,
	INSP_BULL_ACQ_MGR_ID  INTEGER
			      ,
	PLANNED_CALF_INSP_DATE  DATE
			      ,
	PLANNED_PICK_UP_DATE  DATE
			      ,
	PURCH_ACCP_DATE       DATE
			      ,
	PLANNED_PICK_UP_PARTY_ID  INTEGER
			      ,
	BULL_FARM_ARRIVAL_DATE  DATE
			      ,
	TAG_AB_BULL_CD        INTEGER
			      ,
	RCPNT_ID              INTEGER
			      ,
	CONTRACT_PRICE        INTEGER
			      ,
	BULL_ACQ_MGR_DECISION_CD  CHAR(1)
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	bull_acq_mgr_decision_cd  CHAR(18)
			      ,
	cmt                   CHAR(18)
			      ,
	tag_ab_bull_cd        CHAR(18)
			      ,
	pymt_auth_cd          CHAR(18)
			      ,
	dam_anml_key          CHAR(18)
			      ,
	ssn                   CHAR(18)
			      ,
	num                   CHAR(18)
			      ,
	rcpnt_id              CHAR(18)
			      
);

CREATE INDEX XIE0448_02 ON CALF_PURCH_EVAL
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0448_03 ON CALF_PURCH_EVAL
(
	TAG_AB_BULL_CD       ASC
);

CREATE TABLE CALF_PURCH_EVAL_TEMP
(
	BRTH_ID_PFX           CHAR(4)
			       NOT NULL ,
	BRTH_ID_YR            SMALLINT
			       NOT NULL ,
	BRTH_ID_NUM           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	SIRE_ANML_KEY         INTEGER
			      ,
	PYMT_AUTH_CD          CHAR(1)
			      ,
	ANML_ON_FARM_IND      CHAR(1)
			       NOT NULL ,
	STRAW_CNT             SMALLINT
			      ,
	WGT                   SMALLINT
			      ,
	WHITE_PCT             SMALLINT
			      ,
	CMT                   CHAR(50)
			      ,
	MINDA_UPD_DATE        DATE
			      ,
	INSP_BULL_ACQ_MGR_ID  INTEGER
			      ,
	PLANNED_CALF_INSP_DATE  DATE
			      ,
	PLANNED_PICK_UP_DATE  DATE
			      ,
	PURCH_ACCP_DATE       DATE
			      ,
	PLANNED_PICK_UP_PARTY_ID  INTEGER
			      ,
	BULL_FARM_ARRIVAL_DATE  DATE
			      ,
	DOC_NUM               CHAR(12)
			      ,
	ET_RCPNT_ANML_KEY     INTEGER
			      ,
	TAG_AB_BULL_CD        INTEGER
			      
);

CREATE TABLE CALVING_DIFF_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			      ,
	AVG_CALVING_DIFF_BV   DECIMAL(5,1)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE CALVING_DIFF_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_CALVING_DIFF_BV   DECIMAL(5,1)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE CARCASS_CATEGORY
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL 
);

CREATE TABLE CARCASS_CLASS
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CARCASS_VALIDATION
(
	CAT_CD                CHAR(2)
			       NOT NULL ,
	CLASS_CD              CHAR(2)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	SCORE_CD              CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	sex_cd                CHAR(18)
			      
);

CREATE TABLE CATTLE_LOCUS
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(25)
			       NOT NULL ,
	LOCUS_AFFECT_CAT_CD   CHAR(1)
			      ,
	DATAMATE_MONITOR_IND  CHAR(1)
			       CONSTRAINT  C0152_01 CHECK ( DATAMATE_MONITOR_IND IN ('Y','N') )
);

CREATE INDEX XIE0152_01 ON CATTLE_LOCUS
(
	UPD_TIME             ASC
);

CREATE TABLE CD_REF
(
	COL_NAME              CHAR(40)
			       NOT NULL ,
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(150)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE CD_REF_NUM
(
	COL_NAME              CHAR(40)
			       NOT NULL ,
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(150)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE CD_REF_SYSCOLUMNS_XREF
(
	TABLE_NAME            VARCHAR(128)
			       NOT NULL ,
	COL_NAME              VARCHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CD_REF_TABLE_NAME     CHAR(30)
			       NOT NULL ,
	CD_REF_COL_NAME       CHAR(40)
			       NOT NULL 
);

CREATE TABLE CHRG_BASIS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0024_01 ON CHRG_BASIS
(
	UPD_TIME             ASC
);

CREATE TABLE CHRG_RSLV_ERR
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	REF_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ERR_CREATE_DATE       DATE
			       NOT NULL ,
	ACCT_EXTR_DATE        DATE
			      
);

CREATE TABLE CNSTR_TP
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CO_AREA
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	HERD_CNT              INTEGER
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	TRGT_HERD_CNT         INTEGER
			       NOT NULL ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0349_01 ON CO_AREA
(
	PTPT_CD              ASC
);

CREATE TABLE COL_DMN_REF
(
	CD                    CHAR(4)
			       NOT NULL  CONSTRAINT  C0177_01 CHECK ( CD IN ('STR', 'NUM', 'DATE', 'TIME', 'ENUM') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE COMP_CAT
(
	ID                    INTEGER
			       NOT NULL  CONSTRAINT  C0583_01 CHECK ( ID BETWEEN 1 AND 3 ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE COMP_LVL
(
	COMP_ID               INTEGER
			       NOT NULL ,
	LVL                   SMALLINT
			       NOT NULL  CONSTRAINT  C0584_01 CHECK ( LVL BETWEEN 1 AND 5 ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(2000)
			       NOT NULL 
);

CREATE TABLE COMP_RPRT_RQST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 6720000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	CHRG_PTPT_CD          CHAR(4)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(3)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	COPY_CNT              SMALLINT
			       NOT NULL ,
	RQRD_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	ONE_OFF_IND           DECIMAL(1)
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	ACCT_XMIT_IND         DECIMAL(1)
			       NOT NULL ,
	RPRT_CHRG_CD          CHAR(1)
			       NOT NULL ,
	DESP_INST             CHAR(10)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	CREATE_PGM_ID         CHAR(8)
			       NOT NULL ,
	PG_CNT                SMALLINT
			       NOT NULL ,
	ACT_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RPRT_ACT_CD           DECIMAL(1)
			       NOT NULL ,
	PRINT_JOB_NUM         INTEGER
			       NOT NULL ,
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	PARM                  CHAR(20)
			       NOT NULL ,
	EXT_PARM_XML          VARCHAR(30000)
			      ,
	EXTR_DATE             DATE
			      ,
	ACT_DATE_D            DATE
			      ,
	RQST_DATE_D           DATE
			      ,
	COMPLETE_IND          CHAR(1)
			       CONSTRAINT  C0531_01 CHECK ( COMPLETE_IND IN ('Y','N') ),
	LIC_ACTION_DATE       DATE
			      ,
	LIC_ACTION_USER_ID    CHAR(8)
			       DEFAULT USER,
	DISTRIBUTE_IND        CHAR(1)
			       CONSTRAINT  C0531_02 CHECK ( DISTRIBUTE_IND IN ('Y','N') ),
	LIC_ACTION            CHAR(30)
			      ,
	RPRT_ERR_RSN_CD       CHAR(4)
			      ,
	DATE_D                DATE
			      ,
	act_date              CHAR(18)
			      ,
	act_date_d            CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	date_d                CHAR(18)
			      ,
	rprt_tp_cd            CHAR(18)
			      
);

CREATE INDEX XFK0531_01 ON COMP_RPRT_RQST
(
	ANML_KEY             ASC
);

CREATE INDEX XFK0531_03 ON COMP_RPRT_RQST
(
	OUTPUT_CAT_PTPT_CD   ASC,
	OUTPUT_CAT_CD        ASC
);

CREATE INDEX XIE0531_01 ON COMP_RPRT_RQST
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	DATE                 ASC,
	TIME                 ASC
)
 CLUSTER;

CREATE INDEX XIE0531_02 ON COMP_RPRT_RQST
(
	RCPNT_PTPT_CD        ASC
);

CREATE INDEX XIE0531_03 ON COMP_RPRT_RQST
(
	COMPLETE_IND         ASC,
	DATE                 ASC,
	RPRT_TP_CD           ASC
);

CREATE INDEX XIE0531_06 ON COMP_RPRT_RQST
(
	LIC_ACTION_DATE      ASC,
	DATE                 ASC,
	RPRT_ERR_RSN_CD      ASC
);

CREATE INDEX XIE0531_07 ON COMP_RPRT_RQST
(
	EXTR_DATE            ASC
);

CREATE INDEX XIE0531_09 ON COMP_RPRT_RQST
(
	UPD_TIME             ASC
);

CREATE TABLE COMP_RPRT_RQST_LOG
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL ,
	TIME                  INTEGER
			       NOT NULL ,
	CHRG_PTPT_CD          CHAR(4)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(3)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	COPY_CNT              SMALLINT
			       NOT NULL ,
	RQRD_DATE             INTEGER
			       NOT NULL ,
	ONE_OFF_IND           DECIMAL(1)
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	ACCT_XMIT_IND         DECIMAL(1)
			       NOT NULL ,
	RPRT_CHRG_CD          CHAR(1)
			       NOT NULL ,
	DESP_INST             CHAR(10)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	CREATE_PGM_ID         CHAR(8)
			       NOT NULL ,
	PG_CNT                SMALLINT
			       NOT NULL ,
	RPRT_ACT_CD           DECIMAL(1)
			       NOT NULL ,
	PRINT_JOB_NUM         INTEGER
			       NOT NULL ,
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	PARM                  CHAR(20)
			       NOT NULL ,
	EXT_PARM_XML          VARCHAR(30000)
			      ,
	EXTR_DATE             DATE
			      ,
	ACT_DATE_D            DATE
			      ,
	RQST_DATE_D           DATE
			      ,
	COMPLETE_IND          CHAR(1)
			      ,
	LIC_ACTION_DATE       DATE
			      ,
	LIC_ACTION_USER_ID    CHAR(8)
			      ,
	DISTRIBUTE_IND        CHAR(1)
			      ,
	LIC_ACTION            CHAR(30)
			      ,
	RPRT_ERR_RSN_CD       CHAR(4)
			      ,
	DATE_D                DATE
			      
);

CREATE INDEX XIE0852_01 ON COMP_RPRT_RQST_LOG
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	DATE                 ASC,
	TIME                 ASC
)
 CLUSTER;

CREATE INDEX XIE0852_02 ON COMP_RPRT_RQST_LOG
(
	RCPNT_PTPT_CD        ASC
);

CREATE INDEX XIE0852_03 ON COMP_RPRT_RQST_LOG
(
	ID                   ASC
);

CREATE INDEX XIE0852_04 ON COMP_RPRT_RQST_LOG
(
	UPD_TIME             ASC
);

CREATE TABLE COMPETENCY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(50)
			       NOT NULL ,
	DESCR                 VARCHAR(2000)
			       NOT NULL ,
	COMP_CAT_ID           INTEGER
			       NOT NULL  CONSTRAINT  C0585_01 CHECK ( COMP_CAT_ID BETWEEN 1 AND 3 )
);

CREATE TABLE CONF_SVY
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   DECIMAL(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	INSP_PTPT_CD          CHAR(4)
			       NOT NULL ,
	TRAIT_28              CHAR(3)
			       NOT NULL ,
	TRAIT_29              CHAR(1)
			       NOT NULL ,
	TRAIT_30              CHAR(1)
			       NOT NULL ,
	TRAIT_31              CHAR(1)
			       NOT NULL ,
	TRAIT_32              CHAR(1)
			       NOT NULL ,
	TRAIT_33              CHAR(1)
			       NOT NULL ,
	TRAIT_34              CHAR(1)
			       NOT NULL ,
	TRAIT_35              CHAR(1)
			       NOT NULL ,
	TRAIT_36              CHAR(1)
			       NOT NULL ,
	TRAIT_37              CHAR(1)
			       NOT NULL ,
	TRAIT_38              CHAR(1)
			       NOT NULL ,
	TRAIT_39              CHAR(1)
			       NOT NULL ,
	TRAIT_40              CHAR(1)
			       NOT NULL ,
	TRAIT_41              CHAR(1)
			       NOT NULL ,
	TRAIT_42              CHAR(1)
			       NOT NULL ,
	TRAIT_43              CHAR(1)
			       NOT NULL ,
	TRAIT_44              CHAR(1)
			       NOT NULL ,
	TRAIT_45              CHAR(1)
			       NOT NULL ,
	TRAIT_46              CHAR(1)
			       NOT NULL ,
	TRAIT_47              CHAR(2)
			       NOT NULL ,
	TRAIT_48              CHAR(1)
			       NOT NULL ,
	TRAIT_49              CHAR(1)
			       NOT NULL ,
	TRAIT_50              CHAR(1)
			       NOT NULL ,
	CONF_CMT_CD_1         CHAR(2)
			       NOT NULL ,
	CONF_CMT_CD_2         CHAR(2)
			       NOT NULL 
);

CREATE INDEX XFK0264_02 ON CONF_SVY
(
	CONF_CMT_CD_1        ASC
);

CREATE INDEX XFK0264_03 ON CONF_SVY
(
	CONF_CMT_CD_2        ASC
);

CREATE INDEX XFK0264_04 ON CONF_SVY
(
	SV_TP_CD             ASC
);

CREATE INDEX XIE0264_03 ON CONF_SVY
(
	INSP_PTPT_CD         ASC
);

CREATE TABLE CONF_SVY_CMT
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE CONTEMPORARY_GRP
(
	NUM                   INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 4000000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	SSN_CD                DECIMAL(1)
			       NOT NULL ,
	AGE_GRP_CD            DECIMAL(1)
			       NOT NULL ,
	HERD_TEST_DATE        DATE
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	ssn_cd                CHAR(18)
			      
);

CREATE TABLE CORE_PROD
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0027_01 ON CORE_PROD
(
	UPD_TIME             ASC
);

CREATE TABLE CORE_PROD_CHRG
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	CHRG_BASIS_CD         CHAR(1)
			       NOT NULL 
);

CREATE INDEX XIE0028_01 ON CORE_PROD_CHRG
(
	UPD_TIME             ASC
);

CREATE TABLE COUNTRY
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NUM                   SMALLINT
			       NOT NULL ,
	NAME                  CHAR(25)
			       NOT NULL ,
	END_DATE              DATE
			      
);

CREATE INDEX XIE0251_01 ON COUNTRY
(
	UPD_TIME             ASC
);

CREATE TABLE CR_MTNG
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_CHRG_TP_CD       CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	CR_IND                CHAR(1)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	MTNG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	CR_RSN_CD             CHAR(1)
			       CONSTRAINT  C0025_01 CHECK ( CR_RSN_CD IN ('D','S','T','H','P','Y','C','I','X','Z','V','W', 'R') ),
	CREATE_TIME           TIMESTAMP
			      ,
	CREATE_USER_ID        CHAR(8)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0025_01 ON CR_MTNG
(
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE TABLE CR_MTNG_RSN
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0234_01 CHECK ( CD IN ('D','S','T','H','P','Y','C','I','X','Z','V','W', 'R') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CROSS_BRD
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PORTION_16TH          SMALLINT
			       NOT NULL ,
	ANML_REG_CD           DECIMAL(1)
			       NOT NULL ,
	HDBK_SECT_CD          CHAR(1)
			       NOT NULL ,
	HDBK_SECT_STS_CD      CHAR(1)
			       NOT NULL ,
	BSOC_PROC_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	FRGN_HDBK_ANML_NUM    CHAR(13)
			       NOT NULL ,
	STUD_FEE_IND          DECIMAL(1)
			       NOT NULL ,
	HDBK_VOL              CHAR(8)
			       NOT NULL ,
	FRGN_HDBK_NAME        CHAR(30)
			       NOT NULL ,
	HDBK_SECT_STS_ID      INTEGER
			      ,
	BSOC_PROC_DATE_D      DATE
			      ,
	bsoc_proc_date        CHAR(18)
			      ,
	bsoc_proc_date_d      CHAR(18)
			      ,
	anml_key              CHAR(18)
			      ,
	brd_cd                CHAR(18)
			      
);

CREATE INDEX XIE0002_01 ON CROSS_BRD
(
	BRD_CD               ASC,
	BSOC_PROC_DATE_D     ASC
);

CREATE INDEX XIE0002_02 ON CROSS_BRD
(
	BRD_CD               ASC,
	BSOC_PROC_DATE       ASC
);

CREATE INDEX XIE0002_03 ON CROSS_BRD
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0002_04 ON CROSS_BRD
(
	BRD_CD               ASC,
	ANML_REG_CD          ASC
);

CREATE TABLE CTCT_MTHD
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CURR_ANML_LOCN
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	COW_NUM_ALPHA         CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_NUM_ST_DATE      INTEGER
			       NOT NULL ,
	ANML_NUM_END_DATE     INTEGER
			       NOT NULL ,
	XFER_IN_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	XFER_OUT_DATE         INTEGER
			       NOT NULL ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(2)
			       NOT NULL ,
	EXPORT_CTRY_CD        CHAR(3)
			       NOT NULL ,
	RCD_DATE              DATE
			       DEFAULT CURRENT DATE,
	ANML_NUM_ST_DATE_D    DATE
			      ,
	ANML_NUM_END_DATE_D   DATE
			      ,
	XFER_IN_DATE_D        DATE
			       NOT NULL  DEFAULT '0001-01-01',
	XFER_OUT_DATE_D       DATE
			      ,
	anml_num_end_date     CHAR(18)
			      ,
	anml_num_end_date_d   CHAR(18)
			      ,
	anml_num_st_date      CHAR(18)
			      ,
	anml_num_st_date_d    CHAR(18)
			      ,
	xfer_in_date          CHAR(18)
			      ,
	xfer_in_date_d        CHAR(18)
			      ,
	xfer_out_date         CHAR(18)
			      ,
	xfer_out_date_d       CHAR(18)
			      ,
	anml_key              CHAR(18)
			      ,
	CONSTRAINT C0006_01 CHECK ( COW_NUM != 99999 AND COW_NUM_ALPHA = ' ' OR COW_NUM = 99999 AND COW_NUM_ALPHA = 'Z' ) 
);

CREATE INDEX XIE0006_01 ON CURR_ANML_LOCN
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	COW_NUM              ASC
);

CREATE INDEX XIE0006_02 ON CURR_ANML_LOCN
(
	UPD_TIME             ASC
);

CREATE TABLE CURR_PARTY
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(36)
			       NOT NULL ,
	FRST_NAME             CHAR(16)
			      ,
	INIT                  CHAR(10)
			      ,
	ALT_NAME              CHAR(36)
			      ,
	TITLE                 CHAR(8)
			      ,
	BRTH_DATE             DATE
			      ,
	E_MINDA_HELP_IND      CHAR(1)
			      ,
	RPRT_MED_CD           CHAR(1)
			      ,
	ACTV_IND              CHAR(1)
			       NOT NULL ,
	ACTV_IND_UPD_DATE     DATE
			      ,
	EMAIL_ADDR            CHAR(150)
			      ,
	SORT_NAME             CHAR(20)
			      ,
	GST_NUM               CHAR(11)
			      ,
	PIN                   CHAR(10)
			      ,
	PIN_UPD_DATE          DATE
			      ,
	PIN_UPD_LTR_IND       CHAR(1)
			      ,
	PIN_UPD_LTR_DATE      DATE
			      ,
	SUSP_SV_IND           CHAR(1)
			       NOT NULL ,
	INVSMATE_DISC_PCT     DECIMAL(4,2)
			       NOT NULL ,
	INVSTEST_DISC_PCT     DECIMAL(4,2)
			       NOT NULL ,
	LOGO_CD               CHAR(1)
			      ,
	SRCH_NAME             CHAR(36)
			      ,
	INET_IND              CHAR(1)
			      ,
	UPD_USER_ID           CHAR(8)
			      ,
	CTRY_CD_1             CHAR(4)
			      ,
	AREA_CD_1             CHAR(6)
			      ,
	LOCAL_NUM_1           CHAR(9)
			      ,
	EXT_1                 CHAR(4)
			      ,
	PHONE_NUM_1           CHAR(25)
			      ,
	CTRY_CD_2             CHAR(4)
			      ,
	AREA_CD_2             CHAR(6)
			      ,
	LOCAL_NUM_2           CHAR(9)
			      ,
	EXT_2                 CHAR(4)
			      ,
	PHONE_NUM_2           CHAR(25)
			      ,
	CTRY_CD_FAX           CHAR(4)
			      ,
	AREA_CD_FAX           CHAR(6)
			      ,
	LOCAL_NUM_FAX         CHAR(9)
			      ,
	EXT_FAX               CHAR(4)
			      ,
	PHONE_NUM_FAX         CHAR(25)
			      ,
	CARE_OF               CHAR(36)
			      ,
	ATTN                  CHAR(36)
			      ,
	MAIL_ADDR_LINE_1      CHAR(50)
			      ,
	MAIL_ADDR_LINE_2      CHAR(50)
			      ,
	MAIL_ADDR_LINE_3      CHAR(50)
			      ,
	MAIL_ADDR_LINE_4      CHAR(50)
			      ,
	SITE_ADDR_LINE_1      CHAR(50)
			      ,
	SITE_ADDR_LINE_2      CHAR(50)
			      ,
	SITE_ADDR_LINE_3      CHAR(50)
			      ,
	SITE_ADDR_LINE_4      CHAR(50)
			      ,
	LGL_ENTITY_CD         CHAR(1)
			      ,
	LGL_NAME              CHAR(36)
			      ,
	TRACKA_PSWD           CHAR(10)
			      ,
	TRACKA_STS_CD         CHAR(1)
			       NOT NULL  DEFAULT 'N',
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	CRM_ID                CHAR(10)
			      ,
	MAIL_ADDR_POSTCODE    CHAR(4)
			      ,
	SITE_ADDR_POSTCODE    CHAR(4)
			      ,
	SHAREHOLDER_ELIG_IND  CHAR(1)
			      ,
	LINK_ADDR_IND         CHAR(1)
			      ,
	SHAREHOLDER_ELIG_END_DATE  DATE
			      
);

CREATE INDEX XIE0253_01 ON CURR_PARTY
(
	SRCH_NAME            ASC
);

CREATE INDEX XIE0253_02 ON CURR_PARTY
(
	PIN                  ASC
);

CREATE INDEX XIE0253_03 ON CURR_PARTY
(
	LOCAL_NUM_1          ASC
);

CREATE INDEX XIE0253_04 ON CURR_PARTY
(
	LOCAL_NUM_2          ASC
);

CREATE INDEX XIE0253_05 ON CURR_PARTY
(
	LOCAL_NUM_FAX        ASC
);

CREATE TABLE CURR_PFX_USER
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	ANML_ID_PFX_CD        CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_TP_CD            CHAR(1)
			       NOT NULL 
);

CREATE INDEX XIE0254_01 ON CURR_PFX_USER
(
	ANML_ID_PFX_CD       ASC
);

CREATE TABLE CUST_PROD_CLASS
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE CUST_TRACE_PROD
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CUST_PROD_CLASS_CD    CHAR(4)
			       NOT NULL ,
	TRACE_PROD_CD         CHAR(10)
			       NOT NULL ,
	PROD_CLASS_CD         CHAR(4)
			       NOT NULL ,
	DISP_SEQ              INTEGER
			      
);

CREATE TABLE DAM_AGE_GRP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MIN_AGE               SMALLINT
			       NOT NULL ,
	MAX_AGE               SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0310_01 ON DAM_AGE_GRP
(
	ID                   ASC,
	MIN_AGE              ASC,
	MAX_AGE              ASC
);

CREATE TABLE DATA_DICT
(
	ENT_NAME              CHAR(40)
			       NOT NULL ,
	ATT_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(4000)
			      ,
	BSNS_RULE             VARCHAR(4000)
			      
);

CREATE TABLE DATAMATE_PROD
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL ,
	BRD_RESTRICT_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0646_01 CHECK ( BRD_RESTRICT_IND IN ('Y','N') ),
	FARM_EXCL_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0646_02 CHECK ( FARM_EXCL_IND IN ('Y','N') ),
	BULL_RESTRICT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0646_03 CHECK ( BULL_RESTRICT_IND IN ('Y','N') ),
	FARM_SPECIFIC_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0646_04 CHECK ( FARM_SPECIFIC_IND IN ('Y','N') )
);

CREATE TABLE DAYS_AFT_MTNG_GRP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MIN_DAYS              SMALLINT
			       NOT NULL ,
	MAX_DAYS              SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0311_01 ON DAYS_AFT_MTNG_GRP
(
	ID                   ASC,
	MIN_DAYS             ASC,
	MAX_DAYS             ASC
);

CREATE TABLE DB_TABLE_GRP
(
	GRP_CD                CHAR(4)
			       NOT NULL ,
	TABLE_NAME            VARCHAR(128)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE DB_TABLE_GRP_CLASS
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DB_TABLE_GRP_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	GRP_CLASS_CD          CHAR(4)
			      
);

CREATE TABLE DEFECT
(
	DEFECT_CAT_CD         CHAR(4)
			       NOT NULL ,
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DEFECT_CAT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DEL_ANIMAL
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL 
);

CREATE INDEX XIE0914_01 ON DEL_ANIMAL
(
	DEL_TIME             ASC
);

CREATE TABLE DEL_ANML_OWNR
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	OWNR_TP_CD            CHAR(1)
			       NOT NULL ,
	OWNR_CNT              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	INVC_NUM              INTEGER
			       NOT NULL ,
	INVC_LINE             SMALLINT
			       NOT NULL ,
	SALE_PRICE            DECIMAL(9,2)
			       NOT NULL ,
	RTND_STRAW_CNT        INTEGER
			       NOT NULL ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	XFER_RCD_DATE_D       DATE
			      
);

CREATE INDEX XIE0742_01 ON DEL_ANML_OWNR
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_BRTH_ID
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PFX                   CHAR(4)
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	RCD_DATE_D            DATE
			       NOT NULL 
);

CREATE INDEX XIE0743_01 ON DEL_BRTH_ID
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_BSOC_ANML_ID
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BSOC_PTPT_CD          CHAR(4)
			       NOT NULL ,
	HDBK_NUM              CHAR(6)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	TATTOO_CD             CHAR(8)
			       NOT NULL ,
	CONV_DATE_D           DATE
			      
);

CREATE INDEX XIE0744_01 ON DEL_BSOC_ANML_ID
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_CROSS_BRD
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	PORTION_16TH          SMALLINT
			       NOT NULL ,
	ANML_REG_CD           DECIMAL(1)
			       NOT NULL ,
	HDBK_SECT_CD          CHAR(1)
			       NOT NULL ,
	HDBK_SECT_STS_CD      CHAR(1)
			       NOT NULL ,
	FRGN_HDBK_ANML_NUM    CHAR(13)
			       NOT NULL ,
	STUD_FEE_IND          DECIMAL(1)
			       NOT NULL ,
	HDBK_VOL              CHAR(8)
			       NOT NULL ,
	FRGN_HDBK_NAME        CHAR(30)
			       NOT NULL ,
	HDBK_SECT_STS_ID      INTEGER
			      ,
	BSOC_PROC_DATE_D      DATE
			      
);

CREATE INDEX XIE0745_01 ON DEL_CROSS_BRD
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_CURR_ANML_LOCN
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	COW_NUM_ALPHA         CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(2)
			       NOT NULL ,
	EXPORT_CTRY_CD        CHAR(3)
			       NOT NULL ,
	RCD_DATE              DATE
			      ,
	ANML_NUM_ST_DATE_D    DATE
			      ,
	ANML_NUM_END_DATE_D   DATE
			      ,
	XFER_IN_DATE_D        DATE
			       NOT NULL ,
	XFER_OUT_DATE_D       DATE
			      
);

CREATE INDEX XIE0746_01 ON DEL_CURR_ANML_LOCN
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HERD_ANML
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0126_01 ON DEL_HERD_ANML
(
	DEL_TIME             ASC
);

CREATE TABLE DEL_HERD_ANML_NUM
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0127_01 ON DEL_HERD_ANML_NUM
(
	DEL_TIME             ASC
);

CREATE TABLE DEL_HERD_HT_RND
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RND_NUM               SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	VST_NUM               SMALLINT
			       NOT NULL ,
	HERD_ROLE_CD          CHAR(1)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	RQST_DATE_D           DATE
			      
);

CREATE INDEX XIE0747_01 ON DEL_HERD_HT_RND
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HERD_TEST_SV
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	HERD_DTL_RCD_DATE     INTEGER
			       NOT NULL  DEFAULT 0,
	PREF_FRST_DATE        CHAR(6)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	SSN                   SMALLINT
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HT_FREQ_CD            CHAR(1)
			       NOT NULL ,
	SCC_FREQ_CD           CHAR(1)
			       NOT NULL ,
	MILK_SMPL_MTHD_CD     DECIMAL(1)
			       NOT NULL ,
	RQRD_OFFCR_CNT        DECIMAL(1)
			       NOT NULL ,
	PD_1                  SMALLINT
			       NOT NULL ,
	PD_1_DAY              SMALLINT
			       NOT NULL ,
	PD_2                  SMALLINT
			       NOT NULL ,
	PD_2_DAY              SMALLINT
			       NOT NULL ,
	PD_3                  SMALLINT
			       NOT NULL ,
	PD_3_DAY              SMALLINT
			       NOT NULL ,
	PD_4                  SMALLINT
			       NOT NULL ,
	PD_4_DAY              SMALLINT
			       NOT NULL ,
	PD_5                  SMALLINT
			       NOT NULL ,
	PD_5_DAY              SMALLINT
			       NOT NULL ,
	PD_6                  SMALLINT
			       NOT NULL ,
	PD_6_DAY              SMALLINT
			       NOT NULL ,
	PD_7                  SMALLINT
			       NOT NULL ,
	PD_7_DAY              SMALLINT
			       NOT NULL ,
	PD_8                  SMALLINT
			       NOT NULL ,
	PD_8_DAY              SMALLINT
			       NOT NULL ,
	PD_9                  SMALLINT
			       NOT NULL ,
	PD_9_DAY              SMALLINT
			       NOT NULL ,
	PD_10                 SMALLINT
			       NOT NULL ,
	PD_10_DAY             SMALLINT
			       NOT NULL ,
	PD_11                 SMALLINT
			       NOT NULL ,
	PD_11_DAY             SMALLINT
			       NOT NULL ,
	PD_12                 SMALLINT
			       NOT NULL ,
	PD_12_DAY             SMALLINT
			       NOT NULL ,
	ALT_DATE_1_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_2_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_3_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_4_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_5_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_6_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_7_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_8_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_9_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_10_IND       DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_11_IND       DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_12_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_1_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_2_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_3_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_4_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_5_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_6_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_7_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_8_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_9_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_10_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_11_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_12_IND       DECIMAL(1)
			       NOT NULL ,
	FRST_SELF_SMPL_IND    DECIMAL(1)
			       NOT NULL ,
	VST_OPT_CD            CHAR(1)
			       NOT NULL ,
	RQRD_VST_CNT          SMALLINT
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	HERD_DTL_RCD_DATE_D   DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	ONCE_DAY_MILK_CD      CHAR(2)
			      ,
	DATA_COLLN_METHOD_CD_1  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_2  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_3  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_4  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_5  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_6  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_7  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_8  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_9  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_10  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_11  CHAR(1)
			      ,
	DATA_COLLN_METHOD_CD_12  CHAR(1)
			      ,
	USED_EZLINK_IND       CHAR(1)
			      
);

CREATE INDEX XIE0870_01 ON DEL_HERD_TEST_SV
(
	DEL_TIME             ASC
);

CREATE TABLE DEL_HERD_UPD_ERR
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	REF_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	BATCH_UPD_ERR_CD      SMALLINT
			       NOT NULL ,
	ERR_LVL_CD            DECIMAL(1)
			       NOT NULL ,
	OTH_REF_NUM           INTEGER
			       NOT NULL ,
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	DATA                  CHAR(250)
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	CREATE_DATE_D         DATE
			       NOT NULL 
);

CREATE INDEX XIE0748_01 ON DEL_HERD_UPD_ERR
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HT_RSLT
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NO_INSP_RSN_CD        SMALLINT
			       NOT NULL ,
	MILK_ABNM_CD          SMALLINT
			       NOT NULL ,
	NON_USE_RSN_CD        SMALLINT
			       NOT NULL ,
	TEST_ASSESS_STS_CD    CHAR(1)
			       NOT NULL ,
	AM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	PM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	THIRD_VOL             DECIMAL(3,1)
			       NOT NULL ,
	FAT_PCT               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PCT              DECIMAL(5,2)
			       NOT NULL ,
	LCTS_PCT              DECIMAL(5,2)
			       NOT NULL ,
	SCC                   INTEGER
			       NOT NULL ,
	PE                    SMALLINT
			       NOT NULL ,
	VALID_IND             CHAR(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL ,
	UPD_DATE_D            DATE
			      
);

CREATE INDEX XIE0749_01 ON DEL_HT_RSLT
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HT_SCHED
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	PREF_FIRST_DATE       DATE
			      ,
	END_DATE              DATE
			      ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	SERVICE_TP_CD         SMALLINT
			       NOT NULL ,
	TEST_INTERVAL         SMALLINT
			       NOT NULL ,
	FIRST_SELF_SAMPLE_IND  CHAR(1)
			       NOT NULL ,
	RQRD_VISIT_CNT        SMALLINT
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PLAN_CMT              VARCHAR(512)
			      ,
	OP_CMT                VARCHAR(512)
			      ,
	USED_EZLINK_IND       CHAR(1)
			       NOT NULL ,
	FIRST_TIME_HT_IND     CHAR(1)
			       NOT NULL ,
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	MILK_SAMPLE_METHOD_CD  DECIMAL(1)
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	HT_SMS_NOTIFY_IND     CHAR(1)
			       NOT NULL ,
	HT_SMS_CTCT_CD        CHAR(1)
			      ,
	COMBINED_HERD_IND     CHAR(1)
			       NOT NULL ,
	SHARED_DAIRY_IND      CHAR(1)
			       NOT NULL ,
	SEC_HERD_PTPT_CD      CHAR(4)
			      ,
	CUPS_2                SMALLINT
			      ,
	FARM_DAIRY_DESIGN_CD_2  CHAR(1)
			      ,
	MC_CLUSTER_CD_2       CHAR(1)
			      ,
	SPEC_TRAY_RQRMT_IND   CHAR(1)
			       NOT NULL ,
	STAFF_CNT             SMALLINT
			      ,
	PM_MILKING_ST_TIME    TIME
			      ,
	AM_MILKING_ST_TIME    TIME
			      ,
	ADD_BRACKET_CNT       SMALLINT
			      ,
	BRACKET_TP_CD         CHAR(4)
			      ,
	DAIRY_UPGRADE_IND     CHAR(1)
			       NOT NULL ,
	DAIRY_UPGRADE_DATE    DATE
			      ,
	HT_SERVICE_RATING_CD  CHAR(1)
			      ,
	HT_SERVICE_RATING_CMT  VARCHAR(250)
			      ,
	BRACKET_DELIVERY_IND  CHAR(1)
			      ,
	HT_CTCT_CD            CHAR(1)
			       NOT NULL ,
	HT_CTCT_NAME          CHAR(25)
			      ,
	HT_CTCT_PHONE_NUM     CHAR(20)
			      ,
	HT_CTCT_MOBILE_NUM    CHAR(20)
			      ,
	PREF_DATA_COLLN_METHOD_CD  CHAR(4)
			      ,
	EZLINK_UNITS          SMALLINT
			      ,
	PAPER_LABSTRIP_IND    CHAR(1)
			      ,
	MAJOR_RND_NUM         SMALLINT
			      
);

CREATE INDEX XIE0710_01 ON DEL_HT_SCHED
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HT_SCHED_VISIT
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	MILK_SAMPLE_METHOD_CD  DECIMAL(1)
			       NOT NULL ,
	STAFF_CNT             DECIMAL(2)
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			      ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	SERVICE_TP_CD         SMALLINT
			       NOT NULL ,
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	PREF_DATA_COLLN_METHOD_CD  CHAR(4)
			      ,
	EZLINK_UNITS          INTEGER
			      
);

CREATE INDEX XIE0722_01 ON DEL_HT_SCHED_VISIT
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_HT_VST
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	HT_SV_TP_CD           SMALLINT
			       NOT NULL ,
	HT_LAB_CD             CHAR(4)
			       NOT NULL ,
	UPD_IND               DECIMAL(1)
			       NOT NULL ,
	LAB_HERD_ID           CHAR(6)
			       NOT NULL ,
	SUPR_MTHD_CD          DECIMAL(1)
			       NOT NULL ,
	STAFF_CNT             DECIMAL(1)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	PD                    SMALLINT
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	RETEST_IND            DECIMAL(1)
			       NOT NULL ,
	SCC_XMIT_IND          CHAR(1)
			       NOT NULL ,
	PM_VOL                DECIMAL(7,1)
			       NOT NULL ,
	AM_VOL                DECIMAL(7,1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	THIRD_VOL             DECIMAL(7,1)
			       NOT NULL ,
	FAT                   DECIMAL(7,2)
			       NOT NULL ,
	PROT                  DECIMAL(7,2)
			       NOT NULL ,
	LCTS                  DECIMAL(7,2)
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	PM_COW_CNT            SMALLINT
			       NOT NULL ,
	AM_COW_CNT            SMALLINT
			       NOT NULL ,
	THIRD_COW_CNT         SMALLINT
			       NOT NULL ,
	HT_FREQ_CD            CHAR(1)
			      ,
	CHRG_IND              CHAR(1)
			       NOT NULL ,
	CHRG_COW_CNT          SMALLINT
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	SCC                   INTEGER
			      ,
	EXTR_DATE             DATE
			      ,
	CLVG_DATE_15_MTH      SMALLINT
			      ,
	UNRCD_CLVG_DATE       SMALLINT
			      ,
	TEST_AFT_DRY_CNT      SMALLINT
			      ,
	UNRCD_COW_CNT         SMALLINT
			      ,
	RSLTS_PROC_TIME       TIMESTAMP
			      ,
	PROC_HT_DATA_IND      CHAR(1)
			      ,
	HERD_CLVG_PCT         SMALLINT
			      ,
	TTL_SMPL_COW_CNT      INTEGER
			      ,
	TEST_DATE_D           DATE
			       NOT NULL ,
	RQST_DATE_D           DATE
			      ,
	RCD_DATE_D            DATE
			      ,
	ASSIST_MILKING_CNT    SMALLINT
			      ,
	EQUIP_USE_CD          CHAR(1)
			      
);

CREATE TABLE DEL_MATING
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MATE_ANML_KEY         INTEGER
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL ,
	INSEM_PTPT_CD         CHAR(4)
			       NOT NULL ,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	MTNG_CHRG_TP_CD       CHAR(1)
			       NOT NULL ,
	AB_ONLY_IND           CHAR(1)
			       NOT NULL ,
	CHRG_STS_CD           CHAR(1)
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	MDC_COL               DECIMAL(1)
			       NOT NULL ,
	MDC_LINE              SMALLINT
			       NOT NULL ,
	MTNG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL ,
	SMN_COLLN_DATE_D      DATE
			      ,
	UPD_DATE_D            DATE
			      
);

CREATE INDEX XIE0751_01 ON DEL_MATING
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_MDC
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DEL_RSN               CHAR(50)
			       NOT NULL  CONSTRAINT  C0235_01 CHECK ( DEL_RSN IN ('Duplicate','House Cow','Remedial Work') ),
	VAL_MDC_NUM           INTEGER
			      ,
	VAL_MDC_SSN           SMALLINT
			      ,
	CONSTRAINT C0235_02 CHECK ( VAL_MDC_NUM IS NULL AND VAL_MDC_SSN IS NULL OR VAL_MDC_NUM IS NOT NULL AND VAL_MDC_SSN IS NOT NULL  ) 
);

CREATE TABLE DEL_MDC_PAY_CLAIM
(
	TIME                  TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TECH_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TECH_TP_CD            CHAR(1)
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	INSEM_NUM             DECIMAL(1)
			       NOT NULL ,
	PAY_INSEM             SMALLINT
			       NOT NULL ,
	QRY_INSEM             SMALLINT
			       NOT NULL ,
	PREV_PAY_INSEM        SMALLINT
			       NOT NULL ,
	PREV_QRY_INSEM        SMALLINT
			       NOT NULL ,
	PAYROLL_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	PAYROLL_TIME          INTEGER
			       NOT NULL ,
	PAYROLL_STS_CD        CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	ABT_CALL_CD           CHAR(1)
			      ,
	MTNG_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PAYROLL_DATE_D        DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	mtng_date             CHAR(18)
			      ,
	mtng_date_d           CHAR(18)
			      ,
	payroll_date          CHAR(18)
			      ,
	payroll_date_d        CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0236_01 ON DEL_MDC_PAY_CLAIM
(
	TECH_PTPT_CD         ASC
);

CREATE INDEX XIE0236_02 ON DEL_MDC_PAY_CLAIM
(
	MDC_SSN              ASC,
	MDC_NUM              ASC
);

CREATE TABLE DEL_PREV_ANML_LOCN
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	COW_NUM_ALPHA         CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(2)
			       NOT NULL ,
	EXPORT_CTRY_CD        CHAR(3)
			       NOT NULL ,
	RCD_DATE              DATE
			      ,
	XFER_IN_DATE_D        DATE
			      ,
	XFER_OUT_DATE_D       DATE
			      ,
	ANML_NUM_ST_DATE_D    DATE
			      ,
	ANML_NUM_END_DATE_D   DATE
			      
);

CREATE INDEX XIE0752_01 ON DEL_PREV_ANML_LOCN
(
	DEL_TIME             ASC
)
 CLUSTER;

CREATE TABLE DEL_RPRT_RQST
(
	DEL_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CHRG_PTPT_CD          CHAR(4)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(3)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	RQRD_DATE             INTEGER
			       NOT NULL ,
	RQST_DATE             INTEGER
			       NOT NULL ,
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	ONE_OFF_IND           DECIMAL(1)
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL ,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	RPRT_CHRG_CD          CHAR(1)
			       NOT NULL ,
	PGM_ID                CHAR(8)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	COPY_CNT              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	ACCT_XMIT_IND         DECIMAL(1)
			       NOT NULL ,
	DESP_INST             CHAR(10)
			       NOT NULL ,
	PARM                  CHAR(20)
			       NOT NULL ,
	RQST_DATE_D           DATE
			       NOT NULL ,
	PRINT_DATE_D          DATE
			      ,
	SUBMIT_CD             CHAR(1)
			      ,
	ID                    INTEGER
			      
);

CREATE INDEX XIE0168_01 ON DEL_RPRT_RQST
(
	DEL_TIME             ASC,
	ID                   ASC
);

CREATE TABLE DEPARTMENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 105
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(100)
			       NOT NULL 
);

CREATE TABLE DESP_FROZEN_SMN
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	STRAW_CNT             INTEGER
			       NOT NULL ,
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	create_date           CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      
);

CREATE INDEX XFK0534_01 ON DESP_FROZEN_SMN
(
	BULL_CD              ASC
);

CREATE INDEX XIE0534_01 ON DESP_FROZEN_SMN
(
	SMN_BATCH_NUM        ASC
);

CREATE TABLE DESP_LLL_SEMEN
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 4000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DEMAND_DATE           DATE
			       NOT NULL ,
	INSEM_GRP_RGN_CD      CHAR(4)
			       NOT NULL ,
	INSEM_GRP_NUM         INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	SEMEN_BATCH_NUM       CHAR(6)
			       NOT NULL ,
	SEMEN_COLLN_YEAR      SMALLINT
			       NOT NULL  DEFAULT 0,
	DESP_DOSE_CNT         INTEGER
			       NOT NULL ,
	DESP_DATE             DATE
			       NOT NULL ,
	SEMEN_DIST_PT_NUM     SMALLINT
			       NOT NULL ,
	SEMEN_ALCN_RGN_CD     CHAR(4)
			       NOT NULL ,
	COUPON_PRINT_IND      CHAR(1)
			       NOT NULL  DEFAULT 'Y' CONSTRAINT  C0614_02 CHECK ( COUPON_PRINT_IND IN ('Y','N') ),
	COUPON_PRINT_TIME     TIMESTAMP
			      ,
	SID_PRINT_IND         CHAR(1)
			       NOT NULL  DEFAULT 'Y' CONSTRAINT  C0614_03 CHECK ( SID_PRINT_IND IN ('Y','N') ),
	SID_PRINT_TIME        TIMESTAMP
			      ,
	insem_grp_rgn_cd      CHAR(18)
			      ,
	semen_dist_pt_num     CHAR(18)
			      ,
	semen_alcn_rgn_cd     CHAR(18)
			      
);

CREATE INDEX XIE0614_01 ON DESP_LLL_SEMEN
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0614_02 ON DESP_LLL_SEMEN
(
	SEMEN_BATCH_NUM      ASC,
	SEMEN_COLLN_YEAR     ASC,
	DESP_DATE            ASC,
	INSEM_GRP_RGN_CD     ASC
);

CREATE INDEX XIE0614_03 ON DESP_LLL_SEMEN
(
	DESP_DATE            ASC
);

CREATE TABLE DF_PRODN_DTL
(
	BULL_CD               INTEGER
			       NOT NULL ,
	MKT_CD                CHAR(3)
			       NOT NULL ,
	COLLN_YEAR            SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RQRD_STRAW_CNT        INTEGER
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE DIAG_TEST
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DIAG_TEST_KIT
(
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0501_01 CHECK ( DT_CD IN ('EBL') ),
	NUM                   CHAR(7)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_KIT_PRODN_CD     CHAR(1)
			       NOT NULL ,
	TEST_WELL_CD          CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DIAG_TEST_PLATE
(
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0502_01 CHECK ( DT_CD IN ('EBL') ),
	NUM                   CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_KIT_NUM          CHAR(7)
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	POS_E4_CTRL           DECIMAL(9,3)
			       NOT NULL ,
	POS_CTRL              DECIMAL(9,3)
			       NOT NULL ,
	NEG_CTRL              DECIMAL(9,3)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0502_01 ON DIAG_TEST_PLATE
(
	DT_CD                ASC,
	TEST_KIT_NUM         ASC
);

CREATE TABLE DISP_ADDR
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ADDR_NORMLS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0104_01 CHECK ( ADDR_NORMLS_CD IN ('F','N') ),
	LINE_1                CHAR(50)
			       NOT NULL ,
	LINE_2                CHAR(50)
			      ,
	LINE_3                CHAR(50)
			      ,
	LINE_4                CHAR(50)
			      ,
	POSTCODE              CHAR(4)
			      
);

CREATE INDEX XIE0104_01 ON DISP_ADDR
(
	UPD_TIME             ASC
);

CREATE TABLE DLVRY_INST
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DM_AREA
(
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	CD                    SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	RM_AREA_CD            CHAR(2)
			       NOT NULL ,
	AVG_TECH_NRR_YRLG     SMALLINT
			       CONSTRAINT  C0376_01 CHECK ( AVG_TECH_NRR_YRLG BETWEEN 0 AND 100 ),
	AVG_TECH_NRR_COW      SMALLINT
			       CONSTRAINT  C0376_02 CHECK ( AVG_TECH_NRR_COW BETWEEN 0 AND 100 ),
	PARTY_ID              INTEGER
			       NOT NULL ,
	RM_AREA_CD_N          SMALLINT
			      GENERATED ALWAYS  NOT NULL ,
	ptpt_cd               CHAR(18)
			      ,
	CONSTRAINT SQL040614012759750 CHECK ( "RM_AREA_CD_N" =  (SMALLINT(RM_AREA_CD)) ) 
);

CREATE INDEX XFK0376_01 ON DM_AREA
(
	RM_AREA_RGN_CD       ASC,
	RM_AREA_CD_N         ASC,
	SSN                  ASC
);

CREATE INDEX XIE0376_01 ON DM_AREA
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0376_02 ON DM_AREA
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0376_03 ON DM_AREA
(
	SSN                  ASC,
	CD                   ASC
);

CREATE TABLE DMAN_LICENSEE
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COMP_BRAND            CHAR(15)
			       NOT NULL ,
	COMP_CPU_CD           CHAR(1)
			       NOT NULL ,
	COMP_MONITOR_CD       CHAR(1)
			       NOT NULL ,
	PRINT_TP_CD           CHAR(1)
			       NOT NULL ,
	DISK_SIZE             CHAR(1)
			       NOT NULL ,
	MAX_HERD_CNT          SMALLINT
			       NOT NULL ,
	EXPIRY_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	MEMORY_CD             CHAR(1)
			       NOT NULL ,
	CD_ROM_IND            CHAR(1)
			       NOT NULL ,
	FRST_SSN_IND          CHAR(1)
			       NOT NULL ,
	VET_SV_IND            CHAR(1)
			       NOT NULL ,
	DIRECTORY_IND         CHAR(1)
			       NOT NULL ,
	LICENSEE_NAME         CHAR(25)
			       NOT NULL ,
	EXPIRY_DATE_D         DATE
			      ,
	expiry_date_d         CHAR(18)
			      ,
	expiry_date           CHAR(18)
			      
);

CREATE TABLE DMATE_HERD
(
	SERIAL_NUM            CHAR(20)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                CHAR(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	HERD_OWNR_PTPT_CD     CHAR(4)
			       NOT NULL ,
	DMATE_HERD_STS_CD     CHAR(1)
			      ,
	INSEM_ST_DATE         DATE
			      ,
	INSEM_END_DATE        DATE
			      ,
	TECH_HERD_ST_DATE     DATE
			      ,
	TECH_HERD_END_DATE    DATE
			      ,
	DMATE_ANML_CNT        INTEGER
			      ,
	YRLG_ONLY_IND         CHAR(1)
			       CONSTRAINT  C0607_01 CHECK ( YRLG_ONLY_IND IN ('Y','N') ),
	PREF_BRD_LONG_ABBR    CHAR(3)
			      ,
	DEFAULT_DMATE_PROD_CD  CHAR(1)
			      ,
	HERD_RCD_IND          CHAR(1)
			       CONSTRAINT  C0607_02 CHECK ( HERD_RCD_IND IN ('Y','N') ),
	INBRD_WARN_THRESHOLD  DECIMAL(4,3)
			      ,
	dmate_herd_sts_cd     CHAR(18)
			      ,
	CONSTRAINT C0607_03 CHECK ( INSEM_ST_DATE IS NULL OR INSEM_END_DATE IS NULL OR INSEM_ST_DATE <= INSEM_END_DATE ) ,
	CONSTRAINT C0607_04 CHECK ( TECH_HERD_ST_DATE IS NULL OR TECH_HERD_END_DATE IS NULL OR TECH_HERD_ST_DATE <= TECH_HERD_END_DATE ) 
);

CREATE TABLE DMATE_SEMEN_STOCK_ITEM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HHU_SERIAL_NUM        CHAR(20)
			      ,
	SEMEN_BATCH_NUM       CHAR(6)
			      ,
	SEMEN_COLLN_YEAR      SMALLINT
			      ,
	BULL_CD               INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	STRAW_QTY             INTEGER
			       NOT NULL ,
	DMATE_PROD_CD         CHAR(1)
			       NOT NULL ,
	DESP_NUM              INTEGER
			       NOT NULL ,
	SEMEN_PRESERV_CD      CHAR(4)
			       NOT NULL ,
	LLL_EXPIRY_DATE       DATE
			      ,
	BANK_ID               CHAR(15)
			      ,
	CANISTER_NUM          INTEGER
			      ,
	GOBLET_COLOUR_CD      CHAR(2)
			      ,
	INSERT_COLOUR_CD      CHAR(2)
			      ,
	STRAW_OWNER_PTPT_CD   CHAR(4)
			      ,
	CONSTRAINT C0662_01 CHECK ( SEMEN_PRESERV_CD = 'FRZ' AND BANK_ID IS NOT NULL AND CANISTER_NUM IS NOT NULL AND GOBLET_COLOUR_CD IS NOT NULL AND LLL_EXPIRY_DATE IS NULL OR SEMEN_PRESERV_CD = 'LLL' AND BANK_ID IS NULL AND CANISTER_NUM IS NULL AND GOBLET_COLOUR_CD IS NULL AND INSERT_COLOUR_CD IS NULL AND STRAW_OWNER_PTPT_CD IS NULL AND LLL_EXPIRY_DATE IS NOT NULL ) 
);

CREATE INDEX XIE0662_01 ON DMATE_SEMEN_STOCK_ITEM
(
	HHU_SERIAL_NUM       ASC,
	BANK_ID              ASC,
	CANISTER_NUM         ASC,
	GOBLET_COLOUR_CD     ASC,
	INSERT_COLOUR_CD     ASC
);

CREATE INDEX XIE0662_02 ON DMATE_SEMEN_STOCK_ITEM
(
	SEMEN_BATCH_NUM      ASC,
	SEMEN_COLLN_YEAR     ASC
);

CREATE TABLE DMG_ENQ
(
	NUM                   INTEGER
			       NOT NULL ,
	CLNT_NUM              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CLNT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	DMG_ENQ_GRP_CD        CHAR(3)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	TERM_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TERM_TIME             INTEGER
			       NOT NULL ,
	ENQ_TERM_RSN_CD       CHAR(3)
			       NOT NULL ,
	NEXT_ENQ_NUM          INTEGER
			       NOT NULL ,
	RAISE_PTPT_CD         CHAR(4)
			       NOT NULL ,
	FOLLOW_UP_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	RESTRICT_IND          DECIMAL(1)
			       NOT NULL ,
	TERM_DATE_D           DATE
			      ,
	DATE_D                DATE
			      ,
	FOLLOW_UP_DATE_D      DATE
			      ,
	term_date             CHAR(18)
			      ,
	follow_up_date        CHAR(18)
			      ,
	follow_up_date_d      CHAR(18)
			      ,
	date_d                CHAR(18)
			      ,
	term_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0438_02 ON DMG_ENQ
(
	DMG_ENQ_GRP_CD       ASC
);

CREATE INDEX XFK0438_03 ON DMG_ENQ
(
	ENQ_TERM_RSN_CD      ASC
);

CREATE INDEX XFK0438_04 ON DMG_ENQ
(
	NEXT_ENQ_NUM         ASC
);

CREATE INDEX XIE0438_01 ON DMG_ENQ
(
	CLNT_NUM             ASC,
	TERM_DATE            ASC,
	TERM_TIME            ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE INDEX XIE0438_02 ON DMG_ENQ
(
	CLNT_PTPT_CD         ASC,
	TERM_DATE            ASC,
	TERM_TIME            ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE INDEX XIE0438_03 ON DMG_ENQ
(
	USER_ID              ASC,
	TERM_DATE            ASC,
	TERM_TIME            ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE TABLE DMG_ENQ_CAT
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE DMG_ENQ_CLASS
(
	ENQ_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ENQ_CAT_CD            CHAR(3)
			       NOT NULL 
);

CREATE INDEX XFK0440_01 ON DMG_ENQ_CLASS
(
	ENQ_CAT_CD           ASC
);

CREATE TABLE DMG_ENQ_CLNT
(
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TITLE                 CHAR(8)
			       NOT NULL ,
	INIT                  CHAR(10)
			       NOT NULL ,
	PHONE_NUM             CHAR(12)
			       NOT NULL ,
	PHONE_NUM_2           CHAR(12)
			       NOT NULL ,
	FAX_NUM               CHAR(12)
			       NOT NULL ,
	FRST_NAME             CHAR(16)
			       NOT NULL ,
	NAME                  CHAR(36)
			       NOT NULL ,
	ADDR1                 CHAR(36)
			       NOT NULL ,
	ADDR2                 CHAR(36)
			       NOT NULL ,
	ADDR3                 CHAR(36)
			       NOT NULL 
);

CREATE INDEX XIE0443_01 ON DMG_ENQ_CLNT
(
	NAME                 ASC,
	TITLE                ASC,
	INIT                 ASC
);

CREATE TABLE DMG_ENQ_CTCT
(
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ENQ_NUM               INTEGER
			       NOT NULL ,
	DEST_NUM              SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	ENQ_STS_CD            CHAR(1)
			       NOT NULL ,
	CLNT_NUM              INTEGER
			       NOT NULL ,
	CLNT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	CMT                   CHAR(60)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	TEXT                  VARCHAR(3584)
			      ,
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0442_03 ON DMG_ENQ_CTCT
(
	ENQ_STS_CD           ASC
);

CREATE INDEX XIE0442_01 ON DMG_ENQ_CTCT
(
	ENQ_NUM              ASC,
	DEST_NUM             ASC,
	NUM                  ASC
);

CREATE INDEX XIE0442_02 ON DMG_ENQ_CTCT
(
	CLNT_NUM             ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE INDEX XIE0442_03 ON DMG_ENQ_CTCT
(
	CLNT_PTPT_CD         ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE TABLE DMG_ENQ_CTCT_TEXT
(
	CTCT_NUM              INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(60)
			       NOT NULL 
);

CREATE TABLE DMG_ENQ_DEST
(
	ENQ_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DMG_ENQ_GRP_CD        CHAR(3)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ALCN_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	ALCN_TIME             INTEGER
			       NOT NULL ,
	PRIORITY              DECIMAL(1)
			       NOT NULL ,
	ACT_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ACT_TIME              INTEGER
			       NOT NULL ,
	ACT_USER_ID           CHAR(8)
			       NOT NULL ,
	ACT_DATE_D            DATE
			      ,
	ALCN_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	alcn_date             CHAR(18)
			      ,
	act_date              CHAR(18)
			      ,
	alcn_date_d           CHAR(18)
			      ,
	act_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0439_01 ON DMG_ENQ_DEST
(
	DMG_ENQ_GRP_CD       ASC
);

CREATE INDEX XIE0439_01 ON DMG_ENQ_DEST
(
	DMG_ENQ_GRP_CD       ASC,
	ACT_DATE             ASC,
	ACT_TIME             ASC
);

CREATE INDEX XIE0439_02 ON DMG_ENQ_DEST
(
	USER_ID              ASC,
	ACT_DATE             ASC,
	ACT_TIME             ASC,
	ENQ_NUM              ASC,
	NUM                  ASC
);

CREATE INDEX XIE0439_03 ON DMG_ENQ_DEST
(
	PTPT_CD              ASC
);

CREATE TABLE DMG_ENQ_GRP
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	VALID_IND             CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE DMG_ENQ_RPRT
(
	ENQ_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_CLASS_CD         CHAR(2)
			       NOT NULL 
);

CREATE INDEX XFK0457_02 ON DMG_ENQ_RPRT
(
	RPRT_CLASS_CD        ASC
);

CREATE TABLE DMG_ENQ_STS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE DMG_ENQ_TERM_RSN
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE DMG_ENQ_TEXT
(
	ENQ_NUM               INTEGER
			       NOT NULL ,
	LINE_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ENQ_LINE_CD           DECIMAL(1)
			       NOT NULL ,
	TEXT                  CHAR(70)
			       NOT NULL 
);

CREATE TABLE DNA_PRNTG_AUDIT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SIRE_ANML_KEY         INTEGER
			       NOT NULL ,
	SIRE_OFFL_CD          CHAR(1)
			       NOT NULL ,
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	DAM_OFFL_CD           CHAR(1)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	OFFL_CHNG_CD          CHAR(1)
			       NOT NULL  CONSTRAINT  C0529_01 CHECK ( OFFL_CHNG_CD IN ('T', 'D', 'R') ),
	UPD_PGM_ID            CHAR(30)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE TABLE DNA_PRNTG_TEST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_DAM_PTPT_CD      CHAR(4)
			       NOT NULL ,
	DAM_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	TEST_SIRE_PTPT_CD     CHAR(4)
			       NOT NULL ,
	SIRE_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	DAM_DATE_D            DATE
			      ,
	SIRE_DATE_D           DATE
			      ,
	sire_date             CHAR(18)
			      ,
	dam_date_d            CHAR(18)
			      ,
	dam_date              CHAR(18)
			      ,
	sire_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0536_01 ON DNA_PRNTG_TEST
(
	TEST_SIRE_PTPT_CD    ASC
);

CREATE INDEX XIE0536_02 ON DNA_PRNTG_TEST
(
	TEST_DAM_PTPT_CD     ASC
);

CREATE TABLE DNA_TEST_NTFY
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCVD_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	REF                   CHAR(20)
			       NOT NULL ,
	RCVD_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcvd_date_d           CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	rcvd_date             CHAR(18)
			      
);

CREATE TABLE DNA_TEST_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	SMPL_ID               CHAR(7)
			       NOT NULL ,
	DNA_TEST_TP_CD        CHAR(2)
			       NOT NULL ,
	CASE_NUM              INTEGER
			       NOT NULL ,
	UPD_TIME              INTEGER
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0527_02 ON DNA_TEST_RSLT
(
	DNA_TEST_TP_CD       ASC
);

CREATE TABLE DNA_TEST_TP
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DOC_ANML_EVENT
(
	DOC_ID                CHAR(12)
			       NOT NULL ,
	ANML_EVENT_CD         CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_CNT               SMALLINT
			       NOT NULL 
);

CREATE TABLE DOC_CMT
(
	DOC_ID                CHAR(12)
			       NOT NULL ,
	LINE_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL ,
	text                  CHAR(18)
			      
);

CREATE TABLE DOC_ERR
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL 
);

CREATE TABLE DOC_ID_LOCK
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LOCK_IND              CHAR(1)
			       NOT NULL ,
	ST_NUM                INTEGER
			       NOT NULL ,
	END_NUM               INTEGER
			       NOT NULL 
);

CREATE TABLE DOC_TP
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DOC_CAT_CD            CHAR(3)
			       NOT NULL ,
	DESCR                 CHAR(30)
			       NOT NULL ,
	STOP_PROC_IND         CHAR(1)
			       CONSTRAINT  C0216_01 CHECK ( STOP_PROC_IND IN ('Y', 'N') )
);

CREATE TABLE DOC_TRACKING
(
	DOC_ID                CHAR(12)
			       NOT NULL ,
	DOC_TRACKING_PT_CD    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DATE_D                DATE
			      ,
	date_d                CHAR(18)
			      
);

CREATE TABLE DOC_TRACKING_OLD
(
	DOC_ID                CHAR(12)
			       NOT NULL ,
	DOC_TRACKING_PT_CD    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DATE_D                DATE
			      
);

CREATE TABLE DOC_TRACKING_PT
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DOC_ACT_CD            CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE DOCUMENT
(
	ID                    CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DOC_TP_CD             CHAR(3)
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DOC_UPD_STS_CD        CHAR(1)
			       NOT NULL ,
	DMG_ENQ_GRP_CD        CHAR(3)
			       NOT NULL ,
	DOC_ERR_CD            SMALLINT
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	CREATE_TIME           INTEGER
			       NOT NULL ,
	CAN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCVD_FILE_XMIT_ID     CHAR(12)
			       NOT NULL ,
	HT_VST_DATE           DATE
			      ,
	RCD_CNT               INTEGER
			      ,
	SENDER_PTPT_CD        CHAR(4)
			      ,
	FILE_CREATE_TIME      TIMESTAMP
			      ,
	HR_SV_SPLR_ID         INTEGER
			      ,
	HT_SV_SPLR_ID         INTEGER
			      ,
	LIC_HT_SV_IND         CHAR(1)
			       CONSTRAINT  C0221_01 CHECK ( LIC_HT_SV_IND IN ('Y', 'N') ),
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CAN_DATE_D            DATE
			      ,
	can_date_d            CHAR(18)
			      ,
	can_date              CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      ,
	create_date           CHAR(18)
			      
);

CREATE INDEX XFK0221_03 ON DOCUMENT
(
	DMG_ENQ_GRP_CD       ASC
);

CREATE INDEX XFK0221_04 ON DOCUMENT
(
	DOC_ERR_CD           ASC
);

CREATE INDEX XFK0221_07 ON DOCUMENT
(
	RCVD_FILE_XMIT_ID    ASC
);

CREATE INDEX XIE0221_01 ON DOCUMENT
(
	DOC_TP_CD            ASC,
	DOC_UPD_STS_CD       ASC
);

CREATE INDEX XIE0221_02 ON DOCUMENT
(
	OWNR_PTPT_CD         ASC,
	MAP_REF              ASC,
	HERD_NUM             ASC,
	DOC_UPD_STS_CD       ASC
);

CREATE TABLE DOCUMENT_OLD
(
	ID                    CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DOC_TP_CD             CHAR(3)
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DOC_UPD_STS_CD        CHAR(1)
			       NOT NULL ,
	DMG_ENQ_GRP_CD        CHAR(3)
			       NOT NULL ,
	DOC_ERR_CD            SMALLINT
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	CREATE_TIME           INTEGER
			       NOT NULL ,
	CAN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCVD_FILE_XMIT_ID     CHAR(12)
			       NOT NULL ,
	HT_VST_DATE           DATE
			      ,
	RCD_CNT               INTEGER
			      ,
	SENDER_PTPT_CD        CHAR(4)
			      ,
	FILE_CREATE_TIME      TIMESTAMP
			      ,
	HR_SV_SPLR_ID         INTEGER
			      ,
	HT_SV_SPLR_ID         INTEGER
			      ,
	LIC_HT_SV_IND         CHAR(1)
			      ,
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CAN_DATE_D            DATE
			      
);

CREATE TABLE DOSE_CALC
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DEMAND_DATE           DATE
			      ,
	DESP_GRP_RGN_CD       CHAR(4)
			      ,
	DESP_GRP_NUM          INTEGER
			      ,
	RGN_CD                CHAR(4)
			      ,
	NUM                   INTEGER
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	CORE_PROD_CD          CHAR(4)
			      ,
	MTNG_SYST_CD          DECIMAL(1)
			      ,
	SMN_ALCN_RGN_ID       INTEGER
			      ,
	FRST_STG_MTNG         CHAR(1)
			      ,
	DESPATCH_DATE         DATE
			      ,
	SMN_DIST_PT_NUM       SMALLINT
			      ,
	DFLT_GRP_IND          CHAR(1)
			      ,
	AMALG_ST_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	AMALG_END_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	ALCN_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	ALCN_END_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	NC_LLL_DOSE_CNT       DECIMAL(6,2)
			      ,
	SYNC_LLL_DOSE_CNT     DECIMAL(6,2)
			      ,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	SSN                   SMALLINT
			      ,
	MTNG_PLAN_NUM         SMALLINT
			      ,
	ALCN_ST_DATE_D        DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ALCN_END_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	AMALG_ST_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	AMALG_END_DATE_D      DATE
			       NOT NULL  DEFAULT '0001-01-01',
	alcn_end_date         CHAR(18)
			      ,
	alcn_end_date_d       CHAR(18)
			      ,
	alcn_st_date          CHAR(18)
			      ,
	alcn_st_date_d        CHAR(18)
			      ,
	amalg_end_date        CHAR(18)
			      ,
	amalg_end_date_d      CHAR(18)
			      ,
	amalg_st_date         CHAR(18)
			      ,
	amalg_st_date_d       CHAR(18)
			      
);

CREATE INDEX XIE0080_01 ON DOSE_CALC
(
	DEMAND_DATE          ASC,
	DESP_GRP_RGN_CD      ASC,
	DESP_GRP_NUM         ASC,
	SIRE_MKTG_BRD_CD     ASC,
	CORE_PROD_CD         ASC,
	DESPATCH_DATE        ASC,
	MTNG_SYST_CD         ASC,
	SMN_ALCN_RGN_ID      ASC,
	FRST_STG_MTNG        ASC,
	NC_LLL_DOSE_CNT      ASC,
	SYNC_LLL_DOSE_CNT    ASC
)
 CLUSTER;

CREATE INDEX XIE0080_02 ON DOSE_CALC
(
	DEMAND_DATE          ASC,
	RGN_CD               ASC,
	NUM                  ASC,
	SIRE_MKTG_BRD_CD     ASC,
	CORE_PROD_CD         ASC,
	DESPATCH_DATE        ASC,
	MTNG_SYST_CD         ASC,
	SMN_ALCN_RGN_ID      ASC,
	FRST_STG_MTNG        ASC,
	NC_LLL_DOSE_CNT      ASC,
	SYNC_LLL_DOSE_CNT    ASC
);

CREATE INDEX XIE0080_03 ON DOSE_CALC
(
	MAP_REF              ASC,
	MTNG_SYST_CD         ASC,
	HERD_NUM             ASC,
	DESPATCH_DATE        ASC,
	SSN                  ASC,
	MTNG_PLAN_NUM        ASC
);

CREATE TABLE DRUG_PRIM_USE
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE DRY_COY
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_SSN                SMALLINT
			       NOT NULL ,
	END_SSN               SMALLINT
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PARTY_ID              INTEGER
			      ,
	ptpt_cd               CHAR(18)
			      
);

CREATE INDEX XIE0100_01 ON DRY_COY
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0100_02 ON DRY_COY
(
	UPD_TIME             ASC
);

CREATE TABLE DTL_LVL_REF
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0178_01 CHECK ( CD IN ('H', 'A') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE E_EXCHANGE_FMT_TP_REF
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE E_EXCHANGE_RCD_TP_REF
(
	E_EXCHANGE_FMT_TP_CD  CHAR(2)
			       NOT NULL ,
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE E_MINDA_OPT
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE E_MINDA_ORD
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	E_MINDA_OPT_CD        CHAR(3)
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CAN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RQST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CAN_DATE_D            DATE
			      ,
	can_date_d            CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      ,
	can_date              CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0522_01 ON E_MINDA_ORD
(
	E_MINDA_OPT_CD       ASC
);

CREATE INDEX XIE0522_01 ON E_MINDA_ORD
(
	RCPNT_PTPT_CD        ASC,
	SSN                  ASC
);

CREATE TABLE E_REG_EXCL
(
	REG_RQST_ID           INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE E_REG_RQST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MEMB_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	CREATE_DATE           DATE
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	MEMB_ST_DATE          DATE
			       NOT NULL ,
	RUN_OPT               CHAR(1)
			       NOT NULL  CONSTRAINT  C0350_01 CHECK ( RUN_OPT IN ('U', 'W') ),
	ST_BRTH_DATE          DATE
			      ,
	END_BRTH_DATE         DATE
			      ,
	REG_BRD_CD            CHAR(2)
			       NOT NULL ,
	MIN_16THS             SMALLINT
			       NOT NULL ,
	SUBM_DATE             DATE
			      ,
	PROC_DATE             DATE
			      ,
	DEL_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0350_02 CHECK ( DEL_IND IN ('Y', 'N') ),
	YNG_PED_CNT           SMALLINT
			      ,
	YNG_S3_CNT            SMALLINT
			      ,
	YNG_S2_CNT            SMALLINT
			      ,
	YNG_S1_CNT            SMALLINT
			      ,
	YNG_S0_CNT            SMALLINT
			      ,
	YNG_UNREG_CNT         SMALLINT
			      ,
	PED_CNT               SMALLINT
			      ,
	S3_CNT                SMALLINT
			      ,
	S2_CNT                SMALLINT
			      ,
	S1_CNT                SMALLINT
			      ,
	S0_CNT                SMALLINT
			      ,
	UNREG_CNT             SMALLINT
			      ,
	SEL_OPT_CD            CHAR(1)
			       CONSTRAINT  C0350_03 CHECK ( SEL_OPT_CD IN ('W', 'A', 'I') ),
	CONSTRAINT C0350_04 CHECK ( DEL_IND = 'N' OR PROC_DATE IS NULL ) ,
	CONSTRAINT C0350_05 CHECK ( PROC_DATE IS NULL OR PROC_DATE >= SUBM_DATE ) ,
	CONSTRAINT C0350_06 CHECK ( ST_BRTH_DATE IS NULL AND END_BRTH_DATE IS NULL OR ST_BRTH_DATE IS NOT NULL AND END_BRTH_DATE IS NOT NULL AND ST_BRTH_DATE <= END_BRTH_DATE  ) 
);

CREATE INDEX XIE0350_01 ON E_REG_RQST
(
	MEMB_PTPT_CD         ASC,
	ORG_PTPT_CD          ASC,
	MEMB_ST_DATE         ASC
)
 CLUSTER;

CREATE TABLE E_REG_RQST_ANML
(
	E_REG_RQST_ID         INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE ELECTRONIC_ID
(
	EID                   CHAR(16)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	REUSE_IND             CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0771_02 CHECK ( REUSE_IND IN ('Y', 'N') ),
	ANML_KEY              INTEGER
			       NOT NULL ,
	END_DATE              DATE
			      ,
	anml_key              CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	eid                   CHAR(18)
			      ,
	CONSTRAINT C0771_01 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE TABLE EMBRYO_RCPNT
(
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XIE0326_01 ON EMBRYO_RCPNT
(
	UPD_TIME             ASC
);

CREATE TABLE EMBRYO_SIRE
(
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	SIRE_ANML_KEY         INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XIE0654_01 ON EMBRYO_SIRE
(
	UPD_TIME             ASC
);

CREATE TABLE EMBRYO_XFER
(
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EMBRYO_BSNS_REF       CHAR(12)
			       NOT NULL ,
	DONOR_ANML_KEY        INTEGER
			       NOT NULL ,
	IVP_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0327_01 CHECK ( IVP_IND IN ('Y', 'N') ),
	INSEM_DATE            DATE
			       NOT NULL ,
	RCVRY_DATE            DATE
			       NOT NULL ,
	IMPLANT_DATE          DATE
			       NOT NULL ,
	TTL_XFER              SMALLINT
			       NOT NULL ,
	TECH_PTPT_CD          CHAR(4)
			      ,
	OWNR_PTPT_CD          CHAR(4)
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	tech_ptpt_cd          CHAR(18)
			      ,
	ownr_ptpt_cd          CHAR(18)
			      ,
	CONSTRAINT C0327_02 CHECK ( IMPLANT_DATE >= RCVRY_DATE ) ,
	CONSTRAINT C0327_03 CHECK ( RCVRY_DATE >= INSEM_DATE ) 
);

CREATE INDEX XIE0327_02 ON EMBRYO_XFER
(
	TECH_PTPT_CD         ASC
);

CREATE INDEX XIE0327_03 ON EMBRYO_XFER
(
	OWNR_PTPT_CD         ASC
);

CREATE TABLE EMPL_COMP
(
	EMPL_NO               INTEGER
			       NOT NULL ,
	COMP_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RATING                SMALLINT
			       NOT NULL  CONSTRAINT  C0587_01 CHECK ( RATING BETWEEN 1 AND 5 )
);

CREATE TABLE EMPL_POSN
(
	EMPL_NO               INTEGER
			       NOT NULL ,
	DEPT_ID               INTEGER
			       NOT NULL ,
	POSN_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE EMPL_ROLE
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	EMPL_ROLE_CD          CHAR(3)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	DM_PTPT_CD            CHAR(4)
			       NOT NULL ,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	EMPL_ROLE_STS_CD      CHAR(1)
			       NOT NULL ,
	DAILY_UNITS_PAID      DECIMAL(5,2)
			       NOT NULL ,
	RABOM_CD              SMALLINT
			      ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      
);

CREATE INDEX XIE0374_01 ON EMPL_ROLE
(
	DM_AREA_CD           ASC
);

CREATE INDEX XIE0374_02 ON EMPL_ROLE
(
	DM_PTPT_CD           ASC
);

CREATE INDEX XIE0374_03 ON EMPL_ROLE
(
	UPD_TIME             ASC
);

CREATE TABLE EMPL_SUPR
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	KM                    SMALLINT
			       NOT NULL ,
	CASE_PASS_IND         CHAR(1)
			       NOT NULL ,
	MDC_PASS_IND          CHAR(1)
			       NOT NULL ,
	HAND_PASS_IND         CHAR(1)
			       NOT NULL ,
	PLUNGER_PASS_IND      CHAR(1)
			       NOT NULL ,
	HERD_CNT              SMALLINT
			       NOT NULL ,
	INSEM_CNT             SMALLINT
			       NOT NULL ,
	INSEM_OK_CNT          SMALLINT
			       NOT NULL ,
	DIY_HERD_CNT          SMALLINT
			       NOT NULL ,
	RE_VST_RQRD_IND       CHAR(1)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	CASE_CMT              CHAR(55)
			       NOT NULL ,
	MDC_CMT               CHAR(55)
			       NOT NULL ,
	HAND_CMT              CHAR(55)
			       NOT NULL ,
	PLUNGER_CMT           CHAR(55)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0377_01 ON EMPL_SUPR
(
	PTPT_CD              ASC,
	SSN                  ASC
);

CREATE TABLE EMPL_USER_ID
(
	EMPL_NO               INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE EMPLOYEE
(
	EMPL_NO               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SURNAME               CHAR(50)
			       NOT NULL ,
	FRST_NAME             CHAR(50)
			       NOT NULL ,
	ST_DATE               DATE
			      ,
	END_DATE              DATE
			      
);

CREATE TABLE EXCLUDED_SPS_COW
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	CONSTRAINT C0773_01 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE TABLE EXPLAIN_ARGUMENT
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	OPERATOR_ID           INTEGER
			       NOT NULL ,
	ARGUMENT_TYPE         CHAR(8)
			       NOT NULL ,
	ARGUMENT_VALUE        VARCHAR(1024)
			      ,
	LONG_ARGUMENT_VALUE   CLOB(1048576)
			      
);

CREATE TABLE EXPLAIN_INSTANCE
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_OPTION        CHAR(1)
			       NOT NULL ,
	SNAPSHOT_TAKEN        CHAR(1)
			       NOT NULL ,
	DB2_VERSION           CHAR(7)
			       NOT NULL ,
	SQL_TYPE              CHAR(1)
			       NOT NULL ,
	QUERYOPT              INTEGER
			       NOT NULL ,
	BLOCK                 CHAR(1)
			       NOT NULL ,
	ISOLATION             CHAR(2)
			       NOT NULL ,
	BUFFPAGE              INTEGER
			       NOT NULL ,
	AVG_APPLS             INTEGER
			       NOT NULL ,
	SORTHEAP              INTEGER
			       NOT NULL ,
	LOCKLIST              INTEGER
			       NOT NULL ,
	MAXLOCKS              SMALLINT
			       NOT NULL ,
	LOCKS_AVAIL           INTEGER
			       NOT NULL ,
	CPU_SPEED             DOUBLE
			       NOT NULL ,
	REMARKS               VARCHAR(254)
			      ,
	DBHEAP                INTEGER
			       NOT NULL ,
	COMM_SPEED            DOUBLE
			       NOT NULL ,
	PARALLELISM           CHAR(2)
			       NOT NULL ,
	DATAJOINER            CHAR(1)
			       NOT NULL 
);

CREATE TABLE EXPLAIN_OBJECT
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	OBJECT_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	OBJECT_NAME           VARCHAR(128)
			       NOT NULL ,
	OBJECT_TYPE           CHAR(2)
			       NOT NULL ,
	CREATE_TIME           TIMESTAMP
			      ,
	STATISTICS_TIME       TIMESTAMP
			      ,
	COLUMN_COUNT          SMALLINT
			       NOT NULL ,
	ROW_COUNT             BIGINT
			       NOT NULL ,
	WIDTH                 INTEGER
			       NOT NULL ,
	PAGES                 INTEGER
			       NOT NULL ,
	DISTINCT              CHAR(1)
			       NOT NULL ,
	TABLESPACE_NAME       VARCHAR(128)
			      ,
	OVERHEAD              DOUBLE
			       NOT NULL ,
	TRANSFER_RATE         DOUBLE
			       NOT NULL ,
	PREFETCHSIZE          INTEGER
			       NOT NULL ,
	EXTENTSIZE            INTEGER
			       NOT NULL ,
	CLUSTER               DOUBLE
			       NOT NULL ,
	NLEAF                 INTEGER
			       NOT NULL ,
	NLEVELS               INTEGER
			       NOT NULL ,
	FULLKEYCARD           BIGINT
			       NOT NULL ,
	OVERFLOW              INTEGER
			       NOT NULL ,
	FIRSTKEYCARD          BIGINT
			       NOT NULL ,
	FIRST2KEYCARD         BIGINT
			       NOT NULL ,
	FIRST3KEYCARD         BIGINT
			       NOT NULL ,
	FIRST4KEYCARD         BIGINT
			       NOT NULL ,
	SEQUENTIAL_PAGES      INTEGER
			       NOT NULL ,
	DENSITY               INTEGER
			       NOT NULL ,
	STATS_SRC             CHAR(1)
			       NOT NULL ,
	AVERAGE_SEQUENCE_GAP  DOUBLE
			       NOT NULL ,
	AVERAGE_SEQUENCE_FETCH_GAP  DOUBLE
			       NOT NULL ,
	AVERAGE_SEQUENCE_PAGES  DOUBLE
			       NOT NULL ,
	AVERAGE_SEQUENCE_FETCH_PAGES  DOUBLE
			       NOT NULL ,
	AVERAGE_RANDOM_PAGES  DOUBLE
			       NOT NULL ,
	AVERAGE_RANDOM_FETCH_PAGES  DOUBLE
			       NOT NULL ,
	NUMRIDS               BIGINT
			       NOT NULL ,
	NUMRIDS_DELETED       BIGINT
			       NOT NULL ,
	NUM_EMPTY_LEAFS       BIGINT
			       NOT NULL ,
	ACTIVE_BLOCKS         BIGINT
			       NOT NULL 
);

CREATE TABLE EXPLAIN_OPERATOR
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	OPERATOR_ID           INTEGER
			       NOT NULL ,
	OPERATOR_TYPE         CHAR(6)
			       NOT NULL ,
	TOTAL_COST            DOUBLE
			       NOT NULL ,
	IO_COST               DOUBLE
			       NOT NULL ,
	CPU_COST              DOUBLE
			       NOT NULL ,
	FIRST_ROW_COST        DOUBLE
			       NOT NULL ,
	RE_TOTAL_COST         DOUBLE
			       NOT NULL ,
	RE_IO_COST            DOUBLE
			       NOT NULL ,
	RE_CPU_COST           DOUBLE
			       NOT NULL ,
	COMM_COST             DOUBLE
			       NOT NULL ,
	FIRST_COMM_COST       DOUBLE
			       NOT NULL ,
	BUFFERS               DOUBLE
			       NOT NULL ,
	REMOTE_TOTAL_COST     DOUBLE
			       NOT NULL ,
	REMOTE_COMM_COST      DOUBLE
			       NOT NULL 
);

CREATE TABLE EXPLAIN_PREDICATE
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	OPERATOR_ID           INTEGER
			       NOT NULL ,
	PREDICATE_ID          INTEGER
			       NOT NULL ,
	HOW_APPLIED           CHAR(5)
			       NOT NULL ,
	WHEN_EVALUATED        CHAR(3)
			       NOT NULL ,
	RELOP_TYPE            CHAR(2)
			       NOT NULL ,
	SUBQUERY              CHAR(1)
			       NOT NULL ,
	FILTER_FACTOR         DOUBLE
			       NOT NULL ,
	PREDICATE_TEXT        CLOB(1048576)
			      
);

CREATE TABLE EXPLAIN_STATEMENT
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	QUERYNO               INTEGER
			       NOT NULL ,
	QUERYTAG              CHAR(20)
			       NOT NULL ,
	STATEMENT_TYPE        CHAR(2)
			       NOT NULL ,
	UPDATABLE             CHAR(1)
			       NOT NULL ,
	DELETABLE             CHAR(1)
			       NOT NULL ,
	TOTAL_COST            DOUBLE
			       NOT NULL ,
	STATEMENT_TEXT        CLOB(1048576)
			       NOT NULL ,
	SNAPSHOT              BLOB(10485760)
			      ,
	QUERY_DEGREE          INTEGER
			       NOT NULL 
);

CREATE TABLE EXPLAIN_STREAM
(
	EXPLAIN_REQUESTER     VARCHAR(128)
			       NOT NULL ,
	EXPLAIN_TIME          TIMESTAMP
			       NOT NULL ,
	SOURCE_NAME           VARCHAR(128)
			       NOT NULL ,
	SOURCE_SCHEMA         VARCHAR(128)
			       NOT NULL ,
	SOURCE_VERSION        VARCHAR(64)
			       NOT NULL ,
	EXPLAIN_LEVEL         CHAR(1)
			       NOT NULL ,
	STMTNO                INTEGER
			       NOT NULL ,
	SECTNO                INTEGER
			       NOT NULL ,
	STREAM_ID             INTEGER
			       NOT NULL ,
	SOURCE_TYPE           CHAR(1)
			       NOT NULL ,
	SOURCE_ID             INTEGER
			       NOT NULL ,
	TARGET_TYPE           CHAR(1)
			       NOT NULL ,
	TARGET_ID             INTEGER
			       NOT NULL ,
	OBJECT_SCHEMA         VARCHAR(128)
			      ,
	OBJECT_NAME           VARCHAR(128)
			      ,
	STREAM_COUNT          DOUBLE
			       NOT NULL ,
	COLUMN_COUNT          SMALLINT
			       NOT NULL ,
	PREDICATE_ID          INTEGER
			       NOT NULL ,
	COLUMN_NAMES          CLOB(1048576)
			      ,
	PMID                  SMALLINT
			       NOT NULL ,
	SINGLE_NODE           CHAR(5)
			      ,
	PARTITION_COLUMNS     CLOB(1048576)
			      
);

CREATE TABLE EZ_LINK_ANML_MILK_SAMPLE_FLASK
(
	RGN_CD                SMALLINT
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	EZ_LINK_SERIAL_NUM    CHAR(20)
			       NOT NULL ,
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			      ,
	TAG_NUM               INTEGER
			       NOT NULL ,
	USER_ENTERED_BIRTH_ID_PFX  CHAR(4)
			      ,
	USER_ENTERED_BIRTH_ID_YR  INTEGER
			      ,
	USER_ENTERED_BIRTH_ID_NUM  INTEGER
			      ,
	USER_ENTERED_EID      CHAR(16)
			      ,
	FLASK_ID              INTEGER
			      ,
	BALE_NUM              SMALLINT
			      ,
	SESS_NUM              SMALLINT
			      ,
	MILK_ABNORMAL_CD      SMALLINT
			      ,
	OAD_CD                SMALLINT
			      ,
	OVERFLOW_FLASK_IND    DECIMAL(1)
			      ,
	SAMPLE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE EZ_LINK_APPL_EXCEPT_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TIME                  TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SERIAL_NUM            CHAR(20)
			       NOT NULL ,
	EXCEPT_CD             CHAR(10)
			       NOT NULL ,
	EXCEPT_DTL            VARCHAR(1024)
			      
);

CREATE TABLE EZ_LINK_EXCEPT_REF
(
	CD                    CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE EZ_LINK_FARM_VISIT
(
	RGN_CD                SMALLINT
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	EZ_LINK_SERIAL_NUM    CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              INTEGER
			      ,
	HERD_NAME             CHAR(36)
			      ,
	ANML_ID_PFX_CD        CHAR(4)
			      ,
	PREV_MILKING_ST_TIME  TIMESTAMP
			       NOT NULL ,
	FIRST_MILKING_ST_TIME  TIMESTAMP
			       NOT NULL ,
	SEC_MILKING_ST_TIME   TIMESTAMP
			      ,
	HHU_CNT               SMALLINT
			      ,
	ASSIST_MILKING_CNT    INTEGER
			      ,
	LABOUR_UNIT_CNT       INTEGER
			      ,
	OPERATOR_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	PGM_NAME              CHAR(20)
			       NOT NULL ,
	PGM_VERSION           CHAR(20)
			       NOT NULL ,
	STS_CD                CHAR(1)
			       NOT NULL ,
	WEIGH_STATION_ID      INTEGER
			      ,
	HT_DEPOT_ID           INTEGER
			      ,
	NOZZLE_ID             SMALLINT
			      ,
	SPECIES_CD            CHAR(1)
			      ,
	TEST_TP_ID            SMALLINT
			      ,
	sts_cd                CHAR(18)
			      ,
	test_tp_id            CHAR(18)
			      
);

CREATE INDEX XIE0611_01 ON EZ_LINK_FARM_VISIT
(
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE INDEX XIE0611_02 ON EZ_LINK_FARM_VISIT
(
	UPD_TIME             ASC
);

CREATE TABLE FARM_ACTY
(
	CD                    CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(50)
			       NOT NULL ,
	DESCR                 CHAR(150)
			       NOT NULL 
);

CREATE TABLE FAT_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	FAT_BV_NZ             DECIMAL(5,2)
			      ,
	FAT_BV_REL_NZ         DECIMAL(3,1)
			      ,
	FAT_BV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_PV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_LV                DECIMAL(5,1)
			      ,
	BV_PCT                DECIMAL(5,1)
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	FULL_MODEL_FAT_BV     DECIMAL(5,2)
			      ,
	FULL_MODEL_FAT_BV_REL  DECIMAL(3,1)
			      ,
	FULL_MODEL_FAT_PV     DECIMAL(5,2)
			      ,
	FULL_MODEL_FAT_PV_REL  DECIMAL(3,1)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,3)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE TABLE FAT_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FAT_BV_NZ             DECIMAL(5,2)
			      ,
	FAT_BV_REL_NZ         DECIMAL(3,1)
			      ,
	FAT_BV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_PV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_LV                DECIMAL(5,1)
			      ,
	BV_PCT                DECIMAL(5,1)
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,3)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE INDEX XIE0780_01 ON FAT_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE FAT_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_PW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_LW           DECIMAL(6,4)
			      ,
	AVG_FAT_BV            DECIMAL(5,2)
			      ,
	AVG_FAT_PV            DECIMAL(5,2)
			      ,
	AVG_FAT_BV_NZ         DECIMAL(5,2)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE FAT_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_FAT_BV            DECIMAL(5,2)
			      ,
	AVG_FAT_PV            DECIMAL(5,2)
			       NOT NULL ,
	AVG_FAT_BV_NZ         DECIMAL(5,2)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE FATE_CAUSE
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(35)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      ,
	SPS_REBATE_IND        CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0179_01 CHECK ( SPS_REBATE_IND IN ('Y','N') ),
	SEX_CD                CHAR(1)
			      ,
	BULL_FARM_IND         CHAR(1)
			       CONSTRAINT  C0179_02 CHECK ( BULL_FARM_IND in ('Y','N') ),
	sex_cd                CHAR(18)
			      
);

CREATE INDEX XIE0179_01 ON FATE_CAUSE
(
	UPD_TIME             ASC
);

CREATE TABLE FEMALE_REPROD_STS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	OBS_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OBS_MTHD_CD           DECIMAL(1)
			       NOT NULL ,
	ASSESS_PTPT_CD        CHAR(4)
			       NOT NULL ,
	REPROD_STS_CD         DECIMAL(1)
			       NOT NULL ,
	PREGNANCY_DAYS_CNT    SMALLINT
			      ,
	OBS_DATE_D            DATE
			       NOT NULL ,
	FOETUS_CNT            SMALLINT
			      ,
	OBS_CD                CHAR(1)
			      ,
	OBS_CMT_CD            CHAR(2)
			      ,
	obs_cmt_cd            CHAR(18)
			      ,
	obs_date              CHAR(18)
			      ,
	obs_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0019_01 ON FEMALE_REPROD_STS
(
	ASSESS_PTPT_CD       ASC
);

CREATE TABLE FERT_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FERT_BV               DECIMAL(5,1)
			       NOT NULL ,
	FERT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	FERT_DTR_CNT_ALL      INTEGER
			      ,
	FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	FERT_BV_NZ            DECIMAL(5,1)
			      ,
	FERT_BV_REL_NZ        DECIMAL(3,1)
			      ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	HERD_CNT              INTEGER
			      ,
	PM21_FERT_BV          DECIMAL(5,1)
			      ,
	PM21_FERT_BV_REL      DECIMAL(3,1)
			      ,
	PM21_EFF_DTR_CONTRIB  INTEGER
			      ,
	PM21_FERT_DTR_CNT_ALL  INTEGER
			      ,
	PM21_FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	PM21_FERT_BV_NZ       DECIMAL(5,1)
			      ,
	PM21_FERT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	PM21_HERD_CNT         INTEGER
			      ,
	HFR_FERT_BV           DECIMAL(5,1)
			      ,
	HFR_FERT_BV_REL       DECIMAL(3,1)
			      ,
	HFR_EFF_DTR_CONTRIB   INTEGER
			      ,
	HFR_FERT_DTR_CNT_ALL  INTEGER
			      ,
	HFR_FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	HFR_FERT_BV_NZ        DECIMAL(5,1)
			      ,
	HFR_FERT_BV_REL_NZ    DECIMAL(3,1)
			      ,
	HFR_HERD_CNT          INTEGER
			      
);

CREATE TABLE FERT_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FERT_BV               DECIMAL(5,1)
			       NOT NULL ,
	FERT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	FERT_DTR_CNT_ALL      INTEGER
			      ,
	FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	EXTR_DATE             DATE
			       NOT NULL ,
	FERT_BV_NZ            DECIMAL(5,1)
			      ,
	FERT_BV_REL_NZ        DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	PM21_FERT_BV          DECIMAL(5,1)
			      ,
	PM21_FERT_BV_REL      DECIMAL(3,1)
			      ,
	PM21_EFF_DTR_CONTRIB  INTEGER
			      ,
	PM21_FERT_DTR_CNT_ALL  INTEGER
			      ,
	PM21_FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	PM21_FERT_BV_NZ       DECIMAL(5,1)
			      ,
	PM21_FERT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	PM21_HERD_CNT         INTEGER
			      ,
	HFR_FERT_BV           DECIMAL(5,1)
			      ,
	HFR_FERT_BV_REL       DECIMAL(3,1)
			      ,
	HFR_EFF_DTR_CONTRIB   INTEGER
			      ,
	HFR_FERT_DTR_CNT_ALL  INTEGER
			      ,
	HFR_FERT_DTR_CNT_CLVG_RATE  INTEGER
			      ,
	HFR_FERT_BV_NZ        DECIMAL(5,1)
			      ,
	HFR_FERT_BV_REL_NZ    DECIMAL(3,1)
			      ,
	HFR_HERD_CNT          INTEGER
			      
);

CREATE INDEX XIE0159_01 ON FERT_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE FERT_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	AVG_FERT_BV           DECIMAL(5,1)
			      ,
	ANML_CNT              INTEGER
			      ,
	AVG_FERT_BV_NZ        DECIMAL(5,1)
			      
);

CREATE TABLE FERT_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_FERT_BV           DECIMAL(5,1)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	AVG_FERT_BV_NZ        DECIMAL(5,1)
			       NOT NULL 
);

CREATE TABLE FR_74_77_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_52              CHAR(1)
			       NOT NULL ,
	TRAIT_61              CHAR(1)
			       NOT NULL ,
	TRAIT_62              CHAR(1)
			       NOT NULL ,
	TRAIT_63              CHAR(1)
			       NOT NULL ,
	TRAIT_64              CHAR(1)
			       NOT NULL ,
	TRAIT_65              CHAR(1)
			       NOT NULL ,
	TRAIT_66              CHAR(1)
			       NOT NULL ,
	TRAIT_67              CHAR(1)
			       NOT NULL 
);

CREATE TABLE FR_JNR_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	TRAIT_52              CHAR(1)
			       NOT NULL ,
	TRAIT_53              CHAR(1)
			       NOT NULL ,
	TRAIT_54              CHAR(1)
			       NOT NULL ,
	TRAIT_55              CHAR(1)
			       NOT NULL ,
	TRAIT_56              CHAR(1)
			       NOT NULL ,
	TRAIT_57              CHAR(1)
			       NOT NULL ,
	TRAIT_58              CHAR(1)
			       NOT NULL ,
	TRAIT_59              CHAR(1)
			       NOT NULL ,
	TRAIT_60              CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE FR_SNR_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_52              CHAR(1)
			       NOT NULL ,
	TRAIT_61              CHAR(1)
			       NOT NULL ,
	TRAIT_62              CHAR(1)
			       NOT NULL ,
	TRAIT_63              CHAR(1)
			       NOT NULL ,
	TRAIT_64              CHAR(1)
			       NOT NULL ,
	TRAIT_65              CHAR(1)
			       NOT NULL ,
	TRAIT_66              CHAR(1)
			       NOT NULL ,
	TRAIT_67              CHAR(1)
			       NOT NULL ,
	TRAIT_68              CHAR(1)
			       NOT NULL 
);

CREATE TABLE FRZ_USE_CTRL
(
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			       NOT NULL ,
	PCT_ADJ               DECIMAL(3,1)
			       NOT NULL  CONSTRAINT  C0084_01 CHECK ( PCT_ADJ >= 0.0 ),
	CONSTRAINT C0084_02 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE TABLE FUTR_MTNG_PLAN_DTL
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	EFF_DATE              DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_CNT              SMALLINT
			      ,
	MKTG_BRD_CD           CHAR(2)
			      ,
	CORE_PROD_CD          CHAR(4)
			      ,
	CONSTRAINT C0032_01 CHECK ( MKTG_BRD_CD IS NOT NULL OR ANML_CNT IS NOT NULL  ) 
);

CREATE TABLE GEO_AREA
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GEO_AREA_TP_CD        CHAR(4)
			       NOT NULL  CONSTRAINT  C0060_01 CHECK ( GEO_AREA_TP_CD IN ('CTRY', 'PDST', 'PLCE', 'RGN ', 'SBRB', 'STR', 'SAR', 'MCNT', 'FRGN', 'NISL', 'SRGN', 'PROV') ),
	DESCR                 CHAR(50)
			       NOT NULL ,
	SHORT_DESCR           CHAR(4)
			      ,
	SRCH_DESCR            CHAR(50)
			       WITH DEFAULT,
	descr                 CHAR(18)
			      
);

CREATE INDEX XIE0060_01 ON GEO_AREA
(
	DESCR                ASC
);

CREATE INDEX XIE0060_02 ON GEO_AREA
(
	GEO_AREA_TP_CD       ASC,
	SHORT_DESCR          ASC
);

CREATE INDEX XIE0060_03 ON GEO_AREA
(
	SRCH_DESCR           ASC
);

CREATE INDEX XIE0060_04 ON GEO_AREA
(
	UPD_TIME             ASC
);

CREATE TABLE GEO_AREA_STRUCT
(
	PRNT_ID               INTEGER
			       NOT NULL ,
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XIE0106_01 ON GEO_AREA_STRUCT
(
	UPD_TIME             ASC
);

CREATE TABLE GEO_AREA_TP
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	AUTH_PARTY_ID         INTEGER
			      
);

CREATE INDEX XIE0061_01 ON GEO_AREA_TP
(
	UPD_TIME             ASC
);

CREATE TABLE GEO_AREA_TP_STRUCT
(
	PRNT_CD               CHAR(4)
			       NOT NULL ,
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE GESTATION_LENGTH_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	EXTRACT_DATE          DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GESTATION_LENGTH_BV   DECIMAL(5,1)
			      ,
	GESTATION_LENGTH_BV_REL  DECIMAL(3,1)
			      ,
	MEAN_GESTATION_LENGTH  DECIMAL(5,1)
			      ,
	PROGENY_CNT           INTEGER
			      
);

CREATE TABLE GESTATION_LENGTH_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			      ,
	AVG_GESTATION_LENGTH_BV  DECIMAL(5,1)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE GESTATION_LENGTH_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_GESTATION_LENGTH_BV  DECIMAL(5,1)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE GIS_PT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 3005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GIS_PT_TP_CD          CHAR(3)
			       NOT NULL  CONSTRAINT  C0144_01 CHECK ( GIS_PT_TP_CD IN ('ABT', 'DEL') ),
	X_COORD               DECIMAL(15,4)
			      ,
	Y_COORD               DECIMAL(15,4)
			      ,
	PROJ_ALGORITHM_CD     SMALLINT
			       CONSTRAINT  C0144_02 CHECK ( PROJ_ALGORITHM_CD IN (14, 6) ),
	CONSTRAINT C0144_03 CHECK ( PROJ_ALGORITHM_CD = 6 AND X_COORD BETWEEN 1000000 AND 2200000 OR PROJ_ALGORITHM_CD = 14 AND X_COORD BETWEEN 1900000 AND 3100000  ) ,
	CONSTRAINT C0144_04 CHECK ( PROJ_ALGORITHM_CD = 6 AND Y_COORD  BETWEEN 4600000 AND 6400000 OR PROJ_ALGORITHM_CD = 14 AND Y_COORD BETWEEN 5200000 AND 6900000  ) ,
	CONSTRAINT C0144_05 CHECK ( X_COORD IS NOT NULL AND Y_COORD IS NOT NULL AND PROJ_ALGORITHM_CD IS NOT NULL OR X_COORD IS NULL AND Y_COORD IS NULL AND PROJ_ALGORITHM_CD IS NULL  ) 
);

CREATE INDEX XFK0144_01 ON GIS_PT
(
	GIS_PT_TP_CD         ASC
);

CREATE TABLE GIS_PT_PROP_DISTNC
(
	GIS_PT_ID             INTEGER
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	METRES                INTEGER
			       NOT NULL 
);

CREATE TABLE GIS_PT_TP
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_ACCT_PROD
(
	GM_PROD_CD            CHAR(5)
			       NOT NULL ,
	SALE_SRCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GL_PROD_CD            CHAR(7)
			       NOT NULL ,
	gm_prod_cd            CHAR(18)
			      
);

CREATE TABLE GM_ANML
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	BRD_CD                CHAR(2)
			      ,
	BRTH_DATE             DATE
			      ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	NAME                  CHAR(30)
			      ,
	BRTH_ID_PFX           CHAR(4)
			      ,
	BRTH_ID_YR            SMALLINT
			      ,
	BRTH_ID_NUM           SMALLINT
			      ,
	OSEAS_ID              CHAR(12)
			      ,
	OSEAS_CTRY_CD         CHAR(3)
			      ,
	ALT_ID                CHAR(20)
			      ,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	MINDA_UPD_STS_CD      CHAR(1)
			       NOT NULL  CONSTRAINT  C0803_01 CHECK ( MINDA_UPD_STS_CD IN ('Y','N','P','Q') ),
	MINDA_UPD_DATE        DATE
			      ,
	spcs_cd               CHAR(18)
			      ,
	brd_cd                CHAR(18)
			      ,
	brth_date             CHAR(18)
			      ,
	brth_id_pfx           CHAR(18)
			      ,
	brth_id_yr            CHAR(18)
			      ,
	brth_id_num           CHAR(18)
			      ,
	oseas_id              CHAR(18)
			      ,
	oseas_ctry_cd         CHAR(18)
			      ,
	CONSTRAINT C0803_02 CHECK ( BRTH_ID_PFX IS NULL AND BRTH_ID_YR IS NULL AND BRTH_ID_NUM IS NULL OR BRTH_ID_PFX IS NOT NULL AND BRTH_ID_YR IS NOT NULL AND BRTH_ID_NUM IS NOT NULL ) ,
	CONSTRAINT C0803_03 CHECK ( OSEAS_ID IS NULL AND OSEAS_CTRY_CD IS NULL OR OSEAS_ID IS NOT NULL AND OSEAS_CTRY_CD IS NOT NULL ) ,
	CONSTRAINT C0803_04 CHECK ( BRTH_ID_PFX IS NULL AND OSEAS_ID IS NULL AND ALT_ID IS NOT NULL OR BRTH_ID_PFX IS NULL AND OSEAS_ID IS NOT NULL AND ALT_ID IS NULL OR BRTH_ID_PFX IS NOT NULL AND OSEAS_ID IS NULL AND ALT_ID IS NULL ) ,
	CONSTRAINT C0803_05 CHECK ( BRTH_ID_PFX IS NULL AND OSEAS_ID IS NULL OR ALT_ID IS NULL ) ,
	CONSTRAINT C0803_06 CHECK ( BRTH_ID_YR IS NULL OR BRTH_DATE IS NULL OR BRTH_ID_YR = YEAR(BRTH_DATE) ) 
);

CREATE INDEX XIE0803_01 ON GM_ANML
(
	ALT_ID               ASC
);

CREATE INDEX XIE0803_02 ON GM_ANML
(
	NAME                 ASC
);

CREATE INDEX XIE0803_03 ON GM_ANML
(
	BRTH_ID_PFX          ASC,
	BRTH_ID_YR           ASC,
	BRTH_ID_NUM          ASC
);

CREATE INDEX XIE0803_04 ON GM_ANML
(
	OSEAS_ID             ASC,
	OSEAS_CTRY_CD        ASC
);

CREATE TABLE GM_ANML_DWNLD
(
	GM_DWNLD_ID           INTEGER
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID_TP_CD              CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0556_01 ON GM_ANML_DWNLD
(
	ANML_KEY             ASC
);

CREATE TABLE GM_AUDIT_LOG
(
	LOG_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TBL_NAME              CHAR(18)
			       NOT NULL ,
	KEY_VAL               VARCHAR(255)
			       NOT NULL ,
	COLUMN_NAME           CHAR(18)
			       NOT NULL ,
	FROM_VAL              CHAR(50)
			       NOT NULL ,
	TO_VAL                CHAR(50)
			       NOT NULL ,
	LAN_USER_ID           CHAR(8)
			       NOT NULL 
);

CREATE TABLE GM_BOOKING
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CALF_TRACE_HERD_IND   CHAR(1)
			       CONSTRAINT  C0928_01 CHECK ( CALF_TRACE_HERD_IND IN ('Y','N') ),
	CALF_EST_NUM          SMALLINT
			      ,
	EST_CALF_SAMPLE_ARRIVE_DATE  DATE
			      ,
	OTHER_EST_NUM         SMALLINT
			      ,
	EST_OTHER_SAMPLE_ARRIVE_DATE  DATE
			      ,
	NOTE                  VARCHAR(1024)
			      ,
	BOOKING_STS_CD        CHAR(2)
			       NOT NULL ,
	PYMT_METHOD_CD        CHAR(1)
			       NOT NULL ,
	HERD_PROFILE_OPT_CD   CHAR(1)
			       NOT NULL ,
	DM_PTPT_CD            CHAR(4)
			       NOT NULL ,
	CALVING_MTH           SMALLINT
			       CONSTRAINT  C0928_05 CHECK ( CALVING_MTH BETWEEN 1 AND 12 ),
	booking_sts_cd        CHAR(18)
			      ,
	pymt_method_cd        CHAR(18)
			      ,
	herd_profile_opt_cd   CHAR(18)
			      ,
	ptpt_cd               CHAR(18)
			      ,
	dm_ptpt_cd            CHAR(18)
			      ,
	CONSTRAINT C0928_02 CHECK ( CALF_EST_NUM IS NOT NULL OR OTHER_EST_NUM IS NOT NULL ) ,
	CONSTRAINT C0928_03 CHECK ( CALF_EST_NUM IS NULL AND EST_CALF_SAMPLE_ARRIVE_DATE IS NULL OR CALF_EST_NUM IS NOT NULL AND EST_CALF_SAMPLE_ARRIVE_DATE IS NOT NULL ) ,
	CONSTRAINT C0928_04 CHECK ( OTHER_EST_NUM IS NULL AND EST_OTHER_SAMPLE_ARRIVE_DATE IS NULL OR OTHER_EST_NUM IS NOT NULL AND EST_OTHER_SAMPLE_ARRIVE_DATE IS NOT NULL ) 
);

CREATE TABLE GM_CLNT_CTRCT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CTRCT_TP_CD           CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	AGENT_IND             CHAR(1)
			       NOT NULL  CONSTRAINT  C0333_01 CHECK ( AGENT_IND IN ('Y', 'N') ),
	LIC_DATA_UPD_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0333_02 CHECK ( LIC_DATA_UPD_IND IN ('Y', 'N') )
);

CREATE TABLE GM_CLNT_DWNLD
(
	GM_DWNLD_ID           INTEGER
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPEC_ANML_IND         CHAR(1)
			       NOT NULL ,
	WHOLE_HERD_IND        CHAR(1)
			       NOT NULL ,
	ST_BRTH_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	END_BRTH_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	SEX_SEL               CHAR(1)
			       NOT NULL ,
	ST_BRTH_DATE_D        DATE
			      ,
	END_BRTH_DATE_D       DATE
			      ,
	end_brth_date         CHAR(18)
			      ,
	st_brth_date_d        CHAR(18)
			      ,
	end_brth_date_d       CHAR(18)
			      ,
	st_brth_date          CHAR(18)
			      
);

CREATE INDEX XIE0555_02 ON GM_CLNT_DWNLD
(
	PTPT_CD              ASC
);

CREATE TABLE GM_CLNT_RSTRCT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			      
);

CREATE TABLE GM_CORE_PROD
(
	CD                    CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROD_GRP_CD           CHAR(3)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	RQRD_BL_VOL           DECIMAL(4,2)
			      ,
	END_DATE              DATE
			      ,
	INDUSTRY_GOOD_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0334_01 CHECK ( INDUSTRY_GOOD_IND IN ('Y', 'N' ) ),
	cd                    CHAR(18)
			      
);

CREATE TABLE GM_CTRCT_TP
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ACCT_ANLYS_GRP_CD     CHAR(2)
			       NOT NULL ,
	BSNS_UNIT_CD          CHAR(4)
			      ,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_DNA_PROFILE
(
	TEST_RQST_ID          INTEGER
			       NOT NULL ,
	TEST_NUM              SMALLINT
			       NOT NULL ,
	LOCUS_CD              CHAR(10)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ALLELE_CD_1           CHAR(5)
			       NOT NULL ,
	ALLELE_CD_2           CHAR(5)
			       NOT NULL ,
	USE_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0336_01 CHECK ( USE_IND IN ('Y', 'N') )
);

CREATE INDEX XIE0336_01 ON GM_DNA_PROFILE
(
	LOCUS_CD             ASC
);

CREATE INDEX XIE0336_02 ON GM_DNA_PROFILE
(
	CORE_PROD_CD         ASC
);

CREATE INDEX XIE0336_03 ON GM_DNA_PROFILE
(
	TEST_RQST_ID         ASC,
	TEST_NUM             ASC,
	CORE_PROD_CD         ASC,
	USE_IND              ASC
);

CREATE TABLE GM_DWNLD
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	DATE_D                DATE
			      ,
	date_d                CHAR(18)
			      
);

CREATE TABLE GM_LAB_PROC
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_LAB_TEST
(
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	LAB_PTPT_CD           CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TURN_ARND_DAYS        SMALLINT
			      
);

CREATE TABLE GM_LAB_TEST_PROC
(
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	LAB_PTPT_CD           CHAR(4)
			       NOT NULL ,
	LAB_PROC_CD           CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ROYALTY_CD            CHAR(4)
			      
);

CREATE TABLE GM_PRNT_FLD_LOCUS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 4000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRNT_TEST_ID          INTEGER
			       NOT NULL ,
	LOCUS_CD              CHAR(10)
			       NOT NULL ,
	PRNT_CD               CHAR(1)
			       NOT NULL  CONSTRAINT  C0591_01 CHECK ( PRNT_CD IN ('D', 'S', 'C') )
);

CREATE INDEX XIE0591_01 ON GM_PRNT_FLD_LOCUS
(
	PRNT_CD              ASC
);

CREATE TABLE GM_PRNT_GRP
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 2005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_PRNT_GRP_ANML
(
	PRNT_GRP_ID           INTEGER
			       NOT NULL ,
	ANML_REF              CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			      ,
	GM_ANML_ID            INTEGER
			      
);

CREATE TABLE GM_PRNT_TEST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 7000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_RQST_ID          INTEGER
			       NOT NULL ,
	DAM_SMPL_ID           INTEGER
			      ,
	SIRE_SMPL_ID          INTEGER
			      ,
	CONF_PRNT_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0592_01 CHECK ( CONF_PRNT_IND IN ('Y', 'N') ),
	CLNT_RQST_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0592_02 CHECK ( CLNT_RQST_IND IN ('Y', 'N') ),
	PROC_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0592_03 CHECK ( PROC_IND IN ('Y', 'N') ),
	GM_PRNT_SRCE_CD       CHAR(1)
			       NOT NULL  CONSTRAINT  C0592_04 CHECK ( GM_PRNT_SRCE_CD IN  ( 'S' , 'D' , 'H' , 'M' , 'N' , 'G' , 'R' , 'I' , 'U' , 'A') ),
	PRNT_TEST_STS_CD      CHAR(1)
			       NOT NULL  CONSTRAINT  C0592_05 CHECK ( PRNT_TEST_STS_CD IN ('R', 'P', 'D', 'S', 'C', 'F') ),
	CONSTRAINT C0592_06 CHECK ( DAM_SMPL_ID IS NOT NULL OR SIRE_SMPL_ID IS NOT NULL  ) 
);

CREATE TABLE GM_PROD
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CORE_PROD_CD          CHAR(5)
			      ,
	CTRCT_TP_CD           CHAR(4)
			       NOT NULL ,
	ANML_SMPL_MTR_CD      CHAR(4)
			       NOT NULL 
);

CREATE TABLE GM_PROD_COMP
(
	COMB_PROD_CD          CHAR(5)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PCT                   DECIMAL(5,2)
			       NOT NULL 
);

CREATE TABLE GM_PROD_GRP
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_PROD_LOCUS
(
	LOCUS_CD              CHAR(10)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USE_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0413_01 CHECK ( USE_IND IN ('Y', 'N') )
);

CREATE TABLE GM_PROD_PRICE
(
	PROD_ID               INTEGER
			       NOT NULL ,
	ST_QTY                SMALLINT
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_QTY               SMALLINT
			       NOT NULL ,
	PRICE                 DECIMAL(7,2)
			       NOT NULL ,
	END_DATE              DATE
			      
);

CREATE TABLE GM_PROD_ROYALTY
(
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	ROYALTY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE GM_PROJ
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_RCPT_ANML
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_REF              CHAR(20)
			       NOT NULL ,
	SUBM_ID               INTEGER
			       NOT NULL ,
	SAMPLE_MATTER_CD      CHAR(4)
			       NOT NULL ,
	SIRE_REF              VARCHAR(512)
			      ,
	DAM_REF               VARCHAR(512)
			      ,
	MALE_PARENT_GRP_ID    INTEGER
			      ,
	FEMALE_PARENT_GRP_ID  INTEGER
			      ,
	BULL_TEAM_PARENT_GRP_ID  INTEGER
			      
);

CREATE INDEX XFK0960_01 ON GM_RCPT_ANML
(
	SUBM_ID              ASC
);

CREATE TABLE GM_RCPT_ANML_TEST
(
	RCPT_ANML_ID          INTEGER
			       NOT NULL ,
	DFLT_TEST_ID          INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEL_IND               CHAR(1)
			       CONSTRAINT  C0968_01 CHECK ( SEL_IND IN ('Y','N') )
);

CREATE TABLE GM_ROYALTY
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PAYEE_PTPT_CD         CHAR(4)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE GM_ROYALTY_AMT
(
	ROYALTY_CD            CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	PCT                   DECIMAL(5,2)
			      ,
	AMT                   DECIMAL(7,2)
			      ,
	CONSTRAINT C0456_01 CHECK ( PCT IS NOT NULL AND AMT IS NULL OR AMT IS NOT NULL AND PCT IS NULL  ) 
);

CREATE TABLE GM_SALE_SRCE
(
	CD                    CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE GM_SMPL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 2000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUBM_ID               INTEGER
			       NOT NULL ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCVD_TIME             TIMESTAMP
			      ,
	ANML_SMPL_MTR_CD      CHAR(4)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0416_01 CHECK ( SEX_CD IN ('M', 'F', 'U') ),
	ANML_KEY              INTEGER
			      ,
	ANML_REF              CHAR(20)
			       NOT NULL ,
	FUTR_RSCH_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0416_02 CHECK ( FUTR_RSCH_IND IN ('Y', 'N') ),
	SMPL_STS_CD           CHAR(1)
			       NOT NULL ,
	SMPL_STS_RPRT_DATE    DATE
			      ,
	SMPL_STS_RPRT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0416_03 CHECK ( SMPL_STS_RPRT_IND IN ('Y', 'N') ),
	RCD_USER_ID           CHAR(8)
			      ,
	NOTE                  VARCHAR(2048)
			      ,
	GM_ANML_ID            INTEGER
			      
);

CREATE INDEX XIE0416_01 ON GM_SMPL
(
	ANML_REF             ASC
);

CREATE INDEX XIE0416_02 ON GM_SMPL
(
	SMPL_STS_CD          ASC
);

CREATE INDEX XIE0416_03 ON GM_SMPL
(
	RCD_TIME             ASC
);

CREATE INDEX XIE0416_04 ON GM_SMPL
(
	SMPL_STS_RPRT_IND    ASC
);

CREATE TABLE GM_SMPL_LAB_TEST
(
	TEST_RQST_ID          INTEGER
			       NOT NULL ,
	TEST_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_PTPT_CD           CHAR(4)
			       NOT NULL ,
	CASE_NUM              CHAR(20)
			      ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USE_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0418_01 CHECK ( USE_IND IN ('Y', 'N') ),
	TEST_STS_CD           CHAR(1)
			       NOT NULL ,
	LAB_SMPL_REF          CHAR(20)
			      ,
	XMIT_TIME             TIMESTAMP
			      ,
	RSLT_RCVD_TIME        TIMESTAMP
			      ,
	TEST_RSLT             CHAR(50)
			      ,
	TEST_STS_RPRT_DATE    DATE
			      ,
	TEST_STS_RPRT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0418_02 CHECK ( TEST_STS_RPRT_IND IN ('Y', 'N') )
);

CREATE INDEX XIE0418_01 ON GM_SMPL_LAB_TEST
(
	TEST_STS_RPRT_IND    ASC
);

CREATE TABLE GM_SMPL_PRNT_GRP
(
	TEST_RQST_ID          INTEGER
			       NOT NULL ,
	PRNT_GRP_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROC_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0420_01 CHECK ( PROC_IND IN ('Y', 'N') )
);

CREATE TABLE GM_SMPL_TEST_RQST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 4000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUBM_ID               INTEGER
			       NOT NULL ,
	TEST_RSLT             VARCHAR(255)
			      ,
	SMPL_ID               INTEGER
			       NOT NULL ,
	RQST_DATE             DATE
			       NOT NULL ,
	CLNT_RLSE_DATE        DATE
			      ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL ,
	CAN_DATE              DATE
			      ,
	ACCT_XMIT_DATE        DATE
			      ,
	LIC_DATA_PROC_TIME    TIMESTAMP
			      ,
	RQST_STS_CD           CHAR(1)
			       NOT NULL ,
	RSLT_RQRD_DATE        DATE
			       NOT NULL ,
	CONV_SMPL_ID          CHAR(20)
			      ,
	LIC_DATA_STS_CD       CHAR(1)
			       NOT NULL  CONSTRAINT  C0421_01 CHECK ( LIC_DATA_STS_CD IN ('N', 'Y', 'P') ),
	ACCT_CHRG_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0421_02 CHECK ( ACCT_CHRG_IND IN ('Y', 'N') ),
	TEST_RSLT_DATE        DATE
			      ,
	RQST_STS_RPRT_DATE    DATE
			      ,
	RQST_STS_RPRT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0421_03 CHECK ( RQST_STS_RPRT_IND IN ('Y', 'N') ),
	ALIQUOT_ID            INTEGER
			      ,
	RCD_TIME              TIMESTAMP
			      ,
	RCD_USER_ID           CHAR(8)
			      ,
	RLSE_RSLT_IND         CHAR(18)
			       CONSTRAINT  C0421_04 CHECK ( RLSE_RSLT_IND IN ('Y', 'N') ),
	NOTE                  VARCHAR(2048)
			      
);

CREATE INDEX XIE0421_02 ON GM_SMPL_TEST_RQST
(
	CAN_DATE             ASC,
	RQST_STS_RPRT_IND    ASC,
	RLSE_RSLT_IND        ASC
);

CREATE INDEX XIE0421_03 ON GM_SMPL_TEST_RQST
(
	RQST_STS_CD          ASC
);

CREATE INDEX XIE0421_04 ON GM_SMPL_TEST_RQST
(
	LIC_DATA_STS_CD      ASC
);

CREATE TABLE GM_SNDRY_PROD
(
	CD                    CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROD_GRP_CD           CHAR(3)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	cd                    CHAR(18)
			      
);

CREATE TABLE GM_SNDRY_SMPL_CHRG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SMPL_ID               INTEGER
			       NOT NULL ,
	SUBM_ID               INTEGER
			       NOT NULL ,
	SNDRY_PROD_CD         CHAR(5)
			       NOT NULL ,
	QTY                   SMALLINT
			       NOT NULL ,
	TTL_PRICE             DECIMAL(7,2)
			       NOT NULL ,
	ACCT_XMIT_DATE        DATE
			      ,
	CMT                   CHAR(50)
			      ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESP_DATE             DATE
			      
);

CREATE INDEX XIE0423_01 ON GM_SNDRY_SMPL_CHRG
(
	ACCT_XMIT_DATE       ASC
);

CREATE TABLE GM_SNDRY_SUBM_CHRG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUBM_ID               INTEGER
			       NOT NULL ,
	SNDRY_PROD_CD         CHAR(5)
			       NOT NULL ,
	QTY                   SMALLINT
			       NOT NULL ,
	TTL_PRICE             DECIMAL(7,2)
			       NOT NULL ,
	ACCT_XMIT_DATE        DATE
			      ,
	CMT                   CHAR(50)
			      ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESP_DATE             DATE
			      
);

CREATE INDEX XIE0424_01 ON GM_SNDRY_SUBM_CHRG
(
	ACCT_XMIT_DATE       ASC
);

CREATE TABLE GM_SUBM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 320000
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CTRCT_TP_CD           CHAR(4)
			       NOT NULL ,
	CLNT_CTRCT_ST_DATE    DATE
			       NOT NULL ,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	SALE_SRCE_CD          CHAR(1)
			       NOT NULL ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUBM_STS_CD           CHAR(1)
			       NOT NULL ,
	EXP_SMPL_CNT          SMALLINT
			      ,
	SALE_AGENT            CHAR(20)
			      ,
	INSTRUCTION           VARCHAR(3584)
			      ,
	SMPL_KIT_ADDR_ID      INTEGER
			      ,
	RPRT_EMAIL_ADDR       CHAR(150)
			      ,
	RPRT_FAX_CTRY_CD      CHAR(4)
			      ,
	RPRT_FAX_AREA_CD      CHAR(4)
			      ,
	RPRT_FAX_LOCAL_NUM    CHAR(9)
			      ,
	RPRT_ADDR_ID          INTEGER
			      ,
	SUPER_ID              INTEGER
			      ,
	PROJ_CD               CHAR(4)
			      ,
	SUBM_STS_RPRT_DATE    DATE
			      ,
	SUBM_STS_RPRT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0427_01 CHECK ( SUBM_STS_RPRT_IND IN ('Y', 'N') ),
	SMPL_KIT_RCPNT        CHAR(50)
			      ,
	RPRT_RCPNT            CHAR(50)
			      ,
	GL_CLNT_CD            CHAR(4)
			      ,
	GL_PROJ_CD            CHAR(3)
			      ,
	RCD_USER_ID           CHAR(8)
			      ,
	CLIENT_REF            VARCHAR(100)
			      ,
	RPRT_DELIVERY_METHOD_CD  CHAR(1)
			      ,
	BOOKING_ID            INTEGER
			      ,
	RQRD_DATE             DATE
			      ,
	SPECIES_CD            CHAR(1)
			      ,
	JOB_NUM               INTEGER
			      ,
	STS_CMT               VARCHAR(1024)
			      ,
	SUBM_TIME             TIMESTAMP
			      ,
	RCPT_TIME             TIMESTAMP
			      ,
	RECEIPT_LTR_IND       CHAR(1)
			       CONSTRAINT  C0427_06 CHECK ( RECEIPT_LTR_IND IN ('Y', 'N') ),
	TURN_AROUND_ST_TIME   TIMESTAMP
			      ,
	rprt_delivery_method_cd  CHAR(18)
			      ,
	CONSTRAINT C0427_02 CHECK ( MAP_REF IS NOT NULL AND HERD_NUM IS NOT NULL OR MAP_REF IS NULL AND HERD_NUM IS NULL  ) ,
	CONSTRAINT C0427_03 CHECK ( RPRT_ADDR_ID IS NULL AND RPRT_EMAIL_ADDR IS NULL OR RPRT_EMAIL_ADDR IS NULL AND RPRT_FAX_LOCAL_NUM IS NULL OR RPRT_FAX_LOCAL_NUM IS NULL AND RPRT_ADDR_ID IS NULL  ) ,
	CONSTRAINT C0427_04 CHECK ( RPRT_FAX_CTRY_CD IS NOT NULL AND RPRT_FAX_AREA_CD IS NOT NULL AND RPRT_FAX_LOCAL_NUM IS NOT NULL OR RPRT_FAX_CTRY_CD IS NULL AND RPRT_FAX_AREA_CD IS NULL AND RPRT_FAX_LOCAL_NUM IS NULL  ) ,
	CONSTRAINT C0427_05 CHECK ( (SMPL_KIT_ADDR_ID IS NOT NULL AND SMPL_KIT_RCPNT IS NOT NULL OR SMPL_KIT_ADDR_ID IS NULL AND SMPL_KIT_RCPNT IS NULL) AND (RPRT_ADDR_ID IS NOT NULL AND RPRT_RCPNT IS NOT NULL OR RPRT_ADDR_ID IS NULL AND RPRT_RCPNT IS NULL)  ) 
);

CREATE INDEX XIE0427_01 ON GM_SUBM
(
	SUBM_STS_CD          ASC
);

CREATE INDEX XIE0427_03 ON GM_SUBM
(
	SUBM_STS_RPRT_IND    ASC
);

CREATE TABLE GM_SUBM_DFLT
(
	SUBM_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SRCH_EXIST_SAMPLE_IND  CHAR(1)
			       CONSTRAINT  C0934_001 CHECK ( SRCH_EXIST_SAMPLE_IND IN ('Y','N') ),
	SRCH_DAYS             SMALLINT
			      ,
	DNA_PLATFORM_CD       CHAR(4)
			       NOT NULL ,
	FUTURE_RESEARCH_IND   CHAR(1)
			       NOT NULL  CONSTRAINT  C0934_002 CHECK ( FUTURE_RESEARCH_IND IN ('Y','N') ),
	SAMPLE_QTY            INTEGER
			      ,
	SAMPLE_MATTER_CD      CHAR(4)
			      ,
	SAMPLE_RCVD_IND       CHAR(1)
			       CONSTRAINT  C0934_003 CHECK ( SAMPLE_RCVD_IND IN ('Y','N') ),
	SAMPLE_RCVD_TIME      TIMESTAMP
			      
);

CREATE TABLE GM_SUBM_DFLT_TEST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUBM_ID               INTEGER
			       NOT NULL ,
	CORE_PROD_CD          CHAR(5)
			       NOT NULL 
);

CREATE INDEX XFK0948_04 ON GM_SUBM_DFLT_TEST
(
	SUBM_ID              ASC
);

CREATE TABLE HAND_HELD_UNIT
(
	SERIAL_NUM            CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HHU_ID                CHAR(6)
			       NOT NULL ,
	OWNR_PARTY_ID         INTEGER
			       NOT NULL ,
	APPLN_CD              CHAR(4)
			       NOT NULL ,
	MODEL                 CHAR(20)
			      ,
	ASSET_NUM             CHAR(10)
			      ,
	CRADLE_ASSET_NUM      CHAR(10)
			      ,
	MODEM_SERIAL_NUM      CHAR(20)
			      ,
	SOFTWARE_VRSN         CHAR(20)
			      ,
	REFR_IND              CHAR(1)
			       CONSTRAINT  C0231_01 CHECK ( REFR_IND IN ('Y', 'N') ),
	AUTO_DIAL_TIME        TIME
			      ,
	UPLOAD_TIME           TIMESTAMP
			      
);

CREATE INDEX XIE0231_01 ON HAND_HELD_UNIT
(
	HHU_ID               ASC
);

CREATE TABLE HDBK_SECT_STS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BSOC_PARTY_ID         INTEGER
			       NOT NULL ,
	HDBK_SECT_CD          CHAR(1)
			       NOT NULL  CONSTRAINT  C0357_01 CHECK ( HDBK_SECT_CD IN ('M', 'S', 'O') ),
	HDBK_SECT_STS_CD      CHAR(1)
			       CONSTRAINT  C0357_02 CHECK ( HDBK_SECT_STS_CD IN ('3', '2','1', '0', 'A', 'B', 'C', 'D') ),
	MIN_STS_16THS         INTEGER
			       NOT NULL 
);

CREATE TABLE HERD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	FARM_TP_CD            CHAR(1)
			       NOT NULL ,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	FARM_AREA             DECIMAL(5,1)
			       NOT NULL ,
	RUNOFF_AREA           DECIMAL(5,1)
			       NOT NULL ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	SIGNATURE_IND         CHAR(1)
			       CONSTRAINT  C0017_01 CHECK ( SIGNATURE_IND IN ('Y','N') ),
	SIGNATURE_DATE        DATE
			      ,
	AHB_HERD_NUM          INTEGER
			      ,
	NAME                  CHAR(40)
			      ,
	SIL_FLOCK_ID          INTEGER
			      ,
	AHB_TB_STS_CD         CHAR(3)
			      ,
	AHB_LAST_WHOLE_HERD_TEST_DATE  DATE
			      ,
	AHB_MVMT_CTRL_AREA_IND  CHAR(1)
			       CONSTRAINT  C0017_03 CHECK ( AHB_MVMT_CTRL_AREA_IND IN ('Y','N') ),
	AHB_UPD_DATE          DATE
			      ,
	AHB_FILENAME          CHAR(32)
			      ,
	end_date_d            CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	rgn_cd                CHAR(18)
			      ,
	herd_cd               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	ahb_tb_sts_cd         CHAR(18)
			      ,
	CONSTRAINT C0017_02 CHECK ( SIGNATURE_DATE IS NOT NULL OR SIGNATURE_IND IS NULL OR SIGNATURE_IND = 'N' ) 
);

CREATE INDEX XIE0017_01 ON HERD
(
	RGN_CD               ASC,
	HERD_CD              ASC,
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE INDEX XIE0017_02 ON HERD
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_ANML
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_TIME          TIMESTAMP
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	XFER_OUT_TIME         TIMESTAMP
			      ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_DATE              DATE
			       DEFAULT CURRENT DATE,
	FATE_CD               CHAR(1)
			      ,
	FATE_CAUSE_CD         CHAR(2)
			      ,
	xfer_out_time         CHAR(18)
			      ,
	fate_cd               CHAR(18)
			      ,
	xfer_in_time          CHAR(18)
			      ,
	CONSTRAINT C0038_01 CHECK ( XFER_IN_TIME < XFER_OUT_TIME OR XFER_OUT_TIME IS NULL ) ,
	CONSTRAINT C0038_02 CHECK ( FATE_CD IS NOT NULL OR FATE_CAUSE_CD IS NULL ) ,
	CONSTRAINT C0038_03 CHECK ( XFER_OUT_TIME IS NOT NULL and FATE_CD IS NOT NULL OR XFER_OUT_TIME IS NULL and FATE_CD IS NULL ) 
);

CREATE INDEX XIE0038_01 ON HERD_ANML
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_ANML_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       DEFAULT USER,
	PGM_ID                CHAR(8)
			       NOT NULL ,
	PGM_SECT              CHAR(20)
			      ,
	TRANS_TP_CD           CHAR(1)
			       NOT NULL  CONSTRAINT  C0023_01 CHECK ( TRANS_TP_CD IN ('U','D') ),
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_TIME          TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	XFER_OUT_TIME         TIMESTAMP
			      ,
	FATE_CD               CHAR(1)
			      ,
	FATE_CAUSE_CD         CHAR(2)
			      ,
	RCD_DATE              DATE
			      ,
	NUM_ST_TIME           TIMESTAMP
			      ,
	NUM_END_TIME          TIMESTAMP
			      ,
	ANML_NUM              INTEGER
			      
);

CREATE INDEX XFK0023_05 ON HERD_ANML_LOG
(
	ANML_KEY             ASC,
	XFER_IN_TIME         ASC,
	NUM_ST_TIME          ASC
);

CREATE TABLE HERD_ANML_NUM
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_TIME          TIMESTAMP
			       NOT NULL ,
	NUM_ST_TIME           TIMESTAMP
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NUM_END_TIME          TIMESTAMP
			      ,
	ANML_NUM              INTEGER
			       NOT NULL  CONSTRAINT  C0039_03 CHECK ( ANML_NUM > 0 and ANML_NUM != 99999 ),
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	num_end_time          CHAR(18)
			      ,
	num_st_time           CHAR(18)
			      ,
	CONSTRAINT C0039_01 CHECK ( NUM_ST_TIME < NUM_END_TIME OR NUM_END_TIME IS NULL ) ,
	CONSTRAINT C0039_02 CHECK ( NUM_ST_TIME >= XFER_IN_TIME ) 
);

CREATE INDEX XIE0039_01 ON HERD_ANML_NUM
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	ANML_NUM             ASC
);

CREATE INDEX XIE0039_02 ON HERD_ANML_NUM
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_ASSOC_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_BARCD_CTRL
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	BARCD_PRODN_CD        DECIMAL(1)
			       NOT NULL ,
	RUN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAST_SEQ              SMALLINT
			       NOT NULL ,
	RUN_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	run_date              CHAR(18)
			      ,
	run_date_d            CHAR(18)
			      
);

CREATE TABLE HERD_DT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0504_01 CHECK ( DT_CD IN ('EBL') ),
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	SMPL_COLLN_MTHD_CD    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_KIT_NUM          CHAR(7)
			       NOT NULL ,
	LAB_ACCS_NUM          CHAR(10)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL ,
	CONCL_TEST_IND        CHAR(1)
			       NOT NULL ,
	PROC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_CNT              SMALLINT
			       NOT NULL ,
	RSLT_CNT              SMALLINT
			       NOT NULL ,
	POS_CNT               SMALLINT
			       NOT NULL ,
	SRCE_PTPT_CD          CHAR(4)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PROC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	SPLY_DCO_CD           SMALLINT
			      ,
	SPLY_DCO_NUM          INTEGER
			      ,
	date_d                CHAR(18)
			      ,
	proc_date             CHAR(18)
			      ,
	proc_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0504_02 ON HERD_DT
(
	SMPL_COLLN_MTHD_CD   ASC
);

CREATE INDEX XIE0504_01 ON HERD_DT
(
	SPLY_DCO_CD          ASC,
	SPLY_DCO_NUM         ASC
);

CREATE INDEX XIE0504_02 ON HERD_DT
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_DT_AUDIT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0511_01 CHECK ( DT_CD IN ('EBL') ),
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PREV_DT_RSLT_CD       SMALLINT
			       NOT NULL ,
	DT_RSLT_CD            SMALLINT
			       NOT NULL ,
	DT_STS_CHNG_RSN_CD    CHAR(2)
			       NOT NULL ,
	UPD_PGM_ID            CHAR(8)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RSN                   CHAR(50)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	TEST_DATE_D           DATE
			      ,
	test_date             CHAR(18)
			      ,
	date_d                CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE TABLE HERD_DT_ERR
(
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0508_01 CHECK ( DT_CD IN ('EBL') ),
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	TIME                  DECIMAL(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	ERR_CD                SMALLINT
			       NOT NULL ,
	SMPL_COLLN_MTHD_CD    CHAR(2)
			       NOT NULL ,
	TEST_DATE_D           DATE
			      ,
	test_date_d           CHAR(18)
			      ,
	test_date             CHAR(18)
			      
);

CREATE INDEX XFK0508_02 ON HERD_DT_ERR
(
	SPLY_DCO_CD          ASC
);

CREATE INDEX XFK0508_03 ON HERD_DT_ERR
(
	SMPL_COLLN_MTHD_CD   ASC
);

CREATE INDEX XIE0508_01 ON HERD_DT_ERR
(
	DT_CD                ASC,
	SPLY_DCO_CD          ASC,
	SPLY_DCO_NUM         ASC,
	TEST_DATE            ASC
);

CREATE TABLE HERD_DT_PLAN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0503_01 CHECK ( DT_CD IN ('EBL') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_DT_RSLT_CD       SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	SMPL_COLLN_MTHD_CD    CHAR(2)
			       NOT NULL ,
	NEXT_TEST_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	BL_TEST_VST_CNT       DECIMAL(1)
			       NOT NULL ,
	TEST_SCHED_CD         DECIMAL(1)
			       NOT NULL ,
	TEST_PRIORITY_CD      DECIMAL(1)
			       NOT NULL ,
	MAF_PTPT_CD           CHAR(4)
			       NOT NULL ,
	VET_PTPT_CD           CHAR(4)
			       NOT NULL ,
	CLV_SIX_MTH_DATE      INTEGER
			       NOT NULL  DEFAULT 0,
	CMT                   CHAR(50)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	NEXT_TEST_DATE_D      DATE
			      ,
	CLV_SIX_MTH_DATE_D    DATE
			      ,
	clv_six_mth_date_d    CHAR(18)
			      ,
	next_test_date_d      CHAR(18)
			      ,
	next_test_date        CHAR(18)
			      ,
	date_d                CHAR(18)
			      ,
	clv_six_mth_date      CHAR(18)
			      
);

CREATE INDEX XIE0503_01 ON HERD_DT_PLAN
(
	VET_PTPT_CD          ASC
);

CREATE INDEX XIE0503_02 ON HERD_DT_PLAN
(
	MAF_PTPT_CD          ASC
);

CREATE TABLE HERD_DT_RSLT
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(25)
			       NOT NULL ,
	SHORT_DESCR           CHAR(25)
			       NOT NULL 
);

CREATE TABLE HERD_DTL
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SR_AREA_SSN           SMALLINT
			       NOT NULL ,
	LIC_STS_CD            CHAR(1)
			       NOT NULL ,
	AB_STS_CD             CHAR(1)
			       NOT NULL ,
	HT_STS_CD             CHAR(1)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	PYMT_DCO_CD           SMALLINT
			       NOT NULL ,
	PYMT_DCO_NUM          INTEGER
			       NOT NULL ,
	FRST_MINDA_IND        CHAR(1)
			       NOT NULL ,
	UM_OPT_CD             CHAR(1)
			       NOT NULL ,
	PYMT_DCO_NUM_SFX      CHAR(3)
			       NOT NULL ,
	EST_COW_CNT           INTEGER
			       NOT NULL ,
	EST_YRLG_CNT          SMALLINT
			       NOT NULL ,
	HIGH_TAG_NUM          INTEGER
			       NOT NULL ,
	CLVG_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	HR_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HT_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	AB_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	UM_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HT_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	AB_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HR_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	UM_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	FEE_PYMT_MTHD_CD      DECIMAL(1)
			       NOT NULL ,
	SV_DTL_UPD_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	ACCT_XMIT_IND         CHAR(1)
			       NOT NULL ,
	INVC_CALC_MTHD_CD     CHAR(1)
			       NOT NULL ,
	SV_RGN_CD             CHAR(4)
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SR_AREA_CD            SMALLINT
			       NOT NULL ,
	RPRT_RCPNT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	CLVG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	CO_VST_IND            CHAR(1)
			       NOT NULL ,
	YRLG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	EST_CALF_CNT          SMALLINT
			       NOT NULL ,
	REPL_HFR_CNT          SMALLINT
			       NOT NULL ,
	ANOESTRUM_IND         CHAR(1)
			       NOT NULL ,
	INVESTAMATE_IND       CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	LEASED_COW_CNT        INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	EVNG_AB_IND           CHAR(1)
			       CONSTRAINT  C0016_01 CHECK ( EVNG_AB_IND IN ('Y', 'N', 'U') ),
	BRD_STEP_STS_CD       CHAR(1)
			       CONSTRAINT  C0016_02 CHECK ( BRD_STEP_STS_CD IN ('A', 'B', 'C') ),
	MINDA_MED_CD          CHAR(1)
			       CONSTRAINT  C0016_03 CHECK ( MINDA_MED_CD IN ('P', 'E') ),
	PYMT_DCO_PARTY        CHAR(8)
			      ,
	COW_LEPTO_IND         CHAR(1)
			       CONSTRAINT  C0016_04 CHECK ( COW_LEPTO_IND IN ('Y', 'N') ),
	YRLG_LEPTO_IND        CHAR(1)
			       CONSTRAINT  C0016_05 CHECK ( YRLG_LEPTO_IND IN ('Y', 'N') ),
	ACCT_XMIT_DATE        DATE
			      ,
	OWNR_PARTY_ID         INTEGER
			      ,
	CTCT_PARTY_ID         INTEGER
			      ,
	RPRT_PARTY_ID         INTEGER
			      ,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	HR_RCD_DATE_D         DATE
			      ,
	HR_CAN_DATE_D         DATE
			      ,
	HT_RCD_DATE_D         DATE
			      ,
	HT_CAN_DATE_D         DATE
			      ,
	AB_RCD_DATE_D         DATE
			      ,
	AB_CAN_DATE_D         DATE
			      ,
	CLVG_ST_DATE_D        DATE
			      ,
	CLVG_ST_DATE_2_D      DATE
			      ,
	MTNG_ST_DATE_D        DATE
			      ,
	MTNG_ST_DATE_2_D      DATE
			      ,
	SV_DTL_UPD_DATE_D     DATE
			      ,
	SALES_RLTNSHP_CD      CHAR(1)
			       CONSTRAINT  C0016_06 CHECK ( SALES_RLTNSHP_CD IN ('L', 'S') ),
	SOF_PRINT_IND         CHAR(1)
			       CONSTRAINT  C0016_07 CHECK ( SOF_PRINT_IND IN ('Y', 'N') ),
	SOF_PRINT_DATE        DATE
			      ,
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	TDM_SPS_HERD_IND      CHAR(1)
			       CONSTRAINT  C0016_08 CHECK ( TDM_SPS_HERD_IND IN ('Y','N') ),
	EST_2YR_OLDS          SMALLINT
			      ,
	MINDAPRO_6PK_DISC_IND  CHAR(1)
			       CONSTRAINT  C0016_09 CHECK ( MINDAPRO_6PK_DISC_IND IN ('Y','N') ),
	SHAREHOLDER_ELIG_IND  CHAR(1)
			       CONSTRAINT  C0016_10 CHECK ( SHAREHOLDER_ELIG_IND IN ('Y','N') ),
	LINK_ADDR_IND         CHAR(1)
			       CONSTRAINT  C0016_11 CHECK ( LINK_ADDR_IND IN ('Y','N') ),
	SHAREHOLDER_ELIG_END_DATE  DATE
			      ,
	mtng_st_date_d        CHAR(18)
			      ,
	ht_can_date_d         CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	ht_rcd_date_d         CHAR(18)
			      ,
	clvg_st_date_2_d      CHAR(18)
			      ,
	hr_can_date_d         CHAR(18)
			      ,
	rprt_rcpnt_ptpt_cd    CHAR(18)
			      ,
	clvg_st_date_d        CHAR(18)
			      ,
	hr_can_date           CHAR(18)
			      ,
	hr_rcd_date_d         CHAR(18)
			      ,
	sv_dtl_upd_date       CHAR(18)
			      ,
	ownr_ptpt_cd          CHAR(18)
			      ,
	ab_can_date_d         CHAR(18)
			      ,
	ctct_ptpt_cd          CHAR(18)
			      ,
	ab_rcd_date_d         CHAR(18)
			      ,
	clvg_st_date          CHAR(18)
			      ,
	mtng_st_date_2        CHAR(18)
			      ,
	ab_rcd_date           CHAR(18)
			      ,
	ht_rcd_date           CHAR(18)
			      ,
	sv_dtl_upd_date_d     CHAR(18)
			      ,
	ab_can_date           CHAR(18)
			      ,
	mtng_st_date_2_d      CHAR(18)
			      ,
	mtng_st_date          CHAR(18)
			      ,
	hr_rcd_date           CHAR(18)
			      ,
	ht_can_date           CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      ,
	clvg_st_date_2        CHAR(18)
			      
);

CREATE INDEX XFK0016_06 ON HERD_DTL
(
	RM_AREA_RGN_CD       ASC,
	DM_AREA_CD           ASC,
	SR_AREA_CD           ASC,
	SR_AREA_SSN          ASC
);

CREATE INDEX XIE0016_01 ON HERD_DTL
(
	SV_RGN_CD            ASC,
	SR_AREA_SSN          ASC
);

CREATE INDEX XIE0016_02 ON HERD_DTL
(
	SPLY_DCO_CD          ASC,
	SPLY_DCO_NUM         ASC,
	SR_AREA_SSN          ASC
);

CREATE INDEX XIE0016_03 ON HERD_DTL
(
	OWNR_PTPT_CD         ASC,
	SR_AREA_SSN          ASC
);

CREATE INDEX XIE0016_04 ON HERD_DTL
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_DTL_HIST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              INTEGER
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL  DEFAULT USER,
	PGM_ID                CHAR(8)
			       NOT NULL  WITH DEFAULT,
	RCD_DATE              INTEGER
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SR_AREA_SSN           SMALLINT
			       NOT NULL ,
	LIC_STS_CD            CHAR(1)
			       NOT NULL ,
	AB_STS_CD             CHAR(1)
			       NOT NULL ,
	HT_STS_CD             CHAR(1)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	PYMT_DCO_CD           SMALLINT
			       NOT NULL ,
	PYMT_DCO_NUM          INTEGER
			       NOT NULL ,
	FRST_MINDA_IND        CHAR(1)
			       NOT NULL ,
	UM_OPT_CD             CHAR(1)
			       NOT NULL ,
	PYMT_DCO_NUM_SFX      CHAR(3)
			       NOT NULL ,
	EST_COW_CNT           INTEGER
			       NOT NULL ,
	EST_YRLG_CNT          SMALLINT
			       NOT NULL ,
	HIGH_TAG_NUM          INTEGER
			       NOT NULL ,
	CLVG_ST_DATE          INTEGER
			       NOT NULL ,
	HR_ST_DATE            INTEGER
			       NOT NULL ,
	HT_ST_DATE            INTEGER
			       NOT NULL ,
	AB_ST_DATE            INTEGER
			       NOT NULL ,
	UM_ST_DATE            INTEGER
			       NOT NULL ,
	HT_CAN_DATE           INTEGER
			       NOT NULL ,
	AB_CAN_DATE           INTEGER
			       NOT NULL ,
	HR_CAN_DATE           INTEGER
			       NOT NULL ,
	UM_CAN_DATE           INTEGER
			       NOT NULL ,
	FEE_PYMT_MTHD_CD      DECIMAL(1)
			       NOT NULL ,
	ACCT_XMIT_IND         CHAR(1)
			       NOT NULL ,
	SV_DTL_UPD_DATE       INTEGER
			       NOT NULL ,
	PYMT_SPREAD_CD        CHAR(1)
			       NOT NULL ,
	SV_RGN_CD             CHAR(4)
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SR_AREA_CD            SMALLINT
			       NOT NULL ,
	RPRT_RCPNT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	CLVG_ST_DATE_2        INTEGER
			       NOT NULL ,
	MTNG_ST_DATE_1        INTEGER
			       NOT NULL ,
	MTNG_ST_DATE_2        INTEGER
			       NOT NULL ,
	CO_VST_IND            CHAR(1)
			       NOT NULL ,
	YRLG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	EST_CALF_CNT          SMALLINT
			       NOT NULL ,
	REPL_HFR_CNT          SMALLINT
			       NOT NULL ,
	ANOESTRUM_IND         CHAR(1)
			       NOT NULL ,
	INVESTAMATE_IND       CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	LEASED_COW_CNT        INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	EVNG_AB_IND           CHAR(1)
			      ,
	BRD_STEP_STS_CD       CHAR(1)
			      ,
	MINDA_MED_CD          CHAR(1)
			      ,
	PYMT_DCO_PARTY        CHAR(8)
			      ,
	COW_LEPTO_IND         CHAR(1)
			      ,
	YRLG_LEPTO_IND        CHAR(1)
			      ,
	OWNR_PARTY_ID         INTEGER
			      ,
	CTCT_PARTY_ID         INTEGER
			      ,
	RPRT_PARTY_ID         INTEGER
			      ,
	RCD_DATE_D            DATE
			       NOT NULL ,
	HR_ST_DATE_D          DATE
			      ,
	HR_CAN_DATE_D         DATE
			      ,
	HT_ST_DATE_D          DATE
			      ,
	HT_CAN_DATE_D         DATE
			      ,
	AB_ST_DATE_D          DATE
			      ,
	AB_CAN_DATE_D         DATE
			      ,
	CLVG_ST_DATE_D        DATE
			      ,
	CLVG_ST_DATE_2_D      DATE
			      ,
	MTNG_ST_DATE_1_D      DATE
			      ,
	MTNG_ST_DATE_2_D      DATE
			      ,
	SV_DTL_UPD_DATE_D     DATE
			      ,
	UPD_DATE_D            DATE
			      ,
	SALES_RLTNSHP_CD      CHAR(1)
			      ,
	SOF_PRINT_IND         CHAR(1)
			      ,
	SOF_PRINT_DATE        DATE
			      ,
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	TDM_SPS_HERD_IND      CHAR(1)
			      ,
	MINDAPRO_6PK_DISC_IND  CHAR(1)
			      ,
	EST_2YR_OLDS          SMALLINT
			      ,
	UPD_TIMESTAMP         TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHAREHOLDER_ELIG_IND  CHAR(1)
			      ,
	LINK_ADDR_IND         CHAR(1)
			      ,
	SHAREHOLDER_ELIG_END_DATE  DATE
			      
);

CREATE INDEX XIE0553_01 ON HERD_DTL_HIST
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	SR_AREA_SSN          ASC,
	UPD_DATE             ASC,
	UPD_TIME             ASC
)
 CLUSTER;

CREATE INDEX XIE0553_02 ON HERD_DTL_HIST
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	SR_AREA_SSN          ASC,
	UPD_TIMESTAMP        ASC
);

CREATE TABLE HERD_DTL_OLD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SR_AREA_SSN           SMALLINT
			       NOT NULL ,
	LIC_STS_CD            CHAR(1)
			       NOT NULL ,
	AB_STS_CD             CHAR(1)
			       NOT NULL ,
	HT_STS_CD             CHAR(1)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	PYMT_DCO_CD           SMALLINT
			       NOT NULL ,
	PYMT_DCO_NUM          INTEGER
			       NOT NULL ,
	FRST_MINDA_IND        CHAR(1)
			       NOT NULL ,
	UM_OPT_CD             CHAR(1)
			       NOT NULL ,
	PYMT_DCO_NUM_SFX      CHAR(3)
			       NOT NULL ,
	EST_COW_CNT           INTEGER
			       NOT NULL ,
	EST_YRLG_CNT          SMALLINT
			       NOT NULL ,
	HIGH_TAG_NUM          INTEGER
			       NOT NULL ,
	CLVG_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	HR_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HT_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	AB_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	UM_RCD_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HT_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	AB_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	HR_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	UM_CAN_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	FEE_PYMT_MTHD_CD      DECIMAL(1)
			       NOT NULL ,
	SV_DTL_UPD_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	ACCT_XMIT_IND         CHAR(1)
			       NOT NULL ,
	INVC_CALC_MTHD_CD     CHAR(1)
			       NOT NULL ,
	SV_RGN_CD             CHAR(4)
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SR_AREA_CD            SMALLINT
			       NOT NULL ,
	RPRT_RCPNT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	CLVG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	CO_VST_IND            CHAR(1)
			       NOT NULL ,
	YRLG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	EST_CALF_CNT          SMALLINT
			       NOT NULL ,
	REPL_HFR_CNT          SMALLINT
			       NOT NULL ,
	ANOESTRUM_IND         CHAR(1)
			       NOT NULL ,
	INVESTAMATE_IND       CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	LEASED_COW_CNT        INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	EVNG_AB_IND           CHAR(1)
			      ,
	BRD_STEP_STS_CD       CHAR(1)
			      ,
	MINDA_MED_CD          CHAR(1)
			      ,
	PYMT_DCO_PARTY        CHAR(8)
			      ,
	COW_LEPTO_IND         CHAR(1)
			      ,
	YRLG_LEPTO_IND        CHAR(1)
			      ,
	ACCT_XMIT_DATE        DATE
			      ,
	OWNR_PARTY_ID         INTEGER
			      ,
	CTCT_PARTY_ID         INTEGER
			      ,
	RPRT_PARTY_ID         INTEGER
			      ,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	HR_RCD_DATE_D         DATE
			      ,
	HR_CAN_DATE_D         DATE
			      ,
	HT_RCD_DATE_D         DATE
			      ,
	HT_CAN_DATE_D         DATE
			      ,
	AB_RCD_DATE_D         DATE
			      ,
	AB_CAN_DATE_D         DATE
			      ,
	CLVG_ST_DATE_D        DATE
			      ,
	CLVG_ST_DATE_2_D      DATE
			      ,
	MTNG_ST_DATE_D        DATE
			      ,
	MTNG_ST_DATE_2_D      DATE
			      ,
	SV_DTL_UPD_DATE_D     DATE
			      ,
	SALES_RLTNSHP_CD      CHAR(1)
			      ,
	SOF_PRINT_IND         CHAR(1)
			      ,
	SOF_PRINT_DATE        DATE
			      ,
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	TDM_SPS_HERD_IND      CHAR(1)
			      ,
	EST_2YR_OLDS          SMALLINT
			      ,
	MINDAPRO_6PK_DISC_IND  CHAR(1)
			      ,
	SHAREHOLDER_ELIG_IND  CHAR(1)
			      ,
	LINK_ADDR_IND         CHAR(1)
			      ,
	SHAREHOLDER_ELIG_END_DATE  DATE
			      
);

CREATE TABLE HERD_ERR_STS
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FROZEN_IND            CHAR(1)
			       NOT NULL ,
	FROZEN_UPD_DATE       INTEGER
			       NOT NULL ,
	FROZEN_UPD_USER_ID    CHAR(8)
			       NOT NULL ,
	HALT_IND              CHAR(1)
			       NOT NULL ,
	HALT_UPD_DATE         INTEGER
			       NOT NULL ,
	HALT_UPD_USER_ID      CHAR(8)
			       NOT NULL ,
	T2_PCT                SMALLINT
			      ,
	T2_PCT_DATE           DATE
			      ,
	T2_PCT_IND            CHAR(1)
			       CONSTRAINT  C0355_01 CHECK ( T2_PCT_IND IN ('Y', 'N') ),
	T2_PCT_IND_DATE       DATE
			      ,
	CLVG_CNT              INTEGER
			      ,
	CLVG_CNT_DATE         DATE
			      ,
	T2_PCT_IND_USER_ID    CHAR(8)
			      ,
	T2_PCT_IND_CMT        CHAR(30)
			      ,
	FROZEN_SRCE_CD        CHAR(1)
			      ,
	FROZEN_RSN_CD         CHAR(1)
			      ,
	FROZEN_CMT            CHAR(30)
			      ,
	HALT_CMT              CHAR(30)
			      ,
	FROZEN_UPD_DATE_D     DATE
			      ,
	HALT_UPD_DATE_D       DATE
			      ,
	T2_PCT_EXCL_SSN       SMALLINT
			      ,
	frozen_upd_date       CHAR(18)
			      ,
	frozen_upd_date_d     CHAR(18)
			      ,
	halt_upd_date         CHAR(18)
			      ,
	halt_upd_date_d       CHAR(18)
			      
);

CREATE INDEX XIE0355_01 ON HERD_ERR_STS
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_ERR_STS_LOG
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FROZEN_IND            CHAR(1)
			       NOT NULL ,
	FROZEN_UPD_DATE       DATE
			      ,
	FROZEN_UPD_USER_ID    CHAR(8)
			       NOT NULL ,
	HALT_IND              CHAR(1)
			       NOT NULL ,
	HALT_UPD_DATE         DATE
			      ,
	HALT_UPD_USER_ID      CHAR(8)
			       NOT NULL ,
	T2_PCT                SMALLINT
			      ,
	T2_PCT_DATE           DATE
			      ,
	T2_PCT_IND            CHAR(1)
			      ,
	T2_PCT_IND_DATE       DATE
			      ,
	CLVG_CNT              INTEGER
			      ,
	CLVG_CNT_DATE         DATE
			      ,
	T2_PCT_IND_USER_ID    CHAR(8)
			      ,
	T2_PCT_IND_CMT        CHAR(30)
			      ,
	FROZEN_SRCE_CD        CHAR(1)
			      ,
	FROZEN_RSN_CD         CHAR(1)
			      ,
	FROZEN_CMT            CHAR(30)
			      ,
	HALT_CMT              CHAR(30)
			      ,
	T2_PCT_EXCL_SSN       SMALLINT
			      
);

CREATE TABLE HERD_ERR_UPD_RSN
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_ERR_UPD_SRCE
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_HT_RND
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RND_NUM               SMALLINT
			       NOT NULL ,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	SSN                   SMALLINT
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	VST_NUM               SMALLINT
			       NOT NULL ,
	HERD_ROLE_CD          CHAR(1)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	RQST_DATE_D           DATE
			      ,
	map_ref               CHAR(18)
			      ,
	rnd_num               CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      
);

CREATE INDEX XFK0260_02 ON HERD_HT_RND
(
	RND_NUM              ASC,
	RGN_CD               ASC
);

CREATE INDEX XIE0260_01 ON HERD_HT_RND
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0260_02 ON HERD_HT_RND
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	SSN                  ASC,
	RND_NUM              ASC
);

CREATE TABLE HERD_LEPTO_STS
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ASSESS_DATE           DATE
			       NOT NULL ,
	VET_CLINIC_PTPT_CD    CHAR(4)
			       NOT NULL ,
	EXPR_DATE             DATE
			       NOT NULL ,
	PROTECT_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0077_01 CHECK ( PROTECT_IND IN ('Y', 'N') ),
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			       NOT NULL ,
	CLINIC_VET_ID         CHAR(20)
			      ,
	vet_clinic_ptpt_cd    CHAR(18)
			      ,
	CONSTRAINT C0077_02 CHECK ( EXPR_DATE >= ASSESS_DATE ) ,
	CONSTRAINT C0077_03 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE INDEX XIE0077_01 ON HERD_LEPTO_STS
(
	VET_CLINIC_PTPT_CD   ASC
);

CREATE TABLE HERD_MDC
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XFK0294_02 ON HERD_MDC
(
	MDC_SSN              ASC,
	MDC_NUM              ASC
);

CREATE INDEX XIE0294_01 ON HERD_MDC
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_MOVE
(
	FROM_MAP_REF          CHAR(10)
			       NOT NULL ,
	FROM_HERD_NUM         SMALLINT
			       NOT NULL ,
	SHIFT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	SHIFT_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TO_MAP_REF            CHAR(10)
			       NOT NULL ,
	TO_HERD_NUM           SMALLINT
			       NOT NULL ,
	NEW_OWNR_PTPT_CD      CHAR(4)
			       NOT NULL ,
	BRTH_YR               SMALLINT
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_CNT              INTEGER
			       NOT NULL ,
	NEW_OWNR_PARTY_ID     INTEGER
			      ,
	SHIFT_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	RQST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	RCD_DATE_D            DATE
			      ,
	rcd_date_d            CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      ,
	shift_date            CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	new_ownr_ptpt_cd      CHAR(18)
			      ,
	shift_date_d          CHAR(18)
			      
);

CREATE INDEX XIE0352_01 ON HERD_MOVE
(
	NEW_OWNR_PTPT_CD     ASC
);

CREATE TABLE HERD_PARTY_ASSOC
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			      ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	HERD_ASSOC_CD         CHAR(4)
			       NOT NULL ,
	HERD_SUB_ASSOC_CD     CHAR(4)
			      ,
	CONSTRAINT C0848_01 CHECK ( END_DATE IS NULL OR ST_DATE <= END_DATE ) 
);

CREATE TABLE HERD_RECALC_RQST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RECALC_DATA_CD        CHAR(3)
			       NOT NULL ,
	PARM                  CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0526_01 ON HERD_RECALC_RQST
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_RECALC_RQST_HIST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RECALC_DATA_CD        CHAR(3)
			       NOT NULL ,
	PARM                  CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01'
);

CREATE INDEX XIE0760_01 ON HERD_RECALC_RQST_HIST
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	RECALC_DATA_CD       ASC,
	PARM                 ASC
)
 CLUSTER;

CREATE TABLE HERD_SUB_ASSOC_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_TEST_FLASK_TP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	WEIGHT                DECIMAL(4,1)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_TEST_METER_NOZZLE
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	NOZZLE_SIZE           DECIMAL(4,1)
			       NOT NULL 
);

CREATE TABLE HERD_TEST_SV
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	HERD_DTL_RCD_DATE     INTEGER
			       NOT NULL  DEFAULT 0,
	PREF_FRST_DATE        CHAR(6)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	SSN                   SMALLINT
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL  CONSTRAINT  C0046_01 CHECK ( RGN_CD IN ('  L1','  L2','  L3','  L4','  L5','  L6') ),
	HT_FREQ_CD            CHAR(1)
			       NOT NULL ,
	SCC_FREQ_CD           CHAR(1)
			       NOT NULL ,
	MILK_SMPL_MTHD_CD     DECIMAL(1)
			       NOT NULL ,
	RQRD_OFFCR_CNT        DECIMAL(1)
			       NOT NULL ,
	PD_1                  SMALLINT
			       NOT NULL ,
	PD_1_DAY              SMALLINT
			       NOT NULL ,
	PD_2                  SMALLINT
			       NOT NULL ,
	PD_2_DAY              SMALLINT
			       NOT NULL ,
	PD_3                  SMALLINT
			       NOT NULL ,
	PD_3_DAY              SMALLINT
			       NOT NULL ,
	PD_4                  SMALLINT
			       NOT NULL ,
	PD_4_DAY              SMALLINT
			       NOT NULL ,
	PD_5                  SMALLINT
			       NOT NULL ,
	PD_5_DAY              SMALLINT
			       NOT NULL ,
	PD_6                  SMALLINT
			       NOT NULL ,
	PD_6_DAY              SMALLINT
			       NOT NULL ,
	PD_7                  SMALLINT
			       NOT NULL ,
	PD_7_DAY              SMALLINT
			       NOT NULL ,
	PD_8                  SMALLINT
			       NOT NULL ,
	PD_8_DAY              SMALLINT
			       NOT NULL ,
	PD_9                  SMALLINT
			       NOT NULL ,
	PD_9_DAY              SMALLINT
			       NOT NULL ,
	PD_10                 SMALLINT
			       NOT NULL ,
	PD_10_DAY             SMALLINT
			       NOT NULL ,
	PD_11                 SMALLINT
			       NOT NULL ,
	PD_11_DAY             SMALLINT
			       NOT NULL ,
	PD_12                 SMALLINT
			       NOT NULL ,
	PD_12_DAY             SMALLINT
			       NOT NULL ,
	ALT_DATE_1_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_2_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_3_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_4_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_5_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_6_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_7_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_8_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_9_IND        DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_10_IND       DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_11_IND       DECIMAL(1)
			       NOT NULL ,
	ALT_DATE_12_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_1_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_2_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_3_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_4_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_5_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_6_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_7_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_8_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_9_IND        DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_10_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_11_IND       DECIMAL(1)
			       NOT NULL ,
	SCC_RQRD_12_IND       DECIMAL(1)
			       NOT NULL ,
	FRST_SELF_SMPL_IND    DECIMAL(1)
			       NOT NULL ,
	VST_OPT_CD            CHAR(1)
			       NOT NULL ,
	RQRD_VST_CNT          SMALLINT
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	HERD_DTL_RCD_DATE_D   DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	ONCE_DAY_MILK_CD      CHAR(2)
			       CONSTRAINT  C0046_02 CHECK ( ONCE_DAY_MILK_CD IN ('AM','PM') OR ONCE_DAY_MILK_CD IS NULL ),
	DATA_COLLN_METHOD_CD_1  CHAR(1)
			       CONSTRAINT  C0046_03 CHECK ( DATA_COLLN_METHOD_CD_1 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_2  CHAR(1)
			       CONSTRAINT  C0046_04 CHECK ( DATA_COLLN_METHOD_CD_2 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_3  CHAR(1)
			       CONSTRAINT  C0046_05 CHECK ( DATA_COLLN_METHOD_CD_3 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_4  CHAR(1)
			       CONSTRAINT  C0046_06 CHECK ( DATA_COLLN_METHOD_CD_4 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_5  CHAR(1)
			       CONSTRAINT  C0046_07 CHECK ( DATA_COLLN_METHOD_CD_5 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_6  CHAR(1)
			       CONSTRAINT  C0046_08 CHECK ( DATA_COLLN_METHOD_CD_6 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_7  CHAR(1)
			       CONSTRAINT  C0046_09 CHECK ( DATA_COLLN_METHOD_CD_7 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_8  CHAR(1)
			       CONSTRAINT  C0046_10 CHECK ( DATA_COLLN_METHOD_CD_8 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_9  CHAR(1)
			       CONSTRAINT  C0046_11 CHECK ( DATA_COLLN_METHOD_CD_9 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_10  CHAR(1)
			       CONSTRAINT  C0046_12 CHECK ( DATA_COLLN_METHOD_CD_10 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_11  CHAR(1)
			       CONSTRAINT  C0046_13 CHECK ( DATA_COLLN_METHOD_CD_11 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_12  CHAR(1)
			       CONSTRAINT  C0046_14 CHECK ( DATA_COLLN_METHOD_CD_12 IN ('E','T','C') ),
	USED_EZLINK_IND       CHAR(1)
			       CONSTRAINT  C0046_15 CHECK ( USED_EZLINK_IND IN ('Y','N') ),
	upd_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	herd_dtl_rcd_date_d   CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	herd_dtl_rcd_date     CHAR(18)
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	ssn                   CHAR(18)
			      
);

CREATE INDEX XFK0046_02 ON HERD_TEST_SV
(
	SV_TP_CD             ASC
);

CREATE INDEX XIE0046_01 ON HERD_TEST_SV
(
	UPD_TIME             ASC
);

CREATE TABLE HERD_UPD
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	USER_ID               CHAR(8)
			       NOT NULL ,
	HERD_UPD_STS_CD       CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	PROC_IND              CHAR(1)
			       NOT NULL ,
	DFLT_DOC_ROUTE        CHAR(3)
			       NOT NULL ,
	DIST_TEAM_CD          CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			      ,
	UPD_PROG_ID           CHAR(8)
			      ,
	MINDA_CHK_IND         CHAR(1)
			       CONSTRAINT  C0211_01 CHECK ( MINDA_CHK_IND IN ('Y', 'N') ),
	UPD_DATE_D            DATE
			       NOT NULL ,
	ownr_ptpt_cd          CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      
);

CREATE INDEX XIE0211_01 ON HERD_UPD
(
	HERD_UPD_STS_CD      ASC,
	USER_ID              ASC,
	UPD_DATE             ASC
);

CREATE INDEX XIE0211_02 ON HERD_UPD
(
	HERD_UPD_STS_CD      ASC,
	DIST_TEAM_CD         ASC,
	UPD_DATE             ASC
);

CREATE INDEX XIE0211_03 ON HERD_UPD
(
	DIST_TEAM_CD         ASC
);

CREATE TABLE HERD_UPD_CMT
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	LINE_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE HERD_UPD_ERR
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	REF_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	BATCH_UPD_ERR_CD      SMALLINT
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	ERR_LVL_CD            DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0212_01 CHECK ( ERR_LVL_CD BETWEEN 1 AND 9 ),
	OTH_REF_NUM           INTEGER
			       NOT NULL ,
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	DATA                  CHAR(250)
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	CREATE_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	create_date           CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      ,
	ownr_ptpt_cd          CHAR(18)
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	ref_num               CHAR(18)
			      
);

CREATE INDEX XIE0212_01 ON HERD_UPD_ERR
(
	ANML_KEY             ASC,
	ERR_LVL_CD           ASC,
	OWNR_PTPT_CD         ASC,
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE INDEX XIE0212_02 ON HERD_UPD_ERR
(
	CREATE_DATE          ASC,
	ERR_LVL_CD           ASC
);

CREATE INDEX XIE0212_03 ON HERD_UPD_ERR
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0212_04 ON HERD_UPD_ERR
(
	CREATE_DATE_D        ASC,
	ERR_LVL_CD           ASC,
	BATCH_UPD_ERR_CD     ASC
);

CREATE TABLE HERD_UPD_LOG
(
	UPD_TIME              TIMESTAMP
			      ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	HERD_UPD_STS_CD       CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	PROC_IND              CHAR(1)
			       NOT NULL ,
	DFLT_DOC_ROUTE        CHAR(3)
			       NOT NULL ,
	DIST_TEAM_CD          CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			      ,
	UPD_PROG_ID           CHAR(8)
			      ,
	MINDA_CHK_IND         CHAR(1)
			       CONSTRAINT  C0171_01 CHECK ( MINDA_CHK_IND IN ('Y', 'N') ),
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0171_01 ON HERD_UPD_LOG
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	UPD_TIME             ASC
);

CREATE TABLE HERD_UPD_RSLV_ERR
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	REF_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	BATCH_UPD_ERR_CD      SMALLINT
			       NOT NULL ,
	ERR_LVL_CD            SMALLINT
			       NOT NULL ,
	OTH_REF_NUM           INTEGER
			       NOT NULL ,
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	DATA                  CHAR(250)
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	RSLV_DATE             DATE
			       NOT NULL  DEFAULT CURRENT DATE,
	RSLV_TIME             TIME
			       NOT NULL  DEFAULT CURRENT TIME,
	RSLV_MTHD_CD          CHAR(1)
			      ,
	RSLV_USER_ID          CHAR(8)
			      ,
	CREATE_DATE_D         DATE
			      ,
	create_date           CHAR(18)
			      ,
	create_date_d         CHAR(18)
			      ,
	CONSTRAINT C0213_02 CHECK ( RSLV_DATE <= '2002-05-07' OR RSLV_MTHD_CD IS NOT NULL AND RSLV_USER_ID IS NOT NULL  ) 
);

CREATE INDEX XFK0213_01 ON HERD_UPD_RSLV_ERR
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0213_01 ON HERD_UPD_RSLV_ERR
(
	CREATE_DATE          ASC,
	ERR_LVL_CD           ASC
);

CREATE INDEX XIE0213_02 ON HERD_UPD_RSLV_ERR
(
	RSLV_DATE            ASC
);

CREATE INDEX XIE0213_03 ON HERD_UPD_RSLV_ERR
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0213_04 ON HERD_UPD_RSLV_ERR
(
	CREATE_DATE_D        ASC,
	ERR_LVL_CD           ASC,
	BATCH_UPD_ERR_CD     ASC
);

CREATE TABLE HERD_UPD_RSLV_ERR_OLD
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	REF_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	BATCH_UPD_ERR_CD      SMALLINT
			       NOT NULL ,
	ERR_LVL_CD            SMALLINT
			       NOT NULL ,
	OTH_REF_NUM           INTEGER
			       NOT NULL ,
	DOC_NUM               CHAR(12)
			       NOT NULL ,
	DATA                  CHAR(250)
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	CREATE_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	RSLV_DATE             DATE
			       NOT NULL  DEFAULT CURRENT DATE,
	RSLV_TIME             TIME
			       NOT NULL  DEFAULT CURRENT TIME,
	RSLV_MTHD_CD          CHAR(1)
			      ,
	RSLV_USER_ID          CHAR(8)
			      ,
	CREATE_DATE_D         DATE
			      
);

CREATE TABLE HETEROSIS_EST
(
	EXTR_DATE             DATE
			       NOT NULL ,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FR_JR_HET             DOUBLE
			       NOT NULL ,
	AY_JR_HET             DOUBLE
			       NOT NULL ,
	FR_OTH_HET            DOUBLE
			       NOT NULL ,
	JR_OTH_HET            DOUBLE
			       NOT NULL ,
	AY_OTH_HET            DOUBLE
			       NOT NULL ,
	FR_AY_HET             DOUBLE
			       NOT NULL 
);

CREATE TABLE HHU_ALCN
(
	SERIAL_NUM            CHAR(20)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TOUR_NAME             CHAR(40)
			       NOT NULL ,
	END_DATE              DATE
			      ,
	CONSTRAINT C0594_01 CHECK ( END_DATE IS NULL OR END_DATE > ST_DATE ) 
);

CREATE TABLE HHU_APPLN
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE HIGH_INPUT_BW_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BW                    INTEGER
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL 
);

CREATE TABLE HIGH_INPUT_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_BW                INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			      ,
	ECON_WGT_HI_FAT       DECIMAL(6,2)
			      ,
	ECON_WGT_HI_PROT      DECIMAL(6,2)
			      ,
	ECON_WGT_HI_VOL       DECIMAL(6,2)
			      ,
	ECON_WGT_HI_LWGT      DECIMAL(6,2)
			      ,
	ECON_WGT_HI_FERT      DECIMAL(6,2)
			      ,
	ECON_WGT_HI_SC        DECIMAL(6,2)
			      ,
	ECON_WGT_HI_RESIDUAL_SURV  DECIMAL(6,2)
			      ,
	ECON_WGT_HI_UDDER_OVERALL  DECIMAL(6,2)
			      
);

CREATE TABLE HIGH_INPUT_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_BW                INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE HLTH_CAT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HLTH_COND
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	HLTH_CAT_CD           CHAR(4)
			       NOT NULL ,
	INTVL_NEW_CASE        DECIMAL(3)
			       NOT NULL 
);

CREATE TABLE HLTH_COND_AUDIT
(
	HLTH_COND_CD          CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	CHGD_FIELDS           CHAR(50)
			       NOT NULL ,
	REASON                CHAR(100)
			       NOT NULL 
);

CREATE TABLE HLTH_PROD
(
	CD                    CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	COY_NAME              CHAR(50)
			       NOT NULL ,
	PAR_CLASS_CD          CHAR(1)
			      ,
	RTRD_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0568_01 CHECK ( RTRD_IND IN ('Y', 'N') ),
	DRUG_PRIM_USE_CD      CHAR(2)
			      ,
	HLTH_PROD_CAT_CD      CHAR(4)
			       NOT NULL ,
	LACT_DRY_COW_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0568_02 CHECK ( LACT_DRY_COW_IND IN ('Y', 'N') ),
	CMT                   CHAR(50)
			       NOT NULL ,
	ISS_PTPT_CD           CHAR(4)
			       NOT NULL ,
	TREATMENT_METHOD_CD   CHAR(2)
			      ,
	iss_ptpt_cd           CHAR(18)
			      
);

CREATE INDEX XIE0568_04 ON HLTH_PROD
(
	ISS_PTPT_CD          ASC
);

CREATE TABLE HLTH_PROD_AUDIT
(
	HLTH_PROD_CD          CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	CHGD_FIELDS           CHAR(50)
			       NOT NULL ,
	REASON                CHAR(100)
			       NOT NULL 
);

CREATE TABLE HLTH_PROD_CAT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE HRD_MTNG_GRP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MIN_DAYS              SMALLINT
			       NOT NULL ,
	MAX_DAYS              SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0312_01 ON HRD_MTNG_GRP
(
	ID                   ASC,
	MIN_DAYS             ASC,
	MAX_DAYS             ASC
);

CREATE TABLE HT_ASSIST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	ASSIST_EMPL_NO        INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PM_ST_TIME            TIMESTAMP
			      ,
	PM_END_TIME           TIMESTAMP
			      ,
	AM_ST_TIME            TIMESTAMP
			      ,
	AM_END_TIME           TIMESTAMP
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	test_date             CHAR(18)
			      ,
	CONSTRAINT C0879_01 CHECK ( PM_ST_TIME IS NULL AND PM_END_TIME IS NULL OR PM_ST_TIME IS NOT NULL AND PM_END_TIME IS NOT NULL AND PM_ST_TIME <= PM_END_TIME ) ,
	CONSTRAINT C0879_02 CHECK ( AM_ST_TIME IS NULL AND AM_END_TIME IS NULL OR AM_ST_TIME IS NOT NULL AND AM_END_TIME IS NOT NULL AND AM_ST_TIME <= AM_END_TIME ) ,
	CONSTRAINT C0879_03 CHECK ( PM_ST_TIME IS NOT NULL OR AM_ST_TIME IS NOT NULL ) 
);

CREATE TABLE HT_CLNDR
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	AREA                  SMALLINT
			       NOT NULL ,
	PD                    SMALLINT
			       NOT NULL ,
	DAY                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0358_01 ON HT_CLNDR
(
	RGN_CD               ASC,
	SSN                  ASC,
	AREA                 ASC,
	DATE                 ASC
);

CREATE INDEX XIE0358_02 ON HT_CLNDR
(
	UPD_TIME             ASC
);

CREATE TABLE HT_RND
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	HT_STS_CD             DECIMAL(1)
			       NOT NULL ,
	NAME                  CHAR(40)
			       NOT NULL ,
	DPT_PTPT_CD           CHAR(4)
			       NOT NULL ,
	JOB_POSITION_CD       CHAR(4)
			      
);

CREATE INDEX XIE0172_01 ON HT_RND
(
	SUPR_PTPT_CD         ASC
);

CREATE INDEX XIE0172_02 ON HT_RND
(
	DPT_PTPT_CD          ASC
);

CREATE INDEX XIE0172_03 ON HT_RND
(
	UPD_TIME             ASC
);

CREATE TABLE HT_RND_OFFCR
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	RND_NUM               SMALLINT
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE INDEX XIE0082_01 ON HT_RND_OFFCR
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0082_02 ON HT_RND_OFFCR
(
	UPD_TIME             ASC
);

CREATE TABLE HT_RND_VISIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SCHED_VISIT_ID        INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	RND_NUM               SMALLINT
			       NOT NULL 
);

CREATE TABLE HT_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NO_INSP_RSN_CD        SMALLINT
			       NOT NULL ,
	MILK_ABNM_CD          SMALLINT
			       NOT NULL ,
	NON_USE_RSN_CD        SMALLINT
			       NOT NULL ,
	TEST_ASSESS_STS_CD    CHAR(1)
			       NOT NULL ,
	AM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	PM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	THIRD_VOL             DECIMAL(3,1)
			       NOT NULL ,
	FAT_PCT               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PCT              DECIMAL(5,2)
			       NOT NULL ,
	LCTS_PCT              DECIMAL(5,2)
			       NOT NULL ,
	SCC                   INTEGER
			       NOT NULL ,
	PE                    SMALLINT
			       NOT NULL ,
	VALID_IND             CHAR(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			      ,
	SAMPLE_REGIME_CD      SMALLINT
			      ,
	AVG_NUM_MILKINGS      DECIMAL(5,2)
			      ,
	MILKING_INTERVAL      SMALLINT
			      ,
	ACTUAL_AM_VOL         DECIMAL(3,1)
			      ,
	AM_VOL_DERIVED_IND    CHAR(1)
			       CONSTRAINT  C0262_01 CHECK ( AM_VOL_DERIVED_IND IN ('Y','N') ),
	ACTUAL_PM_VOL         DECIMAL(3,1)
			      ,
	PM_VOL_DERIVED_IND    CHAR(1)
			       CONSTRAINT  C0262_02 CHECK ( PM_VOL_DERIVED_IND IN ('Y','N') ),
	ACTUAL_FAT_PCT        DECIMAL(5,2)
			      ,
	FAT_PCT_DERIVED_IND   CHAR(1)
			       CONSTRAINT  C0262_03 CHECK ( FAT_PCT_DERIVED_IND IN ('Y','N') ),
	ACTUAL_PROT_PCT       DECIMAL(5,2)
			      ,
	PROT_PCT_DERIVED_IND  CHAR(1)
			       CONSTRAINT  C0262_04 CHECK ( PROT_PCT_DERIVED_IND IN ('Y','N') ),
	ACTUAL_SCC            INTEGER
			      ,
	SCC_DERIVED_IND       CHAR(1)
			       CONSTRAINT  C0262_05 CHECK ( SCC_DERIVED_IND IN ('Y','N') ),
	date_d                CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	anml_key              CHAR(18)
			      ,
	milk_abnm_cd          CHAR(18)
			      ,
	sample_regime_cd      CHAR(18)
			      
);

CREATE INDEX XIE0262_01 ON HT_RSLT
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	DATE                 ASC
);

CREATE INDEX XIE0262_02 ON HT_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE HT_RSLT_ARCHIVE
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NO_INSP_RSN_CD        SMALLINT
			       NOT NULL ,
	MILK_ABNM_CD          SMALLINT
			       NOT NULL ,
	NON_USE_RSN_CD        SMALLINT
			       NOT NULL ,
	TEST_ASSESS_STS_CD    CHAR(1)
			       NOT NULL ,
	AM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	PM_VOL                DECIMAL(3,1)
			       NOT NULL ,
	THIRD_VOL             DECIMAL(3,1)
			       NOT NULL ,
	FAT_PCT               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PCT              DECIMAL(5,2)
			       NOT NULL ,
	LCTS_PCT              DECIMAL(5,2)
			       NOT NULL ,
	SCC                   INTEGER
			       NOT NULL ,
	PE                    SMALLINT
			       NOT NULL ,
	VALID_IND             CHAR(1)
			       NOT NULL 
);

CREATE INDEX XIE0875_01 ON HT_RSLT_ARCHIVE
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	DATE                 ASC
);

CREATE TABLE HT_SCHED
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PREF_FIRST_DATE       DATE
			      ,
	END_DATE              DATE
			      ,
	RGN_CD                CHAR(4)
			       NOT NULL  CONSTRAINT  C0046_01 CHECK ( RGN_CD IN ('  L1','  L2','  L3','  L4','  L5','  L6') ),
	SERVICE_TP_CD         SMALLINT
			       NOT NULL ,
	TEST_INTERVAL         SMALLINT
			       NOT NULL ,
	FIRST_SELF_SAMPLE_IND  CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_01 CHECK ( FIRST_SELF_SAMPLE_IND IN ('Y','N') ),
	RQRD_VISIT_CNT        SMALLINT
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PLAN_CMT              VARCHAR(512)
			      ,
	OP_CMT                VARCHAR(512)
			      ,
	USED_EZLINK_IND       CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_02 CHECK ( USED_EZLINK_IND IN ('Y','N') ),
	FIRST_TIME_HT_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_03 CHECK ( FIRST_TIME_HT_IND IN ('Y','N') ),
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	MILK_SAMPLE_METHOD_CD  DECIMAL(1)
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	HT_SMS_NOTIFY_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_04 CHECK ( HT_SMS_NOTIFY_IND IN ('Y','N') ),
	HT_SMS_CTCT_CD        CHAR(1)
			      ,
	COMBINED_HERD_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_06 CHECK ( COMBINED_HERD_IND IN ('Y','N') ),
	SHARED_DAIRY_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_05 CHECK ( SHARED_DAIRY_IND IN ('Y','N') ),
	SEC_HERD_PTPT_CD      CHAR(4)
			      ,
	CUPS_2                SMALLINT
			      ,
	FARM_DAIRY_DESIGN_CD_2  CHAR(1)
			      ,
	MC_CLUSTER_CD_2       CHAR(1)
			      ,
	SPEC_TRAY_RQRMT_IND   CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_07 CHECK ( SPEC_TRAY_RQRMT_IND IN ('Y','N') ),
	STAFF_CNT             SMALLINT
			      ,
	PM_MILKING_ST_TIME    TIME
			      ,
	AM_MILKING_ST_TIME    TIME
			      ,
	ADD_BRACKET_CNT       SMALLINT
			      ,
	BRACKET_TP_CD         CHAR(4)
			      ,
	DAIRY_UPGRADE_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0595_09 CHECK ( DAIRY_UPGRADE_IND IN ('Y','N') ),
	DAIRY_UPGRADE_DATE    DATE
			      ,
	HT_SERVICE_RATING_CD  CHAR(1)
			      ,
	HT_SERVICE_RATING_CMT  VARCHAR(250)
			      ,
	BRACKET_DELIVERY_IND  CHAR(1)
			       CONSTRAINT  C0595_08 CHECK ( BRACKET_DELIVERY_IND IN ('Y','N') ),
	HT_CTCT_CD            CHAR(1)
			       NOT NULL ,
	HT_CTCT_NAME          CHAR(25)
			      ,
	HT_CTCT_PHONE_NUM     CHAR(20)
			      ,
	HT_CTCT_MOBILE_NUM    CHAR(20)
			      ,
	PREF_DATA_COLLN_METHOD_CD  CHAR(4)
			      ,
	EZLINK_UNITS          INTEGER
			      ,
	PAPER_LABSTRIP_IND    CHAR(1)
			       CONSTRAINT  C0595_13 CHECK ( PAPER_LABSTRIP_IND IN ('Y','N') ),
	MAJOR_RND_NUM         SMALLINT
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	ssn                   CHAR(18)
			      ,
	milking_regime_cd     CHAR(18)
			      ,
	sample_regime_cd      CHAR(18)
			      ,
	service_lvl_cd        CHAR(18)
			      ,
	sec_herd_ptpt_cd      CHAR(18)
			      ,
	farm_dairy_design_cd_2  CHAR(18)
			      ,
	mc_cluster_cd_2       CHAR(18)
			      ,
	bracket_tp_cd         CHAR(18)
			      ,
	ht_ctct_cd            CHAR(18)
			      ,
	milk_sample_method_cd  CHAR(18)
			      ,
	ht_service_rating_cd  CHAR(18)
			      ,
	pref_data_colln_method_cd  CHAR(18)
			      ,
	CONSTRAINT C0595_10 CHECK ( CUPS_2 IS NULL AND FARM_DAIRY_DESIGN_CD_2 IS NULL AND MC_CLUSTER_CD_2 IS NULL OR CUPS_2 IS NOT NULL AND FARM_DAIRY_DESIGN_CD_2 IS NOT NULL AND MC_CLUSTER_CD_2 IS NOT NULL ) ,
	CONSTRAINT C0595_11 CHECK ( HT_SMS_CTCT_CD != 'H' OR HT_CTCT_MOBILE_NUM IS NOT NULL AND HT_CTCT_MOBILE_NUM != ' ' ) ,
	CONSTRAINT C0595_12 CHECK ( HT_CTCT_CD != 'H' OR HT_CTCT_NAME IS NOT NULL AND (HT_CTCT_PHONE_NUM IS NOT NULL AND HT_CTCT_PHONE_NUM != ' 'OR HT_CTCT_MOBILE_NUM IS NOT NULL AND HT_CTCT_MOBILE_NUM != ' ') ) ,
	CONSTRAINT C0595_14 CHECK ( PREF_DATA_COLLN_METHOD_CD  IN ('E', 'I') AND EZLINK_UNITS IS NOT NULL AND EZLINK_UNITS > 0 OR PREF_DATA_COLLN_METHOD_CD NOT IN ('E', 'I') AND EZLINK_UNITS IS NULL ) 
);

CREATE INDEX XIE0595_01 ON HT_SCHED
(
	UPD_TIME             ASC
);

CREATE TABLE HT_SCHED_VISIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 32000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	MILK_SAMPLE_METHOD_CD  DECIMAL(1)
			       NOT NULL ,
	STAFF_CNT             DECIMAL(2)
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			      ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	SERVICE_TP_CD         SMALLINT
			       NOT NULL ,
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	PREF_DATA_COLLN_METHOD_CD  CHAR(4)
			       NOT NULL  DEFAULT 'C',
	EZLINK_UNITS          SMALLINT
			      ,
	DEPOT_PTPT_CD         CHAR(4)
			      ,
	HT_VEHICLE_NUM        CHAR(10)
			      ,
	id                    CHAR(18)
			      ,
	service_lvl_cd        CHAR(18)
			      ,
	milk_sample_method_cd  CHAR(18)
			      ,
	sample_regime_cd      CHAR(18)
			      ,
	milking_regime_cd     CHAR(18)
			      ,
	CONSTRAINT C0398_01 CHECK ( PREF_DATA_COLLN_METHOD_CD  IN ('E', 'I') AND EZLINK_UNITS IS NOT NULL AND EZLINK_UNITS > 0 OR PREF_DATA_COLLN_METHOD_CD  NOT IN ('E', 'I') AND EZLINK_UNITS IS NULL ) 
);

CREATE INDEX XIE0398_01 ON HT_SCHED_VISIT
(
	UPD_TIME             ASC
);

CREATE TABLE HT_TDM_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	MILKING_TIME_CD       CHAR(2)
			       NOT NULL  CONSTRAINT  C0886_01 CHECK ( MILKING_TIME_CD IN ('AM','PM') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	MILK_ABNM_CD          SMALLINT
			       NOT NULL ,
	VOL                   DECIMAL(4,1)
			      ,
	SAMPLE_WGT            DECIMAL(5,2)
			      ,
	FAT_PCT               DECIMAL(5,2)
			      ,
	PROT_PCT              DECIMAL(5,2)
			      ,
	LACTOSE_PCT           DECIMAL(5,2)
			      ,
	SCC                   INTEGER
			      
);

CREATE INDEX XIE0886_01 ON HT_TDM_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE HT_TDM_VST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              INTEGER
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NOZZLE_SIZE           DECIMAL(2,1)
			       NOT NULL ,
	MILKING_INTERVAL      SMALLINT
			       NOT NULL ,
	MILKING_CNT           SMALLINT
			       NOT NULL  CONSTRAINT  C0887_01 CHECK ( MILKING_CNT BETWEEN 1 AND 3 )
);

CREATE INDEX XIE0887_01 ON HT_TDM_VST
(
	UPD_TIME             ASC
);

CREATE TABLE HT_VEHICLE
(
	DEPOT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	HT_VEHICLE_NUM        CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	TRAY_CAPACITY         SMALLINT
			      ,
	METER_CAPACITY        SMALLINT
			      ,
	CMT                   VARCHAR(512)
			      
);

CREATE TABLE HT_VST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	SSN                   SMALLINT
			       NOT NULL ,
	HT_SV_TP_CD           SMALLINT
			       NOT NULL ,
	HT_LAB_CD             CHAR(4)
			       NOT NULL ,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_IND               DECIMAL(1)
			       NOT NULL ,
	LAB_HERD_ID           CHAR(6)
			       NOT NULL ,
	SUPR_MTHD_CD          DECIMAL(1)
			       NOT NULL ,
	STAFF_CNT             DECIMAL(1)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	PD                    SMALLINT
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	RETEST_IND            DECIMAL(1)
			       NOT NULL  DEFAULT 0,
	SCC_XMIT_IND          CHAR(1)
			       NOT NULL  DEFAULT 'N',
	PM_VOL                DECIMAL(7,1)
			       NOT NULL ,
	AM_VOL                DECIMAL(7,1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	THIRD_VOL             DECIMAL(7,1)
			       NOT NULL ,
	FAT                   DECIMAL(7,2)
			       NOT NULL ,
	PROT                  DECIMAL(7,2)
			       NOT NULL ,
	LCTS                  DECIMAL(7,2)
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	PM_COW_CNT            SMALLINT
			       NOT NULL ,
	AM_COW_CNT            SMALLINT
			       NOT NULL ,
	THIRD_COW_CNT         SMALLINT
			       NOT NULL ,
	HT_FREQ_CD            CHAR(1)
			      ,
	CHRG_IND              CHAR(1)
			       NOT NULL ,
	CHRG_COW_CNT          SMALLINT
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL  WITH DEFAULT,
	SCC                   INTEGER
			      ,
	EXTR_DATE             DATE
			      ,
	CLVG_DATE_15_MTH      SMALLINT
			      ,
	UNRCD_CLVG_DATE       SMALLINT
			      ,
	TEST_AFT_DRY_CNT      SMALLINT
			      ,
	UNRCD_COW_CNT         SMALLINT
			      ,
	RSLTS_PROC_TIME       TIMESTAMP
			      ,
	PROC_HT_DATA_IND      CHAR(1)
			       CONSTRAINT  C0298_01 CHECK ( PROC_HT_DATA_IND IN ('Y', 'N') ),
	HERD_CLVG_PCT         SMALLINT
			      ,
	TTL_SMPL_COW_CNT      INTEGER
			      ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	RQST_DATE_D           DATE
			       DEFAULT '0001-01-01',
	RCD_DATE_D            DATE
			      ,
	ASSIST_MILKING_CNT    SMALLINT
			      ,
	EQUIP_USE_CD          CHAR(1)
			       DEFAULT 'N',
	PRE_TEST_MILK_TIME    TIMESTAMP
			      ,
	FIRST_TEST_TIME       TIMESTAMP
			      ,
	SECOND_TEST_TIME      TIMESTAMP
			      ,
	SAMPLE_REGIME_CD      SMALLINT
			      ,
	AVG_NUM_MILKINGS      DECIMAL(5,2)
			      ,
	SERVICE_LVL_CD        CHAR(1)
			      ,
	EQUIP_CNT             SMALLINT
			      ,
	SAMPLE_REGIME_CNT_TAD  SMALLINT
			      ,
	SAMPLE_REGIME_CNT_AM_ONLY  SMALLINT
			      ,
	SAMPLE_REGIME_CNT_PM_ONLY  SMALLINT
			      ,
	SAMPLE_REGIME_CNT_OAD_AM  SMALLINT
			      ,
	SAMPLE_REGIME_CNT_OAD_PM  SMALLINT
			      ,
	test_date_d           CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      ,
	test_date             CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      ,
	sample_regime_cd      CHAR(18)
			      ,
	service_lvl_cd        CHAR(18)
			      ,
	CONSTRAINT C0298_022 CHECK ( STAFF_CNT = 0 and (ASSIST_MILKING_CNT = 0 OR ASSIST_MILKING_CNT IS NULL) OR STAFF_CNT != 0 ) 
);

CREATE INDEX XIE0298_01 ON HT_VST
(
	ORG_PTPT_CD          ASC
);

CREATE INDEX XIE0298_02 ON HT_VST
(
	EXTR_DATE            ASC
);

CREATE INDEX XIE0298_03 ON HT_VST
(
	UPD_TIME             ASC
);

CREATE TABLE HT_VST_DEL
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SSN                   SMALLINT
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	REASON                CHAR(50)
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      ,
	reason                CHAR(18)
			      
);

CREATE INDEX XIE0299_01 ON HT_VST_DEL
(
	UPD_TIME             ASC
);

CREATE TABLE INET_LOG
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ACCS_TIME             TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	PAGE                  CHAR(8)
			       NOT NULL ,
	IP_ADDR               CHAR(20)
			      ,
	HERD_CD               INTEGER
			      ,
	RGN_CD                CHAR(4)
			      ,
	DOC_TP_CD             CHAR(3)
			      ,
	REPLY_CD              SMALLINT
			       NOT NULL ,
	PGM_ID                VARCHAR(100)
			      ,
	PARAMETER             VARCHAR(100)
			      ,
	ERROR                 VARCHAR(100)
			      ,
	ACCS_YEAR             CHAR(4)
			      ,
	ACCS_MONTH            CHAR(2)
			      ,
	DATA_LAYOUT_CD        CHAR(8)
			      ,
	TRANS_CD              CHAR(1)
			      ,
	ACCT_EXTR_DATE        DATE
			      ,
	USER_LOGIN            CHAR(20)
			      ,
	CHRG_IND              CHAR(1)
			       CONSTRAINT  C0247_01 CHECK ( CHRG_IND IN ('Y', 'N') ),
	ELAPSED_TIME          INTEGER
			      ,
	CHRG_PTPT_CD          CHAR(4)
			      ,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	HT_VST_DATE           DATE
			      ,
	CHRG_PARTY_ID         INTEGER
			      ,
	RCPNT_PARTY_ID        INTEGER
			      ,
	MINDA_USAGE_PROC_IND  CHAR(1)
			       CONSTRAINT  C0247_03 CHECK ( MINDA_USAGE_PROC_IND IN ('Y','N') ),
	rcpnt_ptpt_cd         CHAR(18)
			      ,
	chrg_ptpt_cd          CHAR(18)
			      ,
	CONSTRAINT C0247_02 CHECK ( RGN_CD IS NULL AND HERD_CD IS NULL OR RGN_CD IS NOT NULL AND HERD_CD IS NOT NULL ) 
);

CREATE INDEX XIE0247_01 ON INET_LOG
(
	RCPNT_PTPT_CD        ASC,
	PGM_ID               ASC
);

CREATE INDEX XIE0247_02 ON INET_LOG
(
	REPLY_CD             ASC,
	PAGE                 ASC
);

CREATE INDEX XIE0247_03 ON INET_LOG
(
	ACCS_YEAR            ASC,
	ACCS_MONTH           ASC
)
 CLUSTER;

CREATE INDEX XIE0247_04 ON INET_LOG
(
	ACCS_TIME            DESC,
	REPLY_CD             ASC,
	PAGE                 ASC
);

CREATE INDEX XIE0247_05 ON INET_LOG
(
	MINDA_USAGE_PROC_IND DESC
);

CREATE TABLE INSEM_LLL_SEMEN
(
	DEMAND_DATE           DATE
			       NOT NULL ,
	INSEM_GRP_RGN_CD      CHAR(4)
			       NOT NULL ,
	INSEM_GRP_NUM         INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CALC_DOSE_CNT         INTEGER
			       NOT NULL ,
	MAN_ADJ_DOSE_CNT      SMALLINT
			       NOT NULL  DEFAULT 0,
	DESP_DATE             DATE
			       NOT NULL ,
	RECORD_SOURCE_CD      CHAR(2)
			       CONSTRAINT  C0613_02 CHECK ( RECORD_SOURCE_CD IN ('MP', 'TR', 'XB') )
);

CREATE INDEX XIE0613_01 ON INSEM_LLL_SEMEN
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0613_02 ON INSEM_LLL_SEMEN
(
	DESP_DATE            ASC
);

CREATE TABLE INSEM_TP
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0033_01 ON INSEM_TP
(
	UPD_TIME             ASC
);

CREATE TABLE INTERBULL_BV_RSLT
(
	EXTR_DATE             DATE
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	VOL_BV_NZ             INTEGER
			       NOT NULL ,
	VOL_BV_REL_NZ         DECIMAL(3,1)
			       NOT NULL ,
	VOL_DTR_CONTRIB       INTEGER
			       NOT NULL ,
	VOL_DTR_CNT           INTEGER
			       NOT NULL ,
	VOL_HERD_CNT          INTEGER
			       NOT NULL ,
	FAT_BV_NZ             DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL_NZ         DECIMAL(3,1)
			       NOT NULL ,
	FAT_DTR_CONTRIB       INTEGER
			       NOT NULL ,
	FAT_DTR_CNT           INTEGER
			       NOT NULL ,
	FAT_HERD_CNT          INTEGER
			       NOT NULL ,
	PROT_BV_NZ            DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL_NZ        DECIMAL(3,1)
			       NOT NULL ,
	PROT_DTR_CONTRIB      INTEGER
			       NOT NULL ,
	PROT_DTR_CNT          INTEGER
			       NOT NULL ,
	PROT_HERD_CNT         INTEGER
			       NOT NULL ,
	FERT_BV_NZ            DECIMAL(5,1)
			      ,
	FERT_BV_REL_NZ        DECIMAL(3,1)
			      ,
	FERT_DTR_CONTRIB      INTEGER
			      ,
	FERT_DTR_CNT          INTEGER
			      ,
	FERT_HERD_CNT         INTEGER
			      ,
	SC_BV_NZ              DECIMAL(5,2)
			      ,
	SC_BV_REL_NZ          DECIMAL(3,1)
			      ,
	SC_DTR_CONTRIB        INTEGER
			      ,
	SC_DTR_CNT            INTEGER
			      ,
	SC_HERD_CNT           INTEGER
			      ,
	TOT_LONG_BV_NZ        INTEGER
			      ,
	TOT_LONG_BV_REL_NZ    DECIMAL(3,1)
			      ,
	TOT_LONG_DTR_CONTRIB  INTEGER
			      ,
	TOT_LONG_DTR_CNT      INTEGER
			      ,
	TOT_LONG_HERD_CNT     INTEGER
			      ,
	TOP_DTR_CNT           INTEGER
			      ,
	TOP_HERD_CNT          INTEGER
			      ,
	STATURE_BV_NZ         DECIMAL(4,3)
			      ,
	STATURE_BV_REL_NZ     DECIMAL(3,1)
			      ,
	STATURE_DTR_CONTRIB   INTEGER
			      ,
	CAPACITY_BV_NZ        DECIMAL(4,3)
			      ,
	CAPACITY_BV_REL_NZ    DECIMAL(3,1)
			      ,
	CAPACITY_DTR_CONTRIB  INTEGER
			      ,
	RUMP_ANGLE_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_ANGLE_BV_REL_NZ  DECIMAL(3,1)
			      ,
	RUMP_ANGLE_DTR_CONTRIB  INTEGER
			      ,
	RUMP_WIDTH_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_WIDTH_BV_REL_NZ  DECIMAL(3,1)
			      ,
	RUMP_WIDTH_DTR_CONTRIB  INTEGER
			      ,
	LEGS_BV_NZ            DECIMAL(4,3)
			      ,
	LEGS_BV_REL_NZ        DECIMAL(3,1)
			      ,
	LEGS_DTR_CONTRIB      INTEGER
			      ,
	UDDER_SUPPORT_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_SUPPORT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	UDDER_SUPPORT_DTR_CONTRIB  INTEGER
			      ,
	FRONT_UDDER_BV_NZ     DECIMAL(4,3)
			      ,
	FRONT_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_UDDER_DTR_CONTRIB  INTEGER
			      ,
	REAR_UDDER_BV_NZ      DECIMAL(4,3)
			      ,
	REAR_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	REAR_UDDER_DTR_CONTRIB  INTEGER
			      ,
	FRONT_TEAT_BV_NZ      DECIMAL(4,3)
			      ,
	FRONT_TEAT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_TEAT_DTR_CONTRIB  INTEGER
			      ,
	REAR_TEAT_BV_NZ       DECIMAL(4,3)
			      ,
	REAR_TEAT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	REAR_TEAT_DTR_CONTRIB  INTEGER
			      ,
	UDDER_OVERALL_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_OVERALL_BV_REL_NZ  DECIMAL(3,1)
			      ,
	UDDER_OVERALL_DTR_CONTRIB  INTEGER
			      ,
	DAIRY_CONF_BV_NZ      DECIMAL(4,3)
			      ,
	DAIRY_CONF_BV_REL_NZ  DECIMAL(3,1)
			      ,
	DAIRY_CONF_DTR_CONTRIB  INTEGER
			      ,
	PM21_FERT_BV_NZ       DECIMAL(5,1)
			      ,
	PM21_FERT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	PM21_FERT_DTR_CONTRIB  INTEGER
			      ,
	PM21_FERT_DTR_CNT     INTEGER
			      ,
	PM21_FERT_HERD_CNT    INTEGER
			      ,
	HFR_FERT_BV_NZ        DECIMAL(5,1)
			      ,
	HFR_FERT_BV_REL_NZ    DECIMAL(3,1)
			      ,
	HFR_FERT_DTR_CONTRIB  INTEGER
			      ,
	HFR_FERT_DTR_CNT      INTEGER
			      ,
	HFR_FERT_HERD_CNT     INTEGER
			      
);

CREATE TABLE INTERBULL_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCVD_DATE             DATE
			      ,
	EVALUATION_DATE_PROD  DATE
			       NOT NULL ,
	EVALUATION_DATE_SC    DATE
			       NOT NULL ,
	EVALUATION_DATE_TOT_LONG  DATE
			       NOT NULL ,
	EVALUATION_DATE_FERT  DATE
			       NOT NULL ,
	EVALUATION_DATE_TOP   DATE
			       NOT NULL ,
	INTERBULL_YR          INTEGER
			      ,
	INTERBULL_MONTH       SMALLINT
			      
);

CREATE TABLE INTL_AI_TECH_VISIT
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	EMPL_PTPT_CD          CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CHECK_DIGIT           INTEGER
			       NOT NULL ,
	ROLE_CD               CHAR(3)
			       NOT NULL  CONSTRAINT  C0805_01 CHECK ( ROLE_CD IN ('TAS', 'APP', 'ABT', 'SNR', 'SVR')  )
);

CREATE TABLE INTL_ANML
(
	ANML_KEY              INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NATIONAL_ANML_ID      CHAR(15)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	HDBK_NUM              CHAR(13)
			      ,
	BIRTH_DATE            DATE
			      ,
	HDBK_COUNTRY_ID       INTEGER
			       NOT NULL ,
	LONG_NAME             CHAR(40)
			      ,
	SHORT_NAME            CHAR(20)
			      
);

CREATE TABLE INTL_ANML_GRP
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	REG_CENTRE_ID         INTEGER
			       NOT NULL ,
	GRP_OWNER_ID          INTEGER
			       NOT NULL ,
	NATIONAL_GRP_ID       CHAR(13)
			       NOT NULL ,
	PRIM_LOCN_CD          CHAR(10)
			      ,
	SEC_LOCN_CD           CHAR(10)
			      
);

CREATE TABLE INTL_ANML_GRP_MEMB
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	ANML_GRP_ID           INTEGER
			       NOT NULL ,
	GRP_ANML_ID           CHAR(10)
			       NOT NULL ,
	ID_ST_DATE            DATE
			      ,
	ID_END_DATE           DATE
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE INTL_ANML_REG_CENTRE
(
	REG_CENTRE_ID         INTEGER
			       NOT NULL ,
	AUSTRALIAN_DPC_CD     CHAR(1)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE INTL_BRD
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(30)
			       NOT NULL ,
	AUSTRALIAN_CD         CHAR(1)
			       NOT NULL ,
	NZ_CD                 CHAR(2)
			       NOT NULL ,
	ABBR                  CHAR(3)
			      
);

CREATE TABLE INTL_CROSS_BRD
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	BRD_ID                SMALLINT
			       NOT NULL ,
	PORTION_16TH          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE INTL_DATA_RCD
(
	HHU_ID                CHAR(6)
			       NOT NULL ,
	SERIAL_NUM            CHAR(12)
			       NOT NULL ,
	CRADLE_ASSET_NUM      CHAR(10)
			      ,
	SOFTWARE_VERSION      CHAR(20)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AUTO_DIAL_TIME        TIME
			      
);

CREATE TABLE INTL_DATA_RCD_QRY_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(120)
			       NOT NULL 
);

CREATE TABLE INTL_INSEM
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	INSEM_NUM             SMALLINT
			       NOT NULL ,
	GRP_ANML_ID           CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EMPL_PTPT_CD          CHAR(4)
			       NOT NULL ,
	STS_CD                CHAR(1)
			       CONSTRAINT  C0814_01 CHECK ( STS_CD in ('Q', 'V', 'C') )
);

CREATE INDEX XFK0814_02 ON INTL_INSEM
(
	EMPL_PTPT_CD         ASC,
	VISIT_ID             ASC
);

CREATE TABLE INTL_INSEM_QRY
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	QRY_CD                CHAR(4)
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	INSEM_NUM             SMALLINT
			       NOT NULL ,
	STS_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0815_01 CHECK ( STS_CD in ('Q', 'C', 'I', 'V') ),
	CMT                   CHAR(60)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE INTL_INSEM_VISIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GRP_ID                CHAR(10)
			       NOT NULL ,
	HHU_ID                CHAR(4)
			       NOT NULL ,
	VISIT_DATE            DATE
			      ,
	RCD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SYNC_IND              CHAR(1)
			       CONSTRAINT  C0816_01 CHECK ( SYNC_IND IN ('Y','N') ),
	STS_CD                CHAR(1)
			       CONSTRAINT  C0816_02 CHECK ( STS_CD in ('Q', 'V', 'C') )
);

CREATE INDEX XIE0816_01 ON INTL_INSEM_VISIT
(
	GRP_ID               ASC
)
 CLUSTER;

CREATE TABLE INTL_INSEM_VISIT_QRY
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	QRY_CD                CHAR(4)
			       NOT NULL ,
	STS_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0817_01 CHECK ( STS_CD in ('Q', 'C', 'I', 'V') ),
	CMT                   CHAR(60)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE INTL_MKTG_BRD
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(30)
			       NOT NULL ,
	AUSTRALIAN_CD         CHAR(1)
			       NOT NULL ,
	NZ_CD                 CHAR(2)
			       NOT NULL ,
	ABBR                  CHAR(3)
			      
);

CREATE TABLE INTL_PARTY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(36)
			       NOT NULL ,
	FIRST_NAME            CHAR(16)
			      ,
	PREF_NAME             CHAR(36)
			      ,
	MAIL_ADDR_LINE_1      CHAR(50)
			       NOT NULL ,
	MAIL_ADDR_LINE_2      CHAR(50)
			      ,
	MAIL_ADDR_LINE_3      CHAR(50)
			      ,
	MAIL_ADDR_LINE_4      CHAR(50)
			      ,
	POSTCD                CHAR(5)
			      ,
	COUNTRY_ID            INTEGER
			      ,
	PHONE_NUM_1           CHAR(15)
			       NOT NULL ,
	PHONE_NUM_FAX         CHAR(15)
			      ,
	PHONE_NUM_2           CHAR(15)
			      ,
	EMAIL_ADDR            CHAR(150)
			      
);

CREATE TABLE INTL_SEMEN_QRY
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	QRY_CD                CHAR(4)
			       NOT NULL ,
	STS_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0820_01 CHECK ( STS_CD in ('Q', 'C', 'I', 'V') ),
	CMT                   CHAR(60)
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE TABLE INTL_SIRE
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	SIRE_CD               CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INTL_ID               CHAR(20)
			      ,
	COUNTRY_ID            INTEGER
			       NOT NULL ,
	COLLECTOR_ID          INTEGER
			      
);

CREATE INDEX XFK0821_02 ON INTL_SIRE
(
	COLLECTOR_ID         ASC
);

CREATE TABLE INTL_SUPPL_SIRE
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	COUNTRY_ID            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRIM_ID               CHAR(12)
			       NOT NULL ,
	SEC_ID                CHAR(12)
			      ,
	MKTG_BRD_ID           SMALLINT
			       NOT NULL 
);

CREATE TABLE INTL_VALID_INSEM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	VISIT_ID              INTEGER
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	INSEM_NUM             SMALLINT
			       NOT NULL ,
	VALID_TIME            TIMESTAMP
			      ,
	BILL_STS_CD           CHAR(1)
			       NOT NULL ,
	GRP_ANML_ID           CHAR(10)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	ANML_GRP_ID           INTEGER
			       NOT NULL 
);

CREATE INDEX XFK0823_03 ON INTL_VALID_INSEM
(
	GRP_ANML_ID          ASC,
	ANML_KEY             ASC,
	ANML_GRP_ID          ASC
);

CREATE TABLE INTL_VISIT_SEMEN_BATCH
(
	VISIT_ID              INTEGER
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BRD_CD                CHAR(3)
			       NOT NULL ,
	SIRE_ID               CHAR(12)
			       NOT NULL ,
	CHARGE_CD             CHAR(1)
			       NOT NULL ,
	STS_CD                CHAR(1)
			       CONSTRAINT  C0824_01 CHECK ( STS_CD in ('Q', 'V', 'C') )
);

CREATE TABLE JOB_POSITION
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	JOB_DESCR             CHAR(50)
			       NOT NULL ,
	SHORT_JOB_DESCR       CHAR(20)
			       NOT NULL 
);

CREATE TABLE JR_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_51              CHAR(1)
			       NOT NULL 
);

CREATE TABLE JR_JNR_CLASS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_48              CHAR(1)
			       NOT NULL ,
	TRAIT_49              CHAR(1)
			       NOT NULL 
);

CREATE TABLE LAB_BATCH_HIST
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_COLLN_ID          INTEGER
			       NOT NULL ,
	PREV_BATCH_STS_CD     CHAR(4)
			       NOT NULL ,
	CURR_BATCH_STS_CD     CHAR(4)
			       NOT NULL 
);

CREATE INDEX XFK0626_01 ON LAB_BATCH_HIST
(
	LAB_COLLN_ID         ASC
);

CREATE TABLE LAB_BULL_ALIAS
(
	MKT_CD                CHAR(3)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BULL_NUM              CHAR(10)
			      ,
	NAME                  CHAR(20)
			      ,
	BRD_NAME              CHAR(3)
			      ,
	REG_NUM               CHAR(20)
			      ,
	CONSTRAINT C0627_01 CHECK ( MKT_CD != 'NLD' OR REG_NUM IS NOT NULL ) 
);

CREATE TABLE LAB_COLLN
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			      ,
	BATCH_NUM             CHAR(6)
			      ,
	DSR_ID                INTEGER
			      ,
	MKT_CD                CHAR(3)
			      ,
	BULKED_ID             INTEGER
			      ,
	INITIAL_CONC          INTEGER
			      ,
	FINAL_CONC            DECIMAL(4,1)
			      ,
	LV_SPERM_PCT_D1       SMALLINT
			      ,
	FWD_PRGRS_D1          SMALLINT
			      ,
	LV_SPERM_PCT_D2       SMALLINT
			      ,
	FWD_PRGRS_D2          SMALLINT
			      ,
	LV_SPERM_PCT_EXP      SMALLINT
			      ,
	FWD_PRGRS_EXP         SMALLINT
			      ,
	LV_SPERM_PCT_DESP     SMALLINT
			      ,
	FWD_PRGRS_DESP        SMALLINT
			      ,
	EXPIRY_DATE           DATE
			      ,
	LV_SPERM_PCT_INC      SMALLINT
			      ,
	FWD_PRGRS_INC         SMALLINT
			      ,
	LV_SPERM_PCT_HR0      SMALLINT
			      ,
	FWD_PRGRS_HR0         SMALLINT
			      ,
	LV_SPERM_PCT_HR1      SMALLINT
			      ,
	FWD_PRGRS_HR1         SMALLINT
			      ,
	LV_SPERM_PCT_HR2      SMALLINT
			      ,
	FWD_PRGRS_HR2         SMALLINT
			      ,
	LV_SPERM_PCT_R0       SMALLINT
			      ,
	FWD_PRGRS_R0          SMALLINT
			      ,
	LV_SPERM_PCT_R1       SMALLINT
			      ,
	FWD_PRGRS_R1          SMALLINT
			      ,
	LV_SPERM_PCT_R2       SMALLINT
			      ,
	FWD_PRGRS_R2          SMALLINT
			      ,
	LOCATION              CHAR(18)
			      ,
	LV_SPERM_PCT_MOT      SMALLINT
			      ,
	FWD_PRGRS_MOT         SMALLINT
			      ,
	MORPH_CMT             CHAR(50)
			      ,
	PRIM_VOL              SMALLINT
			      ,
	BULK_PRIM_VOL         SMALLINT
			      ,
	PRIM_2_VOL            SMALLINT
			      ,
	BULK_PRIM_2_VOL       SMALLINT
			      ,
	STRAW_PRINT           INTEGER
			      ,
	BULK_STRAW_PRINT      INTEGER
			      ,
	DILTD_PRIM_VOL        DECIMAL(3,1)
			      ,
	SV_SPEED_ID           SMALLINT
			      ,
	LV_SPERM_PCT_QC       SMALLINT
			      ,
	FWD_PRGRS_QC          SMALLINT
			      ,
	SV_COLLECTOR          CHAR(1)
			      ,
	SV_LEADER             CHAR(1)
			      ,
	SV_NUMBER             SMALLINT
			      ,
	COLLN_TIME            TIME
			      ,
	VOL                   DECIMAL(4,2)
			      ,
	LINCOSPECTIN_VOL      DECIMAL(5,3)
			      ,
	UPDATED_DATE          DATE
			      ,
	DILTD_VOL             DECIMAL(4,2)
			      ,
	FINAL_VOL             INTEGER
			      ,
	BULK_FINAL_VOL        INTEGER
			      ,
	BULK_LINCOSPEC_VOL    DECIMAL(5,3)
			      ,
	CORE_PROD_CD          CHAR(4)
			      ,
	STRAW_CNT             INTEGER
			      ,
	BULK_STRAW_CNT        INTEGER
			      ,
	DISPLAY_SORT_SEQ      DECIMAL(31,15)
			      ,
	EVAL_SORT_SEQ         DECIMAL(31,15)
			      ,
	LABEL_PRINTED_IND     CHAR(1)
			       CONSTRAINT  C0721_02 CHECK ( LABEL_PRINTED_IND IN ('Y', 'N') ),
	BULK_DILTD_PRIMVOL    DECIMAL(3,1)
			      ,
	PRINT_STRAW_IND       CHAR(1)
			       CONSTRAINT  C0721_03 CHECK ( PRINT_STRAW_IND IN ('Y', 'N') ),
	PROC_MTHD_CD          CHAR(4)
			      ,
	DECOY_NUM             CHAR(10)
			      ,
	MKTG_BRD_CD           CHAR(2)
			      ,
	MARKER_BULL_IND       CHAR(1)
			       CONSTRAINT  C0721_04 CHECK ( MARKER_BULL_IND IN ('Y', 'N') ),
	LAB_CD                CHAR(4)
			      ,
	BULKED_IND            CHAR(1)
			       CONSTRAINT  C0721_05 CHECK ( BULKED_IND IN ('Y', 'N') ),
	SMN_PRPS_CD           CHAR(4)
			       CONSTRAINT  C0721_06 CHECK ( SMN_PRPS_CD IN ('P', 'F', 'T') ),
	ASSOC_COLLN_ID        INTEGER
			      ,
	STRAW_WSTG            INTEGER
			      ,
	PROC_LAB_CD           CHAR(4)
			      ,
	COLLN_LAB_CD          CHAR(4)
			      ,
	WSTG_VOL              INTEGER
			      ,
	BATCH_STS_CD          CHAR(4)
			       DEFAULT 'Uasn' CONSTRAINT  C0721_07 CHECK ( BATCH_STS_CD IN ('Pass', 'PreD', 'Hold', 'PstD', 'Eval', 'Uasn') ),
	LAB_COLLN_FATE_CD     CHAR(4)
			       DEFAULT 'OK' CONSTRAINT  C0721_08 CHECK ( LAB_COLLN_FATE_CD IN ('OK', 'LT', 'NC', 'NS', 'NR') ),
	SEMEN_ALLOC_SORT_SEQ  DECIMAL(31,15)
			      ,
	batch_sts_cd          CHAR(18)
			      ,
	proc_mthd_cd          CHAR(18)
			      ,
	mktg_brd_cd           CHAR(18)
			      ,
	marker_bull_ind       CHAR(18)
			      
);

CREATE INDEX XIE0721_01 ON LAB_COLLN
(
	BATCH_NUM            ASC
);

CREATE INDEX XIE0721_02 ON LAB_COLLN
(
	EVAL_SORT_SEQ        ASC
);

CREATE INDEX XIE0721_03 ON LAB_COLLN
(
	BATCH_STS_CD         ASC
);

CREATE INDEX XIE0721_04 ON LAB_COLLN
(
	UPD_TIME             ASC
);

CREATE TABLE LAB_DSR
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DSR_YEAR              INTEGER
			       NOT NULL ,
	DSR_NUMBER            INTEGER
			       NOT NULL ,
	DSR_DATE              DATE
			       NOT NULL ,
	CMT                   CHAR(50)
			      ,
	PROC_METHOD           INTEGER
			       NOT NULL ,
	FR_PS_RQRD            INTEGER
			      ,
	FR_SPS_RQRD           INTEGER
			      ,
	JR_PS_RQRD            INTEGER
			      ,
	JR_SPS_RQRD           INTEGER
			      ,
	INITIATOR_USER_ID     CHAR(8)
			       NOT NULL ,
	FILL_USER_ID          CHAR(8)
			      ,
	FREEZE_USER_ID        CHAR(8)
			      ,
	PRINT_USER_ID         CHAR(8)
			      ,
	SAMPLE_USER_ID        CHAR(8)
			      ,
	XB_PS_RQRD            INTEGER
			      ,
	XB_SPS_RQRD           INTEGER
			      ,
	LAB_CD                CHAR(4)
			      ,
	FR_SGL_RQRD           INTEGER
			      ,
	JR_SGL_RQRD           INTEGER
			      ,
	XB_SGL_RQRD           INTEGER
			      
);

CREATE INDEX XIE0628_01 ON LAB_DSR
(
	UPD_TIME             ASC
);

CREATE TABLE LAB_MKT
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EUROPEAN_UNION_IND    CHAR(1)
			       NOT NULL  CONSTRAINT  C0629_01 CHECK ( EUROPEAN_UNION_IND IN ('Y','N') ),
	NAME                  CHAR(30)
			       NOT NULL ,
	STRAW_PRINT_FMT       VARCHAR(4010)
			      
);

CREATE TABLE LAB_PROC_MTHD
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	SMN_PRSRVTN_CD        CHAR(4)
			       NOT NULL  CONSTRAINT  C0720_01 CHECK ( SMN_PRSRVTN_CD IN ('LLL','DF') )
);

CREATE INDEX XIE0720_01 ON LAB_PROC_MTHD
(
	UPD_TIME             ASC
);

CREATE TABLE LAB_REFRESH_CTRL
(
	ID                    INTEGER
			       NOT NULL  CONSTRAINT  C0653_01 CHECK ( ID = 1 ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPDATE_NUM            INTEGER
			       NOT NULL 
);

CREATE INDEX XIE0653_01 ON LAB_REFRESH_CTRL
(
	UPD_TIME             ASC
);

CREATE TABLE LAB_STAFF
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COLLECT_ALWD_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0630_01 CHECK ( COLLECT_ALWD_IND IN ('Y','N') ),
	LEAD_ALWD_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0630_02 CHECK ( LEAD_ALWD_IND IN ('Y','N') ),
	FIRST_NAME            CHAR(15)
			      ,
	LAST_NAME             CHAR(25)
			      ,
	SHORT_ID              CHAR(1)
			      ,
	LAB_CD                CHAR(4)
			       NOT NULL ,
	UPD_ACCESS_IND        CHAR(1)
			       NOT NULL  CONSTRAINT  C0630_03 CHECK ( UPD_ACCESS_IND IN ('Y','N') )
);

CREATE TABLE LAB_SV_SPEED
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(20)
			       NOT NULL 
);

CREATE TABLE LAB_WSTG_CONST
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MIN                   INTEGER
			       NOT NULL ,
	MAX                   INTEGER
			       NOT NULL ,
	MULTIPLIER            DECIMAL(5,3)
			       NOT NULL ,
	SUBTRACTED            INTEGER
			       NOT NULL 
);

CREATE TABLE LACTATION
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	PARTN_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LACT_NUM              SMALLINT
			       NOT NULL ,
	LACT_ST_RSN_CD        CHAR(1)
			       NOT NULL ,
	DAYS_IN_MILK          SMALLINT
			       NOT NULL ,
	EXCS_DAYS_IN_MILK     SMALLINT
			       NOT NULL ,
	VOL_305               DECIMAL(6,1)
			       NOT NULL ,
	VOL_EXCS              DECIMAL(6,1)
			       NOT NULL ,
	FAT_305               DECIMAL(5,2)
			       NOT NULL ,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	FAT_EXCS              DECIMAL(5,2)
			       NOT NULL ,
	PROT_305              DECIMAL(5,2)
			       NOT NULL ,
	PROT_EXCS             DECIMAL(5,2)
			       NOT NULL ,
	PI                    SMALLINT
			       NOT NULL ,
	INCL_HERD_AVG_IND     DECIMAL(1)
			       NOT NULL ,
	DRY_OFF_RSN_CD        CHAR(2)
			       NOT NULL ,
	AE_RSLT_IND           CHAR(1)
			       NOT NULL ,
	FAT_BV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_PV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	FAT_VAL               DECIMAL(5,1)
			       NOT NULL ,
	PROT_BV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_PV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_VAL              DECIMAL(5,1)
			       NOT NULL ,
	VOL_BV                INTEGER
			       NOT NULL ,
	VOL_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_PV                INTEGER
			       NOT NULL ,
	VOL_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_VAL               INTEGER
			       NOT NULL ,
	LWGT_BV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_PV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_VAL              DECIMAL(5,1)
			       NOT NULL ,
	SURV_BV               DECIMAL(5,1)
			       NOT NULL ,
	SURV_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	LACT_WRTH             DECIMAL(5,1)
			       NOT NULL ,
	PARTN_DATE_D          DATE
			      ,
	END_DATE_D            DATE
			      ,
	DERIVED_IND           CHAR(1)
			       CONSTRAINT  C0026_01 CHECK ( DERIVED_IND IN ('Y','N') ),
	partn_date            CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	partn_date_d          CHAR(18)
			      
);

CREATE TABLE LEAST_SQUARES_EST_MATRIX
(
	EXTR_DATE             DATE
			       NOT NULL ,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	AGE_GRP_CD            DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0563_01 CHECK ( AGE_GRP_CD IN (2, 3, 4, 5) ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OSEAS_HF_BRD_EST      DOUBLE
			       NOT NULL ,
	FR_BRD_EST            DOUBLE
			       NOT NULL ,
	AY_BRD_EST            DOUBLE
			       NOT NULL ,
	JR_BRD_EST            DOUBLE
			       NOT NULL ,
	LP_SOLN_2             DOUBLE
			       NOT NULL ,
	LP_SOLN_3             DOUBLE
			       NOT NULL ,
	LP_SOLN_4             DOUBLE
			       NOT NULL ,
	LP_SOLN_5             DOUBLE
			       NOT NULL ,
	CGRP_VARIANCE         DOUBLE
			      
);

CREATE TABLE LIA_ANML_ID
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	BRTH_YR               SMALLINT
			       NOT NULL ,
	TATTOO_CD             CHAR(6)
			       NOT NULL ,
	ORGNL_HERD_IND        CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	CONV_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	CONV_DATE_D           DATE
			      ,
	conv_date_d           CHAR(18)
			      ,
	conv_date             CHAR(18)
			      
);

CREATE TABLE LIC_BULL_RANK
(
	ST_DATE               DATE
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RANK_CD               CHAR(2)
			       NOT NULL ,
	END_DATE              DATE
			      ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL 
);

CREATE TABLE LIC_FACILITY
(
	FACILITY_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FACILITY_TP_CD        CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			      ,
	SERVER_NAME           CHAR(50)
			      ,
	SAMPLE_DATA_FILE_DIRECTORY  CHAR(50)
			      ,
	ACCESS_ID             CHAR(8)
			       DEFAULT USER,
	ACCESS_PSWD           CHAR(20)
			      ,
	LOCATION_CD           CHAR(8)
			      ,
	facility_tp_cd        CHAR(18)
			      
);

CREATE INDEX XFK0622_02 ON LIC_FACILITY
(
	FACILITY_TP_CD       ASC
);

CREATE TABLE LIC_SAP_AB_PROD
(
	MTNG_SYS_CD           DECIMAL(1)
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SAP_COW_PROD_CD       CHAR(3)
			       NOT NULL ,
	SAP_YRLG_PROD_CD      CHAR(3)
			       NOT NULL ,
	SAP_BACKUP_COW_PROD_CD  CHAR(3)
			      ,
	SAP_BACKUP_YRLG_PROD_CD  CHAR(3)
			      
);

CREATE TABLE LIC_SEASON
(
	SEASON                SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEASON_DESCR          VARCHAR(50)
			       NOT NULL ,
	COUNTRY_CODE          VARCHAR(3)
			      ,
	COUNTRY               VARCHAR(100)
			      ,
	SEASON_START_DATE     DATE
			      ,
	SEASON_END_DATE       DATE
			      ,
	RELATIVE_SEASON_IND   SMALLINT
			      
);

CREATE TABLE LIST_MEMB
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ORG_LIST_CD           CHAR(3)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	POSN                  CHAR(36)
			       NOT NULL ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE INDEX XIE0093_01 ON LIST_MEMB
(
	PTPT_CD              ASC
);

CREATE TABLE LIVESTOCK_EXPORT_RPRT_AUDIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	PRINT_DATE            DATE
			       NOT NULL ,
	CERT_RCVD_DATE        DATE
			      ,
	AGENT_PARTY_ID        INTEGER
			      ,
	OWNER_PARTY_ID        INTEGER
			       NOT NULL ,
	USER_ID               CHAR(20)
			       NOT NULL  DEFAULT USER,
	EXT_USER_CD           CHAR(2)
			       NOT NULL 
);

CREATE TABLE LLL_DESP_CLNDR_RGN
(
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	DESP_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MARKER_DATE           DATE
			      ,
	INSEM_DAYS            SMALLINT
			       NOT NULL ,
	smn_alcn_rgn_id       CHAR(18)
			      
);

CREATE TABLE LLL_DTR_PROB
(
	RGN_ID                INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	DESP_WK               SMALLINT
			       NOT NULL ,
	BULL_NRR_GRP_ID       SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DTR_PROB              DECIMAL(7,6)
			       NOT NULL 
);

CREATE TABLE LLL_PD
(
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	CONSTRAINT C0037_01 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE TABLE LOCAL_AUTHORITY
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE LOCUS
(
	CD                    CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			      
);

CREATE TABLE LOCUS_AFFECT_CAT
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE LOCUS_ALLELE
(
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(25)
			       NOT NULL ,
	ALLELE_ACTION_CD      CHAR(1)
			      ,
	ALLELE_MONITOR_IND    CHAR(1)
			       CONSTRAINT  C0155_01 CHECK ( ALLELE_MONITOR_IND IN ('Y','N') ),
	ALLELE_EXPL           VARCHAR(100)
			      ,
	allele_monitor_ind    CHAR(18)
			      
);

CREATE INDEX XIE0155_01 ON LOCUS_ALLELE
(
	UPD_TIME             ASC
);

CREATE TABLE LOCUS_ALLELE_OLD
(
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(25)
			       NOT NULL ,
	ALLELE_ACTION_CD      CHAR(1)
			      ,
	ALLELE_MONITOR_IND    CHAR(1)
			      ,
	ALLELLE_EXPL          VARCHAR(100)
			      
);

CREATE TABLE LOCUS_ALLELE_PAIR
(
	PHNTP_CD              CHAR(2)
			       NOT NULL ,
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	ALLELE_CD_1           CHAR(1)
			       NOT NULL ,
	ALLELE_CD_2           CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XFK0154_01 ON LOCUS_ALLELE_PAIR
(
	CATTLE_LOCUS_CD      ASC,
	ALLELE_CD_1          ASC
);

CREATE INDEX XFK0154_02 ON LOCUS_ALLELE_PAIR
(
	CATTLE_LOCUS_CD      ASC,
	ALLELE_CD_2          ASC
);

CREATE INDEX XIE0154_01 ON LOCUS_ALLELE_PAIR
(
	UPD_TIME             ASC
);

CREATE TABLE LOCUS_PHNTP
(
	LOCUS_CD              CHAR(10)
			       NOT NULL ,
	ALLELE_CD_1           CHAR(5)
			       NOT NULL ,
	ALLELE_CD_2           CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			      
);

CREATE TABLE LSS_TOP_ASSESS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	MTH                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INSP_1_INIT           CHAR(4)
			       NOT NULL ,
	INSP_2_INIT           CHAR(4)
			       NOT NULL ,
	TRAIT_91              DECIMAL(1)
			       NOT NULL ,
	TRAIT_92              DECIMAL(1)
			       NOT NULL ,
	TRAIT_93              DECIMAL(1)
			       NOT NULL ,
	TRAIT_94              DECIMAL(1)
			       NOT NULL ,
	TRAIT_95              DECIMAL(1)
			       NOT NULL ,
	TRAIT_96              DECIMAL(1)
			       NOT NULL ,
	TRAIT_97              DECIMAL(1)
			       NOT NULL ,
	TRAIT_98              DECIMAL(1)
			       NOT NULL ,
	TRAIT_99              DECIMAL(1)
			       NOT NULL ,
	TRAIT_100             DECIMAL(1)
			       NOT NULL ,
	TRAIT_101             DECIMAL(1)
			       NOT NULL ,
	TRAIT_102             DECIMAL(1)
			       NOT NULL ,
	TRAIT_103             DECIMAL(1)
			       NOT NULL ,
	TRAIT_104             DECIMAL(1)
			       NOT NULL ,
	TRAIT_105             DECIMAL(1)
			       NOT NULL ,
	TRAIT_106             DECIMAL(1)
			       NOT NULL ,
	BLOAT_IND             CHAR(1)
			       NOT NULL ,
	WHITE_PCT             SMALLINT
			       NOT NULL ,
	CMT_CD_1              CHAR(2)
			       NOT NULL ,
	CMT_CD_2              CHAR(2)
			       NOT NULL ,
	CMT_CD_3              CHAR(2)
			       NOT NULL ,
	CMT                   CHAR(110)
			       NOT NULL ,
	CLIN_MAST_IND         CHAR(1)
			       CONSTRAINT  C0411_01 CHECK ( CLIN_MAST_IND IN ('Y','N') ),
	XBRD_MTNG_IND         CHAR(1)
			       CONSTRAINT  C0411_02 CHECK ( XBRD_MTNG_IND IN ('Y', 'N') ),
	cmt_cd_1              CHAR(18)
			      ,
	cmt_cd_2              CHAR(18)
			      ,
	cmt_cd_3              CHAR(18)
			      
);

CREATE TABLE LWGT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	WGT_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	WGT                   DECIMAL(7,1)
			       NOT NULL ,
	STATURE               DECIMAL(1)
			       NOT NULL ,
	COND                  DECIMAL(3,1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	USER_ID               CHAR(8)
			       NOT NULL  DEFAULT USER,
	WGT_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       DEFAULT CURRENT DATE,
	upd_date              CHAR(18)
			      ,
	wgt_date_d            CHAR(18)
			      ,
	wgt_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0342_01 ON LWGT
(
	ANML_KEY             ASC,
	WGT_DATE             ASC
);

CREATE TABLE LWGT_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	LWGT_BV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_PV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_LV               DECIMAL(5,1)
			      ,
	DTR_CNT               INTEGER
			      ,
	FULL_MODEL_LWGT_BV    DECIMAL(5,1)
			      ,
	FULL_MODEL_LWGT_BV_REL  DECIMAL(3,1)
			      ,
	FULL_MODEL_LWGT_PV    DECIMAL(5,1)
			      ,
	FULL_MODEL_LWGT_PV_REL  DECIMAL(3,1)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,2)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE TABLE LWGT_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LWGT_BV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_PV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	LWGT_LV               DECIMAL(5,1)
			      ,
	DTR_CNT               INTEGER
			      ,
	PROGENY_CONTRIB       DECIMAL(6,2)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE INDEX XIE0674_01 ON LWGT_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE LWGT_ERR
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	WGT_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	COW_NUM               INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	WGT                   INTEGER
			       NOT NULL ,
	COND_SCORE            DECIMAL(3,1)
			       NOT NULL ,
	ERR_CD                SMALLINT
			       NOT NULL ,
	CORRECT_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	CORRECT_USER_ID       CHAR(8)
			       NOT NULL ,
	CORRECT_COW_NUM       INTEGER
			       NOT NULL ,
	WGT_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	CORRECT_DATE_D        DATE
			      ,
	wgt_date              CHAR(18)
			      ,
	wgt_date_d            CHAR(18)
			      ,
	correct_date          CHAR(18)
			      ,
	correct_date_d        CHAR(18)
			      
);

CREATE INDEX XIE0488_01 ON LWGT_ERR
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	CORRECT_DATE         ASC
);

CREATE TABLE LWGT_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_PW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_LW           DECIMAL(6,4)
			      ,
	AVG_LWGT_BV           DECIMAL(5,1)
			      ,
	AVG_LWGT_PV           DECIMAL(5,1)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE LWGT_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_LWGT_BV           DECIMAL(5,1)
			       NOT NULL ,
	AVG_LWGT_PV           DECIMAL(5,1)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE MAN_LLL_SEMEN_ADJ
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 50005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QTY                   SMALLINT
			       NOT NULL ,
	DEMAND_DATE           DATE
			       NOT NULL ,
	INSEM_GRP_RGN_CD      CHAR(4)
			       NOT NULL ,
	CREATE_DATE           DATE
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	INSEM_GRP_NUM         INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	ADJ_RSN_CD            CHAR(4)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	CMT                   CHAR(50)
			      
);

CREATE INDEX XFK0615_01 ON MAN_LLL_SEMEN_ADJ
(
	DEMAND_DATE          ASC,
	INSEM_GRP_RGN_CD     ASC,
	INSEM_GRP_NUM        ASC,
	CORE_PROD_CD         ASC,
	MKTG_BRD_CD          ASC
)
 CLUSTER;

CREATE INDEX XIE0615_01 ON MAN_LLL_SEMEN_ADJ
(
	UPD_TIME             ASC
);

CREATE TABLE MAP_SHT
(
	NUM                   CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EAST_NUM              INTEGER
			       NOT NULL ,
	NORTH_NUM             SMALLINT
			       NOT NULL ,
	EDITION_YR            INTEGER
			       NOT NULL ,
	SERIES                SMALLINT
			       NOT NULL ,
	NAME                  CHAR(20)
			       NOT NULL 
);

CREATE TABLE MAT00
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0754_01 ON MAT00
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0754_02 ON MAT00
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0754_03 ON MAT00
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT01
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0281_01 ON MAT01
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0281_02 ON MAT01
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0281_03 ON MAT01
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT02
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0650_01 ON MAT02
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0650_02 ON MAT02
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0650_03 ON MAT02
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT03
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0651_01 ON MAT03
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0651_02 ON MAT03
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0651_03 ON MAT03
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT04
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0804_01 ON MAT04
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0804_02 ON MAT04
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0804_03 ON MAT04
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT05
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0883_01 ON MAT05
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0883_02 ON MAT05
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0883_03 ON MAT05
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT06
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0166_01 ON MAT06
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0166_02 ON MAT06
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0166_03 ON MAT06
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT07
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0170_01 ON MAT07
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0170_02 ON MAT07
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0170_03 ON MAT07
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT83
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0465_01 ON MAT83
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0465_02 ON MAT83
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0465_03 ON MAT83
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT84
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0466_01 ON MAT84
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0466_02 ON MAT84
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0466_03 ON MAT84
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT85
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0467_01 ON MAT85
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0467_02 ON MAT85
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0467_03 ON MAT85
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT86
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0468_01 ON MAT86
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0468_02 ON MAT86
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0468_03 ON MAT86
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT87
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0469_01 ON MAT87
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0469_02 ON MAT87
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0469_03 ON MAT87
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT88
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0470_01 ON MAT88
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0470_02 ON MAT88
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0470_03 ON MAT88
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT89
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0471_01 ON MAT89
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0471_02 ON MAT89
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0471_03 ON MAT89
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT90
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0472_01 ON MAT90
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0472_02 ON MAT90
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0472_03 ON MAT90
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT91
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0473_01 ON MAT91
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0473_02 ON MAT91
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0473_03 ON MAT91
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT92
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0474_01 ON MAT92
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0474_02 ON MAT92
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0474_03 ON MAT92
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT93
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0475_01 ON MAT93
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0475_02 ON MAT93
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0475_03 ON MAT93
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT94
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0476_01 ON MAT94
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0476_02 ON MAT94
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0476_03 ON MAT94
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT95
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0755_01 ON MAT95
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0755_02 ON MAT95
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0755_03 ON MAT95
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT96
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0756_01 ON MAT96
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0756_02 ON MAT96
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0756_03 ON MAT96
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT97
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0757_01 ON MAT97
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0757_02 ON MAT97
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0757_03 ON MAT97
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT98
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0758_01 ON MAT98
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0758_02 ON MAT98
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0758_03 ON MAT98
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MAT99
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            CHAR(1)
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			      ,
	INSEM_PTPT_CD         CHAR(4)
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	SMN_COLLN_DATE        INTEGER
			      ,
	SMN_AGE               INTEGER
			      ,
	COW_NUM               INTEGER
			      ,
	BRTH_DATE             INTEGER
			      ,
	MTNG_SYNC_IND         CHAR(1)
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	SMN_MKTR_PTPT_CD_1    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD1    CHAR(4)
			      ,
	SMN_MKTR_PTPT_CD_2    CHAR(4)
			      ,
	SMN_SPLR_BRAND_CD2    CHAR(4)
			      
);

CREATE INDEX XIE0759_01 ON MAT99
(
	ANML_KEY             ASC
);

CREATE INDEX XIE0759_02 ON MAT99
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0759_03 ON MAT99
(
	INSEM_PTPT_CD        ASC
);

CREATE TABLE MATING
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MATE_ANML_KEY         INTEGER
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0020_01 CHECK ( MTNG_TP_CD IN (1, 2, 3, 4, 5, 6, 7) ),
	INSEM_PTPT_CD         CHAR(4)
			       NOT NULL ,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	SMN_COLLN_DATE        INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_CHRG_TP_CD       CHAR(1)
			       NOT NULL ,
	AB_ONLY_IND           CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	CHRG_STS_CD           CHAR(1)
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	MDC_COL               DECIMAL(1)
			       NOT NULL ,
	MDC_LINE              SMALLINT
			       NOT NULL ,
	MTNG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	SMN_COLLN_DATE_D      DATE
			      ,
	UPD_DATE_D            DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	anml_key              CHAR(18)
			      ,
	mate_anml_key         CHAR(18)
			      ,
	mtng_tp_cd            CHAR(18)
			      ,
	date_d                CHAR(18)
			      ,
	smn_colln_date        CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	smn_colln_date_d      CHAR(18)
			      ,
	CONSTRAINT C0020_02 CHECK ( MTNG_TP_CD = 5 AND MTNG_CHRG_TP_CD IN (' ','T') OR MTNG_TP_CD != 5 ) 
);

CREATE INDEX XFK0020_03 ON MATING
(
	MATE_ANML_KEY        ASC
);

CREATE INDEX XIE0020_01 ON MATING
(
	DATE                 ASC
);

CREATE INDEX XIE0020_02 ON MATING
(
	SMN_BATCH_NUM        ASC
);

CREATE INDEX XIE0020_03 ON MATING
(
	INSEM_PTPT_CD        ASC
);

CREATE INDEX XIE0020_04 ON MATING
(
	UPD_TIME             ASC
);

CREATE TABLE MDC_AI_COL
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BRD                   CHAR(10)
			       NOT NULL ,
	MDC_CHRG_TP_CD        CHAR(10)
			       NOT NULL ,
	BULL                  CHAR(10)
			       NOT NULL ,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	BRTH_YR               SMALLINT
			       NOT NULL 
);

CREATE TABLE MDC_AI_COL_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL ,
	QRY_TIME              TIMESTAMP
			      ,
	QRY_USER_ID           CHAR(8)
			      
);

CREATE INDEX XFK0384_02 ON MDC_AI_COL_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_AI_HDR
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	INSEM_DATE            INTEGER
			       NOT NULL ,
	SYNC_IND              CHAR(1)
			       NOT NULL ,
	TECH_1_PTPT_CD        CHAR(4)
			       NOT NULL ,
	TECH_1_CHK_DIGIT      CHAR(1)
			       NOT NULL ,
	TECH_2_PTPT_CD        CHAR(4)
			       NOT NULL ,
	TECH_2_CHK_DIGIT      CHAR(1)
			       NOT NULL ,
	TECH_3_PTPT_CD        CHAR(4)
			       NOT NULL ,
	TECH_3_CHK_DIGIT      CHAR(1)
			       NOT NULL ,
	TECH_4_PTPT_CD        CHAR(4)
			       NOT NULL ,
	TECH_4_CHK_DIGIT      CHAR(1)
			       NOT NULL ,
	TECH_5_PTPT_CD        CHAR(4)
			       NOT NULL ,
	TECH_5_CHK_DIGIT      CHAR(1)
			       NOT NULL ,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SUPR_CHK_DIGIT        CHAR(1)
			       NOT NULL ,
	DLVRY_PTPT_CD         CHAR(4)
			       NOT NULL ,
	DLVRY_CHK_DIGIT       CHAR(1)
			       NOT NULL ,
	TECH_1_ROLE_CD        CHAR(3)
			      ,
	TECH_2_ROLE_CD        CHAR(3)
			      ,
	TECH_3_ROLE_CD        CHAR(3)
			      ,
	TECH_4_ROLE_CD        CHAR(3)
			      ,
	TECH_5_ROLE_CD        CHAR(3)
			      ,
	CONSTRAINT C0381_01 CHECK ( (TECH_1_PTPT_CD != ' ' OR TECH_1_ROLE_CD IS NULL) AND (TECH_2_PTPT_CD != ' ' OR TECH_2_ROLE_CD IS NULL) AND (TECH_3_PTPT_CD != ' ' OR TECH_3_ROLE_CD IS NULL) AND (TECH_4_PTPT_CD != ' ' OR TECH_4_ROLE_CD IS NULL) AND (TECH_5_PTPT_CD != ' ' OR TECH_5_ROLE_CD IS NULL) ) 
);

CREATE INDEX XIE0381_01 ON MDC_AI_HDR
(
	HERD_CD              ASC,
	INSEM_DATE           ASC
);

CREATE TABLE MDC_AI_HDR_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	INSEM_NUM             DECIMAL(1)
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL ,
	QRY_TIME              TIMESTAMP
			      ,
	QRY_USER_ID           CHAR(8)
			      
);

CREATE INDEX XFK0382_02 ON MDC_AI_HDR_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_AI_ROW
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	ROW                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COW                   CHAR(10)
			       NOT NULL ,
	INSEM_NUM             DECIMAL(1)
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       CONSTRAINT  C0385_01 CHECK ( MTNG_TP_CD IN (1, 2, 3, 4) ),
	MDC_CHRG_TP_CD        CHAR(1)
			      
);

CREATE TABLE MDC_AI_ROW_CR
(
	COL                   DECIMAL(1)
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	ROW                   SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0237_01 CHECK ( MTNG_TP_CD IN (1, 2, 3, 4) ),
	CR_RSN_CD             CHAR(1)
			       NOT NULL  CONSTRAINT  C0237_02 CHECK ( CR_RSN_CD IN ('D','S','T','H','P','Y','C','I','X','Z','V','W','R') ),
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INSEM_NUM             INTEGER
			      ,
	CREATE_USER_ID        CHAR(8)
			       NOT NULL ,
	MDC_CHRG_TP_CD        CHAR(1)
			      
);

CREATE TABLE MDC_AI_ROW_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	ROW                   SMALLINT
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL ,
	QRY_TIME              TIMESTAMP
			      ,
	QRY_USER_ID           CHAR(8)
			      
);

CREATE INDEX XFK0386_02 ON MDC_AI_ROW_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_BOOK
(
	SSN                   SMALLINT
			       NOT NULL ,
	ST_NUM                INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESP_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	NM_ST_NUM             INTEGER
			       NOT NULL ,
	MDC_BOOK_TP_CD        CHAR(1)
			       NOT NULL ,
	DESP_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	desp_date             CHAR(18)
			      ,
	desp_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0380_01 ON MDC_BOOK
(
	MAP_REF              ASC,
	HERD_NUM             ASC
);

CREATE INDEX XIE0380_01 ON MDC_BOOK
(
	SSN                  ASC,
	NM_ST_NUM            ASC
);

CREATE TABLE MDC_BOOK_NUM
(
	SSN                   SMALLINT
			       NOT NULL ,
	MDC_TP_CD             CHAR(1)
			       NOT NULL ,
	PROD_TP_CD            CHAR(1)
			       NOT NULL ,
	ST_NUM                INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_NUM               INTEGER
			       NOT NULL ,
	NEXT_NUM              INTEGER
			      ,
	prod_tp_cd            CHAR(18)
			      ,
	mdc_tp_cd             CHAR(18)
			      ,
	CONSTRAINT C0278_03 CHECK ( NEXT_NUM IS NULL OR NEXT_NUM >= ST_NUM AND NEXT_NUM <= END_NUM  ) ,
	CONSTRAINT C0278_04 CHECK ( ST_NUM <= END_NUM ) 
);

CREATE TABLE MDC_CD_XREF
(
	DESCR                 CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CD                    CHAR(1)
			       NOT NULL 
);

CREATE TABLE MDC_CHRG
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	CHRG_NUM              INTEGER
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TECH_PS_CNT           SMALLINT
			       NOT NULL ,
	TECH_NOM_CNT          SMALLINT
			       NOT NULL ,
	SPS_CNT               SMALLINT
			       NOT NULL ,
	TECH_HRFRD_CNT        SMALLINT
			       NOT NULL ,
	DIY_PS_CNT            SMALLINT
			       NOT NULL ,
	DIY_HRFRD_CNT         SMALLINT
			       NOT NULL ,
	EXTR_DATE             DATE
			      ,
	CHRG_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0259_01 CHECK ( CHRG_IND IN ('Y', 'N') ),
	MTNG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MTNG_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	TECH_SGL_CNT          SMALLINT
			      ,
	DIY_SGL_CNT           SMALLINT
			      ,
	mtng_date             CHAR(18)
			      ,
	mtng_date_d           CHAR(18)
			      ,
	CONSTRAINT C0259_02 CHECK ( EXTR_DATE IS NULL AND CHRG_IND = 'N' OR EXTR_DATE IS NOT NULL AND CHRG_IND = 'Y'  ) 
);

CREATE INDEX XIE0259_01 ON MDC_CHRG
(
	EXTR_DATE            ASC
);

CREATE TABLE MDC_CLNT_CTCT_STS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE MDC_DAY_QRY
(
	MDC_QRY_DATE          DATE
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MDC_QRY_NUM           INTEGER
			       NOT NULL 
);

CREATE TABLE MDC_NM_COL
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	BRTH_ID_PFX           CHAR(4)
			       NOT NULL ,
	BRTH_ID_YR            SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XIE0344_01 ON MDC_NM_COL
(
	BRTH_ID_PFX          ASC
);

CREATE TABLE MDC_NM_COL_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0343_02 ON MDC_NM_COL_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_NM_HDR
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	HERD_OWNR_PTPT_CD     CHAR(4)
			       NOT NULL ,
	BULL_BRTH_ID_PFX_1    CHAR(4)
			       NOT NULL ,
	BULL_BRTH_ID_YR_1     SMALLINT
			       NOT NULL ,
	BULL_BRTH_ID_NUM_1    SMALLINT
			       NOT NULL ,
	BULL_BRTH_ID_PFX_2    CHAR(4)
			       NOT NULL ,
	BULL_BRTH_ID_YR_2     SMALLINT
			       NOT NULL ,
	BULL_BRTH_ID_NUM_2    SMALLINT
			       NOT NULL ,
	BULL_BRTH_ID_PFX_3    CHAR(4)
			       NOT NULL ,
	BULL_BRTH_ID_YR_3     SMALLINT
			       NOT NULL ,
	BULL_BRTH_ID_NUM_3    SMALLINT
			       NOT NULL ,
	BULL_CD_1             INTEGER
			       NOT NULL ,
	BULL_CD_2             INTEGER
			       NOT NULL ,
	BULL_CD_3             INTEGER
			       NOT NULL 
);

CREATE TABLE MDC_NM_HDR_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0345_02 ON MDC_NM_HDR_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_NM_ROW
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	ROW                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  CHAR(8)
			       NOT NULL ,
	BULL                  CHAR(10)
			       NOT NULL ,
	COW                   CHAR(10)
			       NOT NULL ,
	BULL_NUM              DECIMAL(1)
			       NOT NULL 
);

CREATE TABLE MDC_NM_ROW_QRY
(
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	COL                   DECIMAL(1)
			       NOT NULL ,
	ROW                   SMALLINT
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_STS_CD            CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0388_02 ON MDC_NM_ROW_QRY
(
	MDC_QRY_CD           ASC
);

CREATE TABLE MDC_PAY_CLAIM
(
	TECH_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TECH_TP_CD            CHAR(1)
			       NOT NULL ,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	INSEM_NUM             DECIMAL(1)
			       NOT NULL ,
	PAY_INSEM             SMALLINT
			       NOT NULL ,
	QRY_INSEM             SMALLINT
			       NOT NULL ,
	PREV_PAY_INSEM        SMALLINT
			       NOT NULL ,
	PREV_QRY_INSEM        SMALLINT
			       NOT NULL ,
	PAYROLL_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	PAYROLL_TIME          INTEGER
			       NOT NULL ,
	PAYROLL_STS_CD        CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	ABT_CALL_CD           CHAR(1)
			       CONSTRAINT  C0295_01 CHECK ( ABT_CALL_CD IN ('Y', 'N', 'P','R') ),
	MTNG_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PAYROLL_DATE_D        DATE
			      ,
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	upd_date              CHAR(18)
			      ,
	payroll_date          CHAR(18)
			      ,
	mtng_date             CHAR(18)
			      ,
	payroll_date_d        CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	mtng_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0295_02 ON MDC_PAY_CLAIM
(
	MDC_SSN              ASC,
	MDC_NUM              ASC
);

CREATE INDEX XIE0295_01 ON MDC_PAY_CLAIM
(
	PAYROLL_STS_CD       ASC,
	RGN_CD               ASC,
	MDC_NUM              ASC
);

CREATE TABLE MDC_PROC_STATS
(
	TIME                  TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MINDA_DIST_CD         CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PAPER_MDC_RCPT        INTEGER
			       NOT NULL ,
	DMATE_MDC_RCPT        INTEGER
			       NOT NULL ,
	PAPER_MDC_VFY         INTEGER
			       NOT NULL ,
	PAPER_MDC_PROC_1ST    INTEGER
			       NOT NULL ,
	DMATE_MDC_PROC_1ST    INTEGER
			       NOT NULL ,
	PAPER_MDC_RVLD        INTEGER
			       NOT NULL ,
	DMATE_MDC_RVLD        INTEGER
			       NOT NULL ,
	TTL_MDC_VAL           INTEGER
			       NOT NULL ,
	FRZ_HERD_MDC          INTEGER
			       NOT NULL ,
	FRZ_HERD              INTEGER
			       NOT NULL ,
	PAPER_RCPT_ONLY       INTEGER
			       NOT NULL ,
	PAPER_QRY_PAYROLL     INTEGER
			       NOT NULL ,
	PAPER_QRY_TECH        INTEGER
			       NOT NULL ,
	PAPER_QRY_MINDA       INTEGER
			       NOT NULL ,
	PAPER_QRY_CLNT        INTEGER
			       NOT NULL ,
	DMATE_QRY_PAYROLL     INTEGER
			       NOT NULL ,
	DMATE_QRY_TECH        INTEGER
			       NOT NULL ,
	DMATE_QRY_MINDA       INTEGER
			       NOT NULL ,
	DMATE_QRY_CLNT        INTEGER
			       NOT NULL ,
	RING_BACK_CLNT        INTEGER
			       NOT NULL ,
	RING_BACK_TECH        INTEGER
			       NOT NULL ,
	RING_BACK_CLNT_DAY    INTEGER
			       NOT NULL ,
	RING_BACK_TECH_DAY    INTEGER
			       NOT NULL ,
	NO_REPLY_CLNT_DAY     INTEGER
			       NOT NULL ,
	NO_REPLY_TECH_DAY     INTEGER
			       NOT NULL ,
	NO_REPLY_CLNT         INTEGER
			       NOT NULL ,
	NO_REPLY_TECH         INTEGER
			       NOT NULL ,
	SSN_PAPER_MDC_RCPT    INTEGER
			       NOT NULL ,
	SSN_DMATE_MDC_RCPT    INTEGER
			       NOT NULL ,
	SSN_PAPER_MDC_RVLD    INTEGER
			       NOT NULL ,
	SSN_DMATE_MDC_RVLD    INTEGER
			       NOT NULL ,
	TTL_QRY               INTEGER
			       NOT NULL ,
	UNRSLV_HERD_QRY       INTEGER
			       NOT NULL ,
	MDC_QRY               INTEGER
			       NOT NULL ,
	PROC_LT_1_DAY         INTEGER
			       NOT NULL ,
	PROC_1_DAY            INTEGER
			       NOT NULL ,
	PROC_2_DAYS           INTEGER
			       NOT NULL ,
	PROC_3_DAYS           INTEGER
			       NOT NULL ,
	PROC_4_DAYS           INTEGER
			       NOT NULL ,
	PROC_5_DAYS           INTEGER
			       NOT NULL ,
	PROC_6_DAYS           INTEGER
			       NOT NULL ,
	PROC_7_DAYS           INTEGER
			       NOT NULL ,
	PROC_MORE_7_DAYS      INTEGER
			       NOT NULL ,
	CORR_LT_1_DAY         INTEGER
			       NOT NULL ,
	CORR_1_DAY            INTEGER
			       NOT NULL ,
	CORR_2_DAYS           INTEGER
			       NOT NULL ,
	CORR_3_DAYS           INTEGER
			       NOT NULL ,
	CORR_4_DAYS           INTEGER
			       NOT NULL ,
	CORR_5_DAYS           INTEGER
			       NOT NULL ,
	CORR_6_DAYS           INTEGER
			       NOT NULL ,
	CORR_7_DAYS           INTEGER
			       NOT NULL ,
	PAY_QRY_NUM           INTEGER
			       NOT NULL ,
	TECH_QRY_NUM          INTEGER
			       NOT NULL ,
	MINDA_QRY_NUM         INTEGER
			       NOT NULL ,
	CLNT_QRY_NUM          INTEGER
			       NOT NULL 
);

CREATE TABLE MDC_QRY
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QRY_LVL_CD            SMALLINT
			       NOT NULL ,
	QRY_STS_CD            CHAR(1)
			       NOT NULL ,
	QRY_DEST_CD           CHAR(1)
			       NOT NULL ,
	STOP_PYMT_IND         CHAR(1)
			       NOT NULL ,
	MDC_RPRT_CAT_CD       CHAR(5)
			       NOT NULL ,
	DESCR                 CHAR(120)
			       NOT NULL ,
	EXPL_1                CHAR(65)
			       NOT NULL ,
	EXPL_2                CHAR(65)
			       NOT NULL ,
	EXPL_3                CHAR(65)
			       NOT NULL ,
	EXPL_4                CHAR(65)
			       NOT NULL 
);

CREATE INDEX XIE0389_01 ON MDC_QRY
(
	QRY_LVL_CD           ASC,
	CD                   ASC
);

CREATE TABLE MDC_QRY_LOG
(
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	TIME                  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MDC_SSN               SMALLINT
			       NOT NULL ,
	MDC_NUM               INTEGER
			       NOT NULL ,
	QRY_LVL_2_CD          CHAR(1)
			       NOT NULL ,
	QRY_ACT_2_CD          CHAR(1)
			       NOT NULL ,
	MDC_QRY_CD            CHAR(4)
			       NOT NULL ,
	IMG                   CHAR(50)
			       NOT NULL ,
	QRY_TIME              TIMESTAMP
			      ,
	USER_ID               CHAR(8)
			      ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0395_01 ON MDC_QRY_LOG
(
	MDC_QRY_CD           ASC
);

CREATE INDEX XFK0395_02 ON MDC_QRY_LOG
(
	MDC_SSN              ASC,
	MDC_NUM              ASC
);

CREATE TABLE MILK_ABNM
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      
);

CREATE INDEX XIE0190_01 ON MILK_ABNM
(
	UPD_TIME             ASC
);

CREATE TABLE MILK_COLOUR_RSLT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	VST_NUM               SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COW_NUM               INTEGER
			       NOT NULL ,
	RSLT_1                INTEGER
			       NOT NULL ,
	RSLT_2                INTEGER
			       NOT NULL 
);

CREATE INDEX XIE0412_01 ON MILK_COLOUR_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE MILK_DTR_CMPL
(
	RPRT_YR               SMALLINT
			       NOT NULL ,
	RPRT_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DEFECT_CAT_CD         CHAR(4)
			       NOT NULL ,
	DEFECT_CD             CHAR(2)
			       NOT NULL ,
	COW_NUM               INTEGER
			      ,
	CMT                   CHAR(65)
			      
);

CREATE TABLE MILK_DTR_CMPL_ACT
(
	RPRT_YR               SMALLINT
			       NOT NULL ,
	RPRT_NUM              SMALLINT
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CTCT_MTHD_CD          CHAR(2)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	ptpt_cd               CHAR(18)
			      ,
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0546_02 ON MILK_DTR_CMPL_ACT
(
	PTPT_CD              ASC
);

CREATE TABLE MILK_DTR_CMPL_RPRT
(
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcd_date              CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      
);

CREATE TABLE MINDA_CHRG
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GRP1_ANML_CNT         INTEGER
			       NOT NULL ,
	GRP2_ANML_CNT         INTEGER
			       NOT NULL ,
	GRP3_ANML_CNT         INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			      ,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	calc_date             CHAR(18)
			      ,
	calc_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0495_01 ON MINDA_CHRG
(
	EXTR_DATE            ASC
);

CREATE TABLE MINDA_CHRG_SUMM
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL ,
	EXTR_DATE             DATE
			      ,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	calc_date             CHAR(18)
			      ,
	calc_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0494_01 ON MINDA_CHRG_SUMM
(
	EXTR_DATE            ASC
);

CREATE TABLE MINDA_DWNLD
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	MINDA_DWNLD_CD        CHAR(1)
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LICENSEE_PTPT_CD      CHAR(4)
			       NOT NULL ,
	DISK_SIZE             CHAR(1)
			       NOT NULL ,
	MODEM_IND             CHAR(1)
			       NOT NULL ,
	MODEM_SPEED           CHAR(5)
			       NOT NULL ,
	DATA_XFER_PREF_CD     CHAR(1)
			       NOT NULL ,
	MINDA_UPLOAD_IND      CHAR(1)
			       NOT NULL 
);

CREATE INDEX XIE0407_01 ON MINDA_DWNLD
(
	LICENSEE_PTPT_CD     ASC
);

CREATE INDEX XIE0407_02 ON MINDA_DWNLD
(
	RCPNT_PTPT_CD        ASC
);

CREATE TABLE MINDA_FLD_OFFCR
(
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	CD                    SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PARTY_ID              INTEGER
			      ,
	ptpt_cd               CHAR(18)
			      
);

CREATE INDEX XIE0410_01 ON MINDA_FLD_OFFCR
(
	PTPT_CD              ASC
);

CREATE TABLE MINDA_HERD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CURR_YR_ITN           INTEGER
			       NOT NULL ,
	PREV_YR_1_ITN         INTEGER
			       NOT NULL ,
	PREV_YR_2_ITN         INTEGER
			       NOT NULL ,
	PREV_YR_3_ITN         INTEGER
			       NOT NULL ,
	PREV_YR_4_ITN         INTEGER
			       NOT NULL ,
	PREV_YR_5_ITN         INTEGER
			       NOT NULL ,
	CURR_YR_UTN           INTEGER
			       NOT NULL ,
	PREV_YR_1_UTN         INTEGER
			       NOT NULL ,
	PREV_YR_2_UTN         INTEGER
			       NOT NULL ,
	PREV_YR_3_UTN         INTEGER
			       NOT NULL ,
	PREV_YR_4_UTN         INTEGER
			       NOT NULL ,
	PREV_YR_5_UTN         INTEGER
			       NOT NULL ,
	CURR_YR_INN           INTEGER
			       NOT NULL ,
	PREV_YR_1_INN         INTEGER
			       NOT NULL ,
	PREV_YR_2_INN         INTEGER
			       NOT NULL ,
	PREV_YR_3_INN         INTEGER
			       NOT NULL ,
	PREV_YR_4_INN         INTEGER
			       NOT NULL ,
	PREV_YR_5_INN         INTEGER
			       NOT NULL ,
	AB_CNT                INTEGER
			       NOT NULL ,
	NM_CNT                INTEGER
			       NOT NULL ,
	CLVG_CNT              INTEGER
			       NOT NULL ,
	PED_ANML_CNT          INTEGER
			       NOT NULL ,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	calc_date             CHAR(18)
			      ,
	calc_date_d           CHAR(18)
			      
);

CREATE TABLE MINDA_MED_REF
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0249_01 CHECK ( CD IN ('P', 'E') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE MINDA_OPT_BRTH_CMT
(
	STD_BRTH_CMT_CD       CHAR(2)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_FATE_CAUSE
(
	ANML_FATE_CD          CHAR(4)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(2)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_HLTH_CAT
(
	HLTH_CAT_CD           CHAR(4)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_HLTH_COND
(
	HLTH_COND_CD          CHAR(2)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_HLTH_PROD
(
	HLTH_PROD_CD          CHAR(6)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_HLTH_PROD_CAT
(
	HLTH_PROD_CAT_CD      CHAR(4)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_OPT_NEW_BORN_FATE
(
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	NEW_BORN_ANML_FATE_CD  CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE MINDA_QLTY
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TAG_CNT               INTEGER
			       NOT NULL ,
	SIRE_OFFL_CNT         INTEGER
			       NOT NULL ,
	ALL_RCD_ANC_PCT       SMALLINT
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	ERR_CNT               INTEGER
			       NOT NULL ,
	THIRTY_DAY_ERR_CNT    INTEGER
			       NOT NULL ,
	HERD_QLTY_CD          DECIMAL(1)
			       NOT NULL ,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	calc_date             CHAR(18)
			      ,
	calc_date_d           CHAR(18)
			      
);

CREATE TABLE MINDA_SOFTWARE_TP
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	PGM_ID_SUBSTR         CHAR(50)
			       NOT NULL 
);

CREATE TABLE MINDA_SOFTWARE_USER
(
	CHRG_PARTY_ID         INTEGER
			       NOT NULL ,
	CHRG_PTPT_CD          CHAR(4)
			       NOT NULL ,
	CHRG_PTPT_CD_ST_DATE  DATE
			       NOT NULL ,
	RCPNT_PARTY_ID        INTEGER
			       NOT NULL ,
	MINDA_SOFTWARE_TP_CD  CHAR(2)
			       NOT NULL ,
	ST_TIME               TIMESTAMP
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CAN_TIME              TIMESTAMP
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	UPD_PGM_ID            CHAR(8)
			      ,
	CONSTRAINT C0761_01 CHECK ( CAN_TIME IS NULL OR CAN_TIME >= ST_TIME ) 
);

CREATE TABLE MINDA_SOFTWARE_USER_CAN_RULE
(
	ACTIONED_TP_CD        CHAR(2)
			       NOT NULL ,
	EXIST_TP_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ALIGN_CAN_DATES_IND   CHAR(1)
			       NOT NULL  CONSTRAINT  C0369_01 CHECK ( ALIGN_CAN_DATES_IND IN ('Y','N') ),
	PREVENTS_CAN_IND      CHAR(1)
			       NOT NULL  CONSTRAINT  C0369_02 CHECK ( PREVENTS_CAN_IND IN ('Y','N') ),
	PREREQ_FOR_UNCAN_IND  CHAR(1)
			       NOT NULL  CONSTRAINT  C0369_03 CHECK ( PREREQ_FOR_UNCAN_IND IN ('Y','N') ),
	STOPS_UNCAN_IND       CHAR(1)
			       NOT NULL  CONSTRAINT  C0369_04 CHECK ( STOPS_UNCAN_IND IN ('Y','N') ),
	MUTUALLY_EXCL_IND     CHAR(1)
			       NOT NULL  CONSTRAINT  C0369_05 CHECK ( MUTUALLY_EXCL_IND IN ('Y','N') ),
	EXIST_TP_CD_2         CHAR(2)
			      
);

CREATE TABLE MINDA_SOFTWARE_USER_INS_RULE
(
	NEW_TP_CD             CHAR(2)
			       NOT NULL ,
	EXIST_TP_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INS_ALLOW_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0370_01 CHECK ( INS_ALLOW_IND IN ('Y','N') ),
	CAN_EXIST_IND         CHAR(1)
			       NOT NULL  CONSTRAINT  C0370_02 CHECK ( CAN_EXIST_IND IN ('Y','N') ),
	INS_EXIST_IF_ABSENT_IND  CHAR(1)
			       NOT NULL  CONSTRAINT  C0370_03 CHECK ( INS_EXIST_IF_ABSENT_IND IN ('Y','N') )
);

CREATE TABLE MKTG_BRD
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHORT_ABBR            CHAR(1)
			       NOT NULL ,
	LONG_ABBR             CHAR(3)
			       NOT NULL ,
	FAT_FACT              SMALLINT
			       NOT NULL ,
	BSOC_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL ,
	SPS_DFLT_NRR          SMALLINT
			      
);

CREATE INDEX XIE0533_01 ON MKTG_BRD
(
	LONG_ABBR            ASC
);

CREATE INDEX XIE0533_04 ON MKTG_BRD
(
	UPD_TIME             ASC
);

CREATE TABLE MRKR_BULL_ALCN
(
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	DESP_DATE             DATE
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DOSE_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE MTNG_DTL_CERT
(
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	MDC_TP_CD             CHAR(1)
			       NOT NULL ,
	RCVD_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RCVD_TIME             INTEGER
			       NOT NULL ,
	PUNCH_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PUNCH_TIME            INTEGER
			       NOT NULL ,
	PUNCH_USER_ID         CHAR(8)
			       NOT NULL ,
	VFY_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	VFY_TIME              INTEGER
			       NOT NULL ,
	VFY_USER_ID           CHAR(8)
			       NOT NULL ,
	FRST_VALID_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	FRST_VALID_TIME       INTEGER
			       NOT NULL ,
	LAST_VALID_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	LAST_VALID_TIME       INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	MDC_PROC_STS_CD       CHAR(1)
			       NOT NULL ,
	PROC_RGN_CD           CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              INTEGER
			       NOT NULL ,
	REPRINT_CNT           SMALLINT
			       NOT NULL ,
	SYNC_IND              CHAR(1)
			       NOT NULL ,
	TTL_RPR_CNT           SMALLINT
			       NOT NULL ,
	FRMR_RPR_CNT          SMALLINT
			       NOT NULL ,
	PROC_TIME             DECIMAL(11)
			       NOT NULL ,
	CLNT_CTCT_STS_CD      CHAR(1)
			      ,
	CLNT_CTCT_STS_TIME    TIMESTAMP
			      ,
	DATAMATE_RCD_DATE     DATE
			      ,
	DATAMATE_RCD_TIME     TIME
			      ,
	RCVD_DATE_D           DATE
			      ,
	PUNCH_DATE_D          DATE
			      ,
	VFY_DATE_D            DATE
			      ,
	FRST_VALID_DATE_D     DATE
			      ,
	LAST_VALID_DATE_D     DATE
			      ,
	UPD_DATE_D            DATE
			      ,
	vfy_date_d            CHAR(18)
			      ,
	rcvd_date             CHAR(18)
			      ,
	punch_date            CHAR(18)
			      ,
	last_valid_date_d     CHAR(18)
			      ,
	vfy_date              CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	punch_date_d          CHAR(18)
			      ,
	rcvd_date_d           CHAR(18)
			      ,
	last_valid_date       CHAR(18)
			      ,
	frst_valid_date_d     CHAR(18)
			      ,
	frst_valid_date       CHAR(18)
			      ,
	CONSTRAINT C0293_02 CHECK ( MDC_PROC_STS_CD IN ('Q','A','L','B','F') OR MDC_PROC_STS_CD NOT IN ( 'Q' , 'A', 'L','B','F') AND CLNT_CTCT_STS_CD IS NULL OR MDC_PROC_STS_CD = 'H' AND (CLNT_CTCT_STS_CD IN ('Y', 'Z') OR CLNT_CTCT_STS_CD IS NULL) ) ,
	CONSTRAINT C0293_03 CHECK ( DATAMATE_RCD_DATE IS NULL AND DATAMATE_RCD_TIME IS NULL OR DATAMATE_RCD_DATE IS NOT NULL AND DATAMATE_RCD_TIME IS NOT NULL  ) ,
	CONSTRAINT C0293_04 CHECK ( CLNT_CTCT_STS_CD IS NULL AND CLNT_CTCT_STS_TIME IS NULL OR CLNT_CTCT_STS_CD IS NOT NULL AND CLNT_CTCT_STS_TIME IS NOT NULL  ) 
);

CREATE INDEX XIE0293_01 ON MTNG_DTL_CERT
(
	MDC_PROC_STS_CD      ASC,
	PROC_TIME            ASC
);

CREATE INDEX XIE0293_02 ON MTNG_DTL_CERT
(
	MTNG_DATE            DESC,
	MDC_PROC_STS_CD      ASC,
	MDC_TP_CD            ASC
);

CREATE INDEX XIE0293_03 ON MTNG_DTL_CERT
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0293_04 ON MTNG_DTL_CERT
(
	VFY_USER_ID          ASC,
	MTNG_DATE            ASC
);

CREATE INDEX XIE0293_05 ON MTNG_DTL_CERT
(
	MTNG_DATE            ASC,
	SYNC_IND             ASC,
	NUM                  ASC,
	SSN                  ASC
);

CREATE TABLE MTNG_DTL_CERT_OLD
(
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	MDC_TP_CD             CHAR(1)
			       NOT NULL ,
	RCVD_DATE             INTEGER
			       NOT NULL ,
	RCVD_TIME             INTEGER
			       NOT NULL ,
	PUNCH_DATE            INTEGER
			       NOT NULL ,
	PUNCH_TIME            INTEGER
			       NOT NULL ,
	PUNCH_USER_ID         CHAR(8)
			       NOT NULL ,
	VFY_DATE              INTEGER
			       NOT NULL ,
	VFY_TIME              INTEGER
			       NOT NULL ,
	VFY_USER_ID           CHAR(8)
			       NOT NULL ,
	FRST_VALID_DATE       INTEGER
			       NOT NULL ,
	FRST_VALID_TIME       INTEGER
			       NOT NULL ,
	LAST_VALID_DATE       INTEGER
			       NOT NULL ,
	LAST_VALID_TIME       INTEGER
			       NOT NULL ,
	MTNG_DATE             INTEGER
			       NOT NULL ,
	MDC_PROC_STS_CD       CHAR(1)
			       NOT NULL ,
	PROC_RGN_CD           CHAR(4)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL ,
	UPD_TIME              INTEGER
			       NOT NULL ,
	REPRINT_CNT           SMALLINT
			       NOT NULL ,
	SYNC_IND              CHAR(1)
			       NOT NULL ,
	TTL_RPR_CNT           SMALLINT
			       NOT NULL ,
	FRMR_RPR_CNT          SMALLINT
			       NOT NULL ,
	PROC_TIME             DECIMAL(11)
			       NOT NULL ,
	CLNT_CTCT_STS_CD      CHAR(1)
			      ,
	CLNT_CTCT_STS_TIME    TIMESTAMP
			      ,
	DATAMATE_RCD_DATE     DATE
			      ,
	DATAMATE_RCD_TIME     TIME
			      ,
	RCVD_DATE_D           DATE
			      ,
	PUNCH_DATE_D          DATE
			      ,
	VFY_DATE_D            DATE
			      ,
	FRST_VALID_DATE_D     DATE
			      ,
	LAST_VALID_DATE_D     DATE
			      ,
	UPD_DATE_D            DATE
			      
);

CREATE TABLE MTNG_LOG
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OLD_ANML_KEY          INTEGER
			      ,
	OLD_DATE              DATE
			      ,
	MATE_ANML_KEY         INTEGER
			       NOT NULL ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE INDEX XIE0010_01 ON MTNG_LOG
(
	ANML_KEY             ASC,
	DATE                 ASC
);

CREATE INDEX XIE0010_02 ON MTNG_LOG
(
	UPD_TIME             ASC
);

CREATE TABLE MTNG_PLAN_ERR_HIST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 5000005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	STD_SOF_ERR_CD        SMALLINT
			       NOT NULL ,
	ERR_STS_CD            CHAR(4)
			       NOT NULL ,
	DESP_DATE             DATE
			      
);

CREATE TABLE MTNG_PLAN_ERR_STS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE MTNG_PLAN_FRZ_SMN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_CNT              SMALLINT
			       NOT NULL ,
	END_DATE              DATE
			      ,
	SAP_ORDER_REF_NUM     INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL 
);

CREATE TABLE MTNG_PLAN_RQRD_SMN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	DEMAND_DATE           DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LLL_DOSE_CNT          DECIMAL(6,2)
			       NOT NULL ,
	FRZ_DOSE_CNT          DECIMAL(6,2)
			      ,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL 
);

CREATE INDEX XIE0041_02 ON MTNG_PLAN_RQRD_SMN
(
	SMN_ALCN_RGN_ID      ASC,
	DEMAND_DATE          ASC,
	LLL_DOSE_CNT         ASC
);

CREATE INDEX XIE0041_03 ON MTNG_PLAN_RQRD_SMN
(
	UPD_TIME             ASC
);

CREATE TABLE MTNG_RET_GRP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MTNG_INTVL_MIN        SMALLINT
			      ,
	MTNG_INTVL_MAX        SMALLINT
			      ,
	HRD_MTNG_INTVL_MIN    SMALLINT
			      ,
	HRD_MTNG_INTVL_MAX    SMALLINT
			      
);

CREATE INDEX XIE0315_01 ON MTNG_RET_GRP
(
	ID                   ASC,
	MTNG_INTVL_MAX       ASC,
	MTNG_INTVL_MIN       ASC,
	HRD_MTNG_INTVL_MAX   ASC,
	HRD_MTNG_INTVL_MIN   ASC
);

CREATE TABLE MTNG_SYST
(
	CD                    DECIMAL(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0043_01 ON MTNG_SYST
(
	UPD_TIME             ASC
);

CREATE TABLE MTNG_SYST_TECH
(
	MTNG_SYST_CD          DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0081_01 CHECK ( MTNG_SYST_CD IN (1,3) ),
	SYNC_TECH_CD          CHAR(4)
			       NOT NULL  CONSTRAINT  C0081_02 CHECK ( SYNC_TECH_CD IN ('C', 'P') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XFK0081_02 ON MTNG_SYST_TECH
(
	SYNC_TECH_CD         ASC
);

CREATE TABLE NB_ANML_CMT
(
	DAM_ANML_KEY          INTEGER
			       NOT NULL ,
	PARTN_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	SEQ                   SMALLINT
			       NOT NULL ,
	BRTH_CMT_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL ,
	PARTN_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	partn_date            CHAR(18)
			      ,
	partn_date_d          CHAR(18)
			      ,
	CONSTRAINT C0029_01 CHECK ( BRTH_CMT_CD NOT IN ('OD', 'RC') OR TEXT != ' ' ) 
);

CREATE TABLE NC_SUBM_MODEL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INSEM_TP_CD           CHAR(1)
			       NOT NULL  CONSTRAINT  C0049_01 CHECK ( INSEM_TP_CD IN ('D','T') ),
	MTNG_LENGTH           SMALLINT
			       NOT NULL  CONSTRAINT  C0049_02 CHECK ( MTNG_LENGTH IN (21,28,35,42,119) ),
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	RGN_ID                INTEGER
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	rgn_id                CHAR(18)
			      
);

CREATE TABLE NC_SUBM_RATE
(
	MODEL_ID              INTEGER
			       NOT NULL ,
	MTNG_DAY              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PCT                   DECIMAL(7,5)
			       NOT NULL  CONSTRAINT  C0050_01 CHECK ( PCT >= 0 )
);

CREATE TABLE NEW_GIS_PT_LOG
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GIS_PT_ID             INTEGER
			       NOT NULL 
);

CREATE TABLE NEW_PROP_LOG
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL 
);

CREATE TABLE NO_INSP_RSN
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      
);

CREATE INDEX XIE0192_01 ON NO_INSP_RSN
(
	UPD_TIME             ASC
);

CREATE TABLE NON_PRODN_TRAIT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              SMALLINT
			       NOT NULL ,
	INSP_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	INSP_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	HERD_CD               INTEGER
			       NOT NULL ,
	TRAIT_90              DECIMAL(1)
			       NOT NULL ,
	TRAIT_91              DECIMAL(1)
			       NOT NULL ,
	TRAIT_92              DECIMAL(1)
			       NOT NULL ,
	TRAIT_93              DECIMAL(1)
			       NOT NULL ,
	TRAIT_94              DECIMAL(1)
			       NOT NULL ,
	TRAIT_95              DECIMAL(1)
			       NOT NULL ,
	TRAIT_96              DECIMAL(1)
			       NOT NULL ,
	TRAIT_97              DECIMAL(1)
			       NOT NULL ,
	TRAIT_98              DECIMAL(1)
			       NOT NULL ,
	TRAIT_99              DECIMAL(1)
			       NOT NULL ,
	TRAIT_100             DECIMAL(1)
			       NOT NULL ,
	TRAIT_101             DECIMAL(1)
			       NOT NULL ,
	TRAIT_102             DECIMAL(1)
			       NOT NULL ,
	TRAIT_103             DECIMAL(1)
			       NOT NULL ,
	TRAIT_104             DECIMAL(1)
			       NOT NULL ,
	TRAIT_105             DECIMAL(1)
			       NOT NULL ,
	TRAIT_106             DECIMAL(1)
			       NOT NULL ,
	TOP_CMT_CD_1          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_2          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_3          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_4          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_5          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_6          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_7          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_8          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_9          CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_10         CHAR(2)
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	AE_INCL_IND           CHAR(1)
			       NOT NULL  DEFAULT 'Y' CONSTRAINT  C0347_01 CHECK ( AE_INCL_IND IN ('Y','N') ),
	INSP_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	insp_date_d           CHAR(18)
			      ,
	insp_date             CHAR(18)
			      
);

CREATE TABLE NZ_AE_AVG
(
	RUN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_CNT              INTEGER
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	TOP5_PW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_PW_REL           DECIMAL(3,1)
			       NOT NULL ,
	TOP5_BW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_BW_REL           DECIMAL(3,1)
			       NOT NULL ,
	RUN_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	run_date              CHAR(18)
			      ,
	run_date_d            CHAR(18)
			      
);

CREATE TABLE NZ_POST_MAP
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ADDR_FMT_CD           CHAR(4)
			       NOT NULL  CONSTRAINT  C0109_01 CHECK ( ADDR_FMT_CD IN ('STR ','BOX ','BAG ','RD  ','RDO ','PLCE') ),
	POSTCODE              CHAR(4)
			      ,
	ST_NUM                INTEGER
			      ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	END_NUM               INTEGER
			      ,
	STR_SIDE_CD           CHAR(1)
			       CONSTRAINT  C0109_02 CHECK ( STR_SIDE_CD IN ('E', 'O','B') ),
	NZ_POST_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0109_03 CHECK ( NZ_POST_IND IN ('Y', 'N') )
);

CREATE INDEX XFK0109_01 ON NZ_POST_MAP
(
	GEO_AREA_ID          ASC
);

CREATE INDEX XFK0109_02 ON NZ_POST_MAP
(
	ADDR_FMT_CD          ASC
);

CREATE INDEX XFK0109_03 ON NZ_POST_MAP
(
	STR_SIDE_CD          ASC
);

CREATE INDEX XIE0109_01 ON NZ_POST_MAP
(
	POSTCODE             ASC
);

CREATE TABLE OAD_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BW                    INTEGER
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    INTEGER
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL 
);

CREATE TABLE OAD_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MEAN_FAT_BV           DOUBLE
			       NOT NULL ,
	MEAN_PROT_BV          DOUBLE
			       NOT NULL ,
	MEAN_VOL_BV           DOUBLE
			       NOT NULL ,
	MEAN_SC_BV            DOUBLE
			       NOT NULL ,
	MEAN_FAT_PV           DOUBLE
			       NOT NULL ,
	MEAN_PROT_PV          DOUBLE
			       NOT NULL ,
	MEAN_VOL_PV           DOUBLE
			       NOT NULL ,
	AVG_BW                INTEGER
			       NOT NULL ,
	AVG_PW                INTEGER
			       NOT NULL ,
	BASE_ANML_CNT         INTEGER
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE OAD_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_BW                INTEGER
			       NOT NULL ,
	AVG_PW                INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE OLD_AE_HERD_AVG
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CALC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	COW_CNT               SMALLINT
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	FAT_BV                DECIMAL(5,2)
			       NOT NULL ,
	FAT_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	PROT_BV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	VOL_BV                INTEGER
			       NOT NULL ,
	VOL_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	LWGT_BV               DECIMAL(5,1)
			       NOT NULL ,
	LWGT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	SURV_BV               DECIMAL(5,1)
			       NOT NULL ,
	SURV_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	SIRE_OFFL_ANC_PCT     SMALLINT
			       NOT NULL ,
	ALL_RCD_ANC_PCT       SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CALC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	calc_date             CHAR(18)
			      ,
	calc_date_d           CHAR(18)
			      
);

CREATE TABLE ON_FARM_PROD
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			      ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL 
);

CREATE TABLE ORG_LIST
(
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	ADMIN_NAME            CHAR(4)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ARCH_IND              DECIMAL(1)
			       NOT NULL ,
	NAME                  CHAR(36)
			       NOT NULL ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE INDEX XIE0092_01 ON ORG_LIST
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0092_02 ON ORG_LIST
(
	CTCT_PTPT_CD         ASC
);

CREATE TABLE ORG_SV_TP
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE TABLE OSEAS_ANML
(
	CTRY_CD               CHAR(3)
			       NOT NULL ,
	ID                    CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL 
);

CREATE INDEX XIE0397_01 ON OSEAS_ANML
(
	NAME                 ASC
);

CREATE INDEX XIE0397_02 ON OSEAS_ANML
(
	UPD_TIME             ASC
);

CREATE TABLE OSEAS_ANML_PROOF
(
	FIRST_REG_COUNTRY_CD  CHAR(3)
			       NOT NULL ,
	INTL_ANML_ID          CHAR(12)
			       NOT NULL ,
	PROOF_COUNTRY_CD      CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BRD_ABBR              CHAR(3)
			       NOT NULL ,
	PROOF_ANML_ID         CHAR(12)
			       NOT NULL ,
	UPD_DATE              DATE
			       NOT NULL ,
	ANML_ID_2             CHAR(12)
			       NOT NULL ,
	BIRTH_DATE            DATE
			      ,
	SIRE_BRD_ABBR         CHAR(3)
			       NOT NULL ,
	SIRE_ID               CHAR(12)
			       NOT NULL ,
	SIRE_COUNTRY_CD       CHAR(3)
			       NOT NULL ,
	DAM_BRD_ABBR          CHAR(3)
			       NOT NULL ,
	DAM_ID                CHAR(12)
			       NOT NULL ,
	DAM_COUNTRY_CD        CHAR(3)
			       NOT NULL ,
	MGS_BRD_ABBR          CHAR(3)
			       NOT NULL ,
	MGS_ID                CHAR(12)
			       NOT NULL ,
	MGS_COUNTRY_CD        CHAR(3)
			       NOT NULL ,
	MGD_BRD_ABBR          CHAR(3)
			       NOT NULL ,
	MGD_COUNTRY_CD        CHAR(3)
			       NOT NULL ,
	MGD_ID                CHAR(12)
			       NOT NULL ,
	EVAL_BRD_ABBR         CHAR(3)
			       NOT NULL ,
	EVAL_YR               SMALLINT
			       NOT NULL ,
	REF_BASE              CHAR(6)
			       NOT NULL ,
	UOM_CD                CHAR(3)
			       NOT NULL ,
	EVAL_MTH              SMALLINT
			       NOT NULL ,
	FIRST_REG_NAME        CHAR(30)
			       NOT NULL ,
	VOL_DTR_CNT           INTEGER
			      ,
	VOL_HERD_CNT          INTEGER
			      ,
	VOL_EFF_DTR_CNT       INTEGER
			      ,
	VOL_REL               SMALLINT
			      ,
	VOL_GENETIC_MERIT_CD  CHAR(2)
			       NOT NULL ,
	VOL_DTR_CONTRIB       INTEGER
			      ,
	FAT_DTR_CNT           INTEGER
			       NOT NULL ,
	FAT_HERD_CNT          INTEGER
			       NOT NULL ,
	FAT_EFF_DTR_CNT       INTEGER
			       NOT NULL ,
	FAT_REL               SMALLINT
			       NOT NULL ,
	FAT_GENETIC_MERIT_CD  CHAR(2)
			      ,
	FAT_DTR_CONTRIB       INTEGER
			      ,
	PROT_DTR_CNT          INTEGER
			       NOT NULL ,
	PROT_HERD_CNT         INTEGER
			       NOT NULL ,
	PROT_EFF_DTR_CNT      INTEGER
			       NOT NULL ,
	PROT_REL              SMALLINT
			       NOT NULL ,
	PROT_GENETIC_MERIT_CD  CHAR(2)
			      ,
	PROT_DTR_CONTRIB      INTEGER
			      ,
	PROOF_TP_CD           SMALLINT
			       NOT NULL ,
	FOREIGN_PROOF_IND     CHAR(1)
			       NOT NULL ,
	BULL_STS_CD           SMALLINT
			       NOT NULL ,
	OFFICIAL_PROOF_IND    CHAR(1)
			       NOT NULL ,
	AI_DTR_BIRTH_DATE     DATE
			      ,
	EXPECT_VOL_BV         DECIMAL(9,1)
			       NOT NULL ,
	VOL_DTR_YLD_DEV       DECIMAL(9,1)
			       NOT NULL ,
	EXPECT_FAT_BV         DECIMAL(9,1)
			       NOT NULL ,
	FAT_DTR_YLD_DEV       DECIMAL(9,1)
			       NOT NULL ,
	PROT_DTR_YLD_DEV      DECIMAL(9,1)
			       NOT NULL ,
	EXPECT_PROT_BV        DECIMAL(9,1)
			       NOT NULL ,
	TOP_HERD_CNT          INTEGER
			       NOT NULL ,
	TOP_DTR_CNT           INTEGER
			       NOT NULL ,
	TOP_EFF_DTR_CNT       INTEGER
			       NOT NULL ,
	SC_GENETIC_MERIT      CHAR(2)
			      ,
	SC_HERD_CNT           INTEGER
			      ,
	SC_DTR_CNT            INTEGER
			      ,
	SC_EFF_DTR_CONTRIB    INTEGER
			      ,
	SC_REL                SMALLINT
			      ,
	SC_INTL_PROOF         DECIMAL(6,3)
			      ,
	MAST_GENETIC_MERIT    CHAR(2)
			      ,
	MAST_HERD_CNT         INTEGER
			      ,
	MAST_DTR_CNT          INTEGER
			      ,
	MAST_EFF_DTR_CONTRIB  INTEGER
			      ,
	MAST_REL              SMALLINT
			      ,
	MAST_INTL_PROOF       DECIMAL(6,3)
			      ,
	MDN_HFR_CONCV_GENETIC_MERIT  CHAR(2)
			      ,
	MDN_HFR_CONCV_HERD_CNT  INTEGER
			      ,
	MDN_HFR_CONCV_DTR_CNT  INTEGER
			      ,
	MDN_HFR_CONCV_EFF_DTR_CONTRIB  INTEGER
			      ,
	MDN_HFR_CONCV_REL     SMALLINT
			      ,
	MDN_HFR_CONCV_INTL_PROOF  DECIMAL(6,3)
			      ,
	LACT_CYCLE_GENETIC_MERIT  CHAR(2)
			      ,
	LACT_CYCLE_HERD_CNT   INTEGER
			      ,
	LACT_CYCLE_DTR_CNT    INTEGER
			      ,
	LACT_CYCLE_EFF_DTR_CONTRIB  INTEGER
			      ,
	LACT_CYCLE_REL        SMALLINT
			      ,
	LACT_CYCLE_INTL_PROOF  DECIMAL(6,3)
			      ,
	LACT_CONCV_1_GENETIC_MERIT  CHAR(2)
			      ,
	LACT_CONCV_1_HERD_CNT  INTEGER
			      ,
	LACT_CONCV_1_DTR_CNT  INTEGER
			      ,
	PROOF_ANML_NAME       CHAR(30)
			       NOT NULL ,
	LACT_CONCV_1_EFF_DTR_CONTRIB  INTEGER
			      ,
	LACT_CONCV_1_REL      SMALLINT
			      ,
	LACT_CONCV_1_INTL_PROOF  DECIMAL(6,3)
			      ,
	LACT_CONCV_2_GENETIC_MERIT  CHAR(2)
			      ,
	LACT_CONCV_2_HERD_CNT  INTEGER
			      ,
	LACT_CONCV_2_DTR_CNT  INTEGER
			      ,
	LACT_CONCV_2_EFF_DTR_CONTRIB  INTEGER
			      ,
	LACT_CONCV_2_REL      SMALLINT
			      ,
	LACT_CONCV_2_INTL_PROOF  DECIMAL(6,3)
			      ,
	STATURE_HERD_CNT      INTEGER
			      ,
	STATURE_DTR_CNT       INTEGER
			      ,
	STATURE_REL           SMALLINT
			      ,
	STATURE_INTL_PROOF    DECIMAL(5,2)
			      ,
	CHEST_WIDTH_HERD_CNT  INTEGER
			      ,
	CHEST_WIDTH_DTR_CNT   INTEGER
			      ,
	CHEST_WIDTH_REL       SMALLINT
			      ,
	CHEST_WIDTH_INTL_PROOF  DECIMAL(5,2)
			      ,
	BODY_DEPTH_HERD_CNT   INTEGER
			      ,
	BODY_DEPTH_DTR_CNT    INTEGER
			      ,
	BODY_DEPTH_REL        SMALLINT
			      ,
	BODY_DEPTH_INTL_PROOF  DECIMAL(5,2)
			      ,
	ANGULARITY_HERD_CNT   INTEGER
			      ,
	ANGULARITY_DTR_CNT    INTEGER
			      ,
	ANGULARITY_REL        SMALLINT
			      ,
	ANGULARITY_INTL_PROOF  DECIMAL(5,2)
			      ,
	RUMP_ANGLE_HERD_CNT   INTEGER
			      ,
	RUMP_ANGLE_DTR_CNT    INTEGER
			      ,
	RUMP_ANGLE_REL        SMALLINT
			      ,
	RUMP_ANGLE_INTL_PROOF  DECIMAL(5,2)
			      ,
	RUMP_WIDTH_HERD_CNT   INTEGER
			      ,
	RUMP_WIDTH_DTR_CNT    INTEGER
			      ,
	RUMP_WIDTH_REL        SMALLINT
			      ,
	RUMP_WIDTH_INTL_PROOF  DECIMAL(5,2)
			      ,
	REAR_LEG_SET_HERD_CNT  INTEGER
			      ,
	REAR_LEG_SET_DTR_CNT  INTEGER
			      ,
	REAR_LEG_SET_REL      SMALLINT
			      ,
	REAR_LEG_SET_INTL_PROOF  DECIMAL(5,2)
			      ,
	REAR_LEG_REAR_VIEW_HERD_CNT  INTEGER
			      ,
	REAR_LEG_REAR_VIEW_DTR_CNT  INTEGER
			      ,
	REAR_LEG_REAR_VIEW_REL  SMALLINT
			      ,
	REAR_LEG_REAR_VIEW_INTL_PROOF  DECIMAL(5,2)
			      ,
	FOOT_ANGLE_HERD_CNT   INTEGER
			      ,
	FOOT_ANGLE_DTR_CNT    INTEGER
			      ,
	FOOT_ANGLE_REL        SMALLINT
			      ,
	FOOT_ANGLE_INTL_PROOF  DECIMAL(5,2)
			      ,
	FORE_UDDER_HERD_CNT   INTEGER
			      ,
	FORE_UDDER_DTR_CNT    INTEGER
			      ,
	FORE_UDDER_REL        SMALLINT
			      ,
	FORE_UDDER_INTL_PROOF  DECIMAL(5,2)
			      ,
	REAR_UDDER_HEIGHT_HERD_CNT  INTEGER
			      ,
	REAR_UDDER_HEIGHT_DTR_CNT  INTEGER
			      ,
	REAR_UDDER_HEIGHT_REL  SMALLINT
			      ,
	REAR_UDDER_HEIGHT_INTL_PROOF  DECIMAL(5,2)
			      ,
	UDDER_SUPPORT_HERD_CNT  INTEGER
			      ,
	UDDER_SUPPORT_DTR_CNT  INTEGER
			      ,
	UDDER_SUPPORT_REL     SMALLINT
			      ,
	UDDER_SUPPORT_INTL_PROOF  DECIMAL(5,2)
			      ,
	UDDER_DEPTH_HERD_CNT  INTEGER
			      ,
	UDDER_DEPTH_DTR_CNT   INTEGER
			      ,
	UDDER_DEPTH_REL       SMALLINT
			      ,
	UDDER_DEPTH_INTL_PROOF  DECIMAL(5,2)
			      ,
	TEAT_PLCMNT_HERD_CNT  INTEGER
			      ,
	TEAT_PLCMNT_DTR_CNT   INTEGER
			      ,
	TEAT_PLCMNT_REL       SMALLINT
			      ,
	TEAT_PLCMNT_INTL_PROOF  DECIMAL(5,2)
			      ,
	TEAT_LENGTH_HERD_CNT  INTEGER
			      ,
	TEAT_LENGTH_DTR_CNT   INTEGER
			      ,
	TEAT_LENGTH_REL       SMALLINT
			      ,
	TEAT_LENGTH_INTL_PROOF  DECIMAL(5,2)
			      ,
	REAR_TEAT_PLCMNT_HERD_CNT  INTEGER
			      ,
	REAR_TEAT_PLCMNT_DTR_CNT  INTEGER
			      ,
	REAR_TEAT_PLCMNT_REL  SMALLINT
			      ,
	REAR_TEAT_PLCMNT_INTL_PROOF  DECIMAL(5,2)
			      ,
	OVERALL_CONF_HERD_CNT  INTEGER
			      ,
	OVERALL_CONF_DTR_CNT  INTEGER
			      ,
	OVERALL_CONF_REL      SMALLINT
			      ,
	OVERALL_CONF_INTL_PROOF  DECIMAL(5,2)
			      ,
	OVERALL_UDDER_HERD_CNT  INTEGER
			      ,
	OVERALL_UDDER_DTR_CNT  INTEGER
			      ,
	OVERALL_UDDER_REL     SMALLINT
			      ,
	OVERALL_UDDER_INTL_PROOF  DECIMAL(5,2)
			      ,
	OVERALL_FEET_LEG_HERD_CNT  INTEGER
			      ,
	OVERALL_FEET_LEG_DTR_CNT  INTEGER
			      ,
	OVERALL_FEET_LEG_REL  SMALLINT
			      ,
	OVERALL_FEET_LEG_INTL_PROOF  DECIMAL(5,2)
			      ,
	LONGEVITY_GENETIC_MERIT  CHAR(2)
			      ,
	LONGEVITY_HERD_CNT    INTEGER
			      ,
	LONGEVITY_DTR_CNT     INTEGER
			      ,
	LONGEVITY_EFF_DTR_CONTRIB  INTEGER
			      ,
	LONGEVITY_REL         SMALLINT
			      ,
	LONGEVITY_INTL_PROOF  DECIMAL(6,3)
			      ,
	LACT_INTERVAL_GENETIC_MERIT  CHAR(2)
			      ,
	LACT_INTERVAL_HERD_CNT  INTEGER
			      ,
	LACT_INTERVAL_DTR_CNT  INTEGER
			      ,
	LACT_INTERVAL_EFF_DTR_CONTRIB  INTEGER
			      ,
	LACT_INTERVAL_REL     SMALLINT
			      ,
	LACT_INTERVAL_INTL_PROOF  DECIMAL(6,3)
			      
);

CREATE INDEX XIE0012_01 ON OSEAS_ANML_PROOF
(
	ANML_ID_2            ASC
);

CREATE TABLE OSEAS_ID_XREF
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	CTRY_CD               CHAR(3)
			       NOT NULL ,
	FRST_REG_CTRY_CD      CHAR(3)
			       NOT NULL ,
	INTL_ANML_ID          CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XFK0011_02 ON OSEAS_ID_XREF
(
	CTRY_CD              ASC
);

CREATE INDEX XFK0011_03 ON OSEAS_ID_XREF
(
	FRST_REG_CTRY_CD     ASC
);

CREATE TABLE OTD_ANML
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	CULLED_COW_IND        CHAR(1)
			       NOT NULL ,
	COW_NUM               CHAR(5)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	AM_VOL                DECIMAL(5,1)
			       NOT NULL ,
	PM_VOL                DECIMAL(5,1)
			       NOT NULL ,
	FAT_PCT               DECIMAL(4,2)
			       NOT NULL ,
	FAT_KG                DECIMAL(5,2)
			       NOT NULL ,
	PROT_PCT              DECIMAL(4,2)
			       NOT NULL ,
	PROT_KG               DECIMAL(5,2)
			       NOT NULL ,
	MILK_ABNM_CD          CHAR(1)
			       NOT NULL ,
	TEST_ASSESS_CD        CHAR(1)
			       NOT NULL ,
	SCC                   SMALLINT
			       NOT NULL ,
	LACT_VOL              INTEGER
			       NOT NULL ,
	LACT_FAT_KG           INTEGER
			       NOT NULL ,
	LACT_PROT_KG          INTEGER
			       NOT NULL ,
	LACT_DIM              SMALLINT
			       NOT NULL ,
	LACT_PW               SMALLINT
			       NOT NULL ,
	LACT_PW_REL           SMALLINT
			       NOT NULL ,
	LACT_WRTH             SMALLINT
			       NOT NULL ,
	PRINT_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	print_date            CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      
);

CREATE TABLE OTD_HERD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_BW               SMALLINT
			       NOT NULL ,
	RCD_ANC_PCT           SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	PREV_VST_SSN          SMALLINT
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TEST_NUM              SMALLINT
			       NOT NULL ,
	TEST_CNT              SMALLINT
			       NOT NULL ,
	SUPR_MTHD_CD          CHAR(1)
			       NOT NULL ,
	SCC_XMIT_IND          CHAR(1)
			       NOT NULL ,
	LACT_TO_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	TEST_COW_CNT          SMALLINT
			       NOT NULL ,
	CALC_COW_CNT          SMALLINT
			       NOT NULL ,
	LESS_100_COW_CNT      SMALLINT
			       NOT NULL ,
	AM_VOL_AVG            DECIMAL(5,1)
			       NOT NULL ,
	PM_VOL_AVG            DECIMAL(5,1)
			       NOT NULL ,
	FAT_PCT               DECIMAL(5,2)
			       NOT NULL ,
	FAT_KG_AVG            DECIMAL(5,2)
			       NOT NULL ,
	PROT_PCT              DECIMAL(5,2)
			       NOT NULL ,
	PROT_KG_AVG           DECIMAL(5,2)
			       NOT NULL ,
	SCC_AVG               SMALLINT
			       NOT NULL ,
	LACT_VOL_AVG          INTEGER
			       NOT NULL ,
	LACT_FAT_KG_AVG       SMALLINT
			       NOT NULL ,
	LACT_PROT_KG_AVG      SMALLINT
			       NOT NULL ,
	LACT_DIM_AVG          SMALLINT
			       NOT NULL ,
	LACT_PW               SMALLINT
			       NOT NULL ,
	LACT_PW_REL           SMALLINT
			       NOT NULL ,
	LACT_WRTH             SMALLINT
			       NOT NULL ,
	BW_REL                SMALLINT
			       NOT NULL ,
	LACT_TO_DATE_D        DATE
			      ,
	PRINT_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	TEST_DATE_D           DATE
			      ,
	test_date             CHAR(18)
			      ,
	lact_to_date_d        CHAR(18)
			      ,
	lact_to_date          CHAR(18)
			      ,
	print_date            CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0284_01 ON OTD_HERD
(
	PRINT_DATE           ASC,
	PRINT_TIME           ASC
);

CREATE TABLE OUTPUT_CAT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STNY_CD               CHAR(4)
			       NOT NULL ,
	PRINTER               CHAR(8)
			       NOT NULL ,
	OUTPUT_CLASS_CD       CHAR(1)
			       NOT NULL ,
	PRINT_JOB_TP          DECIMAL(1)
			       NOT NULL ,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE PAR_CLASS
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PARTURITION
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	DATE_ACTL_IND         DECIMAL(1)
			       NOT NULL ,
	PREG_TERM_RSN_CD      CHAR(1)
			       NOT NULL ,
	BRTH_ASST_CD          DECIMAL(1)
			       NOT NULL ,
	CALF_CNT              SMALLINT
			       NOT NULL ,
	NB_ANML_KEY           INTEGER
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0021_02 ON PARTURITION
(
	NB_ANML_KEY          ASC
);

CREATE INDEX XIE0021_01 ON PARTURITION
(
	UPD_TIME             ASC
);

CREATE TABLE PARTY
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(36)
			       NOT NULL ,
	FRST_NAME             CHAR(16)
			      ,
	INIT                  CHAR(10)
			       CONSTRAINT  C0110_10 CHECK ( INIT IS NULL OR INIT != ' ' ),
	ALT_NAME              CHAR(36)
			      ,
	TITLE                 CHAR(8)
			       CONSTRAINT  C0110_11 CHECK ( TITLE IS NULL OR TITLE != ' ' ),
	BRTH_DATE             DATE
			      ,
	E_MINDA_HELP_IND      CHAR(1)
			       CONSTRAINT  C0110_01 CHECK ( E_MINDA_HELP_IND IN ('Y','N') ),
	RPRT_MED_CD           CHAR(1)
			      ,
	ACTV_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0110_03 CHECK ( ACTV_IND IN ('Y', 'N') ),
	ACTV_IND_UPD_DATE     DATE
			      ,
	EMAIL_ADDR            CHAR(150)
			      ,
	SORT_NAME             CHAR(20)
			      ,
	GST_NUM               CHAR(11)
			      ,
	PIN                   CHAR(10)
			      ,
	PIN_UPD_DATE          DATE
			      ,
	PIN_UPD_LTR_IND       CHAR(1)
			       CONSTRAINT  C0110_04 CHECK ( PIN_UPD_LTR_IND IN ('Y','N') ),
	PIN_UPD_LTR_DATE      DATE
			      ,
	SUSP_SV_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0110_05 CHECK ( SUSP_SV_IND IN ('Y', 'N') ),
	INVSMATE_DISC_PCT     DECIMAL(4,2)
			       NOT NULL  DEFAULT 0 CONSTRAINT  C0110_08 CHECK ( INVSMATE_DISC_PCT BETWEEN 0 AND 100 ),
	INVSTEST_DISC_PCT     DECIMAL(4,2)
			       NOT NULL  DEFAULT 0 CONSTRAINT  C0110_09 CHECK ( INVSTEST_DISC_PCT BETWEEN 0 AND 100 ),
	LOGO_CD               CHAR(1)
			      ,
	SRCH_NAME             CHAR(36)
			       NOT NULL  WITH DEFAULT,
	INET_IND              CHAR(1)
			       CONSTRAINT  C0110_06 CHECK ( INET_IND IN ('Y', 'N') ),
	UPD_USER_ID           CHAR(8)
			      ,
	LGL_ENTITY_CD         CHAR(1)
			      ,
	LGL_NAME              CHAR(36)
			      ,
	TRACKA_PSWD           CHAR(10)
			      ,
	TRACKA_STS_CD         CHAR(1)
			       NOT NULL  DEFAULT 'N',
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	CRM_ID                CHAR(10)
			      ,
	SHAREHOLDER_ELIG_IND  CHAR(1)
			       CONSTRAINT  C0110_12 CHECK ( SHAREHOLDER_ELIG_IND IN ('Y','N') ),
	LINK_ADDR_IND         CHAR(1)
			       CONSTRAINT  C0110_13 CHECK ( LINK_ADDR_IND IN ('Y','N') ),
	SHAREHOLDER_ELIG_END_DATE  DATE
			      ,
	lgl_name              CHAR(18)
			      ,
	lgl_entity_cd         CHAR(18)
			      ,
	name                  CHAR(18)
			      ,
	rprt_med_cd           CHAR(18)
			      ,
	tracka_sts_cd         CHAR(18)
			      ,
	pin                   CHAR(18)
			      ,
	pin_upd_ltr_ind       CHAR(18)
			      ,
	phone_ctct_name       CHAR(18)
			      ,
	link_addr_ind         CHAR(18)
			      ,
	shareholder_elig_end_date  CHAR(18)
			      ,
	shareholder_elig_ind  CHAR(18)
			      
);

CREATE INDEX XIE0110_01 ON PARTY
(
	SRCH_NAME            ASC
);

CREATE INDEX XIE0110_02 ON PARTY
(
	PIN                  ASC
);

CREATE INDEX XIE0110_03 ON PARTY
(
	UPD_TIME             ASC
);

CREATE TABLE PARTY_ADDR
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	ADDR_USE_CD           CHAR(4)
			       NOT NULL  CONSTRAINT  C0112_01 CHECK ( ADDR_USE_CD IN ('MAIL','SITE') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	ADDR_NORMLS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0112_02 CHECK ( ADDR_NORMLS_CD IN ('F','N') ),
	ADDR_ID               INTEGER
			       NOT NULL ,
	CARE_OF               CHAR(36)
			      ,
	ATTN                  CHAR(36)
			      ,
	st_date               CHAR(18)
			      ,
	addr_use_cd           CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	CONSTRAINT C0112_03 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE INDEX XIE0112_01 ON PARTY_ADDR
(
	UPD_TIME             ASC
);

CREATE TABLE PARTY_ASSOC
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	ASSOC_PARTY_ID        INTEGER
			       NOT NULL ,
	PARTY_ASSOC_TP_CD     CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RESP_AREA             CHAR(20)
			      ,
	END_DATE              DATE
			      ,
	CONSTRAINT C0113_01 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE TABLE PARTY_ASSOC_TP
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PARTY_AUDIT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	LEGAL_NAME            CHAR(36)
			      ,
	LEGAL_ENTITY_CD       CHAR(1)
			      ,
	USER_ID               CHAR(8)
			       NOT NULL  DEFAULT USER
);

CREATE INDEX XFK0845_01 ON PARTY_AUDIT
(
	PARTY_ID             ASC
)
 CLUSTER;

CREATE TABLE PARTY_HLTH_FAVOURITE
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	HLTH_PROD_CD          CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE PARTY_MEMB
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 300005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	MEMB_NAME             CHAR(36)
			       NOT NULL ,
	MEMB_FRST_NAME        CHAR(36)
			      ,
	PRNCP_IND             CHAR(1)
			       CONSTRAINT  C0460_01 CHECK ( PRNCP_IND IN ('Y', 'N') ),
	END_DATE              DATE
			      
);

CREATE TABLE PARTY_PROP
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	PROP_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FIRST_KNOWN_DATE      DATE
			       NOT NULL ,
	AHB_HERD_NUM          INTEGER
			      ,
	RELINQUISH_DATE       DATE
			      
);

CREATE TABLE PARTY_ROLE
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	PARTY_ROLE_CD         CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ROLE_ID               CHAR(20)
			      ,
	END_DATE              DATE
			      ,
	party_id              CHAR(18)
			      ,
	party_role_cd         CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	CONSTRAINT C0115_01 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE INDEX XIE0115_01 ON PARTY_ROLE
(
	ROLE_ID              ASC
);

CREATE INDEX XIE0115_02 ON PARTY_ROLE
(
	UPD_TIME             ASC
);

CREATE TABLE PED_STUD
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	NAME                  CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BRAND                 CHAR(4)
			       NOT NULL ,
	REG_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	REG_DATE_D            DATE
			      ,
	reg_date_d            CHAR(18)
			      ,
	reg_date              CHAR(18)
			      
);

CREATE TABLE PFX_USER
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	ANML_ID_PFX_CD        CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	PTPT_TP_CD            CHAR(1)
			       NOT NULL  CONSTRAINT  C0116_01 CHECK ( PTPT_TP_CD IN ('B', 'D','L', 'N', 'E', 'P', 'S') ),
	end_date              CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	CONSTRAINT C0116_02 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE INDEX XIE0116_01 ON PFX_USER
(
	PARTY_ID             ASC,
	ST_DATE              ASC,
	END_DATE             ASC
);

CREATE INDEX XIE0116_02 ON PFX_USER
(
	ANML_ID_PFX_CD       ASC
);

CREATE INDEX XIE0116_03 ON PFX_USER
(
	UPD_TIME             ASC
);

CREATE TABLE PGM_DB_SCRTY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	WORK_GRP_NAME         CHAR(30)
			       NOT NULL ,
	APPL_NAME             CHAR(30)
			       NOT NULL ,
	PGM_NAME              CHAR(30)
			       NOT NULL ,
	DB_DSN                CHAR(30)
			       NOT NULL ,
	DB_ACCS_NAME          CHAR(8)
			       NOT NULL ,
	DB_ACCS_CD            CHAR(32)
			       NOT NULL 
);

CREATE TABLE PGM_RESTART
(
	PROC_ID               CHAR(2)
			       NOT NULL ,
	PGM_ID                CHAR(8)
			       NOT NULL ,
	ORG_CD                CHAR(2)
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL ,
	TIME                  INTEGER
			       NOT NULL ,
	CAN_IND               CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL 
);

CREATE INDEX XIE0711_01 ON PGM_RESTART
(
	UPD_TIME             ASC
);

CREATE TABLE PGM_SHORT_CUT
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	WORK_GRP_NAME         CHAR(30)
			       NOT NULL ,
	APPL_NAME             CHAR(30)
			       NOT NULL ,
	PGM_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE PGM_TBL_ACCESS
(
	TBL_NAME              CHAR(64)
			       NOT NULL ,
	PGM_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INS_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0770_01 CHECK ( INS_IND IN ('Y','N') ),
	READ_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0770_02 CHECK ( READ_IND IN ('Y', 'N') ),
	UPD_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0770_03 CHECK ( UPD_IND IN ('Y', 'N') ),
	DEL_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0770_04 CHECK ( DEL_IND IN ('Y', 'N') )
);

CREATE TABLE PGM_TBL_SCRTY
(
	PGM_DB_SCRTY_ID       INTEGER
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	TBL_NAME              CHAR(64)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INS_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0296_01 CHECK ( INS_IND IN ('Y', 'N') ),
	UPD_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0296_02 CHECK ( UPD_IND IN ('Y', 'N') ),
	DEL_IND               CHAR(1)
			       NOT NULL  CONSTRAINT  C0296_03 CHECK ( DEL_IND IN ('Y', 'N') )
);

CREATE TABLE PHENOTYPE
(
	CATTLE_LOCUS_CD       CHAR(3)
			       NOT NULL ,
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(25)
			       NOT NULL 
);

CREATE INDEX XIE0153_01 ON PHENOTYPE
(
	CD                   ASC
);

CREATE INDEX XIE0153_02 ON PHENOTYPE
(
	UPD_TIME             ASC
);

CREATE TABLE PHONE_NUM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 150000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	PHONE_NUM_TP_CD       CHAR(4)
			       NOT NULL  CONSTRAINT  C0117_01 CHECK ( PHONE_NUM_TP_CD IN ('1   ','2   ', 'FAX ') ),
	CTRY_CD               CHAR(4)
			      ,
	AREA_CD               CHAR(6)
			       NOT NULL  CONSTRAINT  C0117_03 CHECK ( AREA_CD != ' ' ),
	LOCAL_NUM             CHAR(9)
			       NOT NULL  CONSTRAINT  C0117_04 CHECK ( LOCAL_NUM != ' ' ),
	EXT                   CHAR(4)
			      ,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	phone_num_tp_cd       CHAR(18)
			      ,
	CONSTRAINT C0117_02 CHECK ( END_DATE IS NULL OR END_DATE >= ST_DATE ) 
);

CREATE INDEX XIE0117_01 ON PHONE_NUM
(
	UPD_TIME             ASC
);

CREATE TABLE PHONE_NUM_TP
(
	CD                    CHAR(4)
			       NOT NULL  CONSTRAINT  C0118_01 CHECK ( CD IN ('1   ','2   ', 'FAX ') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE POOL_DT_RSLT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0505_01 CHECK ( DT_CD IN ('EBL') ),
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PLATE_NUM             CHAR(10)
			       NOT NULL ,
	RSLT                  DECIMAL(9,3)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE TABLE POSITION
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE POSN_DEPT
(
	POSN_ID               INTEGER
			       NOT NULL ,
	DEPT_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE POTENTIAL_BULL_PARENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	PROVING_SCHEME_CD     CHAR(4)
			       NOT NULL ,
	EXTRACT_TP_CD         CHAR(1)
			       NOT NULL  CONSTRAINT  C0871_03 CHECK ( EXTRACT_TP_CD IN ('D', 'C', 'S') ),
	FIRST_EXTRACT_DATE    DATE
			       NOT NULL ,
	LATEST_EXTRACT_DATE   DATE
			       NOT NULL ,
	ET_RCPNT_ANML_KEY     INTEGER
			      ,
	SIRE_ANML_KEY         INTEGER
			      ,
	CONSTRAINT C0871_02 CHECK ( FIRST_EXTRACT_DATE <= LATEST_EXTRACT_DATE ) ,
	CONSTRAINT C0871_043 CHECK ( EXTRACT_TP_CD = 'C' or ET_RCPNT_ANML_KEY IS NULL ) 
);

CREATE INDEX XIE0863_01 ON POTENTIAL_BULL_PARENT
(
	SSN                  ASC,
	PROVING_SCHEME_CD    ASC,
	EXTRACT_TP_CD        ASC
);

CREATE TABLE POTENTIAL_BULL_PARENT_DECISION
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	POTENTIAL_BULL_PARENT_ID  INTEGER
			       NOT NULL ,
	DAM_DECISION_CD       CHAR(2)
			      ,
	SIRE_DECISION_CD      CHAR(2)
			      ,
	RCD_DATE              DATE
			       NOT NULL  DEFAULT CURRENT DATE,
	BULL_CALF_TARGET      SMALLINT
			      ,
	CONSTRAINT C0872_01 CHECK ( SIRE_DECISION_CD IS NULL AND DAM_DECISION_CD IS NOT NULL OR SIRE_DECISION_CD IS NOT NULL AND DAM_DECISION_CD IS NULL ) 
);

CREATE TABLE PRDCT_DTR_PROB
(
	RGN_ID                INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	DAM_AGE_GRP_ID        SMALLINT
			       NOT NULL ,
	BULL_NRR_GRP_ID       SMALLINT
			       NOT NULL ,
	MTNG_RET_GRP_ID       SMALLINT
			       NOT NULL ,
	HRD_MTNG_GRP_ID       SMALLINT
			       NOT NULL ,
	DAYS_AFT_MTNG_ID      SMALLINT
			       NOT NULL ,
	SMN_PRSRVTN_CD        CHAR(4)
			       NOT NULL  CONSTRAINT  C0316_01 CHECK ( SMN_PRSRVTN_CD IN ('LLL','FRZ') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DTR_PROB              DECIMAL(7,6)
			       NOT NULL 
);

CREATE TABLE PRE_MTNG_HEAT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XIE0258_01 ON PRE_MTNG_HEAT
(
	DATE                 ASC
)
 CLUSTER;

CREATE TABLE PREV_ANML_LOCN
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_DATE          INTEGER
			       NOT NULL ,
	ANML_NUM_ST_DATE      INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	COW_NUM_ALPHA         CHAR(1)
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_NUM_END_DATE     INTEGER
			       NOT NULL ,
	XFER_OUT_DATE         INTEGER
			       NOT NULL ,
	FATE_CD               CHAR(1)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(2)
			       NOT NULL ,
	EXPORT_CTRY_CD        CHAR(3)
			       NOT NULL ,
	RCD_DATE              DATE
			       DEFAULT CURRENT DATE,
	XFER_IN_DATE_D        DATE
			      ,
	XFER_OUT_DATE_D       DATE
			      ,
	ANML_NUM_ST_DATE_D    DATE
			      ,
	ANML_NUM_END_DATE_D   DATE
			      ,
	fate_cause_cd         CHAR(18)
			      ,
	anml_num_end_date     CHAR(18)
			      ,
	anml_num_end_date_d   CHAR(18)
			      ,
	anml_num_st_date      CHAR(18)
			      ,
	anml_num_st_date_d    CHAR(18)
			      ,
	xfer_in_date          CHAR(18)
			      ,
	xfer_in_date_d        CHAR(18)
			      ,
	xfer_out_date         CHAR(18)
			      ,
	xfer_out_date_d       CHAR(18)
			      ,
	anml_key              CHAR(18)
			      
);

CREATE INDEX XFK0051_04 ON PREV_ANML_LOCN
(
	FATE_CAUSE_CD        ASC
);

CREATE INDEX XIE0051_01 ON PREV_ANML_LOCN
(
	MAP_REF              ASC,
	HERD_NUM             ASC,
	COW_NUM_ALPHA        ASC,
	COW_NUM              ASC
);

CREATE INDEX XIE0051_02 ON PREV_ANML_LOCN
(
	UPD_TIME             ASC
);

CREATE TABLE PRGNY_HDBK_DFLT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BSOC_PARTY_ID         INTEGER
			       NOT NULL ,
	PRGNY_HDBK_SECT_ID    INTEGER
			       NOT NULL ,
	SIRE_HDBK_SECT_ID     INTEGER
			      ,
	DAM_HDBK_SECT_ID      INTEGER
			      
);

CREATE TABLE PROD_CLASS
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PROD_PRSRVTN
(
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	SMN_PRSRVTN_CD        CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	CONSTRAINT C0052_01 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE TABLE PROGESTERONE_SYNC
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	TRTMT_NUM             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRTMT_PROC_CD         CHAR(1)
			       CONSTRAINT  C0277_01 CHECK ( TRTMT_PROC_CD IN ('B', 'O') ),
	IN_DATE               DATE
			      ,
	OUT_DATE              DATE
			      ,
	TRTD_TIME             CHAR(2)
			      ,
	BLANKET_PRGST_DAYS    SMALLINT
			      ,
	trtmt_proc_cd         CHAR(18)
			      ,
	in_date               CHAR(18)
			      ,
	out_date              CHAR(18)
			      ,
	trtd_time             CHAR(18)
			      ,
	blanket_prgst_days    CHAR(18)
			      ,
	CONSTRAINT C0277_02 CHECK ( IN_DATE IS NULL OR IN_DATE < OUT_DATE ) 
);

CREATE TABLE PROGRAM
(
	NAME                  CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(100)
			       NOT NULL ,
	EXE_NAME              VARCHAR(32)
			       NOT NULL ,
	EXE_PATH              VARCHAR(128)
			       NOT NULL ,
	PARMS                 VARCHAR(256)
			      ,
	WORK_PATH             VARCHAR(128)
			       NOT NULL ,
	CONTACT_USER_ID       CHAR(8)
			      ,
	OWNER_USER_ID         CHAR(8)
			      
);

CREATE TABLE PROJ_ALGORITHM
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PROP_DISTNC
(
	MAP_REF_1             CHAR(10)
			       NOT NULL ,
	MAP_REF_2             CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	METRES                INTEGER
			       NOT NULL ,
	CONSTRAINT C0149_01 CHECK ( MAP_REF_1 <= MAP_REF_2 ) 
);

CREATE TABLE PROP_SSN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	SR_AREA_SSN           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SR_AREA_CD            SMALLINT
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	MFO_CD                SMALLINT
			       NOT NULL ,
	RM_AREA_CD            SMALLINT
			       NOT NULL ,
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	sr_area_cd            CHAR(18)
			      ,
	rm_area_cd            CHAR(18)
			      
);

CREATE INDEX XFK0462_02 ON PROP_SSN
(
	RM_AREA_RGN_CD       ASC,
	DM_AREA_CD           ASC,
	SR_AREA_CD           ASC,
	SR_AREA_SSN          ASC
);

CREATE INDEX XIE0462_01 ON PROP_SSN
(
	UPD_TIME             ASC
);

CREATE TABLE PROPERTY
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                CHAR(4)
			       NOT NULL  DEFAULT 'TRCE' CONSTRAINT  C0095_01 CHECK ( RGN_CD IN ('  L1','  L2','  L3','  L4','  L5','  L6', '  L9', 'TRCE') ),
	ENT_COMPASS_PT_CD     CHAR(1)
			       NOT NULL  WITH DEFAULT,
	CLOSED_IND            CHAR(1)
			       NOT NULL  WITH DEFAULT,
	CO_AREA_CD            SMALLINT
			       NOT NULL  DEFAULT 0,
	FARM_DRY_DSGN_CD      CHAR(1)
			       NOT NULL  WITH DEFAULT,
	CUPS                  INTEGER
			       NOT NULL  DEFAULT 0,
	MC_CLUSTER_CD         CHAR(1)
			       NOT NULL  WITH DEFAULT,
	BRACKETS              SMALLINT
			       NOT NULL  DEFAULT 0,
	DRCTR_CD              SMALLINT
			       NOT NULL  DEFAULT 0,
	ROAD_NAME             CHAR(30)
			       NOT NULL ,
	WARD                  SMALLINT
			       NOT NULL  DEFAULT 0,
	X_COORD               DECIMAL(15,4)
			      ,
	Y_COORD               DECIMAL(15,4)
			      ,
	PROJ_ALGORITHM_CD     SMALLINT
			       CONSTRAINT  C0095_02 CHECK ( PROJ_ALGORITHM_CD IN (14, 6) ),
	OFF_ROAD_DISTNC       DECIMAL(5)
			      ,
	STAT_DIST_CD          SMALLINT
			       NOT NULL  DEFAULT 98,
	GEO_AREA_ID           INTEGER
			       NOT NULL  DEFAULT 1028,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 28500
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	RAPID_NUM             CHAR(10)
			      ,
	LOCAL_AUTH_CD         CHAR(4)
			      ,
	VALUATION_NUM_SEGMENT_1  INTEGER
			      ,
	VALUATION_NUM_SEGMENT_2  INTEGER
			      ,
	VALUATION_NUM_SEGMENT_3  INTEGER
			      ,
	GPS_X_COORD           DECIMAL(10,7)
			      ,
	GPS_Y_COORD           DECIMAL(10,7)
			      ,
	PROP_OWNER            CHAR(50)
			      ,
	LEGAL_DESCR           CHAR(50)
			      ,
	PROP_LOCN_NUM         INTEGER
			      ,
	FARM_ID               CHAR(7)
			      ,
	rgn_cd                CHAR(18)
			      ,
	CONSTRAINT C0095_03 CHECK ( PROJ_ALGORITHM_CD = 6 AND X_COORD BETWEEN 1000000 AND 2200000 OR PROJ_ALGORITHM_CD = 14 AND X_COORD BETWEEN 1900000 AND 3100000 ) ,
	CONSTRAINT C0095_04 CHECK ( PROJ_ALGORITHM_CD = 6 AND Y_COORD  BETWEEN 4600000 AND  6400000 OR PROJ_ALGORITHM_CD = 14 AND Y_COORD BETWEEN 5200000 AND 6900000 ) ,
	CONSTRAINT C0095_05 CHECK ( X_COORD IS NOT NULL AND Y_COORD IS NOT NULL AND PROJ_ALGORITHM_CD IS NOT NULL OR X_COORD IS NULL AND Y_COORD IS NULL AND PROJ_ALGORITHM_CD IS NULL ) ,
	CONSTRAINT C0095_06 CHECK ( VALUATION_NUM_SEGMENT_1 IS NULL AND VALUATION_NUM_SEGMENT_2 IS NULL AND VALUATION_NUM_SEGMENT_3 IS NULL OR VALUATION_NUM_SEGMENT_1 IS NOT NULL AND VALUATION_NUM_SEGMENT_2 IS NOT NULL AND VALUATION_NUM_SEGMENT_3 IS NOT NULL ) 
);

ALTER TABLE PROPERTY
	ADD CONSTRAINT XAK0095_01  UNIQUE (ID);

CREATE INDEX XIE0095_01 ON PROPERTY
(
	UPD_TIME             ASC
);

CREATE TABLE PROSTAGLANDIN_SYNC
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	MTNG_PLAN_NUM         SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRSTGL_INJ_DATE       DATE
			      ,
	PRE_INJ_DAYS          SMALLINT
			      ,
	prstgl_inj_date       CHAR(18)
			      ,
	pre_inj_days          CHAR(18)
			      
);

CREATE TABLE PROT_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	PROT_BV_NZ            DECIMAL(5,2)
			      ,
	PROT_BV_REL_NZ        DECIMAL(3,1)
			      ,
	PROT_BV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_PV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_LV               DECIMAL(5,1)
			      ,
	BV_PCT                DECIMAL(5,1)
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	FULL_MODEL_PROT_BV    DECIMAL(5,2)
			      ,
	FULL_MODEL_PROT_BV_REL  DECIMAL(3,1)
			      ,
	FULL_MODEL_PROT_PV    DECIMAL(5,2)
			      ,
	FULL_MODEL_PROT_PV_REL  DECIMAL(3,1)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,3)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE TABLE PROT_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROT_BV_NZ            DECIMAL(5,2)
			      ,
	PROT_BV_REL_NZ        DECIMAL(3,1)
			      ,
	PROT_BV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_PV               DECIMAL(5,2)
			       NOT NULL ,
	PROT_PV_REL           DECIMAL(3,1)
			       NOT NULL ,
	PROT_LV               DECIMAL(5,1)
			      ,
	BV_PCT                DECIMAL(5,1)
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,3)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE INDEX XIE0784_01 ON PROT_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE PROT_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_PW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_LW           DECIMAL(6,4)
			      ,
	AVG_PROT_BV           DECIMAL(5,2)
			      ,
	AVG_PROT_PV           DECIMAL(5,2)
			      ,
	AVG_PROT_BV_NZ        DECIMAL(5,2)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE PROT_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_PROT_BV           DECIMAL(5,2)
			      ,
	AVG_PROT_PV           DECIMAL(5,2)
			       NOT NULL ,
	AVG_PROT_BV_NZ        DECIMAL(5,2)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE PROVING_SCHEME
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PROVING_SCHEME_INDEX
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE PROVING_SCHEME_INDEX_ECON_WGT
(
	INDEX_CD              CHAR(4)
			       NOT NULL ,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ECON_WGT              DECIMAL(7,3)
			       NOT NULL ,
	END_DATE              DATE
			      ,
	CONSTRAINT C0855_01 CHECK ( END_DATE IS NULL OR ST_DATE <= END_DATE ) 
);

CREATE TABLE PTPT_CMT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PTPT_CMT_CD           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE INDEX XFK0498_01 ON PTPT_CMT
(
	PTPT_CMT_CD          ASC
);

CREATE TABLE PTPT_DISC
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PCTG                  DECIMAL(3,2)
			       NOT NULL 
);

CREATE TABLE PTPT_ROLE
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ROLE_CD               CHAR(3)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	CMT                   CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE INDEX XFK0363_01 ON PTPT_ROLE
(
	ROLE_CD              ASC
);

CREATE INDEX XIE0363_01 ON PTPT_ROLE
(
	ORG_PTPT_CD          ASC,
	ROLE_CD              ASC,
	PTPT_CD              ASC
);

CREATE TABLE PTPT_RQST
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	RQST_ID               CHAR(4)
			       NOT NULL ,
	RCD_DATE              DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXPR_DATE             DATE
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	PGM_ID                CHAR(10)
			       NOT NULL ,
	ACT_DATE              DATE
			      ,
	ACT_USER_ID           CHAR(8)
			      ,
	COM_RM_AREA_RGN_CD    CHAR(4)
			      ,
	COM_DM_AREA_CD        SMALLINT
			      ,
	COM_SR_AREA_CD        SMALLINT
			      ,
	COM_SR_AREA_SSN       SMALLINT
			      ,
	CMT                   CHAR(20)
			      ,
	ACTN_CD               CHAR(1)
			       CONSTRAINT  C0250_01 CHECK ( ACTN_CD IN ('C', 'I', 'D', 'O') ),
	rqst_id               CHAR(18)
			      ,
	CONSTRAINT C0250_02 CHECK ( COM_RM_AREA_RGN_CD IS NULL AND COM_DM_AREA_CD IS NULL AND COM_SR_AREA_CD IS NULL AND COM_SR_AREA_SSN IS NULL OR COM_RM_AREA_RGN_CD IS NOT NULL AND COM_DM_AREA_CD IS NOT NULL AND COM_SR_AREA_CD IS NOT NULL AND COM_SR_AREA_SSN IS NOT NULL ) 
);

CREATE TABLE PTPT_RQST_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	EXPR_DAYS             INTEGER
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      
);

CREATE TABLE PTPT_SV_SUIT
(
	ORG_SV_PTPT_CD        CHAR(4)
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	RVW_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SV_SUIT_CD            DECIMAL(1)
			       NOT NULL ,
	RVW_PTPT_CD           CHAR(4)
			       NOT NULL ,
	DESCR_1               CHAR(50)
			       NOT NULL ,
	DESCR_2               CHAR(50)
			       NOT NULL ,
	RVW_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rvw_ptpt_cd           CHAR(18)
			      ,
	rvw_date              CHAR(18)
			      ,
	rvw_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0169_01 ON PTPT_SV_SUIT
(
	RVW_PTPT_CD          ASC
);

CREATE TABLE PTPT_SV_USE
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	SOF_IND               CHAR(1)
			       NOT NULL ,
	ORD_IND               CHAR(1)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0371_01 ON PTPT_SV_USE
(
	ORG_PTPT_CD          ASC,
	SV_TP_CD             ASC
);

CREATE TABLE PTPT_SV_USE_HIST
(
	UPD_TIME              TIMESTAMP
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ORG_PTPT_CD           CHAR(4)
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	SOF_IND               CHAR(1)
			       NOT NULL ,
	ORD_IND               CHAR(1)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	end_date_d            CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	st_date               CHAR(18)
			      
);

CREATE INDEX XIE0390_01 ON PTPT_SV_USE_HIST
(
	PTPT_CD              ASC,
	YR                   ASC
);

CREATE TABLE PTPT_XMIT_AUTH
(
	SNDR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	DOC_TP_CD             CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PERM_IND              CHAR(1)
			       NOT NULL ,
	EXPIRY_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	EXPIRY_DATE_D         DATE
			      ,
	expiry_date_d         CHAR(18)
			      ,
	expiry_date           CHAR(18)
			      
);

CREATE INDEX XFK0219_01 ON PTPT_XMIT_AUTH
(
	DOC_TP_CD            ASC
);

CREATE INDEX XIE0219_01 ON PTPT_XMIT_AUTH
(
	PTPT_CD              ASC,
	SNDR_PTPT_CD         ASC,
	DOC_TP_CD            ASC
);

CREATE TABLE RCVD_FILE_CONTNS
(
	DOC_ID                CHAR(12)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCVD_FILE_XMIT_ID     CHAR(12)
			       NOT NULL ,
	DATA                  CHAR(250)
			       NOT NULL 
);

CREATE INDEX XIE0220_01 ON RCVD_FILE_CONTNS
(
	NUM                  ASC
);

CREATE TABLE RCVD_FILE_LOG
(
	XMIT_ID               CHAR(12)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RCVD_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RCVD_TIME             INTEGER
			       NOT NULL ,
	FILENAME              CHAR(11)
			       NOT NULL ,
	SNDR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	RCVD_FILE_STS_CD      SMALLINT
			       NOT NULL ,
	XMIT_DATA_TP_CD       CHAR(3)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	RCVD_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	rcvd_date             CHAR(18)
			      ,
	rcvd_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0218_01 ON RCVD_FILE_LOG
(
	RCVD_FILE_STS_CD     ASC
);

CREATE INDEX XIE0218_01 ON RCVD_FILE_LOG
(
	FILENAME             ASC
);

CREATE INDEX XIE0218_03 ON RCVD_FILE_LOG
(
	SNDR_PTPT_CD         ASC
);

CREATE TABLE RCVD_FILE_STS
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL 
);

CREATE TABLE REG_ANML_MVMT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	XFER_IN_DATE          DATE
			       NOT NULL ,
	PROC_DATE             DATE
			      ,
	CMT                   CHAR(20)
			      
);

CREATE INDEX XIE0838_01 ON REG_ANML_MVMT
(
	PROC_DATE            ASC
);

CREATE TABLE REPL_CONTROL
(
	ID                    INTEGER
			      ,
	START_TIME            TIMESTAMP
			      ,
	END_TIME              TIMESTAMP
			      
);

CREATE TABLE REPORT
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MINDA_LINK_IND        CHAR(1)
			       NOT NULL  CONSTRAINT  C0181_01 CHECK ( MINDA_LINK_IND IN ('Y', 'N') ),
	DTL_LVL_CD            CHAR(1)
			       NOT NULL  CONSTRAINT  C0181_02 CHECK ( DTL_LVL_CD IN ('H', 'A') ),
	ANML_SEL_CD           CHAR(1)
			       CONSTRAINT  C0181_03 CHECK ( ANML_SEL_CD IN ('N', 'M', 'O') ),
	RPRT_SEL_CAT_CD       CHAR(4)
			      
);

CREATE TABLE REPORT_FORM_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RESIDUAL_SURV_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	RESIDUAL_SURV_BV      INTEGER
			       NOT NULL ,
	RESIDUAL_SURV_BV_REL  DECIMAL(3,1)
			       NOT NULL 
);

CREATE TABLE RESIDUAL_SURV_BV_RSLT_HIST
(
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RESIDUAL_SURV_BV      INTEGER
			       NOT NULL ,
	RESIDUAL_SURV_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL 
);

CREATE INDEX XIE0678_01 ON RESIDUAL_SURV_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE RESIDUAL_SURV_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	AVG_RESIDUAL_SURV_BV  INTEGER
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE RESIDUAL_SURV_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_RESIDUAL_SURV_BV  INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE RET_STRAW
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STRAW_CNT             INTEGER
			       NOT NULL 
);

CREATE TABLE REVIEW_ANSWER
(
	RESPONSE_ID           INTEGER
			       NOT NULL ,
	SECT_ID               INTEGER
			       NOT NULL ,
	SECT_VERSION          SMALLINT
			       NOT NULL ,
	QSTN_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT_ANSWER           VARCHAR(200)
			      ,
	NUM_ANSWER            DECIMAL(10,3)
			      ,
	DATE_ANSWER           DATE
			      ,
	TIME_ANSWER           TIME
			      ,
	CORRECT_ANSWER        DECIMAL(1)
			       CONSTRAINT  C0700_01 CHECK ( CORRECT_ANSWER IN (0,1) ),
	CONSTRAINT C0700_02 CHECK ( TEXT_ANSWER IS NOT NULL AND NUM_ANSWER IS NULL AND DATE_ANSWER IS NULL AND TIME_ANSWER IS NULL OR TEXT_ANSWER IS NULL AND NUM_ANSWER IS NOT NULL AND DATE_ANSWER IS NULL AND TIME_ANSWER IS NULL OR TEXT_ANSWER IS NULL AND NUM_ANSWER IS NULL AND DATE_ANSWER IS NOT NULL AND TIME_ANSWER IS NULL OR TEXT_ANSWER IS NULL AND NUM_ANSWER IS NULL AND DATE_ANSWER IS NULL AND TIME_ANSWER IS NOT NULL ) 
);

CREATE TABLE REVIEW_HDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 0
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TITLE                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE REVIEW_QSTN
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QSTN_DESCR            VARCHAR(200)
			       NOT NULL ,
	ANSWER_TP_CD          CHAR(1)
			       NOT NULL ,
	DECIMAL_PLACES        SMALLINT
			       CONSTRAINT  C0702_03 CHECK ( DECIMAL_PLACES IN (0,1,2,3) ),
	ANSWER_SET_ID         INTEGER
			      ,
	DOLLAR_VALUE          DECIMAL(7,2)
			      ,
	UNIT_OF_MSMT_CD       CHAR(4)
			      ,
	MIN_CORRECT_ANSWER_VALUE_ID  INTEGER
			      ,
	MAX_CORRECT_ANSWER_VALUE_ID  INTEGER
			      ,
	COMMENT               VARCHAR(200)
			      ,
	answer_tp_cd          CHAR(18)
			      ,
	min_correct_answer_value_id  CHAR(18)
			      ,
	max_correct_answer_value_id  CHAR(18)
			      ,
	answer_set_id         CHAR(18)
			      ,
	CONSTRAINT C0702_01 CHECK ( ANSWER_TP_CD != 'P' OR ANSWER_TP_CD = 'P' AND ANSWER_SET_ID IS NULL AND MIN_CORRECT_ANSWER_VALUE_ID IS NULL AND MAX_CORRECT_ANSWER_VALUE_ID IS NULL AND UNIT_OF_MSMT_CD IS NULL AND DECIMAL_PLACES IS NULL AND DOLLAR_VALUE IS NULL ) ,
	CONSTRAINT C0702_02 CHECK ( ANSWER_TP_CD = 'N' OR DECIMAL_PLACES IS NULL ) 
);

CREATE TABLE REVIEW_QSTN_SUMM
(
	REVIEW_ID             INTEGER
			       NOT NULL ,
	REVIEW_VERSION        SMALLINT
			       NOT NULL ,
	QSTN_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SUMM_METHOD_CD        CHAR(1)
			       NOT NULL ,
	summ_method_cd        CHAR(18)
			      
);

CREATE TABLE REVIEW_SECT
(
	SECT_ID               INTEGER
			       NOT NULL ,
	SECT_VERSION          SMALLINT
			       NOT NULL ,
	REVIEW_ID             INTEGER
			       NOT NULL ,
	REVIEW_VERSION        SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEQ_NUM               INTEGER
			       NOT NULL ,
	WEIGHTING             DECIMAL(5,4)
			       NOT NULL ,
	SHOW_QSTN_IND         CHAR(1)
			       CONSTRAINT  C0703_01 CHECK ( SHOW_QSTN_IND IN ('Y','N') )
);

CREATE TABLE REVIEW_SECT_HDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TITLE                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE REVIEW_SECT_QSTN
(
	SECT_ID               INTEGER
			       NOT NULL ,
	SECT_VERSION          SMALLINT
			       NOT NULL ,
	QSTN_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEQ_NUM               INTEGER
			       NOT NULL ,
	WEIGHTING             DECIMAL(5,4)
			       NOT NULL 
);

CREATE TABLE REVIEW_SECT_VERSION
(
	SECT_ID               INTEGER
			       NOT NULL ,
	VERSION               SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RELEASE_DATE          DATE
			       NOT NULL 
);

CREATE TABLE REVIEW_SET
(
	SET_ID                INTEGER
			       NOT NULL ,
	REVIEW_ID             INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SEQ_NUM               INTEGER
			       NOT NULL ,
	WEIGHTING             DECIMAL(5,4)
			       NOT NULL ,
	COMB_METHOD_CD        SMALLINT
			       NOT NULL  CONSTRAINT  C0707_01 CHECK ( COMB_METHOD_CD IN (0,1) )
);

CREATE TABLE REVIEW_SET_HDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TITLE                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE REVIEW_VERSION
(
	REVIEW_ID             INTEGER
			       NOT NULL ,
	VERSION               SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RELEASE_DATE          DATE
			       NOT NULL 
);

CREATE TABLE RM_AREA
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	CD                    SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PARTY_ID              INTEGER
			      ,
	ptpt_cd               CHAR(18)
			      
);

CREATE INDEX XIE0365_01 ON RM_AREA
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0365_02 ON RM_AREA
(
	UPD_TIME             ASC
);

CREATE TABLE ROAD_ARC
(
	ISLAND_GEO_AREA_ID    INTEGER
			       NOT NULL ,
	ARC_ID                INTEGER
			       NOT NULL ,
	SUB_ARC_ID            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	X1_COORD              DECIMAL(15,4)
			       NOT NULL ,
	Y1_COORD              DECIMAL(15,4)
			       NOT NULL ,
	X2_COORD              DECIMAL(15,4)
			       NOT NULL ,
	Y2_COORD              DECIMAL(15,4)
			       NOT NULL 
);

CREATE INDEX XIE0157_01 ON ROAD_ARC
(
	X1_COORD             ASC,
	Y1_COORD             ASC
);

CREATE INDEX XIE0157_02 ON ROAD_ARC
(
	X2_COORD             ASC,
	Y2_COORD             ASC
);

CREATE TABLE ROLE
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE RPRT_CLASS
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(60)
			       NOT NULL 
);

CREATE TABLE RPRT_DATASET
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(30)
			       NOT NULL ,
	RPRT_VARIANT_ID       INTEGER
			       NOT NULL ,
	MASTER_ID             INTEGER
			      ,
	SQL                   LONG VARCHAR
			       NOT NULL 
);

CREATE TABLE RPRT_DLVRY
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0182_01 CHECK ( CD IN ('F', 'I', 'L', 'E', 'P') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RPRT_ERR_RSN_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RPRT_INFO
(
	CD                    CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(50)
			       NOT NULL ,
	DESCR                 CHAR(150)
			       NOT NULL 
);

CREATE TABLE RPRT_PARM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_ID               INTEGER
			       NOT NULL ,
	WIZARD_SEQ            SMALLINT
			       NOT NULL ,
	RPRT_PARM_CD          CHAR(4)
			       NOT NULL ,
	MAND_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0184_01 CHECK ( MAND_IND IN ('Y', 'N') ),
	MIN_VAL               INTEGER
			      ,
	MAX_VAL               INTEGER
			      ,
	FR1_POSN              INTEGER
			       NOT NULL ,
	FR1_DMN_CD            CHAR(4)
			       NOT NULL  CONSTRAINT  C0184_02 CHECK ( FR1_DMN_CD IN ('STR', 'NUM', 'DATE', 'TIME', 'ENUM') ),
	FR1_FLD_NO            INTEGER
			       NOT NULL ,
	DFLT_VAL              CHAR(20)
			      ,
	HINT_TEXT             CHAR(150)
			      ,
	VISIBLE_IND           CHAR(1)
			       NOT NULL  DEFAULT 'Y' CONSTRAINT  C0184_03 CHECK ( VISIBLE_IND IN ('Y', 'N') ),
	WIZARD_PAGE_NUM       SMALLINT
			      ,
	PRNT_RPRT_PARM_ID     INTEGER
			      ,
	RPRT_RQST_COL_NAME    CHAR(30)
			      ,
	PARM_PROP             VARCHAR(3796)
			      ,
	CONSTRAINT C0184_04 CHECK ( MIN_VAL IS NULL AND MAX_VAL IS NULL OR MIN_VAL IS NOT NULL AND MAX_VAL IS NOT NULL AND MIN_VAL <= MAX_VAL ) 
);

CREATE TABLE RPRT_PARM_REF
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COL_DMN_CD            CHAR(4)
			       NOT NULL  CONSTRAINT  C0185_01 CHECK ( COL_DMN_CD IN ('STR', 'NUM', 'DATE', 'TIME', 'ENUM') ),
	LENGTH                SMALLINT
			       NOT NULL ,
	QUESTION              CHAR(100)
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL ,
	LONG_DESCR            CHAR(150)
			       NOT NULL ,
	CLASS_NAME            CHAR(30)
			      ,
	EDIT_MASK             CHAR(50)
			      ,
	WIZARD_TITLE          VARCHAR(100)
			      ,
	WIZARD_SUB_TITLE      VARCHAR(200)
			      ,
	PARM_PROP             VARCHAR(500)
			      ,
	PARM_VAL_SQL          VARCHAR(500)
			      ,
	VLDTN_SQL             VARCHAR(500)
			      
);

CREATE TABLE RPRT_PARM_VAL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_PARM_CD          CHAR(4)
			       NOT NULL ,
	DISP_SEQ              SMALLINT
			       NOT NULL ,
	PARM_VAL              CHAR(20)
			       NOT NULL ,
	VAL_DESCR             CHAR(150)
			       NOT NULL 
);

CREATE TABLE RPRT_PRPS
(
	SSN_CD                CHAR(1)
			       NOT NULL ,
	FARM_ACTY_CD          CHAR(10)
			       NOT NULL ,
	RPRT_INFO_CD          CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_CD               CHAR(3)
			       NOT NULL 
);

CREATE TABLE RPRT_RQST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	CHRG_PTPT_CD          CHAR(4)
			       NOT NULL ,
	RPRT_TP_CD            CHAR(3)
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RQRD_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	ONE_OFF_IND           DECIMAL(1)
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	RPRT_CHRG_CD          CHAR(1)
			       NOT NULL ,
	PGM_ID                CHAR(8)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	COPY_CNT              SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	ACCT_XMIT_IND         DECIMAL(1)
			       NOT NULL ,
	DESP_INST             CHAR(10)
			       NOT NULL ,
	PARM                  CHAR(20)
			       NOT NULL ,
	EXT_PARM_XML          VARCHAR(30000)
			      ,
	RQST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PRINT_DATE_D          DATE
			      ,
	SUBMIT_CD             CHAR(1)
			      ,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 60000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	rqst_date             CHAR(18)
			      ,
	print_date            CHAR(18)
			      ,
	rqst_date_d           CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      ,
	map_ref               CHAR(18)
			      ,
	herd_num              CHAR(18)
			      ,
	chrg_ptpt_cd          CHAR(18)
			      ,
	rprt_tp_cd            CHAR(18)
			      ,
	num                   CHAR(18)
			      ,
	submit_cd             CHAR(18)
			      
);

CREATE INDEX XFK0047_03 ON RPRT_RQST
(
	ANML_KEY             ASC
);

CREATE INDEX XFK0047_05 ON RPRT_RQST
(
	CHRG_PTPT_CD         ASC,
	RPRT_TP_CD           ASC
);

CREATE INDEX XIE0047_02 ON RPRT_RQST
(
	RQRD_DATE            ASC,
	RPRT_TP_CD           ASC,
	SUBMIT_CD            ASC,
	PRINT_DATE           ASC,
	PRINT_DATE_D         ASC,
	RPRT_MEDIUM_CD       ASC,
	OUTPUT_CAT_CD        ASC,
	PGM_ID               ASC
);

CREATE INDEX XIE0047_03 ON RPRT_RQST
(
	UPD_TIME             ASC
);

CREATE TABLE RPRT_SEL_CAT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RPRT_TEMPLATE
(
	RPRT_VARIANT_ID       INTEGER
			       NOT NULL ,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEMPLATE_BAND_CD      CHAR(2)
			       NOT NULL ,
	RPRT_TEMPLATE_ID      INTEGER
			       NOT NULL 
);

CREATE TABLE RPRT_TEMPLATE_BAND
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RPRT_TEMPLATE_REF
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	TEMPLATE              CLOB(1048576)
			      
);

CREATE TABLE RPRT_TEXT
(
	RPRT_CD               CHAR(3)
			       NOT NULL ,
	SECT_NAME             CHAR(50)
			       NOT NULL ,
	TOPIC_NAME            CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  VARCHAR(2000)
			      
);

CREATE TABLE RPRT_TP
(
	OUTPUT_CAT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OUTPUT_CAT_CD         CHAR(4)
			       NOT NULL ,
	STNY_CD               CHAR(4)
			       NOT NULL ,
	RET_IND               DECIMAL(1)
			       NOT NULL ,
	DTL_LVL_CD            CHAR(1)
			       NOT NULL ,
	RPRT_PRODN_CD         DECIMAL(1)
			       NOT NULL ,
	DESCR                 CHAR(40)
			       NOT NULL ,
	FEAR_PROD_ID          INTEGER
			      ,
	fear_prod_id          CHAR(18)
			      
);

CREATE INDEX XFK0173_01 ON RPRT_TP
(
	OUTPUT_CAT_PTPT_CD   ASC,
	OUTPUT_CAT_CD        ASC
);

CREATE INDEX XIE0173_01 ON RPRT_TP
(
	FEAR_PROD_ID         ASC
);

CREATE TABLE RPRT_VARIANT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 10005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_CD               CHAR(3)
			       NOT NULL ,
	TITLE                 CHAR(50)
			       NOT NULL ,
	DESCR                 CHAR(200)
			       NOT NULL ,
	WIZARD_NAME           CHAR(50)
			      ,
	WIZARD_WELCOME        VARCHAR(500)
			      
);

CREATE TABLE RQRD_SMN_ADJ_RSN
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE RSLV_MTHD
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0158_01 CHECK ( CD IN ('K', 'P','A') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	LONG_DESCR            CHAR(150)
			       NOT NULL 
);

CREATE TABLE SAMPLE_TEST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_SAMPLE_ID        INTEGER
			       NOT NULL ,
	TEST_VAR_CD           CHAR(4)
			       NOT NULL ,
	DESP_USER_ID          CHAR(8)
			      ,
	DESP_DATE             DATE
			      ,
	LAB_PARTY_ID          INTEGER
			      ,
	LAB_RCVD_DATE         DATE
			      ,
	SAMPLE_ID             CHAR(20)
			      ,
	CASE_NUM              CHAR(20)
			      ,
	RETEST_IND            CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0841_01 CHECK ( RETEST_IND in ('Y','N') ),
	EXPECT_RSLT_DATE      DATE
			      ,
	RSLT_RCVD_DATE        DATE
			      ,
	PYMT_AUTH_DATE        DATE
			      ,
	CMT                   VARCHAR(50)
			      ,
	SAMPLE_TEST_RSLT_CD   CHAR(1)
			       NOT NULL ,
	COURIER_NUM           CHAR(20)
			      
);

CREATE TABLE SAMPLE_TEST_PARENT
(
	SAMPLE_TEST_ID        INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SAMPLE_TEST_RSLT
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE SAP_AB_PROD
(
	CD                    CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(100)
			       NOT NULL ,
	BACKUP_PCT            SMALLINT
			      ,
	ROUND_TO_QTY          SMALLINT
			      ,
	MIN_QTY               SMALLINT
			      ,
	SAP_ITEM_CAT_CD       CHAR(4)
			      
);

CREATE TABLE SAP_INTERFACE
(
	ID                    VARCHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAST_XFER_TIME        TIMESTAMP
			      ,
	NEXT_XFER_TIME        TIMESTAMP
			      ,
	XFER_CNT              INTEGER
			       NOT NULL  DEFAULT 0,
	SAP_INTERFACE_STORED_PROC  VARCHAR(30)
			      ,
	NOTIFIED_TIME         TIMESTAMP
			      ,
	DESCR                 VARCHAR(150)
			      
);

CREATE TABLE SAP_LIC_ORDER
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SAP_INTERFACE_ID      VARCHAR(8)
			       NOT NULL ,
	CRM_ID                VARCHAR(10)
			       NOT NULL ,
	ANML_ID_PFX_CD        CHAR(4)
			       NOT NULL ,
	QUANTITY              DECIMAL(9,2)
			       NOT NULL ,
	TRANS_DATE            DATE
			       NOT NULL ,
	PROD_CD               CHAR(10)
			       NOT NULL ,
	UNIT_PRICE            DECIMAL(7,2)
			      ,
	DESCR                 CHAR(50)
			      
);

CREATE INDEX XIE0105_01 ON SAP_LIC_ORDER
(
	UPD_TIME             ASC
);

CREATE TABLE SAR_DESP_ORDER
(
	SAR_ID                INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	POSN                  SMALLINT
			       NOT NULL ,
	DESP_DAY              SMALLINT
			       NOT NULL  CONSTRAINT  C0772_01 CHECK ( DESP_DAY in (1,2,3) ),
	SAR_id                CHAR(18)
			      
);

CREATE TABLE SC_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	SC_BV                 DECIMAL(5,2)
			       NOT NULL ,
	SC_BV_REL             DECIMAL(3,1)
			       NOT NULL ,
	SC_PV                 DECIMAL(5,2)
			       NOT NULL ,
	SC_PV_REL             DECIMAL(3,1)
			       NOT NULL ,
	SC_DTR_CNT            INTEGER
			       NOT NULL ,
	LACT1_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT1_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT1_LP_SOLN_3       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_3       DECIMAL(5,3)
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	SC_BV_NZ              DECIMAL(5,2)
			      ,
	SC_BV_REL_NZ          DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	ae_source_cd          CHAR(18)
			      
);

CREATE TABLE SC_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SC_BV                 DECIMAL(5,2)
			       NOT NULL ,
	SC_BV_REL             DECIMAL(3,1)
			       NOT NULL ,
	SC_PV                 DECIMAL(5,2)
			       NOT NULL ,
	SC_PV_REL             DECIMAL(3,1)
			       NOT NULL ,
	SC_DTR_CNT            INTEGER
			       NOT NULL ,
	LACT1_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT1_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT1_LP_SOLN_3       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT2_LP_SOLN_3       DECIMAL(5,3)
			      ,
	EXTR_DATE             DATE
			       NOT NULL ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	SC_BV_NZ              DECIMAL(5,2)
			      ,
	SC_BV_REL_NZ          DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      
);

CREATE INDEX XIE0160_01 ON SC_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE SC_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_PW           DECIMAL(6,4)
			      ,
	AVG_SC_BV             DECIMAL(5,2)
			      ,
	AVG_SC_PV             DECIMAL(5,2)
			      ,
	AVG_SC_BV_NZ          DECIMAL(5,2)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE SC_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_SC_BV             DECIMAL(5,2)
			       NOT NULL ,
	AVG_SC_PV             DECIMAL(5,2)
			       NOT NULL ,
	AVG_SC_BV_NZ          DECIMAL(5,2)
			      ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE SCC_RQST
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	XMIT_IND              CHAR(1)
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL ,
	TEST_CNT              SMALLINT
			       NOT NULL ,
	MILK_SMPL_MTHD_CD     DECIMAL(1)
			       NOT NULL ,
	ASST_RQRD_IND         CHAR(1)
			       NOT NULL ,
	ASST_LBR_UNITS        DECIMAL(1)
			       NOT NULL ,
	DAY_PORTION_CD        DECIMAL(1)
			       NOT NULL ,
	ANML_CNT              SMALLINT
			       NOT NULL ,
	DATE_1                INTEGER
			       NOT NULL ,
	CAN_DATE_1            INTEGER
			       NOT NULL ,
	DATE_2                INTEGER
			       NOT NULL ,
	CAN_DATE_2            INTEGER
			       NOT NULL ,
	DATE_3                INTEGER
			       NOT NULL ,
	CAN_DATE_3            INTEGER
			       NOT NULL ,
	DATE_4                INTEGER
			       NOT NULL ,
	CAN_DATE_4            INTEGER
			       NOT NULL ,
	DATE_5                INTEGER
			       NOT NULL ,
	CAN_DATE_5            INTEGER
			       NOT NULL ,
	DATE_6                INTEGER
			       NOT NULL ,
	CAN_DATE_6            INTEGER
			       NOT NULL ,
	DATE_7                INTEGER
			       NOT NULL ,
	CAN_DATE_7            INTEGER
			       NOT NULL ,
	DATE_8                INTEGER
			       NOT NULL ,
	CAN_DATE_8            INTEGER
			       NOT NULL ,
	DATE_9                INTEGER
			       NOT NULL ,
	CAN_DATE_9            INTEGER
			       NOT NULL ,
	DATE_10               INTEGER
			       NOT NULL ,
	CAN_DATE_10           INTEGER
			       NOT NULL ,
	DATE_11               INTEGER
			       NOT NULL ,
	CAN_DATE_11           INTEGER
			       NOT NULL ,
	DATE_12               INTEGER
			       NOT NULL ,
	CAN_DATE_12           INTEGER
			       NOT NULL ,
	DATA_COLLN_METHOD_CD_1  CHAR(1)
			       CONSTRAINT  C0530_01 CHECK ( DATA_COLLN_METHOD_CD_1 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_2  CHAR(1)
			       CONSTRAINT  C0530_02 CHECK ( DATA_COLLN_METHOD_CD_2 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_3  CHAR(1)
			       CONSTRAINT  C0530_03 CHECK ( DATA_COLLN_METHOD_CD_3 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_4  CHAR(1)
			       CONSTRAINT  C0530_04 CHECK ( DATA_COLLN_METHOD_CD_4 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_5  CHAR(1)
			       CONSTRAINT  C0530_05 CHECK ( DATA_COLLN_METHOD_CD_5 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_6  CHAR(1)
			       CONSTRAINT  C0530_06 CHECK ( DATA_COLLN_METHOD_CD_6 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_7  CHAR(1)
			       CONSTRAINT  C0530_07 CHECK ( DATA_COLLN_METHOD_CD_7 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_8  CHAR(1)
			       CONSTRAINT  C0530_08 CHECK ( DATA_COLLN_METHOD_CD_8 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_9  CHAR(1)
			       CONSTRAINT  C0530_09 CHECK ( DATA_COLLN_METHOD_CD_9 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_10  CHAR(1)
			       CONSTRAINT  C0530_10 CHECK ( DATA_COLLN_METHOD_CD_10 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_11  CHAR(1)
			       CONSTRAINT  C0530_11 CHECK ( DATA_COLLN_METHOD_CD_11 IN ('E','T','C') ),
	DATA_COLLN_METHOD_CD_12  CHAR(1)
			       CONSTRAINT  C0530_12 CHECK ( DATA_COLLN_METHOD_CD_12 IN ('E','T','C') ),
	USED_EZLINK_IND       CHAR(1)
			      
);

CREATE INDEX XIE0530_01 ON SCC_RQST
(
	UPD_TIME             ASC
);

CREATE TABLE SCC_RSLT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	COW_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HT_VST_SSN            SMALLINT
			       NOT NULL ,
	RSLT                  INTEGER
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0261_01 ON SCC_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE SEASON
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(10)
			       NOT NULL 
);

CREATE TABLE SEL_RPRT_PARM_VAL
(
	RPRT_PARM_ID          INTEGER
			       NOT NULL ,
	DISP_SEQ              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RPRT_PARM_VAL_ID      INTEGER
			       NOT NULL 
);

CREATE TABLE SEMEN_BATCH
(
	NUM                   CHAR(6)
			       NOT NULL ,
	COLLN_YEAR            SMALLINT
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COLLN_DATE            DATE
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	FINAL_VOL             INTEGER
			      ,
	STRAW_CNT             INTEGER
			       NOT NULL ,
	BATCH_STS_CD          CHAR(4)
			       NOT NULL  CONSTRAINT  C0612_01 CHECK ( BATCH_STS_CD IN ('Pass', 'PreD', 'Hold', 'PstD', 'Eval', 'Uasn') ),
	MKTG_BRD_CD           CHAR(2)
			      ,
	PROC_METHOD_CD        CHAR(4)
			      ,
	SEMEN_PURPOSE_CD      CHAR(4)
			       CONSTRAINT  C0612_02 CHECK ( SEMEN_PURPOSE_CD IN ('P', 'F','T') ),
	FINAL_CONC            DECIMAL(4,1)
			      ,
	MARKER_BULL_IND       CHAR(1)
			       CONSTRAINT  C0612_03 CHECK ( MARKER_BULL_IND IN ('Y', 'N') ),
	CORE_PROD_CD          CHAR(4)
			      ,
	EXPIRY_DATE           DATE
			      ,
	DESP_VOL              INTEGER
			      ,
	SURPLUS_DOSE_CNT      SMALLINT
			      ,
	SURPLUS_VOL           SMALLINT
			      ,
	LAB_CD                CHAR(4)
			       CONSTRAINT  C0612_06 CHECK ( LAB_CD IN ('A','N') ),
	CONSTRAINT C0612_05 CHECK ( COLLN_DATE < '2003-06-01' OR MKTG_BRD_CD IS NOT NULL AND PROC_METHOD_CD IS NOT NULL AND SEMEN_PURPOSE_CD IS NOT NULL ) 
);

CREATE INDEX XIE0612_01 ON SEMEN_BATCH
(
	UPD_TIME             ASC
);

CREATE TABLE SEMEN_BATCH_MKT
(
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	COLLN_YEAR            SMALLINT
			       NOT NULL ,
	MKT_CD                CHAR(3)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STRAW_LOCATION        CHAR(18)
			       NOT NULL ,
	STRAW_CNT             SMALLINT
			       NOT NULL ,
	SEMEN_STOCK_DOWNLOAD_IND  CHAR(1)
			       NOT NULL  CONSTRAINT  C0802_01 CHECK ( SEMEN_STOCK_DOWNLOAD_IND in ('Y','N') )
);

CREATE INDEX XIE0802_01 ON SEMEN_BATCH_MKT
(
	UPD_TIME             ASC
);

CREATE TABLE SEMEN_MORPHOLOGY
(
	LAB_COLLN_ID          INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ABNM_ACROSOME_PCT     SMALLINT
			       CONSTRAINT  C0801_01 CHECK ( ABNM_ACROSOME_PCT BETWEEN 0 AND 100 ),
	FREE_HEAD_PCT         SMALLINT
			       CONSTRAINT  C0801_02 CHECK ( FREE_HEAD_PCT BETWEEN 0 AND 100 ),
	ABNM_HEAD_PCT         SMALLINT
			       CONSTRAINT  C0801_03 CHECK ( ABNM_HEAD_PCT BETWEEN 0 AND 100 ),
	ABNM_MID_PIECE_PCT    SMALLINT
			       CONSTRAINT  C0801_04 CHECK ( ABNM_MID_PIECE_PCT BETWEEN 0 AND 100 ),
	NORMAL_PCT            SMALLINT
			       CONSTRAINT  C0801_05 CHECK ( NORMAL_PCT BETWEEN 0 AND 100 ),
	PLASMA_DROP_PCT       SMALLINT
			       CONSTRAINT  C0801_06 CHECK ( PLASMA_DROP_PCT BETWEEN 0 AND 100 ),
	ABNM_TAIL_PCT         SMALLINT
			       CONSTRAINT  C0801_07 CHECK ( ABNM_TAIL_PCT BETWEEN 0 AND 100 ),
	DIST_REFLX_WITH_PROTO_DROP_PCT  SMALLINT
			       CONSTRAINT  C0801_08 CHECK ( DIST_REFLX_WITH_PROTO_DROP_PCT BETWEEN 0 AND 100 ),
	DIST_REFLX_NO_PROTO_DROP_PCT  SMALLINT
			       CONSTRAINT  C0801_09 CHECK ( DIST_REFLX_NO_PROTO_DROP_PCT BETWEEN 0 AND 100 ),
	PROX_PROTO_DROP_PCT   SMALLINT
			       CONSTRAINT  C0801_10 CHECK ( PROX_PROTO_DROP_PCT BETWEEN 0 AND 100 )
);

CREATE INDEX XIE0801_01 ON SEMEN_MORPHOLOGY
(
	UPD_TIME             ASC
);

CREATE TABLE SEMEN_ORDER_DTL
(
	SEMEN_ORDER_ID        INTEGER
			       NOT NULL ,
	SIRE_ANML_KEY         INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STRAW_CNT             SMALLINT
			       NOT NULL ,
	SEMEN_STOCK_DATE      DATE
			      ,
	SEMEN_STOCK_NUM       INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 66925
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	CAN_DATE              DATE
			      
);

CREATE TABLE SEMEN_ORDER_HDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DAM_ANML_KEY          INTEGER
			      ,
	SSN                   SMALLINT
			       NOT NULL ,
	BULL_ACQ_NUM          SMALLINT
			      ,
	RSN_CD                CHAR(4)
			       NOT NULL ,
	OPTM_DAM_ANML_KEY     INTEGER
			      ,
	RQRD_ON_FARM_DATE     DATE
			       NOT NULL ,
	INSEM_TP_CD           CHAR(4)
			       NOT NULL ,
	MTNG_PARTY_ID         INTEGER
			       NOT NULL ,
	CMT                   VARCHAR(255)
			      ,
	BREEDER_PARTY_ID      INTEGER
			      ,
	dam_anml_key          CHAR(18)
			      ,
	ssn                   CHAR(18)
			      ,
	bull_acq_num          CHAR(18)
			      ,
	breeder_party_id      CHAR(18)
			      ,
	rsn_cd                CHAR(18)
			      ,
	CONSTRAINT C0573_01 CHECK ( DAM_ANML_KEY IS NOT NULL OR BREEDER_PARTY_ID IS NOT NULL ) ,
	CONSTRAINT C0573_02 CHECK ( DAM_ANML_KEY IS NULL AND BULL_ACQ_NUM IS NULL OR DAM_ANML_KEY IS NOT NULL AND BULL_ACQ_NUM IS NOT NULL ) ,
	CONSTRAINT C0573_03 CHECK ( RSN_CD = 'CMT' AND DAM_ANML_KEY IS NOT NULL OR RSN_CD != 'CMT' AND DAM_ANML_KEY IS NULL ) ,
	CONSTRAINT C0573_04 CHECK ( RSN_CD = 'OPT' AND OPTM_DAM_ANML_KEY IS NOT NULL OR RSN_CD != 'OPT' AND OPTM_DAM_ANML_KEY IS NULL ) 
);

CREATE TABLE SEMEN_SPLR_BRAND_BRD
(
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	SEMEN_SPLR_BRAND_CD   CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LIQUID_SEMEN_BATCH_PFX  CHAR(1)
			      
);

CREATE TABLE SEMEN_SPLR_BRAND_PRESERV
(
	SEMEN_SPLR_BRAND_CD   CHAR(4)
			       NOT NULL ,
	SEMEN_PRESERV_CD      CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SEMEN_STOCK_PROD_CD_CONV
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 50
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_MARKET_CD         CHAR(3)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	PROD_TP_CD            CHAR(4)
			       NOT NULL ,
	MATERIAL_APPEND_CD    CHAR(3)
			      ,
	prod_tp_cd            CHAR(18)
			      ,
	material_append_cd    CHAR(18)
			      
);

CREATE TABLE SEMEN_STOCK_PROD_CD_CONV_HIST
(
	PROD_CD_CONV_ID       INTEGER
			      ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_MARKET_CD         CHAR(3)
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	PROD_TP_CD            CHAR(4)
			       NOT NULL ,
	MATERIAL_APPEND_CD    CHAR(3)
			      
);

CREATE INDEX XFK0854_01 ON SEMEN_STOCK_PROD_CD_CONV_HIST
(
	PROD_CD_CONV_ID      ASC
)
 CLUSTER;

CREATE TABLE SEQ_CTRL
(
	NAME                  CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NUM_SEQ               INTEGER
			       NOT NULL ,
	INCREMENT             SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0119_01 ON SEQ_CTRL
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_ANML
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	BRTH_DATE_EST_IND     DECIMAL(1)
			      ,
	SEX_CD                CHAR(1)
			      ,
	SPCS_CD               CHAR(1)
			      ,
	ANML_ID_OFFL_CD       DECIMAL(1)
			      ,
	NAME                  CHAR(30)
			      ,
	BRTH_DATE_D           DATE
			      
);

CREATE INDEX XIE0643_01 ON SESS_ANML
(
	SESS_ID              ASC
);

CREATE INDEX XIE0643_02 ON SESS_ANML
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_PROPERTY
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	ROAD_NAME             CHAR(30)
			      ,
	RAPID_NUM             CHAR(10)
			      ,
	LOCAL_AUTH_CD         CHAR(4)
			      ,
	VALUATION_NUM_SEGMENT_1  INTEGER
			      ,
	VALUATION_NUM_SEGMENT_2  INTEGER
			      ,
	VALUATION_NUM_SEGMENT_3  INTEGER
			      ,
	AHB_HERD_NUM          INTEGER
			      ,
	PARTY_PROP_FIRST_KNOWN_DATE  DATE
			      
);

CREATE INDEX XIE0075_01 ON SESS_PROPERTY
(
	SESS_ID              ASC
)
 CLUSTER;

CREATE INDEX XIE0075_02 ON SESS_PROPERTY
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_AHB_NUM
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AHB_HERD_NUM          INTEGER
			      ,
	YR                    SMALLINT
			      ,
	NUM                   SMALLINT
			      ,
	ANML_KEY              INTEGER
			      ,
	RCD_DATE              DATE
			       DEFAULT CURRENT DATE
);

CREATE INDEX XIE0477_01 ON SESS_TRACE_AHB_NUM
(
	SESS_ID              ASC
);

CREATE INDEX XIE0477_02 ON SESS_TRACE_AHB_NUM
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_BRTH_ID
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	PFX                   CHAR(4)
			      ,
	YR                    SMALLINT
			      ,
	NUM                   SMALLINT
			      ,
	ANML_KEY              INTEGER
			      ,
	RCD_DATE              DATE
			       DEFAULT CURRENT DATE
);

CREATE INDEX XIE0478_01 ON SESS_TRACE_BRTH_ID
(
	SESS_ID              ASC
);

CREATE INDEX XIE0478_02 ON SESS_TRACE_BRTH_ID
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_HLTH_TREATMENT
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TREATMENT_DATE        DATE
			      ,
	ANML_KEY              INTEGER
			      ,
	HLTH_PROD_CD          CHAR(6)
			      ,
	DOSE                  INTEGER
			      ,
	DOSE_UOM_CD           CHAR(4)
			      ,
	PROP_ID               INTEGER
			      ,
	REC_MEAT_WH_DAYS      SMALLINT
			      ,
	REC_MILK_WH_DAYS      SMALLINT
			      ,
	NON_STD_HLTH_PROD     CHAR(50)
			      ,
	CMT                   CHAR(50)
			      ,
	INVC_ID               INTEGER
			      ,
	LINE_NUM              INTEGER
			      
);

CREATE INDEX XIE0479_01 ON SESS_TRACE_HLTH_TREATMENT
(
	SESS_ID              ASC
);

CREATE INDEX XIE0479_02 ON SESS_TRACE_HLTH_TREATMENT
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_INVC
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	PARTY_ID              INTEGER
			      ,
	INVC_DATE             DATE
			      ,
	DELIVERY_ADDR         VARCHAR(200)
			      
);

CREATE INDEX XIE0480_01 ON SESS_TRACE_INVC
(
	SESS_ID              ASC
);

CREATE INDEX XIE0480_02 ON SESS_TRACE_INVC
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_INVC_LINE
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INVC_ID               INTEGER
			      ,
	LINE_NUM              INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	PROD_CD               CHAR(10)
			      ,
	TAG_ID_YR             SMALLINT
			      ,
	QUANTITY              INTEGER
			      ,
	DESCR                 VARCHAR(500)
			      ,
	UNIT_PRICE            DECIMAL(7,2)
			      
);

CREATE INDEX XIE0481_01 ON SESS_TRACE_INVC_LINE
(
	SESS_ID              ASC
);

CREATE INDEX XIE0481_02 ON SESS_TRACE_INVC_LINE
(
	UPD_TIME             ASC
);

CREATE TABLE SESS_TRACE_MVMT
(
	SESS_ID               CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	ANML_KEY              INTEGER
			      ,
	MVMT_DATE             DATE
			      ,
	RCD_DATE              DATE
			      ,
	RCD_PARTY_ID          INTEGER
			      ,
	MVMT_TP_CD            CHAR(10)
			      ,
	PROP_ID               INTEGER
			      ,
	INVC_ID               INTEGER
			      ,
	LINE_NUM              INTEGER
			      ,
	MGMT_NUM              INTEGER
			      
);

CREATE INDEX XIE0482_01 ON SESS_TRACE_MVMT
(
	SESS_ID              ASC
);

CREATE INDEX XIE0482_02 ON SESS_TRACE_MVMT
(
	UPD_TIME             ASC
);

CREATE TABLE SHR_REG
(
	CERT_NUM              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHR_CLASS_CD          CHAR(1)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	ISS_DATE              DATE
			       NOT NULL ,
	CLOSE_DATE            DATE
			      
);

CREATE INDEX XIE0305_01 ON SHR_REG
(
	PTPT_CD              ASC
);

CREATE TABLE SIL_ANML_ID
(
	SIL_FLOCK_ID          INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              DATE
			      ,
	anml_key              CHAR(18)
			      
);

CREATE TABLE SIRE_CLVG_DIFF
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	EXTR_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BV                    DECIMAL(4,1)
			       NOT NULL ,
	BV_REL                DECIMAL(4,1)
			       NOT NULL ,
	HFR_CNT               INTEGER
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	EXTR_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	extr_date             CHAR(18)
			      ,
	extr_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0551_01 ON SIRE_CLVG_DIFF
(
	UPD_TIME             ASC
);

CREATE TABLE SMN_ABNM
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE SMN_ALCN_CTRL
(
	PRSTGL_DAYS           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SPS_SYNC_SFTY_MRGN    SMALLINT
			       NOT NULL  CONSTRAINT  C0054_01 CHECK ( SPS_SYNC_SFTY_MRGN BETWEEN 0 AND 100 ),
	SPS_NC_SFTY_MRGN      SMALLINT
			       NOT NULL  CONSTRAINT  C0054_02 CHECK ( SPS_NC_SFTY_MRGN BETWEEN 0 AND 100 ),
	OBS_OES_PRGST_DAYS    SMALLINT
			       NOT NULL ,
	BLANKET_PRGST_DAYS    SMALLINT
			       NOT NULL ,
	SPS_QRY_DTR_PROB      DECIMAL(4,3)
			       NOT NULL ,
	SPS_HRD_TRGT          DECIMAL(2,1)
			       NOT NULL ,
	SPS_MTNG_NRR_MIN      SMALLINT
			       NOT NULL ,
	SPS_YRLG_MAX          DECIMAL(4,2)
			       NOT NULL ,
	SPS_LLL_INSEM_DTR     DECIMAL(4,3)
			       NOT NULL ,
	SPS_LLL_CTRY_UTLST    DECIMAL(4,2)
			       NOT NULL ,
	SPS_ALCN_INSRNC       DECIMAL(4,2)
			       NOT NULL ,
	SPS_MDC_RET           SMALLINT
			       NOT NULL ,
	MAX_DESP_DAYS         SMALLINT
			       NOT NULL ,
	PROSTAGLANDIN_CTRL    SMALLINT
			       NOT NULL ,
	PROSTAGLANDIN_EXT     SMALLINT
			       NOT NULL ,
	PROSTAGLANDIN_MULTIPLIER  SMALLINT
			       NOT NULL ,
	sps_sync_sfty_mrgn    CHAR(18)
			      ,
	sps_nc_sfty_mrgn      CHAR(18)
			      ,
	prstgl_days           CHAR(18)
			      
);

CREATE TABLE SMN_ALCN_FACT
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	SMN_TP_CD             DECIMAL(1)
			       NOT NULL ,
	DAY_NUM               SMALLINT
			       NOT NULL ,
	AB_SCHEME_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	QTY_FACT              DECIMAL(5,4)
			       NOT NULL 
);

CREATE INDEX XFK0301_01 ON SMN_ALCN_FACT
(
	BRD_CD               ASC
);

CREATE TABLE SMN_BATCH_CHRG
(
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	BATCH_CHRG_CD         CHAR(1)
			       NOT NULL ,
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			      ,
	end_date_d            CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      
);

CREATE TABLE SMN_DEMAND_RECALC
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 5
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TBL_NAME              CHAR(18)
			       NOT NULL ,
	PARM                  CHAR(200)
			      
);

CREATE INDEX XIE0101_01 ON SMN_DEMAND_RECALC
(
	TBL_NAME             ASC
)
 CLUSTER;

CREATE TABLE SMN_DESP_RGN
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EST_FR_PS_PCT         DECIMAL(3,1)
			       NOT NULL ,
	EST_JR_PS_PCT         DECIMAL(3,1)
			       NOT NULL ,
	EST_FR_SPS_PCT        DECIMAL(3,1)
			       NOT NULL ,
	EST_JR_SPS_PCT        DECIMAL(3,1)
			       NOT NULL ,
	DESP_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	DESP_DAYS             SMALLINT
			       NOT NULL ,
	EXP_DATE_ADJ          INTEGER
			       NOT NULL ,
	WSTG_FACT_ADJ         DECIMAL(3,2)
			       NOT NULL ,
	DESP_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	desp_date             CHAR(18)
			      ,
	desp_date_d           CHAR(18)
			      
);

CREATE TABLE SMN_DIST_PT
(
	RGN_CD                CHAR(4)
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MON_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	CARRIER_CMT           CHAR(10)
			       NOT NULL ,
	SMN_CONTNR_CD         CHAR(2)
			       NOT NULL ,
	TUE_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	WED_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	THU_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	FRI_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	SAT_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	SUN_SMN_DESP_TP_CD    CHAR(1)
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	CARRIER_NAME          CHAR(30)
			       NOT NULL ,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	smn_alcn_rgn_id       CHAR(18)
			      
);

CREATE INDEX XIE0297_01 ON SMN_DIST_PT
(
	UPD_TIME             ASC
);

CREATE TABLE SMN_PRSRVTN
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE SMN_SPLR_BRAND
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MKTR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	DESCR                 CHAR(30)
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			      ,
	DATAMATE_PROD_CD      CHAR(1)
			      ,
	core_prod_cd          CHAR(18)
			      ,
	datamate_prod_cd      CHAR(18)
			      
);

CREATE INDEX XIE0549_01 ON SMN_SPLR_BRAND
(
	MKTR_PTPT_CD         ASC
);

CREATE INDEX XIE0549_02 ON SMN_SPLR_BRAND
(
	UPD_TIME             ASC
);

CREATE TABLE SMN_SPLY_AUDIT
(
	AB_GRP_RGN_CD         CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SMN_TEST
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(20)
			       NOT NULL 
);

CREATE TABLE SMPL_COLLN_MTHD
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE SMPL_NON_USE_RSN
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(36)
			       NOT NULL ,
	EXPIRY_DATE           DATE
			      
);

CREATE INDEX XIE0191_01 ON SMPL_NON_USE_RSN
(
	UPD_TIME             ASC
);

CREATE TABLE SOF_AB_MTNG_PLAN
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TTL_PLAN              SMALLINT
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	INSEM_CD              CHAR(1)
			       NOT NULL ,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	SMN_BRD_CD            CHAR(1)
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	YRLG_CNT              INTEGER
			       NOT NULL ,
	GRP_COWS              INTEGER
			       NOT NULL ,
	GRP_YRLG              INTEGER
			       NOT NULL ,
	MAJOR_BRD_CD          CHAR(1)
			       NOT NULL ,
	MTNG_SYST_CD          DECIMAL(1)
			       NOT NULL ,
	CHRG_CD               CHAR(1)
			       NOT NULL ,
	HOME_FARM_IND         CHAR(1)
			       NOT NULL ,
	MOB_MAP_REF           CHAR(10)
			       NOT NULL ,
	VET_PTPT_CD           CHAR(4)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	AB_GRP_RGN_CD         DECIMAL(1)
			       NOT NULL ,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	VST_SEQ               SMALLINT
			       NOT NULL ,
	CAN_DATE              INTEGER
			       NOT NULL ,
	YRLG_CHRG_CD          CHAR(1)
			       NOT NULL ,
	LIC_COW_CNT           INTEGER
			       NOT NULL ,
	LIC_YRLG_CNT          INTEGER
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	ANML_CNT              INTEGER
			      ,
	STOCK_CLASS           CHAR(1)
			      ,
	FUTURE_CHANGE_IND     CHAR(1)
			       CONSTRAINT  C0401_03 CHECK ( FUTURE_CHANGE_IND IN ('Y','N') ),
	SUPP_FORM_NUM         SMALLINT
			       CONSTRAINT  C0401_01 CHECK ( SUPP_FORM_NUM IS NULL OR SUPP_FORM_NUM > 0 ),
	SUPP_FORM_COL_NUM     SMALLINT
			       CONSTRAINT  C0401_02 CHECK ( SUPP_FORM_COL_NUM IS NULL OR SUPP_FORM_COL_NUM IN (1, 2, 3) ),
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			       NOT NULL ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      
);

CREATE INDEX XIE0401_01 ON SOF_AB_MTNG_PLAN
(
	RGN_CD               ASC,
	HERD_CD              ASC
);

CREATE INDEX XIE0401_02 ON SOF_AB_MTNG_PLAN
(
	OWNR_PTPT_CD         ASC
);

CREATE INDEX XIE0401_03 ON SOF_AB_MTNG_PLAN
(
	CTCT_PTPT_CD         ASC
);

CREATE INDEX XIE0401_04 ON SOF_AB_MTNG_PLAN
(
	VET_PTPT_CD          ASC
);

CREATE INDEX XIE0401_05 ON SOF_AB_MTNG_PLAN
(
	MOB_MAP_REF          ASC
);

CREATE TABLE SOF_AB_MTNG_PLAN_CHANGE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 3001
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CHANGE_DATE           DATE
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	KEYED_PLAN_NUM        INTEGER
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			      ,
	SIRE_BRD_CD           CHAR(2)
			      ,
	SUPP_FORM_NUM         SMALLINT
			       NOT NULL  CONSTRAINT  C0850_01 CHECK ( SUPP_FORM_NUM > 0 ),
	SUPP_FORM_COL_NUM     SMALLINT
			       NOT NULL  CONSTRAINT  C0850_02 CHECK ( SUPP_FORM_COL_NUM IN (1, 2, 3) ),
	SUPP_FORM_LINE_NUM    SMALLINT
			       CONSTRAINT  C0850_03 CHECK ( SUPP_FORM_LINE_NUM IS NULL OR SUPP_FORM_LINE_NUM IN (1, 2) )
);

CREATE TABLE SOF_ADDR
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ADDR_USE_CD           CHAR(4)
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ADDR_LINE_1           CHAR(40)
			       NOT NULL ,
	ADDR_LINE_2           CHAR(40)
			      ,
	ADDR_LINE_3           CHAR(40)
			      ,
	ADDR_LINE_4           CHAR(40)
			      
);

CREATE TABLE SOF_ERR
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRINT_IND             CHAR(1)
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	LAST_NAME             CHAR(18)
			       NOT NULL ,
	GENRL_ERR_DATA        CHAR(254)
			       NOT NULL ,
	HT_ERR_DATA           CHAR(254)
			       NOT NULL ,
	AB_ERR_DATA           CHAR(254)
			       NOT NULL ,
	DFLT_HT_DATA          CHAR(66)
			       NOT NULL 
);

CREATE INDEX XIE0405_01 ON SOF_ERR
(
	LAST_NAME            ASC,
	OWNR_PTPT_CD         ASC
);

CREATE INDEX XIE0405_02 ON SOF_ERR
(
	OWNR_PTPT_CD         ASC
);

CREATE TABLE SOF_HERD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	CTCT_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SPLY_DCO_CD           SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM          INTEGER
			       NOT NULL ,
	FARM_AREA             DECIMAL(5,1)
			       NOT NULL ,
	RUNOFF_AREA           DECIMAL(5,1)
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	YRLG_CNT              INTEGER
			       NOT NULL ,
	HIGH_TAG_NUM          INTEGER
			       NOT NULL ,
	MINDA_IND             CHAR(1)
			       NOT NULL ,
	HT_IND                CHAR(1)
			       NOT NULL ,
	AB_IND                CHAR(1)
			       NOT NULL ,
	CLVG_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	RPRT_RCPNT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	DCO_PYMT_IND          CHAR(1)
			       NOT NULL ,
	CASH_PYMT_IND         CHAR(1)
			       NOT NULL ,
	INVC_CALC_MTHD_CD     CHAR(1)
			       NOT NULL ,
	PYMT_DCO_CD           SMALLINT
			       NOT NULL ,
	PYMT_DCO_NUM          INTEGER
			       NOT NULL ,
	PYMT_DCO_NUM_SFX      CHAR(3)
			       NOT NULL ,
	SOF_PROC_CD           CHAR(1)
			       NOT NULL ,
	PUNCH_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	VFY_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	PROC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	PUNCH_USER_ID         CHAR(8)
			       NOT NULL ,
	VFY_USER_ID           CHAR(8)
			       NOT NULL ,
	HERD_SOF_PROC_CD      CHAR(1)
			       NOT NULL ,
	HT_SOF_PROC_CD        CHAR(1)
			       NOT NULL ,
	AB_SOF_PROC_CD        CHAR(1)
			       NOT NULL ,
	CLVG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE_1        INTEGER
			       NOT NULL  DEFAULT 0,
	MTNG_ST_DATE_2        INTEGER
			       NOT NULL  DEFAULT 0,
	RM_AREA_RGN_CD        DECIMAL(1)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SR_AREA_CD            SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	DIRECT_DEBIT_IND      CHAR(1)
			       NOT NULL ,
	SPLY_DCO_CD_2         SMALLINT
			       NOT NULL ,
	SPLY_DCO_NUM_2        INTEGER
			       NOT NULL ,
	SCC_ONLY_IND          CHAR(1)
			       NOT NULL ,
	MINDA_SECRT_IND       CHAR(1)
			       NOT NULL ,
	MVMT_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	SCC_TEST_CNT          SMALLINT
			       NOT NULL ,
	SCC_ASST_RQRD_IND     CHAR(1)
			       NOT NULL ,
	SCC_DAY_PORTION_CD    CHAR(1)
			       NOT NULL ,
	SCC_DATE_1            INTEGER
			       NOT NULL ,
	SCC_DATE_2            INTEGER
			       NOT NULL ,
	SCC_DATE_3            INTEGER
			       NOT NULL ,
	SCC_DATE_4            INTEGER
			       NOT NULL ,
	TELEBANK_PYMT_IND     CHAR(1)
			       NOT NULL ,
	E_PYMT_IND            CHAR(1)
			       NOT NULL ,
	SCC_PM_IND            CHAR(1)
			       NOT NULL ,
	SCC_AM_IND            CHAR(1)
			       NOT NULL ,
	SCC_PM_AM_IND         CHAR(1)
			       NOT NULL ,
	E_MINDA_IND           CHAR(1)
			       NOT NULL ,
	FRST_MINDA_IND        CHAR(1)
			       NOT NULL ,
	EST_CALF_CNT          SMALLINT
			       NOT NULL ,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	GST_NUM               CHAR(11)
			       NOT NULL ,
	REPL_HFR_CNT          SMALLINT
			       NOT NULL ,
	ANOESTRUM_IND         CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	INVESTAMATE_IND       CHAR(1)
			       NOT NULL ,
	SPS_IND               CHAR(1)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	LEASED_COW_CNT        SMALLINT
			      ,
	EVNG_AB_IND           CHAR(1)
			      ,
	BRD_STEP_STS_CD       CHAR(1)
			       CONSTRAINT  C0403_01 CHECK ( BRD_STEP_STS_CD IN ('A', 'B', 'C') ),
	MINDA_MED_CD          CHAR(1)
			       CONSTRAINT  C0403_02 CHECK ( MINDA_MED_CD IN ('P', 'E') ),
	COW_LEPTO_IND         CHAR(1)
			       CONSTRAINT  C0403_03 CHECK ( COW_LEPTO_IND IN ('Y', 'N') ),
	YRLG_LEPTO_IND        CHAR(1)
			       CONSTRAINT  C0403_04 CHECK ( YRLG_LEPTO_IND IN ('Y', 'N') ),
	PS_DMD_PRCHS_IND      CHAR(1)
			       CONSTRAINT  C0403_05 CHECK ( PS_DMD_PRCHS_IND IN ('Y', 'N') ),
	PYMT_DCO_PARTY        CHAR(8)
			      ,
	RQST_TRUE_PRNT_CD     CHAR(1)
			      ,
	RQST_PRODN_GN_CD      CHAR(1)
			      ,
	RQST_LETHAL_GN_CD     CHAR(1)
			      ,
	RQST_FARMWISE_CD      CHAR(1)
			      ,
	RQST_DRY_AUTO_CD      CHAR(1)
			      ,
	RQST_KMAR_CD          CHAR(1)
			      ,
	MEMB_1_NAME           CHAR(36)
			      ,
	MEMB_2_NAME           CHAR(36)
			      ,
	MEMB_3_NAME           CHAR(36)
			      ,
	MEMB_1_FRST_NAME      CHAR(16)
			      ,
	MEMB_2_FRST_NAME      CHAR(16)
			      ,
	MEMB_3_FRST_NAME      CHAR(16)
			      ,
	LGL_ENTITY_CD         CHAR(1)
			      ,
	LGL_NAME              CHAR(36)
			      ,
	EXCL_LSD_COW_CNT      SMALLINT
			      ,
	INCL_LSD_COW_CNT      SMALLINT
			      ,
	FARM_TP_CD            CHAR(1)
			      ,
	PHONE_CTCT_NAME       CHAR(36)
			      ,
	LEPTO_VET_PTPT_CD     CHAR(4)
			      ,
	LEPTO_VET_CLINIC_NAME  CHAR(30)
			      ,
	SE_VET_PTPT_CD        CHAR(4)
			      ,
	SE_VET_CLINIC_NAME    CHAR(30)
			      ,
	SIGNATURE_IND         CHAR(1)
			       CONSTRAINT  C0403_06 CHECK ( SIGNATURE_IND IN ('Y','N') ),
	SIGNATURE_DATE        DATE
			      ,
	RQST_LEPTO_CD         CHAR(1)
			      ,
	RQST_CALF_TRACE_CD    CHAR(1)
			      ,
	EST_2YR_OLDS          SMALLINT
			      ,
	MINDAPRO_6PACK_DISC_IND  CHAR(1)
			       CONSTRAINT  C0403_07 CHECK ( MINDAPRO_6PACK_DISC_IND IN ('Y','N') ),
	AHB_HERD_NUM          INTEGER
			      ,
	TRACE_IND             CHAR(1)
			       CONSTRAINT  C0403_08 CHECK ( TRACE_IND IN ('Y','N') ),
	BVD_TEST_RQST_IND     CHAR(1)
			       CONSTRAINT  C0403_09 CHECK ( BVD_TEST_RQST_IND IN ('Y','N') ),
	CALF_RPRT_RQST_IND    CHAR(1)
			       CONSTRAINT  C0403_10 CHECK ( CALF_RPRT_RQST_IND IN ('Y','N') ),
	CLVG_ST_DATE_D        DATE
			      ,
	PUNCH_DATE_D          DATE
			       NOT NULL ,
	VFY_DATE_D            DATE
			      ,
	PROC_DATE_D           DATE
			      ,
	CLVG_ST_DATE_2_D      DATE
			      ,
	MTNG_ST_DATE_1_D      DATE
			      ,
	MTNG_ST_DATE_2_D      DATE
			      ,
	MVMT_DATE_D           DATE
			      ,
	SHAREHOLDER_ELIG_IND  CHAR(1)
			       CONSTRAINT  C0403_11 CHECK ( SHAREHOLDER_ELIG_IND IN ('Y','N') ),
	DNA_PROVEN_RQST_IND   CHAR(1)
			       CONSTRAINT  C0403_12 CHECK ( DNA_PROVEN_RQST_IND IN ('Y','N') ),
	FARM_KEEPER_RQST_IND  CHAR(1)
			       CONSTRAINT  C0403_13 CHECK ( FARM_KEEPER_RQST_IND IN ('Y','N') ),
	SIL_FLOCK_ID          INTEGER
			      ,
	RAPID_NUM             CHAR(10)
			      ,
	clvg_st_date          CHAR(18)
			      ,
	clvg_st_date_d        CHAR(18)
			      ,
	vfy_date              CHAR(18)
			      ,
	punch_date            CHAR(18)
			      ,
	punch_date_d          CHAR(18)
			      ,
	vfy_date_d            CHAR(18)
			      ,
	clvg_st_date_2        CHAR(18)
			      ,
	clvg_st_date_2_d      CHAR(18)
			      ,
	mtng_st_date_1        CHAR(18)
			      ,
	mtng_st_date_1_d      CHAR(18)
			      ,
	mtng_st_date_2        CHAR(18)
			      ,
	mtng_st_date_2_d      CHAR(18)
			      ,
	mvmt_date             CHAR(18)
			      ,
	mvmt_date_d           CHAR(18)
			      ,
	proc_date             CHAR(18)
			      ,
	proc_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0403_01 ON SOF_HERD
(
	SOF_PROC_CD          ASC
);

CREATE INDEX XIE0403_02 ON SOF_HERD
(
	RGN_CD               ASC,
	HERD_CD              ASC
);

CREATE INDEX XIE0403_04 ON SOF_HERD
(
	RPRT_RCPNT_PTPT_CD   ASC
);

CREATE INDEX XIE0403_06 ON SOF_HERD
(
	CTCT_PTPT_CD         ASC
);

CREATE TABLE SOF_HT_VISIT_DATE
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STAFF_CNT             SMALLINT
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	EZLINK_IND            CHAR(1)
			       NOT NULL  CONSTRAINT  C0098_02 CHECK ( EZLINK_IND IN ('Y','N') ),
	EZLINK_EID_IND        CHAR(1)
			       NOT NULL  CONSTRAINT  C0098_03 CHECK ( EZLINK_EID_IND IN ('Y','N') ),
	EZTRAY_IND            CHAR(1)
			       NOT NULL  CONSTRAINT  C0098_01 CHECK ( EZTRAY_IND IN ('Y','N') ),
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	SV_TP_CD              SMALLINT
			       NOT NULL 
);

CREATE TABLE SOF_HT_VST_RQST
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OPT_A_IND             CHAR(1)
			       NOT NULL ,
	TEST_CNT              SMALLINT
			       NOT NULL ,
	HT_FREQ_CD            SMALLINT
			       NOT NULL ,
	INTVL                 SMALLINT
			       NOT NULL ,
	RND_NUM               SMALLINT
			       NOT NULL ,
	FRST_OPT_A_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	OPT_B_IND             CHAR(1)
			       NOT NULL ,
	SELF_SMPL_IND         CHAR(1)
			       NOT NULL ,
	OFFCR_SMPL_IND        CHAR(1)
			       NOT NULL ,
	STAFF_CNT             DECIMAL(1)
			       NOT NULL ,
	CUPS                  SMALLINT
			       NOT NULL ,
	MC_CLUSTER_CD         CHAR(1)
			       NOT NULL ,
	FARM_DRY_DSGN_CD      CHAR(1)
			       NOT NULL ,
	HT_RPRT_CD            CHAR(2)
			       NOT NULL ,
	SCC_RPRT_CD           CHAR(1)
			       NOT NULL ,
	RPRT_RCPNT_PTPT_CD    CHAR(4)
			       NOT NULL ,
	EXTRA_HT_RPRT_IND     CHAR(1)
			       NOT NULL ,
	EXTRA_SCC_RPRT_IND    CHAR(1)
			       NOT NULL ,
	COPY_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SELF_SMPL_DONE_IND    CHAR(1)
			       NOT NULL ,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	HERD_CD               INTEGER
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	ASSIST_RND_1          SMALLINT
			       NOT NULL ,
	ASSIST_RND_2          SMALLINT
			       NOT NULL ,
	ASSIST_RND_3          SMALLINT
			       NOT NULL ,
	ASSIST_RND_4          SMALLINT
			      ,
	ASSIST_RND_5          SMALLINT
			      ,
	SV_END_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	SELF_SMPL_ASST_IND    CHAR(1)
			       NOT NULL ,
	DROPPER_SIZE_CD       DECIMAL(1)
			       NOT NULL ,
	LS_RPRT_ST_DATE       INTEGER
			       NOT NULL  DEFAULT 0,
	LS_RPRT_END_DATE      INTEGER
			       NOT NULL  DEFAULT 0,
	RPRT_MEDIUM_CD        CHAR(1)
			       NOT NULL ,
	EXTRA_MEDIUM_CD       CHAR(1)
			       NOT NULL ,
	CMT                   CHAR(250)
			       NOT NULL ,
	RPRT_EMAIL_ADDR       CHAR(150)
			       NOT NULL ,
	EXTRA_EMAIL_ADDR      CHAR(150)
			       NOT NULL ,
	SEL_TEST_ALL_IND      CHAR(1)
			       CONSTRAINT  C0402_13 CHECK ( SEL_TEST_ALL_IND IN ('Y','N') ),
	ONCE_DAY_AM_IND       CHAR(1)
			       CONSTRAINT  C0402_14 CHECK ( ONCE_DAY_AM_IND IN ('Y','N') ),
	ONCE_DAY_PM_IND       CHAR(1)
			       CONSTRAINT  C0402_15 CHECK ( ONCE_DAY_PM_IND IN ('Y','N') ),
	EZTRAY_IND            CHAR(1)
			       CONSTRAINT  C0402_16 CHECK ( EZTRAY_IND IN ('Y','N') ),
	EZLINK_IND            CHAR(1)
			       CONSTRAINT  C0402_17 CHECK ( EZLINK_IND IN ('Y','N') ),
	USED_EZLINK_IND       CHAR(1)
			       CONSTRAINT  C0046_15 CHECK ( USED_EZLINK_IND IN ('Y','N') ),
	EZLINK_EID_IND        CHAR(1)
			       CONSTRAINT  C0402_19 CHECK ( EZLINK_EID_IND IN ('Y','N') ),
	FIRST_TIME_HT_IND     CHAR(1)
			       CONSTRAINT  C0402_20 CHECK ( FIRST_TIME_HT_IND IN ('Y','N') ),
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	MILKING_REGIME_CD     SMALLINT
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	SERVICE_LVL_CD        CHAR(1)
			       NOT NULL ,
	HT_SMS_NOTIFY_IND     CHAR(1)
			       CONSTRAINT  C0402_21 CHECK ( HT_SMS_NOTIFY_IND IN ('Y','N') ),
	HT_SMS_CONTACT_CD     CHAR(1)
			      ,
	SHARED_DAIRY_IND      CHAR(1)
			       CONSTRAINT  C0402_22 CHECK ( SHARED_DAIRY_IND IN ('Y','N') ),
	SECOND_HERD_PTPT_CD   CHAR(4)
			      ,
	COMBINED_HERD_IND     CHAR(1)
			       CONSTRAINT  C0402_23 CHECK ( COMBINED_HERD_IND IN ('Y','N') ),
	CUPS_2                SMALLINT
			      ,
	FARM_DRY_DSGN_CD_2    CHAR(1)
			      ,
	MC_CLUSTER_CD_2       CHAR(1)
			      ,
	SPEC_TRAY_RQRMT_IND   CHAR(1)
			       CONSTRAINT  C0402_24 CHECK ( SPEC_TRAY_RQRMT_IND IN ('Y','N') ),
	PM_MILKING_ST_TIME    TIME
			      ,
	AM_MILKING_ST_TIME    TIME
			      ,
	ADD_BRACKET_CNT       SMALLINT
			      ,
	DAIRY_UPGRADE_IND     CHAR(1)
			       CONSTRAINT  C0402_25 CHECK ( DAIRY_UPGRADE_IND IN ('Y','N') ),
	DAIRY_UPGRADE_DATE    DATE
			      ,
	HT_RATING_QSTN        CHAR(1)
			      ,
	HT_RATING_CMT         VARCHAR(250)
			      ,
	HT_CONTACT_CD         CHAR(1)
			      ,
	HT_CONTACT_NAME       VARCHAR(25)
			      ,
	HT_CONTACT_PHONE_NUM  VARCHAR(20)
			      ,
	HT_CONTACT_MOBILE_NUM  VARCHAR(20)
			      ,
	PREF_FIRST_VISIT_DATE  DATE
			      ,
	frst_opt_a_date       CHAR(18)
			      ,
	pref_first_visit_date  CHAR(18)
			      
);

CREATE INDEX XIE0402_01 ON SOF_HT_VST_RQST
(
	RGN_CD               ASC,
	HERD_CD              ASC
);

CREATE INDEX XIE0402_02 ON SOF_HT_VST_RQST
(
	OWNR_PTPT_CD         ASC
);

CREATE INDEX XIE0402_03 ON SOF_HT_VST_RQST
(
	COPY_PTPT_CD         ASC
);

CREATE INDEX XIE0402_04 ON SOF_HT_VST_RQST
(
	RPRT_RCPNT_PTPT_CD   ASC
);

CREATE TABLE SOF_KMAR
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BOX_CNT               SMALLINT
			       NOT NULL ,
	DLVRY_DATE            INTEGER
			       NOT NULL ,
	RPRT_IND              CHAR(1)
			       NOT NULL ,
	WARN_IND              CHAR(1)
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL ,
	WARN_DESCR            CHAR(50)
			       NOT NULL 
);

CREATE TABLE SOF_PARTY
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EMAIL_ADDR            CHAR(150)
			       NOT NULL 
);

CREATE TABLE SOF_PHONE_NUM
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PHONE_NUM_TP_CD       CHAR(4)
			       NOT NULL ,
	PROC_CD               CHAR(1)
			       NOT NULL  CONSTRAINT  C0487_01 CHECK ( PROC_CD IN ('N','C','D') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COUNTRY_CD            CHAR(4)
			      ,
	AREA_CD               CHAR(6)
			       NOT NULL ,
	LOCAL_NUM             CHAR(9)
			       NOT NULL ,
	EXT                   CHAR(4)
			      
);

CREATE TABLE SOF_RCPT
(
	SSN                   SMALLINT
			       NOT NULL ,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INIT                  CHAR(10)
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL ,
	RCD_TIME              INTEGER
			       NOT NULL ,
	RCD_USER_ID           CHAR(8)
			       NOT NULL ,
	QRY_FWD_DATE          INTEGER
			       NOT NULL ,
	QRY_FWD_TIME          INTEGER
			       NOT NULL ,
	QRY_USER_ID           CHAR(8)
			       NOT NULL ,
	QRY_RCVD_DATE         INTEGER
			       NOT NULL ,
	QRY_RCVD_TIME         INTEGER
			       NOT NULL ,
	QRY_RCVD_USER_ID      CHAR(8)
			       NOT NULL ,
	QRY_CNT               SMALLINT
			       NOT NULL ,
	PTPT_UPD_DATE         INTEGER
			       NOT NULL ,
	PTPT_UPD_TIME         INTEGER
			       NOT NULL ,
	PTPT_UPD_USER_ID      CHAR(8)
			       NOT NULL ,
	PUNCH_DATE            INTEGER
			       NOT NULL ,
	PUNCH_TIME            INTEGER
			       NOT NULL ,
	PUNCH_USER_ID         CHAR(8)
			       NOT NULL ,
	NEW_CLNT_IND          CHAR(1)
			       NOT NULL ,
	NEW_CLNT_NUM          SMALLINT
			       NOT NULL ,
	PREV_RCVD_DATE        INTEGER
			       NOT NULL ,
	NAME                  CHAR(36)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0436_01 ON SOF_RCPT
(
	SSN                  ASC,
	NAME                 ASC,
	INIT                 ASC
);

CREATE INDEX XIE0436_02 ON SOF_RCPT
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0436_03 ON SOF_RCPT
(
	UPD_TIME             ASC
);

CREATE TABLE SPACE
(
	TBSP_NAME             CHAR(30)
			      ,
	TYPE                  CHAR(3)
			      ,
	PAGE_SIZE             CHAR(8)
			      ,
	TOTAL                 CHAR(15)
			      ,
	USABLE                CHAR(15)
			      ,
	USED                  CHAR(15)
			      ,
	FREE                  CHAR(15)
			      ,
	PCT_USED              DECIMAL(5,2)
			      ,
	SPACE_USED_MB         DECIMAL(9,1)
			      
);

CREATE TABLE SPCS_HLTH_PROD
(
	HLTH_PROD_CD          CHAR(6)
			       NOT NULL ,
	SPCS_CD               CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STD_DOSE              DECIMAL(9,2)
			       NOT NULL ,
	STD_DOSE_UOM_CD       CHAR(4)
			       NOT NULL ,
	MEAT_WH_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0569_01 CHECK ( MEAT_WH_IND in ('Y', 'N') ),
	REC_MEAT_WH           SMALLINT
			       NOT NULL ,
	MILK_WH_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0569_02 CHECK ( MILK_WH_IND in ('Y', 'N') ),
	REC_MILK_WH_MIN       INTEGER
			       NOT NULL ,
	REC_MILK_WH_INCR      SMALLINT
			       NOT NULL ,
	REC_MILK_WH_MAX       INTEGER
			       NOT NULL 
);

CREATE TABLE SPECIES
(
	CD                    CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(10)
			       NOT NULL ,
	MAX_GESTATION_LENGTH  SMALLINT
			      ,
	AVG_GESTATION_LENGTH  SMALLINT
			      ,
	MIN_GESTATION_LENGTH  SMALLINT
			      ,
	PUBERTY_AGE           SMALLINT
			      ,
	OESTRUS_CYCLE_LENGTH  SMALLINT
			      ,
	MIN_SIRE_AGE          SMALLINT
			      ,
	MIN_DAYS_BETWEEN_CALVINGS  SMALLINT
			      ,
	MAX_DAYS_BETWEEN_CALVINGS  SMALLINT
			      ,
	FEMALE_ADULT_NAME     CHAR(20)
			      ,
	MALE_ADULT_NAME       CHAR(20)
			      ,
	FEMALE_BABY_NAME      CHAR(20)
			      ,
	MALE_BABY_NAME        CHAR(20)
			      ,
	GENDER_NEUTRAL_BABY_NAME  CHAR(20)
			      ,
	FEMALE_PARENT_NAME    CHAR(20)
			      ,
	MALE_PARENT_NAME      CHAR(20)
			      ,
	GRP_NAME              CHAR(20)
			      ,
	PARTN_NAME            CHAR(20)
			      ,
	MTNG_NAME             CHAR(20)
			      ,
	MAX_LACT_LENGTH       SMALLINT
			      ,
	TDM_AVAIL_IND         CHAR(1)
			       CONSTRAINT  C0007_01 CHECK ( TDM_AVAIL_IND IN ('Y','N') ),
	HT_SERVICE_IND        CHAR(1)
			       CONSTRAINT  C0007_02 CHECK ( HT_SERVICE_IND IN ('Y','N') )
);

CREATE INDEX XIE0007_01 ON SPECIES
(
	UPD_TIME             ASC
);

CREATE TABLE SPECIES_BATCH_UPD_ERR
(
	BATCH_UPD_ERR_CD      SMALLINT
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(99)
			       NOT NULL 
);

CREATE TABLE SPECIES_MINDA_OPT
(
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	MINDA_OPT_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	minda_opt_cd          CHAR(18)
			      
);

CREATE TABLE SPECIES_PARTY_ROLE
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	PARTY_ROLE_CD         CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SPS_ALCN_APPROVAL
(
	DESP_DATE             DATE
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ACCEPT_IND            CHAR(1)
			       DEFAULT 'N' CONSTRAINT  C0238_01 CHECK ( ACCEPT_IND IN ('Y', 'N') ),
	UPD_USER_ID           CHAR(8)
			       NOT NULL ,
	ACCEPT_MARKER_BULL_IND  CHAR(1)
			       DEFAULT 'N' CONSTRAINT  C0238_02 CHECK ( ACCEPT_MARKER_BULL_IND IN ('Y','N') ),
	accept_marker_bull_ind  CHAR(18)
			      ,
	accept_ind            CHAR(18)
			      
);

CREATE INDEX XIE0238_01 ON SPS_ALCN_APPROVAL
(
	UPD_TIME             ASC
);

CREATE TABLE SPS_ALCN_SPLY
(
	DESP_DATE             DATE
			       NOT NULL ,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	BULL_CD               INTEGER
			       NOT NULL ,
	DESP_DOSE_CNT         SMALLINT
			       NOT NULL ,
	RVSD_DOSE_CNT         INTEGER
			      ,
	PLAN_USE_DAY          SMALLINT
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	USE_WHOLE_BATCH_RSN_CD  CHAR(2)
			       CONSTRAINT  C0431_01 CHECK ( USE_WHOLE_BATCH_RSN_CD IN ('CO','DD','LE','NS','O','SB','SQ') )
);

CREATE TABLE SPS_BSNS_RULE_CTRL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 501
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	MIN_COW               SMALLINT
			       NOT NULL ,
	MIN_YRLG              SMALLINT
			       NOT NULL ,
	MIN_NEW_HERD_SIZE     SMALLINT
			       NOT NULL ,
	MIN_EXST_HERD_SIZE    SMALLINT
			       NOT NULL ,
	MAX_NEW_HERD_SIZE     SMALLINT
			       NOT NULL ,
	MAX_EXST_HERD_SIZE    SMALLINT
			       NOT NULL ,
	MIN_SPS_PCT           SMALLINT
			       NOT NULL  CONSTRAINT  C0548_01 CHECK ( MIN_SPS_PCT BETWEEN 0 AND 100 ),
	MIN_COW_NC_MTNG_SPRD  SMALLINT
			       NOT NULL ,
	MAX_COW_NC_MTNG_SPRD  SMALLINT
			       NOT NULL ,
	MIN_YRLG_NC_MTNG_SPRD  SMALLINT
			      ,
	MAX_YRLG_NC_MTNG_SPRD  SMALLINT
			      ,
	AB_ST_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	AB_END_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	MAX_PS_COWS           SMALLINT
			       NOT NULL ,
	MAX_SPS_BRDS          DECIMAL(1)
			       NOT NULL ,
	MIN_SYNC_MTNG_SPRD    INTEGER
			       NOT NULL ,
	MAX_SYNC_MTNG_SPRD    INTEGER
			       NOT NULL ,
	MAX_PER_BULL_DOSES    SMALLINT
			       NOT NULL ,
	MAX_SYNC_COW_PCT      SMALLINT
			       NOT NULL  CONSTRAINT  C0548_02 CHECK ( MAX_SYNC_COW_PCT BETWEEN 0 AND 100 ),
	MAX_SYNC_YRLG_PCT     SMALLINT
			       NOT NULL  CONSTRAINT  C0548_03 CHECK ( MAX_SYNC_YRLG_PCT BETWEEN 0 AND 100 ),
	ST_DATE_D             DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	UPD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	AB_ST_DATE_D          DATE
			       NOT NULL  DEFAULT '0001-01-01',
	AB_END_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	SPS_MEMB_PARTY_ID     INTEGER
			      ,
	MIN_HERD_TEST         SMALLINT
			       NOT NULL ,
	HT_ST_CALVING_DATE    DATE
			       NOT NULL ,
	FIRST_HT_MAX_DATE     DATE
			       NOT NULL ,
	FIRST_HT_MAX_DAYS     SMALLINT
			       NOT NULL ,
	MIN_HFR_REPL_RATE     SMALLINT
			       NOT NULL ,
	OBLGN_HFR_VALUE       SMALLINT
			       NOT NULL ,
	CMT                   VARCHAR(100)
			      ,
	ab_st_date            CHAR(18)
			      ,
	ab_end_date_d         CHAR(18)
			      ,
	ab_st_date_d          CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	upd_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	ab_end_date           CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	st_date               CHAR(18)
			      ,
	CONSTRAINT C0548_04 CHECK ( AB_ST_DATE <= AB_END_DATE ) ,
	CONSTRAINT C0548_05 CHECK ( MIN_EXST_HERD_SIZE <= MAX_EXST_HERD_SIZE ) ,
	CONSTRAINT C0548_064 CHECK ( MIN_COW_NC_MTNG_SPRD <= MAX_COW_NC_MTNG_SPRD ) ,
	CONSTRAINT C0548_07 CHECK ( MIN_NEW_HERD_SIZE <= MAX_NEW_HERD_SIZE ) ,
	CONSTRAINT C0548_08 CHECK ( MIN_SYNC_MTNG_SPRD <= MAX_SYNC_MTNG_SPRD ) ,
	CONSTRAINT C0548_09 CHECK ( ST_DATE <= END_DATE ) ,
	CONSTRAINT C0548_105 CHECK ( MIN_YRLG_NC_MTNG_SPRD IS NULL AND MAX_YRLG_NC_MTNG_SPRD IS NULL OR MIN_YRLG_NC_MTNG_SPRD IS NOT NULL AND MAX_YRLG_NC_MTNG_SPRD IS NOT NULL AND MIN_YRLG_NC_MTNG_SPRD <= MAX_YRLG_NC_MTNG_SPRD ) 
);

CREATE TABLE SPS_BULL_EST_DTRS
(
	BULL_CD               INTEGER
			       NOT NULL ,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	UPD_DATE              DATE
			       NOT NULL ,
	STOCK_CLASS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0433_01 CHECK ( STOCK_CLASS_CD IN ('C', 'Y') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EST_DTRS              DECIMAL(7,4)
			       NOT NULL ,
	DOSE_CNT              SMALLINT
			       NOT NULL 
);

CREATE TABLE SPS_BULL_NRR_GRP
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MIN_NRR               SMALLINT
			       NOT NULL ,
	MAX_NRR               SMALLINT
			       NOT NULL 
);

CREATE INDEX XIE0317_01 ON SPS_BULL_NRR_GRP
(
	ID                   ASC,
	MIN_NRR              ASC,
	MAX_NRR              ASC
);

CREATE TABLE SPS_CTRY_TRGT
(
	SSN                   SMALLINT
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRGT_DTR_CNT          SMALLINT
			       NOT NULL 
);

CREATE TABLE SPS_DESP_DMND
(
	DESP_DATE             DATE
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	PLAN_USE_DAY          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	HRD_CNT               SMALLINT
			       NOT NULL ,
	DOSE_CNT              SMALLINT
			       NOT NULL ,
	PRPTN_COW             DECIMAL(3,2)
			       NOT NULL 
);

CREATE TABLE SPS_DTR_SVY_RSLT
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	OWNR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	COW_NUM               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHED_TEMPER_CD        DECIMAL(1)
			       NOT NULL ,
	MILK_SPEED_CD         DECIMAL(1)
			       NOT NULL ,
	ANML_OPINION_CD       DECIMAL(1)
			       NOT NULL ,
	SPS_FATE_CD           CHAR(1)
			       NOT NULL ,
	FATE_CAUSE_CD         CHAR(6)
			       NOT NULL ,
	CULL_DATE             CHAR(8)
			       NOT NULL ,
	SELL_INTENTION_IND    CHAR(1)
			       NOT NULL ,
	SELL_CAUSE_CD         CHAR(6)
			       NOT NULL 
);

CREATE INDEX XIE0409_01 ON SPS_DTR_SVY_RSLT
(
	OWNR_PTPT_CD         ASC
);

CREATE TABLE SPS_HERD_DTRS
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	UPD_DATE              DATE
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	STOCK_CLASS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0319_01 CHECK ( STOCK_CLASS_CD IN ('C', 'Y') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRED_DTRS             DECIMAL(7,4)
			      ,
	QRY_DTRS              DECIMAL(7,4)
			      ,
	INSEM_CNT             SMALLINT
			      ,
	QRY_CNT               SMALLINT
			      
);

CREATE INDEX XIE0319_01 ON SPS_HERD_DTRS
(
	UPD_DATE             ASC
);

CREATE TABLE SPS_INSEM_DTR
(
	RGN_ID                INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	SPS_SSN_WK            SMALLINT
			       NOT NULL ,
	STOCK_CLASS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0322_01 CHECK ( STOCK_CLASS_CD IN ('C', 'Y') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	INSEM_DTR             DECIMAL(5,3)
			       NOT NULL 
);

CREATE TABLE SPS_LLL_UTLSTN
(
	RGN_ID                INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	DESP_WK               SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LLL_UTLSTN            DECIMAL(7,6)
			       NOT NULL 
);

CREATE TABLE SPS_MEMB
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	APPL_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	APPL_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	EST_FAT_KG            INTEGER
			       NOT NULL ,
	ACCP_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	HERD_FUTURE_IND       CHAR(1)
			       NOT NULL ,
	SPS_APPL_STS_CD       CHAR(1)
			       NOT NULL ,
	SHRMLK_EXPIRY         SMALLINT
			       NOT NULL ,
	LEASED_COW_CNT        INTEGER
			       NOT NULL ,
	OBLGN_AMT             INTEGER
			       NOT NULL ,
	UPD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	INSEM_COW_CNT         SMALLINT
			       NOT NULL ,
	INSEM_COW_UPD_DATE    INTEGER
			       NOT NULL  DEFAULT 0,
	CLVG_CNT              SMALLINT
			       NOT NULL ,
	CLVG_UPD_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	HFR_CALF_CNT          SMALLINT
			       NOT NULL ,
	HFR_CALF_UPD_DATE     INTEGER
			       NOT NULL  DEFAULT 0,
	TEST_HFR_CNT          SMALLINT
			       NOT NULL ,
	TEST_HFR_CALC_DATE    INTEGER
			       NOT NULL  DEFAULT 0,
	INSEM_TTL             SMALLINT
			       NOT NULL ,
	MTNG_PD_DAYS          SMALLINT
			       NOT NULL ,
	THREE_MTNG_CNT        SMALLINT
			       NOT NULL ,
	SHORT_RET             SMALLINT
			       NOT NULL ,
	FRST_NOM_CNT          SMALLINT
			       NOT NULL ,
	FRST_NM_CNT           SMALLINT
			       NOT NULL ,
	FRST_PS_CNT           SMALLINT
			       NOT NULL ,
	FRST_SPS_FR_CNT       SMALLINT
			       NOT NULL ,
	FRST_SPS_JR_CNT       SMALLINT
			       NOT NULL ,
	FRST_SPS_KC_CNT       SMALLINT
			       NOT NULL ,
	HFR_CLV_REARED_CNT    SMALLINT
			       NOT NULL ,
	HFR_CLV_SOLD_CNT      SMALLINT
			       NOT NULL ,
	HFR_CLV_DIED_CNT      SMALLINT
			       NOT NULL ,
	HFR_CLV_BOBD_CNT      SMALLINT
			       NOT NULL ,
	BULL_CLV_CNT          SMALLINT
			       NOT NULL ,
	OTH_AB_CLV_CNT        SMALLINT
			       NOT NULL ,
	NM_CLV_CNT            SMALLINT
			       NOT NULL ,
	INDUCE_CLV_CNT        SMALLINT
			       NOT NULL ,
	NO_BRTH_ASST_CNT      SMALLINT
			       NOT NULL ,
	MNR_BRTH_ASST_CNT     SMALLINT
			       NOT NULL ,
	MJR_BRTH_ASST_CNT     SMALLINT
			       NOT NULL ,
	UNK_BRTH_ASST_CNT     SMALLINT
			       NOT NULL ,
	INCL_TOP_IND          CHAR(1)
			       NOT NULL ,
	TOP_INSP_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	TOP_FRMR_RPRT_IND     CHAR(1)
			       NOT NULL ,
	TOP_INSP_RPRT_IND     CHAR(1)
			       NOT NULL ,
	LWGT_INCL_IND         CHAR(1)
			       NOT NULL ,
	LWGT_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	TAG_HFR_CNT           SMALLINT
			       NOT NULL ,
	TAG_HFR_UPD_DATE      INTEGER
			       NOT NULL  DEFAULT 0,
	TAG_VFY_INCL_IND      CHAR(1)
			       NOT NULL ,
	TAG_VFY_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	HFR_CULL_GNTC_RSN     SMALLINT
			       NOT NULL ,
	HFR_TWO_HT_CNT        SMALLINT
			       NOT NULL ,
	IN_CALF_COW_PURCH     SMALLINT
			       NOT NULL ,
	HFR_PURCH_CNT         SMALLINT
			       NOT NULL ,
	NON_SPS_MTNG_CMT      CHAR(50)
			       NOT NULL  WITH DEFAULT,
	NON_SPS_MTNG_CMT_2    CHAR(50)
			       NOT NULL  WITH DEFAULT,
	HFR_CRNT_CNT          SMALLINT
			       NOT NULL ,
	HFR_CULL_DEAD_CNT     SMALLINT
			       NOT NULL ,
	HFR_SOLD_CNT          SMALLINT
			       NOT NULL ,
	EXCL_LSD_COW_CNT      SMALLINT
			      ,
	INCL_LSD_COW_CNT      SMALLINT
			      ,
	PS_DMD_PRCHS_IND      CHAR(1)
			       CONSTRAINT  C0048_01 CHECK ( PS_DMD_PRCHS_IND IN ('Y', 'N') ),
	APPL_DATE_D           DATE
			      ,
	ACCP_DATE_D           DATE
			      ,
	UPD_DATE_D            DATE
			      ,
	INSEM_COW_UPD_DATE_D  DATE
			      ,
	CLVG_UPD_DATE_D       DATE
			      ,
	HFR_CALF_UPD_DATE_D   DATE
			      ,
	TEST_HFR_CALC_DATE_D  DATE
			      ,
	TOP_INSP_DATE_D       DATE
			      ,
	LWGT_DATE_D           DATE
			      ,
	TAG_HFR_UPD_DATE_D    DATE
			      ,
	TAG_VFY_DATE_D        DATE
			      ,
	INSEM_YRLG_CNT        SMALLINT
			      ,
	INIT_OBLGN_AMT        DECIMAL(7,2)
			      ,
	CURR_OBLGN_AMT        DECIMAL(7,2)
			      ,
	upd_date              CHAR(18)
			      ,
	lwgt_date             CHAR(18)
			      ,
	test_hfr_calc_date_d  CHAR(18)
			      ,
	accp_date_d           CHAR(18)
			      ,
	appl_date_d           CHAR(18)
			      ,
	clvg_upd_date         CHAR(18)
			      ,
	accp_date             CHAR(18)
			      ,
	top_insp_date         CHAR(18)
			      ,
	top_insp_date_d       CHAR(18)
			      ,
	appl_date             CHAR(18)
			      ,
	tag_vfy_date_d        CHAR(18)
			      ,
	test_hfr_calc_date    CHAR(18)
			      ,
	insem_cow_upd_date_d  CHAR(18)
			      ,
	insem_cow_upd_date    CHAR(18)
			      ,
	hfr_calf_upd_date_d   CHAR(18)
			      ,
	clvg_upd_date_d       CHAR(18)
			      ,
	lwgt_date_d           CHAR(18)
			      ,
	upd_date_d            CHAR(18)
			      ,
	tag_hfr_upd_date_d    CHAR(18)
			      ,
	hfr_calf_upd_date     CHAR(18)
			      ,
	ptpt_cd               CHAR(18)
			      ,
	tag_vfy_date          CHAR(18)
			      ,
	tag_hfr_upd_date      CHAR(18)
			      
);

CREATE INDEX XIE0048_01 ON SPS_MEMB
(
	UPD_TIME             ASC
);

CREATE TABLE SPS_MEMB_CMT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			       DEFAULT USER,
	CMT                   VARCHAR(200)
			       NOT NULL ,
	CAT_CD                CHAR(4)
			       NOT NULL  CONSTRAINT  C0731_01 CHECK ( CAT_CD IN ('AUD','PERF','APPL') ),
	ptpt_cd               CHAR(18)
			      ,
	ssn                   CHAR(18)
			      ,
	cmt                   CHAR(18)
			      
);

CREATE TABLE SPS_MTNG
(
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RGN_CD                CHAR(4)
			      ,
	BULL_CD               INTEGER
			      ,
	MTNG_TP_CD            DECIMAL(1)
			       NOT NULL  CONSTRAINT  C0324_01 CHECK ( MTNG_TP_CD IN (1, 2, 3, 4, 5) ),
	COW_MTNG_INTVL        SMALLINT
			      ,
	SMN_BATCH_NUM         CHAR(6)
			      ,
	DESP_GRP_RGN_CD       CHAR(4)
			      ,
	DESP_GRP_NUM          INTEGER
			      ,
	DESP_GRP_RGN_CD_2     CHAR(4)
			      ,
	DESP_GRP_NUM_2        INTEGER
			      ,
	BRTH_DATE             DATE
			      ,
	MTNG_CHRG_TP_CD       CHAR(1)
			       NOT NULL ,
	RGN_ID                INTEGER
			      ,
	SMN_ALCN_RGN_ID       INTEGER
			      ,
	SMN_PRSRVTN_CD        CHAR(4)
			       CONSTRAINT  C0324_02 CHECK ( SMN_PRSRVTN_CD IN ('LLL','FRZ') ),
	STOCK_CLASS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0324_03 CHECK ( STOCK_CLASS_CD IN ('C', 'Y') ),
	DAM_AGE_YRS           SMALLINT
			      ,
	SIRE_MKTG_BRD_CD      CHAR(2)
			      ,
	CONSTRAINT C0324_04 CHECK ( DESP_GRP_RGN_CD_2 IS NULL AND DESP_GRP_NUM_2 IS NULL OR DESP_GRP_RGN_CD_2 IS NOT NULL AND DESP_GRP_NUM_2 IS NOT NULL  ) 
);

CREATE INDEX XIE0324_01 ON SPS_MTNG
(
	BULL_CD              ASC,
	SMN_BATCH_NUM        ASC
);

CREATE TABLE SPS_MTNG_ERR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1100005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			      ,
	HERD_NUM              SMALLINT
			      ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MTNG_DATE             DATE
			       NOT NULL ,
	ERROR_CD              CHAR(5)
			       NOT NULL ,
	ERROR_DATA            VARCHAR(200)
			      
);

CREATE TABLE SPS_OBLGN_CHNG
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	APPL_NUM              SMALLINT
			       NOT NULL ,
	CHNG_NUM              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AUTH_PTPT_CD          CHAR(4)
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	RCPNT_PTPT_CD         CHAR(4)
			       NOT NULL ,
	RCPNT_SSN             SMALLINT
			       NOT NULL ,
	RCPNT_APPL_NUM        SMALLINT
			       NOT NULL ,
	SPS_OBLGN_CHNG_CD     CHAR(1)
			       NOT NULL ,
	AMT                   DECIMAL(7,2)
			       NOT NULL ,
	XFER_ANML_CNT         INTEGER
			       NOT NULL ,
	XFER_INSEM_COW_CNT    INTEGER
			       NOT NULL ,
	RSN                   CHAR(50)
			       NOT NULL ,
	RSN_2                 CHAR(50)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0055_01 ON SPS_OBLGN_CHNG
(
	RCPNT_PTPT_CD        ASC,
	RCPNT_SSN            ASC
);

CREATE INDEX XIE0055_01 ON SPS_OBLGN_CHNG
(
	AUTH_PTPT_CD         ASC
);

CREATE INDEX XIE0055_02 ON SPS_OBLGN_CHNG
(
	UPD_TIME             ASC
);

CREATE TABLE SPS_OPTM_ALCN
(
	DESP_DATE             DATE
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	PLAN_USE_DAY          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	SMN_BATCH_NUM         CHAR(6)
			       NOT NULL ,
	DOSE_CNT              SMALLINT
			       NOT NULL 
);

CREATE TABLE SPS_PRDCT_DTR
(
	DESP_DATE             DATE
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	AB_GRP_NUM            INTEGER
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	COW_DTR_CNT           DECIMAL(7,4)
			       NOT NULL ,
	YRLG_DTR_CNT          DECIMAL(7,4)
			       NOT NULL ,
	COW_INSEM_CNT         SMALLINT
			       NOT NULL ,
	YRLG_INSEM_CNT        SMALLINT
			       NOT NULL 
);

CREATE TABLE SPS_QUOTA
(
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	BRD_CD                CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ALCN                  INTEGER
			       NOT NULL ,
	ALCN_UPD_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	TTL                   INTEGER
			       NOT NULL ,
	TTL_UPD_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	ALCN_UPD_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	TTL_UPD_DATE_D        DATE
			      ,
	alcn_upd_date_d       CHAR(18)
			      ,
	alcn_upd_date         CHAR(18)
			      ,
	ttl_upd_date_d        CHAR(18)
			      ,
	ttl_upd_date          CHAR(18)
			      
);

CREATE TABLE SPS_SALE_STOCK_LIST
(
	SPS_MEMB_PARTY_ID     INTEGER
			       NOT NULL ,
	CREATE_TIME           TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LOGIN_PTPT_CD         CHAR(4)
			       NOT NULL ,
	SPS_MEMB_NAME         CHAR(46)
			       NOT NULL ,
	PHONE_NUM             CHAR(25)
			      ,
	EMAIL_ADDR            CHAR(150)
			       NOT NULL ,
	PROVINCE_ID           INTEGER
			       NOT NULL ,
	LOCALITY              CHAR(50)
			       NOT NULL ,
	CALF_IND              CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0774_01 CHECK ( CALF_IND IN ('Y', 'N') ),
	YRLG_IND              CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0774_02 CHECK ( YRLG_IND IN ('Y', 'N') ),
	RISING_TWO_YR_IND     CHAR(1)
			       NOT NULL  DEFAULT 'N' CONSTRAINT  C0774_03 CHECK ( RISING_TWO_YR_IND IN ('Y', 'N') ),
	STOCK_DTL             VARCHAR(255)
			       NOT NULL ,
	CMT                   VARCHAR(255)
			      ,
	EXPIRY_DATE           DATE
			       NOT NULL ,
	COW_IN_CALF_IND       CHAR(1)
			       CONSTRAINT  C0774_05 CHECK ( COW_IN_CALF_IND IN ('Y', 'N') ),
	expiry_date           CHAR(18)
			      ,
	stock_dtl             CHAR(18)
			      ,
	CONSTRAINT C0774_04 CHECK ( CALF_IND = 'Y' OR YRLG_IND = 'Y' OR RISING_TWO_YR_IND = 'Y' OR COW_IN_CALF_IND = 'Y' ) 
);

CREATE TABLE SPS_SAR_BULL_TRGT
(
	DESP_DATE             DATE
			       NOT NULL ,
	RGN_CD                CHAR(4)
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	SMN_ALCN_RGN_ID       INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DTR_TRGT              SMALLINT
			       NOT NULL ,
	COW_INSEM_DTR         DECIMAL(5,3)
			       NOT NULL ,
	YRLG_INSEM_DTR        DECIMAL(5,3)
			       NOT NULL 
);

CREATE TABLE SPS_SAR_TRGT
(
	SAR_ID                INTEGER
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	ENTRY_WK              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRGT_DTR_CNT          SMALLINT
			       NOT NULL 
);

CREATE TABLE SPS_TRGT_CTRL
(
	DESP_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FR_CTRY_TRGT          SMALLINT
			       NOT NULL ,
	JR_CTRY_TRGT          SMALLINT
			       NOT NULL ,
	KC_CTRY_TRGT          SMALLINT
			       NOT NULL ,
	HRD_TRGT              DECIMAL(3,1)
			       NOT NULL ,
	YRLG_TRGT             DECIMAL(3,1)
			       NOT NULL ,
	MAX_DAYS              SMALLINT
			       NOT NULL 
);

CREATE TABLE SR_AREA
(
	RM_AREA_RGN_CD        CHAR(4)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	CD                    SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	RM_AREA_CD            CHAR(2)
			       NOT NULL ,
	PARTY_ID              INTEGER
			       NOT NULL ,
	RM_AREA_CD_N          SMALLINT
			      GENERATED ALWAYS  NOT NULL ,
	ptpt_cd               CHAR(18)
			      ,
	cd                    CHAR(18)
			      ,
	CONSTRAINT SQL040617230831830 CHECK ( "RM_AREA_CD_N" =  (SMALLINT(RM_AREA_CD)) ) 
);

CREATE INDEX XFK0348_04 ON SR_AREA
(
	RM_AREA_RGN_CD       ASC,
	RM_AREA_CD_N         ASC,
	SSN                  ASC
);

CREATE INDEX XIE0348_01 ON SR_AREA
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0348_02 ON SR_AREA
(
	UPD_TIME             ASC
);

CREATE TABLE STAT_DIST
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STAT_RGN_CD           SMALLINT
			       NOT NULL ,
	NAME                  CHAR(30)
			       NOT NULL 
);

CREATE INDEX XFK0372_01 ON STAT_DIST
(
	STAT_RGN_CD          ASC
);

CREATE INDEX XIE0372_01 ON STAT_DIST
(
	UPD_TIME             ASC
);

CREATE TABLE STAT_DIST_AE_AVG
(
	RUN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	STAT_RGN_CD           SMALLINT
			       NOT NULL ,
	STAT_DIST_CD          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_CNT              INTEGER
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	TOP5_PW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_PW_REL           DECIMAL(3,1)
			       NOT NULL ,
	TOP5_BW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_BW_REL           DECIMAL(3,1)
			       NOT NULL ,
	RUN_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	run_date              CHAR(18)
			      ,
	run_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0131_02 ON STAT_DIST_AE_AVG
(
	STAT_DIST_CD         ASC
);

CREATE INDEX XFK0131_03 ON STAT_DIST_AE_AVG
(
	STAT_RGN_CD          ASC
);

CREATE TABLE STAT_DIST_HT_TTL
(
	PD_END_DATE           INTEGER
			       NOT NULL  DEFAULT 0,
	STAT_DIST_CD          SMALLINT
			       NOT NULL ,
	STAT_RGN_CD           SMALLINT
			       NOT NULL ,
	HERD_AE_BRD_CD        SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_CNT              INTEGER
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	VOL                   DECIMAL(9,1)
			       NOT NULL ,
	FAT                   DECIMAL(9,2)
			       NOT NULL ,
	PROT                  DECIMAL(9,2)
			       NOT NULL ,
	LCTS                  DECIMAL(9,2)
			       NOT NULL ,
	SCC                   INTEGER
			       NOT NULL ,
	PD_END_DATE_D         DATE
			       NOT NULL  DEFAULT '0001-01-01',
	pd_end_date_d         CHAR(18)
			      ,
	pd_end_date           CHAR(18)
			      
);

CREATE INDEX XFK0132_01 ON STAT_DIST_HT_TTL
(
	STAT_DIST_CD         ASC
);

CREATE INDEX XFK0132_02 ON STAT_DIST_HT_TTL
(
	STAT_RGN_CD          ASC
);

CREATE TABLE STAT_RGN
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(22)
			       NOT NULL 
);

CREATE TABLE STAT_RGN_AE_AVG
(
	RUN_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	STAT_RGN_CD           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HERD_CNT              INTEGER
			       NOT NULL ,
	COW_CNT               INTEGER
			       NOT NULL ,
	PW                    DECIMAL(5,1)
			       NOT NULL ,
	PW_REL                DECIMAL(3,1)
			       NOT NULL ,
	BW                    DECIMAL(5,1)
			       NOT NULL ,
	BW_REL                DECIMAL(3,1)
			       NOT NULL ,
	TOP5_PW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_PW_REL           DECIMAL(3,1)
			       NOT NULL ,
	TOP5_BW               DECIMAL(5,1)
			       NOT NULL ,
	TOP5_BW_REL           DECIMAL(3,1)
			       NOT NULL ,
	RUN_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	run_date              CHAR(18)
			      ,
	run_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0133_02 ON STAT_RGN_AE_AVG
(
	STAT_RGN_CD          ASC
);

CREATE TABLE STD_AR_CMT
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE STD_BRTH_CMT
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(30)
			       NOT NULL 
);

CREATE TABLE STD_DATA_NAME
(
	FULL_NAME             VARCHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ABBR_NAME             VARCHAR(20)
			       NOT NULL 
);

CREATE TABLE STD_DT_STS
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PRINT_CD              CHAR(2)
			       NOT NULL ,
	DESCR                 CHAR(25)
			       NOT NULL 
);

CREATE TABLE STD_LIC_BULL_RANK
(
	CD                    CHAR(2)
			       NOT NULL ,
	MKTG_BRD_CD           CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	TRGT_UTLSTN           SMALLINT
			       NOT NULL  CONSTRAINT  C0059_01 CHECK ( TRGT_UTLSTN BETWEEN 0 AND 100 )
);

CREATE INDEX XIE0059_01 ON STD_LIC_BULL_RANK
(
	UPD_TIME             ASC
);

CREATE TABLE STD_PARTY_ROLE
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE STD_PTPT_CMT
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE STD_SOF_ERR
(
	CD                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ERR_SEVERITY_CD       CHAR(1)
			       NOT NULL ,
	SOF_ERR_RCPNT_CD      CHAR(1)
			       NOT NULL ,
	DESCR                 CHAR(100)
			       NOT NULL ,
	APPL_CD               CHAR(4)
			       NOT NULL  CONSTRAINT  C0406_01 CHECK ( APPL_CD IN ('SOF','SA') )
);

CREATE TABLE STR_SIDE
(
	CD                    CHAR(1)
			       NOT NULL  CONSTRAINT  C0121_01 CHECK ( CD IN ('E', 'O','B') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE SUBJ_AREA
(
	ENT_NAME              CHAR(40)
			       NOT NULL ,
	AREA_NAME             CHAR(40)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SUPPLIER_EID_DTL
(
	HDR_ID                INTEGER
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EID                   CHAR(16)
			       NOT NULL ,
	BIRTH_ID_PFX          CHAR(4)
			      ,
	BIRTH_ID_YR           SMALLINT
			      ,
	BIRTH_ID_NUM          SMALLINT
			      ,
	AHB_HERD_NUM          INTEGER
			      ,
	AHB_YR                SMALLINT
			      ,
	AHB_NUM               SMALLINT
			      ,
	SIL_NUM               INTEGER
			      ,
	SIL_YR                SMALLINT
			      ,
	SIL_FLOCK_ID          INTEGER
			      ,
	ANML_NUM              INTEGER
			      
);

CREATE INDEX XIE0645_01 ON SUPPLIER_EID_DTL
(
	EID                  ASC
);

CREATE INDEX XIE0645_02 ON SUPPLIER_EID_DTL
(
	BIRTH_ID_PFX         ASC,
	BIRTH_ID_YR          ASC,
	BIRTH_ID_NUM         ASC
);

CREATE INDEX XIE0645_03 ON SUPPLIER_EID_DTL
(
	AHB_HERD_NUM         ASC,
	AHB_YR               ASC,
	AHB_NUM              ASC
);

CREATE INDEX XIE0645_04 ON SUPPLIER_EID_DTL
(
	SIL_NUM              ASC,
	SIL_YR               ASC,
	SIL_FLOCK_ID         ASC
);

CREATE TABLE SUPPLIER_EID_HDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	SUPPLIER_PARTY_ID     INTEGER
			       NOT NULL ,
	FILENAME              VARCHAR(100)
			       NOT NULL ,
	XMIT_TIME             TIMESTAMP
			       NOT NULL ,
	OWNER_PTPT_CD         CHAR(4)
			      
);

CREATE INDEX XIE0644_01 ON SUPPLIER_EID_HDR
(
	OWNER_PTPT_CD        ASC
);

CREATE TABLE SV_TP
(
	CD                    SMALLINT
			       NOT NULL ,
	TRAIT_RCD_SV_IND      DECIMAL(1)
			       NOT NULL ,
	NAME                  CHAR(50)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_MILK_ANALYSIS_CD  SMALLINT
			      
);

CREATE INDEX XIE0122_01 ON SV_TP
(
	UPD_TIME             ASC
);

CREATE TABLE SV_TP_DESCR
(
	CD                    SMALLINT
			       NOT NULL ,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL 
);

CREATE INDEX XIE0717_01 ON SV_TP_DESCR
(
	UPD_TIME             ASC
);

CREATE TABLE SYNC_FRZ_LLL_PD
(
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			       NOT NULL ,
	st_date               CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	CONSTRAINT C0070_02 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE TABLE SYNC_SCALE
(
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL ,
	FRZ_LLL_ST_DATE       DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LLL_PCT               DECIMAL(4,1)
			       NOT NULL  CONSTRAINT  C0064_02 CHECK ( LLL_PCT BETWEEN 0 AND 100 )
);

CREATE TABLE SYNC_SUBM_MODEL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_TECH_NRR          SMALLINT
			       NOT NULL ,
	SYNC_TECH_CD          CHAR(4)
			       NOT NULL  CONSTRAINT  C0065_01 CHECK ( SYNC_TECH_CD IN ('C', 'P') ),
	SYNC_TECH_CD_2        CHAR(4)
			       CONSTRAINT  C0065_02 CHECK ( SYNC_TECH_CD_2 IN ('C', 'P') ),
	SYNC_TECH_CD_3        CHAR(4)
			       CONSTRAINT  C0065_03 CHECK ( SYNC_TECH_CD_3 IN ('C', 'P') ),
	STOCK_CLASS_CD        CHAR(1)
			       NOT NULL  CONSTRAINT  C0065_04 CHECK ( STOCK_CLASS_CD IN ('C', 'Y') ),
	TRTMT_PROC_CD         CHAR(1)
			       CONSTRAINT  C0065_06 CHECK ( TRTMT_PROC_CD IN ('B', 'O') ),
	CONSTRAINT C0065_05 CHECK ( SYNC_TECH_CD_3 IS NULL OR SYNC_TECH_CD_2 IS NOT NULL ) 
);

CREATE INDEX XFK0065_01 ON SYNC_SUBM_MODEL
(
	SYNC_TECH_CD         ASC
);

CREATE INDEX XFK0065_02 ON SYNC_SUBM_MODEL
(
	SYNC_TECH_CD_3       ASC
);

CREATE INDEX XFK0065_03 ON SYNC_SUBM_MODEL
(
	SYNC_TECH_CD_2       ASC
);

CREATE TABLE SYNC_SUBM_RATE
(
	MODEL_ID              INTEGER
			       NOT NULL ,
	MTNG_DAY              SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PCT                   DECIMAL(6,3)
			       NOT NULL  CONSTRAINT  C0066_01 CHECK ( PCT >= 0 )
);

CREATE TABLE SYNC_TECH
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE TABLE_STAKEHOLDER
(
	TABLE_NAME            VARCHAR(128)
			       NOT NULL ,
	POSN_ID               INTEGER
			       NOT NULL ,
	DEPT_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	OWNER_IND             CHAR(1)
			       NOT NULL  CONSTRAINT  C0728_01 CHECK ( OWNER_IND in ('Y', 'N') )
);

CREATE TABLE TAG_BRTH_ID
(
	TAG_MRKG_DATA_ID      INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ORD_PTPT_CD           CHAR(4)
			       NOT NULL ,
	ANML_NUM              INTEGER
			       NOT NULL ,
	BRTH_ID_PFX           CHAR(4)
			      ,
	BRTH_ID_YR            SMALLINT
			      ,
	BRTH_ID_NUM           SMALLINT
			      ,
	ord_ptpt_cd           CHAR(18)
			      ,
	CONSTRAINT C0071_01 CHECK ( BRTH_ID_PFX IS NULL AND BRTH_ID_YR  IS NULL AND BRTH_ID_NUM IS NULL OR BRTH_ID_PFX IS NOT NULL AND BRTH_ID_YR  IS NOT NULL AND BRTH_ID_NUM IS NOT NULL  ) 
);

CREATE INDEX XIE0071_01 ON TAG_BRTH_ID
(
	ORD_PTPT_CD          ASC
);

CREATE TABLE TANK
(
	ID                    INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CYL_LVL_RQRD_IND      CHAR(1)
			       CONSTRAINT  C0307_01 CHECK ( CYL_LVL_RQRD_IND IN ('Y','N') ),
	CYL_CNT               SMALLINT
			      
);

CREATE TABLE TANK_QUADRANT
(
	TANK_ID               INTEGER
			       NOT NULL ,
	QUADRANT_NUM          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TDM_DROPPED_TEST_LOG
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	CALC_TIME             TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RSN_CD                SMALLINT
			       NOT NULL ,
	CONT_GRP              CHAR(2)
			      ,
	ERR_DATA              VARCHAR(20)
			      
);

CREATE TABLE TDM_HERD_TEST_ANML
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	CONTRIB_TEST_DAYS     SMALLINT
			       NOT NULL 
);

CREATE TABLE TDM_SPS_ANML
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	PARTN_DATE            DATE
			       NOT NULL ,
	TEST_DATE             DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TEAM_MATRIX
(
	DEPT_ID               INTEGER
			       NOT NULL ,
	POSN_ID               INTEGER
			       NOT NULL ,
	COMP_ID               INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	COMP_REQ_LVL          SMALLINT
			       CONSTRAINT  C0328_01 CHECK ( COMP_REQ_LVL BETWEEN 1 AND 5 )
);

CREATE TABLE TECH_DIY_SMN_DLVRY
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	VST_NUM               SMALLINT
			       NOT NULL ,
	BULL_CD               INTEGER
			       NOT NULL ,
	BATCH_NUM             CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	STRAW_CNT             INTEGER
			       NOT NULL 
);

CREATE TABLE TECH_PERFORMANCE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	XMIT_SEQ_NUM          INTEGER
			       NOT NULL ,
	DATAMATE_OWNER_PTPT_CD  CHAR(4)
			       NOT NULL ,
	E_EXCHANGE_FMT_TP_CD  CHAR(2)
			       NOT NULL ,
	E_EXCHANGE_RCD_TP_CD  CHAR(3)
			       NOT NULL ,
	CREATE_TIME           TIMESTAMP
			       NOT NULL ,
	WORKING_TECH_PTPT_CD  CHAR(4)
			       NOT NULL ,
	ACTIVITY_DATE         DATE
			       NOT NULL ,
	SUPPL_DATA            CHAR(40)
			      ,
	WARN_CNT              INTEGER
			      ,
	WARN_THRESHOLD        INTEGER
			      ,
	WARN_THRESHOLD_EXCEED_IND  CHAR(1)
			       CONSTRAINT  C0044_01 CHECK ( WARN_THRESHOLD_EXCEED_IND IN ('Y','N') ),
	OVERRIDE_CNT          INTEGER
			      ,
	OVERRIDE_THRESHOLD    INTEGER
			      ,
	OVERRIDE_THRESHOLD_EXCEED_IND  CHAR(1)
			       CONSTRAINT  C0044_02 CHECK ( OVERRIDE_THRESHOLD_EXCEED_IND IN ('Y','N') ),
	QTY_1                 INTEGER
			      ,
	QTY_2                 INTEGER
			      ,
	QTY_3                 INTEGER
			      ,
	QTY_4                 INTEGER
			      ,
	QTY_5                 INTEGER
			      ,
	QTY_6                 INTEGER
			      ,
	SEMEN_BATCH_NUM       CHAR(6)
			      ,
	BULL_CD               INTEGER
			      ,
	HERD_RGN_CD           SMALLINT
			      ,
	HERD_CD               INTEGER
			      ,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	HERD_OWNER_PTPT_CD    CHAR(4)
			      ,
	RM_RGN_CD             CHAR(4)
			       NOT NULL ,
	RM_AREA_CD            SMALLINT
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	CONSTRAINT C0044_04 CHECK ( WARN_CNT IS NULL OR WARN_THRESHOLD IS NULL OR WARN_CNT <= WARN_THRESHOLD AND WARN_THRESHOLD_EXCEED_IND = 'N' OR WARN_CNT > WARN_THRESHOLD AND WARN_THRESHOLD_EXCEED_IND = 'Y' ) ,
	CONSTRAINT C0044_05 CHECK ( OVERRIDE_CNT IS NULL OR OVERRIDE_THRESHOLD IS NULL OR OVERRIDE_CNT <= OVERRIDE_THRESHOLD AND OVERRIDE_THRESHOLD_EXCEED_IND = 'N' OR OVERRIDE_CNT > OVERRIDE_THRESHOLD AND OVERRIDE_THRESHOLD_EXCEED_IND = 'Y' ) 
);

CREATE INDEX XIE0044_01 ON TECH_PERFORMANCE
(
	SUPR_PTPT_CD         ASC
);

CREATE INDEX XIE0044_02 ON TECH_PERFORMANCE
(
	RM_RGN_CD            ASC,
	RM_AREA_CD           ASC,
	DM_AREA_CD           ASC
);

CREATE INDEX XIE0044_03 ON TECH_PERFORMANCE
(
	DM_AREA_CD           ASC
);

CREATE TABLE TECH_PYMT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	PAY_PD                SMALLINT
			       NOT NULL ,
	WORK_SHT_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	TRANS_TP_CD           SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	RGN_CD                DECIMAL(1)
			       NOT NULL ,
	DM_AREA_CD            SMALLINT
			       NOT NULL ,
	RCD_INSEM             SMALLINT
			       NOT NULL ,
	PAY_INSEM             SMALLINT
			       NOT NULL ,
	DIY_CNT               SMALLINT
			       NOT NULL ,
	DIY_PAID              SMALLINT
			       NOT NULL ,
	SUPR_INSEM_CNT        SMALLINT
			       NOT NULL ,
	SUPR_INSEM_PAID       SMALLINT
			       NOT NULL ,
	KM                    SMALLINT
			       NOT NULL ,
	TRAVEL_TIME           SMALLINT
			       NOT NULL ,
	TRAINEE_PYMT_IND      DECIMAL(1)
			       NOT NULL ,
	TECH_PYMT_IND         DECIMAL(1)
			       NOT NULL ,
	SUPR_PYMT_IND         DECIMAL(1)
			       NOT NULL ,
	DLVRY_PYMT_IND        DECIMAL(1)
			       NOT NULL ,
	WORK_SHT_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PROC_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	proc_date             CHAR(18)
			      ,
	proc_date_d           CHAR(18)
			      ,
	work_sht_date         CHAR(18)
			      ,
	work_sht_date_d       CHAR(18)
			      
);

CREATE INDEX XIE0394_01 ON TECH_PYMT
(
	PTPT_CD              ASC,
	WORK_SHT_DATE        ASC
);

CREATE INDEX XIE0394_02 ON TECH_PYMT
(
	PTPT_CD              ASC,
	TRANS_TP_CD          ASC,
	WORK_SHT_DATE        ASC
);

CREATE TABLE TECH_SEMEN_BATCH
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 200000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TECH_PTPT_CD          CHAR(4)
			       NOT NULL ,
	SEMEN_BATCH_NUM       CHAR(6)
			       NOT NULL ,
	SEMEN_COLLN_YEAR      SMALLINT
			      ,
	BULL_CD               INTEGER
			       NOT NULL ,
	CORE_PROD_CD          CHAR(4)
			       NOT NULL ,
	SEMEN_PRESERV_CD      CHAR(4)
			       NOT NULL ,
	semen_preserv_cd      CHAR(18)
			      
);

CREATE TABLE TECH_SEMEN_STOCK_TRANS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 290000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  DATE
			       NOT NULL ,
	HHU_SERIAL_NUM        CHAR(12)
			      ,
	STRAW_CNT             INTEGER
			       NOT NULL ,
	OTHER_PTPT_CD         CHAR(4)
			      ,
	OTHER_NAME            CHAR(36)
			      ,
	TRANS_CD              CHAR(1)
			       NOT NULL ,
	TECH_SEMEN_BATCH_ID   INTEGER
			       NOT NULL 
);

CREATE TABLE TECH_TRN_RSLT
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_DATE               INTEGER
			       NOT NULL  DEFAULT 0,
	END_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	INST_PTPT_CD          CHAR(4)
			       NOT NULL ,
	WK_1_PASS_IND         CHAR(1)
			       NOT NULL ,
	WK_2_PASS_IND         CHAR(1)
			       NOT NULL ,
	COMMUNICATION         DECIMAL(1)
			       NOT NULL ,
	TECHNIQUE             DECIMAL(1)
			       NOT NULL ,
	PERSON                DECIMAL(1)
			       NOT NULL ,
	HYGIENE               DECIMAL(1)
			       NOT NULL ,
	TEMPER                DECIMAL(1)
			       NOT NULL ,
	RCD_MDC               DECIMAL(1)
			       NOT NULL ,
	STOCKMANSHIP          DECIMAL(1)
			       NOT NULL ,
	THEORY                DECIMAL(1)
			       NOT NULL ,
	APPROACH              DECIMAL(1)
			       NOT NULL ,
	DF_HAND               DECIMAL(1)
			       NOT NULL ,
	WK_1_MON_1            SMALLINT
			       NOT NULL ,
	WK_1_MON_2            SMALLINT
			       NOT NULL ,
	WK_1_MON_3            SMALLINT
			       NOT NULL ,
	WK_1_MON_4            SMALLINT
			       NOT NULL ,
	WK_1_MON_5            SMALLINT
			       NOT NULL ,
	WK_2_MON_1            SMALLINT
			       NOT NULL ,
	WK_2_MON_2            SMALLINT
			       NOT NULL ,
	WK_2_MON_3            SMALLINT
			       NOT NULL ,
	WK_2_MON_4            SMALLINT
			       NOT NULL ,
	WK_2_MON_5            SMALLINT
			       NOT NULL ,
	WK_1_TUE_1            SMALLINT
			       NOT NULL ,
	WK_1_TUE_2            SMALLINT
			       NOT NULL ,
	WK_1_TUE_3            SMALLINT
			       NOT NULL ,
	WK_1_TUE_4            SMALLINT
			       NOT NULL ,
	WK_1_TUE_5            SMALLINT
			       NOT NULL ,
	WK_2_TUE_1            SMALLINT
			       NOT NULL ,
	WK_2_TUE_2            SMALLINT
			       NOT NULL ,
	WK_2_TUE_3            SMALLINT
			       NOT NULL ,
	WK_2_TUE_4            SMALLINT
			       NOT NULL ,
	WK_2_TUE_5            SMALLINT
			       NOT NULL ,
	WK_1_WED_1            SMALLINT
			       NOT NULL ,
	WK_1_WED_2            SMALLINT
			       NOT NULL ,
	WK_1_WED_3            SMALLINT
			       NOT NULL ,
	WK_1_WED_4            SMALLINT
			       NOT NULL ,
	WK_1_WED_5            SMALLINT
			       NOT NULL ,
	WK_2_WED_1            SMALLINT
			       NOT NULL ,
	WK_2_WED_2            SMALLINT
			       NOT NULL ,
	WK_2_WED_3            SMALLINT
			       NOT NULL ,
	WK_2_WED_4            SMALLINT
			       NOT NULL ,
	WK_2_WED_5            SMALLINT
			       NOT NULL ,
	WK_1_THU_1            SMALLINT
			       NOT NULL ,
	WK_1_THU_2            SMALLINT
			       NOT NULL ,
	WK_1_THU_3            SMALLINT
			       NOT NULL ,
	WK_1_THU_4            SMALLINT
			       NOT NULL ,
	WK_1_THU_5            SMALLINT
			       NOT NULL ,
	WK_2_THU_1            SMALLINT
			       NOT NULL ,
	WK_2_THU_2            SMALLINT
			       NOT NULL ,
	WK_2_THU_3            SMALLINT
			       NOT NULL ,
	WK_2_THU_4            SMALLINT
			       NOT NULL ,
	WK_2_THU_5            SMALLINT
			       NOT NULL ,
	WK_1_FRI_1            SMALLINT
			       NOT NULL ,
	WK_1_FRI_2            SMALLINT
			       NOT NULL ,
	WK_1_FRI_3            SMALLINT
			       NOT NULL ,
	WK_1_FRI_4            SMALLINT
			       NOT NULL ,
	WK_1_FRI_5            SMALLINT
			       NOT NULL ,
	WK_2_FRI_1            SMALLINT
			       NOT NULL ,
	WK_2_FRI_2            SMALLINT
			       NOT NULL ,
	WK_2_FRI_3            SMALLINT
			       NOT NULL ,
	WK_2_FRI_4            SMALLINT
			       NOT NULL ,
	WK_2_FRI_5            SMALLINT
			       NOT NULL ,
	WORKS_NAME            CHAR(20)
			       NOT NULL ,
	ST_DATE_D             DATE
			      ,
	END_DATE_D            DATE
			      ,
	st_date               CHAR(18)
			      ,
	st_date_d             CHAR(18)
			      ,
	end_date              CHAR(18)
			      ,
	end_date_d            CHAR(18)
			      
);

CREATE INDEX XFK0379_02 ON TECH_TRN_RSLT
(
	INST_PTPT_CD         ASC
);

CREATE TABLE TECH_TRN_SCHED
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	ACCOM_RQRD_IND        CHAR(1)
			       NOT NULL ,
	WORKS_NAME            CHAR(20)
			       NOT NULL ,
	DATE_D                DATE
			      ,
	date_d                CHAR(18)
			      
);

CREATE TABLE TECH_VST_CNSTR
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	EMPL_PTPT_CD          CHAR(4)
			       NOT NULL ,
	AB_SCRT_PAD_ID        INTEGER
			       NOT NULL ,
	AB_EMPL_TP_CD         CHAR(3)
			       NOT NULL  CONSTRAINT  C0150_01 CHECK ( AB_EMPL_TP_CD IN ('ABT', 'DEL') ),
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAND_IND              CHAR(1)
			       NOT NULL  CONSTRAINT  C0150_02 CHECK ( MAND_IND IN ('Y', 'N') )
);

CREATE TABLE TECH_WORK_SHT
(
	SSN                   SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	RCD_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	RCD_TIME              INTEGER
			       NOT NULL ,
	VFY_DATE              INTEGER
			       NOT NULL  DEFAULT 0,
	VFY_TIME              INTEGER
			       NOT NULL ,
	PROC_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	WORK_SHT_STS_CD       CHAR(1)
			       NOT NULL ,
	RCD_DATE_D            DATE
			       NOT NULL  DEFAULT '0001-01-01',
	VFY_DATE_D            DATE
			      ,
	PROC_DATE_D           DATE
			      ,
	proc_date             CHAR(18)
			      ,
	rcd_date_d            CHAR(18)
			      ,
	proc_date_d           CHAR(18)
			      ,
	vfy_date_d            CHAR(18)
			      ,
	rcd_date              CHAR(18)
			      ,
	vfy_date              CHAR(18)
			      
);

CREATE INDEX XFK0392_01 ON TECH_WORK_SHT
(
	PTPT_CD              ASC
);

CREATE INDEX XIE0392_01 ON TECH_WORK_SHT
(
	WORK_SHT_STS_CD      ASC
);

CREATE TABLE TECH_WORK_SHT_LINE
(
	TECH_WORK_SHT_SSN     SMALLINT
			       NOT NULL ,
	TECH_WORK_SHT_NUM     INTEGER
			       NOT NULL ,
	LINE_NUM              DECIMAL(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	INSEM_CNT             SMALLINT
			       NOT NULL ,
	SUPR_PTPT_CD          CHAR(4)
			       NOT NULL ,
	DIY_CNT               SMALLINT
			       NOT NULL ,
	KM                    SMALLINT
			       NOT NULL ,
	TRAVEL_TIME           SMALLINT
			       NOT NULL ,
	TECH_ACTY_CD          DECIMAL(1)
			       NOT NULL ,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XFK0393_01 ON TECH_WORK_SHT_LINE
(
	SUPR_PTPT_CD         ASC
);

CREATE TABLE TECH_WORKLOAD
(
	PTPT_CD               CHAR(4)
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PREF_ST_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	PREF_END_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	PREF_COW_CNT          SMALLINT
			       NOT NULL ,
	VST_LMT               SMALLINT
			       NOT NULL ,
	COW_LMT               SMALLINT
			       NOT NULL ,
	GRP_SIZE              SMALLINT
			       NOT NULL ,
	PREF_ST_DATE_D        DATE
			      ,
	PREF_END_DATE_D       DATE
			      ,
	pref_st_date_d        CHAR(18)
			      ,
	pref_end_date_d       CHAR(18)
			      ,
	pref_st_date          CHAR(18)
			      ,
	pref_end_date         CHAR(18)
			      
);

CREATE TABLE TEST_HERDS
(
	MAP_REF               CHAR(15)
			      ,
	HERD_NUM              INTEGER
			      
);

CREATE TABLE TEST_VAR
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SHORT_NAME            CHAR(18)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	SAMPLE_MATTER_CD      CHAR(4)
			       NOT NULL ,
	ANC_DEPEND_IND        CHAR(1)
			       NOT NULL  CONSTRAINT  C0842_01 CHECK ( ANC_DEPEND_IND IN ('Y','N') ),
	PREF_LAB_PARTY_ID     INTEGER
			       NOT NULL ,
	EXT_LAB_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0842_02 CHECK ( EXT_LAB_IND IN ('Y','N') ),
	EXPECT_TURNAROUND     SMALLINT
			       NOT NULL ,
	DISEASE_IND           CHAR(1)
			       NOT NULL  CONSTRAINT  C0842_03 CHECK ( DISEASE_IND IN ('Y', 'N') ),
	CATTLE_LOCUS_CD       CHAR(3)
			      ,
	GM_CORE_PROD_CD       CHAR(5)
			      
);

CREATE TABLE THIRD_PARTY_PGM_EXEC_AUTH
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	PGM_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TOP_ASSESS
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_17_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_17_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_18_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_18_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_19_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_19_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_20_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_20_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_21_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_21_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_22_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_22_MAR          CHAR(1)
			       NOT NULL ,
	TRAIT_23              SMALLINT
			       NOT NULL ,
	TRAIT_24              SMALLINT
			       NOT NULL ,
	TRAIT_25              SMALLINT
			       NOT NULL ,
	TRAIT_26              SMALLINT
			       NOT NULL ,
	TRAIT_27_OCT          CHAR(1)
			       NOT NULL ,
	TRAIT_27_MAR          CHAR(1)
			       NOT NULL ,
	TOP_CMT_CD_OCT        CHAR(2)
			       NOT NULL ,
	TOP_CMT_CD_MAR        CHAR(2)
			       NOT NULL 
);

CREATE INDEX XFK0263_02 ON TOP_ASSESS
(
	TOP_CMT_CD_OCT       ASC
);

CREATE INDEX XFK0263_03 ON TOP_ASSESS
(
	TOP_CMT_CD_MAR       ASC
);

CREATE TABLE TOP_ASSESS_CMT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE TOP_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	ADAPT_BV              DECIMAL(4,3)
			       NOT NULL ,
	ADAPT_BV_REL          DECIMAL(3,1)
			       NOT NULL ,
	SHED_TEMPERAMENT_BV   DECIMAL(4,3)
			       NOT NULL ,
	SHED_TEMPERAMENT_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	MILK_SPEED_BV         DECIMAL(4,3)
			       NOT NULL ,
	MILK_SPEED_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	OVERALL_OPINION_BV    DECIMAL(4,3)
			       NOT NULL ,
	OVERALL_OPINION_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	STATURE_BV            DECIMAL(4,3)
			       NOT NULL ,
	STATURE_BV_REL        DECIMAL(3,1)
			       NOT NULL ,
	CAPACITY_BV           DECIMAL(4,3)
			       NOT NULL ,
	CAPACITY_BV_REL       DECIMAL(3,1)
			       NOT NULL ,
	RUMP_ANGLE_BV         DECIMAL(4,3)
			       NOT NULL ,
	RUMP_ANGLE_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	RUMP_WIDTH_BV         DECIMAL(4,3)
			       NOT NULL ,
	RUMP_WIDTH_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	LEGS_BV               DECIMAL(4,3)
			       NOT NULL ,
	LEGS_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	UDDER_SUPPORT_BV      DECIMAL(4,3)
			       NOT NULL ,
	UDDER_SUPPORT_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	FRONT_UDDER_BV        DECIMAL(4,3)
			       NOT NULL ,
	FRONT_UDDER_BV_REL    DECIMAL(3,1)
			       NOT NULL ,
	REAR_UDDER_BV         DECIMAL(4,3)
			       NOT NULL ,
	REAR_UDDER_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	FRONT_TEAT_BV         DECIMAL(4,3)
			       NOT NULL ,
	FRONT_TEAT_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	REAR_TEAT_BV          DECIMAL(4,3)
			       NOT NULL ,
	REAR_TEAT_BV_REL      DECIMAL(3,1)
			       NOT NULL ,
	UDDER_OVERALL_BV      DECIMAL(4,3)
			       NOT NULL ,
	UDDER_OVERALL_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	DAIRY_CONF_BV         DECIMAL(4,3)
			       NOT NULL ,
	DAIRY_CONF_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	ADAPT_DTR_CONTRIB     INTEGER
			       NOT NULL ,
	SHED_TEMPERAMENT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	MILK_SPEED_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	OVERALL_OPINION_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	STATURE_DTR_CONTRIB   INTEGER
			       NOT NULL ,
	CAPACITY_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	RUMP_ANGLE_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	RUMP_WIDTH_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	LEGS_DTR_CONTRIB      INTEGER
			       NOT NULL ,
	UDDER_SUPPORT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	FRONT_UDDER_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	REAR_UDDER_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	FRONT_TEAT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	REAR_TEAT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	UDDER_OVERALL_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	DAIRY_CONF_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	HERD_CNT              INTEGER
			       NOT NULL ,
	DTR_CNT               INTEGER
			       NOT NULL ,
	STATURE_BV_NZ         DECIMAL(4,3)
			      ,
	STATURE_BV_REL_NZ     DECIMAL(3,1)
			      ,
	CAPACITY_BV_NZ        DECIMAL(4,3)
			      ,
	CAPACITY_BV_REL_NZ    DECIMAL(3,1)
			      ,
	RUMP_ANGLE_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_ANGLE_BV_REL_NZ  DECIMAL(3,1)
			      ,
	RUMP_WIDTH_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_WIDTH_BV_REL_NZ  DECIMAL(3,1)
			      ,
	LEGS_BV_NZ            DECIMAL(4,3)
			      ,
	LEGS_BV_REL_NZ        DECIMAL(3,1)
			      ,
	UDDER_SUPPORT_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_SUPPORT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_UDDER_BV_NZ     DECIMAL(4,3)
			      ,
	FRONT_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	REAR_UDDER_BV_NZ      DECIMAL(4,3)
			      ,
	REAR_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_TEAT_BV_NZ      DECIMAL(4,3)
			      ,
	FRONT_TEAT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	REAR_TEAT_BV_NZ       DECIMAL(4,3)
			      ,
	REAR_TEAT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	UDDER_OVERALL_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_OVERALL_BV_REL_NZ  DECIMAL(3,1)
			      ,
	DAIRY_CONF_BV_NZ      DECIMAL(4,3)
			      ,
	DAIRY_CONF_BV_REL_NZ  DECIMAL(3,1)
			      
);

CREATE TABLE TOP_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ADAPT_BV              DECIMAL(4,3)
			       NOT NULL ,
	ADAPT_BV_REL          DECIMAL(3,1)
			       NOT NULL ,
	SHED_TEMPERAMENT_BV   DECIMAL(4,3)
			       NOT NULL ,
	SHED_TEMPERAMENT_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	MILK_SPEED_BV         DECIMAL(4,3)
			       NOT NULL ,
	MILK_SPEED_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	OVERALL_OPINION_BV    DECIMAL(4,3)
			       NOT NULL ,
	OVERALL_OPINION_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	STATURE_BV            DECIMAL(4,3)
			       NOT NULL ,
	STATURE_BV_REL        DECIMAL(3,1)
			       NOT NULL ,
	CAPACITY_BV           DECIMAL(4,3)
			       NOT NULL ,
	CAPACITY_BV_REL       DECIMAL(3,1)
			       NOT NULL ,
	RUMP_ANGLE_BV         DECIMAL(4,3)
			       NOT NULL ,
	RUMP_ANGLE_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	RUMP_WIDTH_BV         DECIMAL(4,3)
			       NOT NULL ,
	RUMP_WIDTH_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	LEGS_BV               DECIMAL(4,3)
			       NOT NULL ,
	LEGS_BV_REL           DECIMAL(3,1)
			       NOT NULL ,
	UDDER_SUPPORT_BV      DECIMAL(4,3)
			       NOT NULL ,
	UDDER_SUPPORT_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	FRONT_UDDER_BV        DECIMAL(4,3)
			       NOT NULL ,
	FRONT_UDDER_BV_REL    DECIMAL(3,1)
			       NOT NULL ,
	REAR_UDDER_BV         DECIMAL(4,3)
			       NOT NULL ,
	REAR_UDDER_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	FRONT_TEAT_BV         DECIMAL(4,3)
			       NOT NULL ,
	FRONT_TEAT_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	REAR_TEAT_BV          DECIMAL(4,3)
			       NOT NULL ,
	REAR_TEAT_BV_REL      DECIMAL(3,1)
			       NOT NULL ,
	UDDER_OVERALL_BV      DECIMAL(4,3)
			       NOT NULL ,
	UDDER_OVERALL_BV_REL  DECIMAL(3,1)
			       NOT NULL ,
	DAIRY_CONF_BV         DECIMAL(4,3)
			       NOT NULL ,
	DAIRY_CONF_BV_REL     DECIMAL(3,1)
			       NOT NULL ,
	ADAPT_DTR_CONTRIB     INTEGER
			       NOT NULL ,
	SHED_TEMPERAMENT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	MILK_SPEED_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	OVERALL_OPINION_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	STATURE_DTR_CONTRIB   INTEGER
			       NOT NULL ,
	CAPACITY_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	RUMP_ANGLE_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	RUMP_WIDTH_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	LEGS_DTR_CONTRIB      INTEGER
			       NOT NULL ,
	UDDER_SUPPORT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	FRONT_UDDER_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	REAR_UDDER_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	FRONT_TEAT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	REAR_TEAT_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	UDDER_OVERALL_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	DAIRY_CONF_DTR_CONTRIB  INTEGER
			       NOT NULL ,
	HERD_CNT              INTEGER
			       NOT NULL ,
	DTR_CNT               INTEGER
			       NOT NULL ,
	STATURE_BV_NZ         DECIMAL(4,3)
			      ,
	STATURE_BV_REL_NZ     DECIMAL(3,1)
			      ,
	CAPACITY_BV_NZ        DECIMAL(4,3)
			      ,
	CAPACITY_BV_REL_NZ    DECIMAL(3,1)
			      ,
	RUMP_ANGLE_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_ANGLE_BV_REL_NZ  DECIMAL(3,1)
			      ,
	RUMP_WIDTH_BV_NZ      DECIMAL(4,3)
			      ,
	RUMP_WIDTH_BV_REL_NZ  DECIMAL(3,1)
			      ,
	LEGS_BV_NZ            DECIMAL(4,3)
			      ,
	LEGS_BV_REL_NZ        DECIMAL(3,1)
			      ,
	UDDER_SUPPORT_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_SUPPORT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_UDDER_BV_NZ     DECIMAL(4,3)
			      ,
	FRONT_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	REAR_UDDER_BV_NZ      DECIMAL(4,3)
			      ,
	REAR_UDDER_BV_REL_NZ  DECIMAL(3,1)
			      ,
	FRONT_TEAT_BV_NZ      DECIMAL(4,3)
			      ,
	FRONT_TEAT_BV_REL_NZ  DECIMAL(3,1)
			      ,
	REAR_TEAT_BV_NZ       DECIMAL(4,3)
			      ,
	REAR_TEAT_BV_REL_NZ   DECIMAL(3,1)
			      ,
	UDDER_OVERALL_BV_NZ   DECIMAL(4,3)
			      ,
	UDDER_OVERALL_BV_REL_NZ  DECIMAL(3,1)
			      ,
	DAIRY_CONF_BV_NZ      DECIMAL(4,3)
			      ,
	DAIRY_CONF_BV_REL_NZ  DECIMAL(3,1)
			      
);

CREATE TABLE TOP_CMT
(
	CD                    CHAR(2)
			       NOT NULL ,
	DESCR                 CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TOP_CMT_REF
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE TOP_INSP
(
	NOM_ORG_PARTY_ID      INTEGER
			       NOT NULL ,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	NOM_DATE              DATE
			       NOT NULL ,
	SERIAL_NUM            CHAR(20)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	SSN                   SMALLINT
			       NOT NULL ,
	INSP_ORG_PARTY_ID     INTEGER
			      ,
	EST_INSP_3YR_CNT      SMALLINT
			      ,
	FRMR_LIST_2YR_CNT     SMALLINT
			      ,
	DWNLD_DATE            DATE
			      ,
	DWNLD_2YR_CNT         SMALLINT
			      ,
	DWNLD_3YR_CNT         SMALLINT
			      ,
	ACTL_INSP_DATE        DATE
			      ,
	ACTL_INSP_ST_TIME     TIMESTAMP
			      ,
	ACTL_INSP_END_TIME    TIMESTAMP
			      ,
	ACTL_INSP_2YR_CNT     SMALLINT
			      ,
	HHU_ALCN_ST_DATE      DATE
			      ,
	ACTL_INSP_3YR_CNT     SMALLINT
			      
);

CREATE TABLE TOP_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	AVG_ADAPT_BV          DECIMAL(4,3)
			      ,
	AVG_SHED_TEMPERAMENT_BV  DECIMAL(4,3)
			      ,
	AVG_MILK_SPEED_BV     DECIMAL(4,3)
			      ,
	AVG_OVERALL_OPINION_BV  DECIMAL(4,3)
			      ,
	AVG_STATURE_BV        DECIMAL(4,3)
			      ,
	AVG_CAPACITY_BV       DECIMAL(4,3)
			      ,
	AVG_RUMP_ANGLE_BV     DECIMAL(4,3)
			      ,
	AVG_RUMP_WIDTH_BV     DECIMAL(4,3)
			      ,
	AVG_LEGS_BV           DECIMAL(4,3)
			      ,
	AVG_UDDER_SUPPORT_BV  DECIMAL(4,3)
			      ,
	AVG_FRONT_UDDER_BV    DECIMAL(4,3)
			      ,
	AVG_REAR_UDDER_BV     DECIMAL(4,3)
			      ,
	AVG_FRONT_TEAT_BV     DECIMAL(4,3)
			      ,
	AVG_REAR_TEAT_BV      DECIMAL(4,3)
			      ,
	AVG_UDDER_OVERALL_BV  DECIMAL(4,3)
			      ,
	AVG_DAIRY_CONF_BV     DECIMAL(4,3)
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE TOP_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_ADAPT_BV          DECIMAL(4,3)
			       NOT NULL ,
	AVG_SHED_TEMPERAMENT_BV  DECIMAL(4,3)
			       NOT NULL ,
	AVG_MILK_SPEED_BV     DECIMAL(4,3)
			       NOT NULL ,
	AVG_OVERALL_OPINION_BV  DECIMAL(4,3)
			       NOT NULL ,
	AVG_STATURE_BV        DECIMAL(4,3)
			       NOT NULL ,
	AVG_CAPACITY_BV       DECIMAL(4,3)
			       NOT NULL ,
	AVG_RUMP_ANGLE_BV     DECIMAL(4,3)
			       NOT NULL ,
	AVG_RUMP_WIDTH_BV     DECIMAL(4,3)
			       NOT NULL ,
	AVG_LEGS_BV           DECIMAL(4,3)
			       NOT NULL ,
	AVG_UDDER_SUPPORT_BV  DECIMAL(4,3)
			       NOT NULL ,
	AVG_FRONT_UDDER_BV    DECIMAL(4,3)
			       NOT NULL ,
	AVG_REAR_UDDER_BV     DECIMAL(4,3)
			       NOT NULL ,
	AVG_FRONT_TEAT_BV     DECIMAL(4,3)
			       NOT NULL ,
	AVG_REAR_TEAT_BV      DECIMAL(4,3)
			       NOT NULL ,
	AVG_UDDER_OVERALL_BV  DECIMAL(4,3)
			       NOT NULL ,
	AVG_DAIRY_CONF_BV     DECIMAL(4,3)
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE TOT_LONG_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	TOT_LONG_BV           INTEGER
			       NOT NULL ,
	TOT_LONG_BV_REL       DECIMAL(3,1)
			       NOT NULL ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT_ALL           INTEGER
			      ,
	TOT_LONG_BV_NZ        INTEGER
			      ,
	TOT_LONG_BV_REL_NZ    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	DTR_CNT_SURV          INTEGER
			      
);

CREATE TABLE TOT_LONG_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TOT_LONG_BV           INTEGER
			       NOT NULL ,
	TOT_LONG_BV_REL       DECIMAL(3,1)
			       NOT NULL ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT_ALL           INTEGER
			      ,
	TOT_LONG_BV_NZ        INTEGER
			      ,
	TOT_LONG_BV_REL_NZ    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	DTR_CNT_SURV          INTEGER
			      
);

CREATE INDEX XIE0161_01 ON TOT_LONG_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE TABLE TOT_LONG_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			      ,
	AVG_TOT_LONG_BV       INTEGER
			      ,
	ANML_CNT              INTEGER
			      
);

CREATE TABLE TOT_LONG_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_TOT_LONG_BV       INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE TRACE_AHB_NUM
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 200
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AHB_HERD_NUM          INTEGER
			       NOT NULL ,
	YR                    SMALLINT
			      ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              DATE
			       NOT NULL  DEFAULT CURRENT DATE
);

CREATE INDEX XIE0633_01 ON TRACE_AHB_NUM
(
	UPD_TIME             ASC
);

CREATE INDEX XIE0633_02 ON TRACE_AHB_NUM
(
	AHB_HERD_NUM         ASC,
	YR                   ASC,
	NUM                  ASC
);

CREATE TABLE TRACE_ANML_NOTE
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  VARCHAR(500)
			       NOT NULL 
);

CREATE TABLE TRACE_BRTH_ID
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PFX                   CHAR(4)
			       NOT NULL ,
	YR                    SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	RCD_DATE              DATE
			       NOT NULL  DEFAULT CURRENT DATE
);

CREATE INDEX XIE0634_01 ON TRACE_BRTH_ID
(
	UPD_TIME             ASC
);

CREATE TABLE TRACE_CLIENT_ADDR
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	ADDR_DTL              VARCHAR(200)
			       NOT NULL 
);

CREATE TABLE TRACE_DIARY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	DATE                  DATE
			       NOT NULL ,
	TIME                  TIME
			      ,
	SUBJECT               VARCHAR(50)
			      ,
	DESCR                 VARCHAR(250)
			      ,
	PARENT_ID             INTEGER
			      
);

CREATE INDEX XFK0911_02 ON TRACE_DIARY
(
	PARENT_ID            ASC
);

CREATE INDEX XIE0911_01 ON TRACE_DIARY
(
	PARTY_ID             ASC,
	DATE                 ASC,
	TIME                 ASC
);

CREATE TABLE TRACE_ELEMENT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NAME                  CHAR(30)
			       NOT NULL ,
	UOM_CD                CHAR(4)
			       NOT NULL ,
	SUBOPTIMAL_LVL        INTEGER
			      ,
	OPTIMAL_LVL           INTEGER
			      ,
	RPRT_CMT              VARCHAR(200)
			      ,
	HILL_LAB_TEST_CD      CHAR(32)
			      
);

CREATE TABLE TRACE_ELEMENT_DESP
(
	ID                    INTEGER
			      GENERATED ALWAYS AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LIC_REF               CHAR(32)
			       NOT NULL ,
	QUOTE_NUM             INTEGER
			       NOT NULL ,
	ORDER_NUM             INTEGER
			       NOT NULL ,
	DESP_DATE             DATE
			       NOT NULL 
);

CREATE TABLE TRACE_ELEMENT_DESP_SAMPLE
(
	TRACE_ELEMENT_DESP_ID  INTEGER
			       NOT NULL ,
	TRACE_ELEMENT_TEST_ID  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	HT_VISIT_DATE         DATE
			       NOT NULL 
);

CREATE TABLE TRACE_ELEMENT_JOB
(
	ID                    INTEGER
			      GENERATED ALWAYS AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAB_NAME              CHAR(40)
			      ,
	FILE_FMT              CHAR(20)
			      ,
	LAB_JOB_NUM           INTEGER
			      ,
	RCD_DATE              DATE
			      ,
	FILE_CREATE_DATE      DATE
			      ,
	SUBMIT_NAME           CHAR(40)
			      ,
	CLIENT_NAME           CHAR(40)
			      ,
	CHARGE_NAME           CHAR(40)
			      ,
	QUOTE_NUM             INTEGER
			      ,
	ORDER_NUM             INTEGER
			      ,
	CLIENT_REF            CHAR(32)
			      ,
	ANALYST_CMT           VARCHAR(200)
			      
);

CREATE TABLE TRACE_ELEMENT_RSLT
(
	TRACE_ELEMENT_JOB_ID  INTEGER
			       NOT NULL ,
	TRACE_ELEMENT_TEST_ID  INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEST_RSLT             VARCHAR(128)
			       NOT NULL ,
	TEST_CMT              VARCHAR(200)
			      ,
	UOM_CD                CHAR(4)
			      ,
	TEST_VALUE            DECIMAL(5,4)
			      ,
	CONSTRAINT C0837_01 CHECK ( TEST_VALUE IS NULL AND UOM_CD IS NULL OR TEST_VALUE IS NOT NULL AND UOM_CD IS NOT NULL ) 
);

CREATE INDEX XIE0837_01 ON TRACE_ELEMENT_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE TRACE_ELEMENT_SAMPLE_REJ_RSN
(
	ID                    SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE TRACE_ELEMENT_TEST
(
	ID                    INTEGER
			      GENERATED ALWAYS AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	TRACE_ELEMENT_CD      CHAR(4)
			       NOT NULL ,
	VISIT_NUM             SMALLINT
			      ,
	SSN                   INTEGER
			       NOT NULL ,
	SAMPLE_REJ_DATE       DATE
			      ,
	UPD_USER_ID           CHAR(8)
			       NOT NULL  DEFAULT USER,
	SAMPLE_REJ_RSN_ID     SMALLINT
			      ,
	HERD_TEST_CHANGE_IND  CHAR(1)
			       CONSTRAINT  C0826_02 CHECK ( HERD_TEST_CHANGE_IND IN ('Y','N') ),
	visit_num             CHAR(18)
			      ,
	CONSTRAINT C0826_01 CHECK ( SAMPLE_REJ_DATE IS NULL AND SAMPLE_REJ_RSN_ID IS NULL OR SAMPLE_REJ_DATE IS NOT NULL AND SAMPLE_REJ_RSN_ID IS NOT NULL ) 
);

CREATE TABLE TRACE_HLTH_TREATMENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TREATMENT_DATE        DATE
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	HLTH_PROD_CD          CHAR(6)
			      ,
	DOSE                  INTEGER
			       NOT NULL ,
	DOSE_UOM_CD           CHAR(4)
			       NOT NULL ,
	PROP_ID               INTEGER
			       NOT NULL ,
	REC_MEAT_WH_DAYS      SMALLINT
			       NOT NULL ,
	REC_MILK_WH_DAYS      SMALLINT
			       NOT NULL ,
	NON_STD_HLTH_PROD     CHAR(50)
			       NOT NULL ,
	CMT                   CHAR(50)
			       NOT NULL ,
	INVC_ID               INTEGER
			      ,
	LINE_NUM              INTEGER
			      ,
	CONSTRAINT C0638_01 CHECK ( HLTH_PROD_CD IS NOT NULL OR NON_STD_HLTH_PROD IS NOT NULL ) ,
	CONSTRAINT C0638_02 CHECK ( INVC_ID IS NULL AND LINE_NUM IS NULL OR INVC_ID IS NOT NULL AND LINE_NUM IS NOT NULL ) 
);

CREATE TABLE TRACE_INVC
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTY_ID              INTEGER
			       NOT NULL ,
	INVC_DATE             DATE
			       NOT NULL ,
	CUST_PROD_CLASS_CD    CHAR(4)
			      
);

CREATE TABLE TRACE_INVC_LINE
(
	INVC_ID               INTEGER
			       NOT NULL ,
	LINE_NUM              INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PROD_CD               CHAR(10)
			       NOT NULL ,
	QUANTITY              INTEGER
			       NOT NULL ,
	TAG_ID_YR             SMALLINT
			      ,
	DESCR                 VARCHAR(500)
			      ,
	UNIT_PRICE            DECIMAL(7,2)
			      
);

CREATE TABLE TRACE_MVMT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_KEY              INTEGER
			       NOT NULL ,
	MVMT_DATE             DATE
			       NOT NULL ,
	RCD_DATE              DATE
			       NOT NULL ,
	RCD_PARTY_ID          INTEGER
			       NOT NULL ,
	MVMT_TP_CD            CHAR(10)
			       NOT NULL ,
	PROP_ID               INTEGER
			       NOT NULL ,
	INVC_ID               INTEGER
			      ,
	LINE_NUM              INTEGER
			      ,
	MGMT_NUM              INTEGER
			      ,
	invc_id               CHAR(18)
			      ,
	line_num              CHAR(18)
			      ,
	CONSTRAINT C0641_01 CHECK ( INVC_ID IS NULL AND LINE_NUM IS NULL OR INVC_ID IS NOT NULL AND LINE_NUM IS NOT NULL ) 
);

CREATE INDEX XIE0641_01 ON TRACE_MVMT
(
	UPD_TIME             ASC
);

CREATE TABLE TRACE_PROD
(
	CD                    CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UNIT_PRICE            DECIMAL(7,2)
			       NOT NULL ,
	DESCR                 CHAR(50)
			       NOT NULL ,
	IMG_FILE_NAME         CHAR(50)
			      ,
	GL_PROD_SV_CD         CHAR(3)
			       NOT NULL ,
	USE                   VARCHAR(500)
			      ,
	use                   CHAR(18)
			      
);

CREATE TABLE TRACE_PROD_CLASS
(
	PROD_CLASS_CD         CHAR(4)
			       NOT NULL ,
	TRACE_PROD_CD         CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TRACE_SUBSCRIPTION
(
	PARTY_ID              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	FREE_TRIAL_ST_DATE    DATE
			       NOT NULL ,
	FREE_TRIAL_END_DATE   DATE
			       NOT NULL ,
	ANNUAL_SUBSCRIPTION_ST_DATE  DATE
			      ,
	ANNUAL_SUBSCRIPTION_END_DATE  DATE
			      ,
	DEREGISTRATION_DATE   DATE
			      
);

CREATE TABLE TRACKA_ADMIN_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1001
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	WEBSITE_NAME          VARCHAR(200)
			      ,
	NAME                  VARCHAR(200)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	TEMPLATE              VARCHAR(2000)
			      ,
	REF                   VARCHAR(2000)
			      ,
	IP                    VARCHAR(100)
			      
);

CREATE INDEX XIE0891_01 ON TRACKA_ADMIN_LOG
(
	ID                   ASC
);

CREATE INDEX XIE0891_02 ON TRACKA_ADMIN_LOG
(
	SID                  ASC
);

CREATE TABLE TRACKA_ADMIN_USERS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 11
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	USER_NAME             VARCHAR(50)
			      ,
	PASSWORD              VARCHAR(50)
			      ,
	NAME                  VARCHAR(50)
			      
);

CREATE TABLE TRACKA_ARTICLES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	DATE_STAMP            TIMESTAMP
			      ,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 VARCHAR(2000)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	MENU_ID               INTEGER
			      ,
	FEATURED              INTEGER
			       DEFAULT 0,
	CID                   INTEGER
			       DEFAULT 0,
	ARCHIVE               INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0893_01 ON TRACKA_ARTICLES
(
	ID                   ASC
);

CREATE INDEX XIE0893_02 ON TRACKA_ARTICLES
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_ARTICLES_CAT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0894_01 ON TRACKA_ARTICLES_CAT
(
	ID                   ASC
);

CREATE INDEX XIE0894_02 ON TRACKA_ARTICLES_CAT
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_ARTICLES_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0895_01 ON TRACKA_ARTICLES_FILES
(
	ID                   ASC
);

CREATE INDEX XIE0895_02 ON TRACKA_ARTICLES_FILES
(
	AID                  ASC
);

CREATE TABLE TRACKA_BT_MESAGES
(
	ID                    INTEGER
			       NOT NULL ,
	SUB_ID                INTEGER
			       DEFAULT 0,
	SUBJECT               VARCHAR(500)
			      ,
	MAIN_TEXT             CLOB(1048576)
			      ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	DATE_STAMP            TIMESTAMP
			      ,
	TIME_STAMP            TIMESTAMP
			      ,
	CONTACT               VARCHAR(500)
			      ,
	LAST_POST_NAME        VARCHAR(500)
			      ,
	LAST_POST_DATE        TIMESTAMP
			      ,
	LAST_POST_TIME        TIMESTAMP
			      ,
	ICON                  VARCHAR(500)
			      ,
	TOPICID               INTEGER
			       DEFAULT 0,
	MFROMNAME             VARCHAR(500)
			      ,
	BV_ID                 INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0896_01 ON TRACKA_BT_MESAGES
(
	ID                   ASC
);

CREATE INDEX XIE0896_02 ON TRACKA_BT_MESAGES
(
	SUB_ID               ASC
);

CREATE INDEX XIE0896_03 ON TRACKA_BT_MESAGES
(
	MENU_ID              ASC
);

CREATE INDEX XIE0896_04 ON TRACKA_BT_MESAGES
(
	TOPICID              ASC
);

CREATE INDEX XIE0896_05 ON TRACKA_BT_MESAGES
(
	BV_ID                ASC
);

CREATE TABLE TRACKA_BT_TOPICS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	HEADER                VARCHAR(500)
			      ,
	DESCRIPTION           CLOB(1048576)
			      ,
	SUB_ID                INTEGER
			       DEFAULT 0,
	HIDE                  INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0897_01 ON TRACKA_BT_TOPICS
(
	ID                   ASC
);

CREATE INDEX XIE0897_02 ON TRACKA_BT_TOPICS
(
	SUB_ID               ASC
);

CREATE INDEX XIE0897_03 ON TRACKA_BT_TOPICS
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_CLIENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	FIRST_NAME            VARCHAR(250)
			      ,
	LAST_NAME             VARCHAR(250)
			      ,
	ADDRESS               VARCHAR(500)
			      ,
	PHONE                 VARCHAR(50)
			      ,
	FAX                   VARCHAR(50)
			      ,
	MOBILE                VARCHAR(50)
			      ,
	EMAIL                 VARCHAR(50)
			      ,
	USER_NAME             VARCHAR(50)
			      ,
	PASSWORD              VARCHAR(50)
			      ,
	ACTIVE                INTEGER
			       DEFAULT 0,
	SHOP                  INTEGER
			       DEFAULT 1,
	WEBSITE_ENTRY         INTEGER
			       DEFAULT 0,
	CLIENT_ID             VARCHAR(50)
			      ,
	REG_MOBILE            INTEGER
			       DEFAULT 0,
	PXT_MOBILE            INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0898_01 ON TRACKA_CLIENT
(
	ID                   ASC
);

CREATE INDEX XIE0898_02 ON TRACKA_CLIENT
(
	SID                  ASC
);

CREATE INDEX XIE0898_03 ON TRACKA_CLIENT
(
	CLIENT_ID            ASC
);

CREATE TABLE TRACKA_CLIENT_FILE_GROUP
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      
);

CREATE INDEX XIE0899_02 ON TRACKA_CLIENT_FILE_GROUP
(
	SID                  ASC
);

CREATE TABLE TRACKA_CLIENT_FILE_GROUPS
(
	FILE_ID               INTEGER
			      ,
	GROUP_ID              INTEGER
			      
);

CREATE TABLE TRACKA_CLIENT_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	FID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	CONTENT               CLOB(1048576)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	FILE_ID               INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0901_02 ON TRACKA_CLIENT_FILES
(
	FID                  ASC
);

CREATE TABLE TRACKA_CLIENT_LOAD_FILE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	SCHOOLGATE_ID         VARCHAR(50)
			      ,
	CLIENT_NAME           VARCHAR(250)
			      ,
	FIRST_NAME            VARCHAR(250)
			      ,
	LAST_NAME             VARCHAR(250)
			      ,
	ADDRESS               VARCHAR(250)
			      ,
	ADDRESS_LINE1         VARCHAR(250)
			      ,
	ADDRESS_LINE2         VARCHAR(250)
			      ,
	ADDRESS_LINE3         VARCHAR(250)
			      ,
	ADDRESS_LINE4         VARCHAR(250)
			      ,
	PHONE                 VARCHAR(50)
			      ,
	FAX                   VARCHAR(50)
			      ,
	MOBILE                VARCHAR(50)
			      ,
	EMAIL                 VARCHAR(50)
			      ,
	USER_NAME             VARCHAR(50)
			      ,
	PASSWORD              VARCHAR(50)
			      ,
	CLIENT_TYPE           VARCHAR(250)
			      ,
	CLIENT_ID             VARCHAR(50)
			      
);

CREATE INDEX XIE0902_01 ON TRACKA_CLIENT_LOAD_FILE
(
	SID                  ASC
);

CREATE INDEX XIE0902_02 ON TRACKA_CLIENT_LOAD_FILE
(
	ID                   ASC
);

CREATE TABLE TRACKA_CLIENT_TYPE
(
	FID                   INTEGER
			      ,
	TID                   INTEGER
			      ,
	SID                   INTEGER
			      
);

CREATE INDEX XIE0903_01 ON TRACKA_CLIENT_TYPE
(
	FID                  ASC
);

CREATE INDEX XIE0903_02 ON TRACKA_CLIENT_TYPE
(
	TID                  ASC
);

CREATE TABLE TRACKA_CLIENT_TYPES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	TYPE                  VARCHAR(250)
			      
);

CREATE TABLE TRACKA_CUST_ORDER
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SESSION_ID            VARCHAR(250)
			      ,
	PRODUCT_ID            INTEGER
			      ,
	PRODUCT_COST_ID       INTEGER
			      ,
	QTY                   INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0905_01 ON TRACKA_CUST_ORDER
(
	ID                   ASC
);

CREATE INDEX XIE0905_02 ON TRACKA_CUST_ORDER
(
	SESSION_ID           ASC
);

CREATE TABLE TRACKA_CUST_ORDER_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TYPE                  INTEGER
			       DEFAULT 1,
	DATE_STAMP            TIMESTAMP
			      ,
	SESSION_ID            VARCHAR(250)
			      ,
	SID                   INTEGER
			      ,
	FID                   INTEGER
			      
);

CREATE INDEX XIE0906_01 ON TRACKA_CUST_ORDER_LOG
(
	ID                   ASC
);

CREATE INDEX XIE0906_02 ON TRACKA_CUST_ORDER_LOG
(
	SESSION_ID           ASC
);

CREATE INDEX XIE0906_03 ON TRACKA_CUST_ORDER_LOG
(
	SID                  ASC
);

CREATE INDEX XIE0906_04 ON TRACKA_CUST_ORDER_LOG
(
	FID                  ASC
);

CREATE TABLE TRACKA_CUST_ORDER_PRODUCT_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	ORDER_ID              INTEGER
			       NOT NULL ,
	PRODUCT_TITLE         VARCHAR(250)
			      ,
	PRODUCT_CODE          VARCHAR(50)
			      ,
	QTY                   INTEGER
			      ,
	PRICE                 DECIMAL(18,2)
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0907_01 ON TRACKA_CUST_ORDER_PRODUCT_LOG
(
	ID                   ASC
);

CREATE INDEX XIE0907_02 ON TRACKA_CUST_ORDER_PRODUCT_LOG
(
	ORDER_ID             ASC
);

CREATE TABLE TRACKA_DATABASE_FIELDS
(
	FIELD_ID              INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	DID                   INTEGER
			      ,
	FIELD_NAME            VARCHAR(250)
			      ,
	DISPLAY_NAME          VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SORT                  INTEGER
			       DEFAULT 0,
	TYPE                  VARCHAR(50)
			      ,
	SUM_FIELD             INTEGER
			       DEFAULT 0,
	DOLLARFORMAT          INTEGER
			       DEFAULT 0,
	NOTIFY                INTEGER
			       DEFAULT 0,
	G_VALUE               VARCHAR(1)
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0908_01 ON TRACKA_DATABASE_FIELDS
(
	FIELD_ID             ASC
);

CREATE TABLE TRACKA_DATABASES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	NAME                  VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	LINK                  INTEGER
			       DEFAULT 0,
	HIDE                  INTEGER
			       DEFAULT 0,
	GRAPH                 INTEGER
			       DEFAULT 0,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_DEMO_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	NUMBER                VARCHAR(20)
			      ,
	EMAIL                 VARCHAR(200)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	IP                    VARCHAR(50)
			      
);

CREATE TABLE TRACKA_DOC_PERMS
(
	ADMIN_ID              INTEGER
			      ,
	MENU_ID               INTEGER
			      
);

CREATE TABLE TRACKA_DOWNLOADS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	DESCRIPTION           CLOB(1048576)
			      ,
	DOWNLOAD              VARCHAR(250)
			      ,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	UPDATE_DATE           TIMESTAMP
			      ,
	THUMB                 VARCHAR(250)
			      ,
	IMAGE_W               INTEGER
			       DEFAULT 0,
	IMAGE_H               INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0912_01 ON TRACKA_DOWNLOADS
(
	ID                   ASC
);

CREATE INDEX XIE0912_02 ON TRACKA_DOWNLOADS
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_EMAIL_LIST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	EMAIL                 VARCHAR(250)
			      ,
	HIDE                  INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0913_01 ON TRACKA_EMAIL_LIST
(
	ID                   ASC
);

CREATE INDEX XIE0913_02 ON TRACKA_EMAIL_LIST
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_EMAIL_LIST_INFO
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	CONTENT               CLOB(1048576)
			      ,
	MID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_EMAIL_LOG
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	SUBJECT               VARCHAR(500)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	CONTENT               CLOB(1048576)
			      ,
	SENT_TO               CLOB(1048576)
			      ,
	EMAIL                 VARCHAR(500)
			      
);

CREATE INDEX XIE0915_01 ON TRACKA_EMAIL_LOG
(
	ID                   ASC
);

CREATE INDEX XIE0915_02 ON TRACKA_EMAIL_LOG
(
	SID                  ASC
);

CREATE TABLE TRACKA_EVENT_EMAILS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 11
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	EID                   INTEGER
			      ,
	EMAIL                 VARCHAR(250)
			      
);

CREATE TABLE TRACKA_EVENT_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			      ,
	FILE_SIZE             INTEGER
			      ,
	FID                   INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0917_01 ON TRACKA_EVENT_FILES
(
	ID                   ASC
);

CREATE INDEX XIE0917_02 ON TRACKA_EVENT_FILES
(
	AID                  ASC
);

CREATE TABLE TRACKA_EVENT_REMINDERS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0,
	IP_ADDRESS            VARCHAR(100)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	EVENT_ID              INTEGER
			       DEFAULT 0,
	SEND_DATE             TIMESTAMP
			      ,
	NAME                  VARCHAR(250)
			      ,
	EMAIL                 VARCHAR(250)
			      ,
	SENT                  TIMESTAMP
			      ,
	UUID                  VARCHAR(250)
			      
);

CREATE TABLE TRACKA_EVENTS
(
	MENU_ID               INTEGER
			      ,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(250)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	CONTENT               CLOB(1048576)
			      ,
	SHORT                 VARCHAR(2000)
			      ,
	REGISTER              INTEGER
			       DEFAULT 0,
	FEATURED              INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0919_01 ON TRACKA_EVENTS
(
	MENU_ID              ASC
);

CREATE INDEX XIE0919_02 ON TRACKA_EVENTS
(
	ID                   ASC
);

CREATE TABLE TRACKA_FILE_LIST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(500)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(500)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0920_01 ON TRACKA_FILE_LIST
(
	ID                   ASC
);

CREATE INDEX XIE0920_02 ON TRACKA_FILE_LIST
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(250)
			      ,
	DESCRIPTION           VARCHAR(2000)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	LAST_UPDATED          TIMESTAMP
			      ,
	CID                   INTEGER
			       DEFAULT 0,
	KEYWORDS              VARCHAR(2000)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_FILES_CAT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(500)
			      ,
	SID                   INTEGER
			       DEFAULT 0,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_FORM_EMAIL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	FORM_ID               INTEGER
			      ,
	EMAIL                 VARCHAR(250)
			      
);

CREATE TABLE TRACKA_FORM_FIELD_VALUES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	FORM_FIELD_ID         INTEGER
			      ,
	FORM_VALUE            VARCHAR(250)
			      ,
	DISPLAY_VALUE         VARCHAR(250)
			      ,
	DISPLAY_ORDER         SMALLINT
			       DEFAULT 0
);

CREATE INDEX XIE0924_01 ON TRACKA_FORM_FIELD_VALUES
(
	ID                   ASC
);

CREATE INDEX XIE0924_02 ON TRACKA_FORM_FIELD_VALUES
(
	FORM_FIELD_ID        ASC
);

CREATE TABLE TRACKA_FORM_FIELDS
(
	FORM_FIELD_ID         INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	FORM_ID               INTEGER
			      ,
	DESCRIPTION           VARCHAR(8000)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	TYPE                  VARCHAR(50)
			      ,
	FSIZE                 INTEGER
			       DEFAULT 0,
	REQUIRED              SMALLINT
			       DEFAULT 0,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0925_01 ON TRACKA_FORM_FIELDS
(
	FORM_FIELD_ID        ASC
);

CREATE INDEX XIE0925_02 ON TRACKA_FORM_FIELDS
(
	FORM_ID              ASC
);

CREATE TABLE TRACKA_FORM_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	FORM_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	DESCRIPTION           CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	FILE_SIZE             INTEGER
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0926_01 ON TRACKA_FORM_FILES
(
	ID                   ASC
);

CREATE INDEX XIE0926_02 ON TRACKA_FORM_FILES
(
	FORM_ID              ASC
);

CREATE TABLE TRACKA_FORMS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	SHOW                  SMALLINT
			       DEFAULT 0,
	CONTENT               CLOB(1048576)
			      ,
	SURVEY                INTEGER
			       DEFAULT 0,
	SHOW_RESULTS          INTEGER
			       DEFAULT 0,
	RIGHT_PANEL           INTEGER
			       DEFAULT 0,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0927_02 ON TRACKA_FORMS
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_HELP_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	FILE_NAME             VARCHAR(250)
			      ,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_LIBRARY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 CLOB(1048576)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	MENU_ID               INTEGER
			      ,
	CID                   INTEGER
			      ,
	ARCHIVE               INTEGER
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0929_02 ON TRACKA_LIBRARY
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_LIBRARY_CAT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0930_01 ON TRACKA_LIBRARY_CAT
(
	ID                   ASC
);

CREATE INDEX XIE0930_02 ON TRACKA_LIBRARY_CAT
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_LIBRARY_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 CLOB(1048576)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0931_01 ON TRACKA_LIBRARY_FILES
(
	ID                   ASC
);

CREATE TABLE TRACKA_LINK_CAT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	DESCRIPTION           VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	MENU_ID               INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0932_01 ON TRACKA_LINK_CAT
(
	ID                   ASC
);

CREATE INDEX XIE0932_02 ON TRACKA_LINK_CAT
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_LINKS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	CID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	URL                   VARCHAR(250)
			      ,
	MENU_ID               INTEGER
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0933_01 ON TRACKA_LINKS
(
	ID                   ASC
);

CREATE INDEX XIE0933_02 ON TRACKA_LINKS
(
	CID                  ASC
);

CREATE INDEX XIE0933_03 ON TRACKA_LINKS
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_LIST_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_LISTS
(
	MENU_ID               INTEGER
			      ,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 VARCHAR(1000)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0935_01 ON TRACKA_LISTS
(
	MENU_ID              ASC
);

CREATE INDEX XIE0935_02 ON TRACKA_LISTS
(
	ID                   ASC
);

CREATE TABLE TRACKA_MAIL_CONTENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      
);

CREATE INDEX XIE0936_01 ON TRACKA_MAIL_CONTENT
(
	SID                  ASC
);

CREATE TABLE TRACKA_MAIL_CONTENT_DATA
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MCID                  INTEGER
			      ,
	TITLE                 VARCHAR(200)
			      ,
	SUBJECT               VARCHAR(500)
			      ,
	SENT_FROM             VARCHAR(200)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0937_01 ON TRACKA_MAIL_CONTENT_DATA
(
	ID                   ASC
);

CREATE TABLE TRACKA_MAIL_CONTENT_LOG
(
	MID                   INTEGER
			      ,
	MCID                  INTEGER
			      ,
	DATE_SENT             TIMESTAMP
			      
);

CREATE TABLE TRACKA_MAIL_LIST
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      
);

CREATE INDEX XIE0939_01 ON TRACKA_MAIL_LIST
(
	SID                  ASC
);

CREATE TABLE TRACKA_MAIL_LIST_EMAILS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MLID                  INTEGER
			      ,
	FIRST_NAME            VARCHAR(250)
			      ,
	LAST_NAME             VARCHAR(250)
			      ,
	EMAIL                 VARCHAR(250)
			      ,
	HIDE                  INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_MAILER
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	SUBJECT               VARCHAR(250)
			      ,
	SENT_FROM             VARCHAR(250)
			      ,
	MESSAGE               CLOB(1048576)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	END_DATE              TIMESTAMP
			      ,
	TIME_STAMP            VARCHAR(50)
			      ,
	SCHEDULE              INTEGER
			       DEFAULT 0,
	MONTH_SENT            INTEGER
			       DEFAULT 0,
	MONTH_DOW_SENT        VARCHAR(50)
			      ,
	DOW_SENT              TIMESTAMP
			       DEFAULT CURRENT TIMESTAMP,
	DOW                   VARCHAR(50)
			      ,
	ONCE_ONLY_DOW_SENT    VARCHAR(50)
			      ,
	SENT                  INTEGER
			       DEFAULT 0,
	SEND                  INTEGER
			       DEFAULT 0,
	DATE_SENT             TIMESTAMP
			      ,
	NUMBER_SENT           INTEGER
			       DEFAULT 0,
	MENU_ID               INTEGER
			       DEFAULT 0,
	LINK_TITLE            VARCHAR(250)
			      ,
	HEADER                INTEGER
			       DEFAULT 0,
	SHOW_FIRST_NAME       INTEGER
			       DEFAULT 0,
	SHOW_LAST_NAME        INTEGER
			       DEFAULT 0,
	SALUTATION            VARCHAR(50)
			      ,
	ATTACHMENT            VARCHAR(500)
			      ,
	MCID                  INTEGER
			       DEFAULT 0,
	MCID_SENT             INTEGER
			       DEFAULT 0,
	MCID_DATE_SENT        TIMESTAMP
			      
);

CREATE INDEX XIE0941_01 ON TRACKA_MAILER
(
	SID                  ASC
);

CREATE TABLE TRACKA_MAILER_EMAILS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	MID                   INTEGER
			      ,
	MSID                  INTEGER
			      ,
	MCID                  INTEGER
			       DEFAULT 0,
	EMAIL                 VARCHAR(500)
			      ,
	DATE_READ             VARCHAR(50)
			       DEFAULT 'Not yet viewed',
	IP                    VARCHAR(50)
			      ,
	SENT                  INTEGER
			       DEFAULT 0,
	CLICKED               VARCHAR(50)
			       DEFAULT 'Not clicked',
	FIRST_NAME            VARCHAR(250)
			      ,
	LAST_NAME             VARCHAR(250)
			      
);

CREATE INDEX XIE0942_01 ON TRACKA_MAILER_EMAILS
(
	ID                   ASC
);

CREATE INDEX XIE0942_03 ON TRACKA_MAILER_EMAILS
(
	MSID                 ASC
);

CREATE INDEX XIE0942_04 ON TRACKA_MAILER_EMAILS
(
	SID                  ASC
);

CREATE TABLE TRACKA_MAILER_GROUP
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MID                   INTEGER
			      ,
	TYPE                  VARCHAR(500)
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0943_01 ON TRACKA_MAILER_GROUP
(
	ID                   ASC
);

CREATE TABLE TRACKA_MAILER_SENT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MID                   INTEGER
			      ,
	DATE_SENT             TIMESTAMP
			      ,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0944_01 ON TRACKA_MAILER_SENT
(
	ID                   ASC
);

CREATE TABLE TRACKA_MENU
(
	MENU_ID               INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 31
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			       DEFAULT 0,
	TOP_MENU_ID           INTEGER
			      ,
	DISPLAY_ORDER         INTEGER
			      ,
	DESCRIPTION           VARCHAR(250)
			      ,
	SHORT_DESCRIPTION     VARCHAR(50)
			      ,
	HIDE                  SMALLINT
			       DEFAULT 0,
	CONTENT               CLOB(1048576)
			      ,
	CONTENT2              CLOB(1048576)
			      ,
	SECURE_CONTENT        CLOB(1048576)
			      ,
	TYPE                  VARCHAR(50)
			      ,
	FORMS                 SMALLINT
			       DEFAULT 0,
	LAST_UPDATED          TIMESTAMP
			      ,
	EXPIRE_DATE           TIMESTAMP
			      ,
	UPDATE_INTERVAL       INTEGER
			       DEFAULT 0,
	UPDATE_INTERVAL_TYPE  VARCHAR(50)
			      ,
	NOTES                 CLOB(1048576)
			      ,
	URL                   VARCHAR(250)
			      ,
	KEYWORDS              CLOB(1048576)
			      ,
	PAGE_D                VARCHAR(500)
			      ,
	PAGE_T                VARCHAR(500)
			      ,
	PROTECT_PAGE          INTEGER
			       DEFAULT 0,
	SECURE                INTEGER
			       DEFAULT 0,
	PARENT_PANEL          INTEGER
			       DEFAULT 0,
	DISPLAY_TITLE         VARCHAR(500)
			      ,
	MENU_ONLY             INTEGER
			       DEFAULT 0,
	TRACKA_SECURE         INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0945_01 ON TRACKA_MENU
(
	SID                  ASC
);

CREATE INDEX XIE0945_02 ON TRACKA_MENU
(
	TOP_MENU_ID          ASC
);

CREATE TABLE TRACKA_MENU_CLIENT_FILES
(
	MENU_ID               INTEGER
			      ,
	GROUP_ID              INTEGER
			      
);

CREATE INDEX XIE0946_02 ON TRACKA_MENU_CLIENT_FILES
(
	GROUP_ID             ASC
);

CREATE TABLE TRACKA_MENU_SECURE
(
	MENU_ID               INTEGER
			      ,
	TID                   INTEGER
			      
);

CREATE INDEX XIE0947_02 ON TRACKA_MENU_SECURE
(
	TID                  ASC
);

CREATE TABLE TRACKA_PHOTO_GALLERY
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	PHOTO                 VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_PRODUCTS_SHOP
(
	PRODUCT_ID            INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 CLOB(1048576)
			      ,
	PHOTO                 VARCHAR(500)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	DISPLAY_ORDER         SMALLINT
			       DEFAULT 0,
	FEATURED              SMALLINT
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0949_01 ON TRACKA_PRODUCTS_SHOP
(
	PRODUCT_ID           ASC
);

CREATE INDEX XIE0949_02 ON TRACKA_PRODUCTS_SHOP
(
	MENU_ID              ASC
);

CREATE TABLE TRACKA_PRODUCTS_SHOP_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	PID                   INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			       DEFAULT '0',
	ATTACHMENT            VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	FILE_SIZE             INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_PRODUCTS_SHOP_PRICES
(
	PRODUCT_COST_ID       INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	PRODUCT_ID            INTEGER
			      ,
	CODE                  VARCHAR(50)
			      ,
	TYPE                  VARCHAR(50)
			      ,
	PSIZE                 VARCHAR(50)
			      ,
	PRICE                 DECIMAL(18,2)
			       DEFAULT 0,
	WEIGHT                DECIMAL(18,4)
			       DEFAULT 0,
	SPECIAL_PRICE         DECIMAL(18,2)
			       DEFAULT 0,
	SPECIAL_TEXT          VARCHAR(8000)
			      ,
	MIN_QTY               INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0951_01 ON TRACKA_PRODUCTS_SHOP_PRICES
(
	PRODUCT_COST_ID      ASC
);

CREATE INDEX XIE0951_02 ON TRACKA_PRODUCTS_SHOP_PRICES
(
	PRODUCT_ID           ASC
);

CREATE TABLE TRACKA_RIGHT_PANEL
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	CID                   INTEGER
			       DEFAULT 0,
	TYPE                  INTEGER
			       DEFAULT 0,
	CONTENT               CLOB(1048576)
			      ,
	URL                   VARCHAR(250)
			      ,
	PIC                   VARCHAR(250)
			      ,
	TARGET                VARCHAR(50)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	RID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_RIGHT_PANEL_CAT
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			       DEFAULT 0,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	RID                   INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_SECTIONS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	DISPLAY_ORDER         INTEGER
			      ,
	SHORT                 CLOB(1048576)
			      ,
	SID                   INTEGER
			      ,
	TAB_BREAK             INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0954_01 ON TRACKA_SECTIONS
(
	SID                  ASC
);

CREATE TABLE TRACKA_SECTIONS_FILES
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	AID                   INTEGER
			      ,
	TITLE                 VARCHAR(250)
			      ,
	SHORT                 CLOB(1048576)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	ATTACHMENT            VARCHAR(500)
			      ,
	DISPLAY_ORDER         INTEGER
			      ,
	FILE_SIZE             INTEGER
			      ,
	REGISTER              INTEGER
			       DEFAULT 0,
	FID                   INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0955_01 ON TRACKA_SECTIONS_FILES
(
	ID                   ASC
);

CREATE TABLE TRACKA_SECTIONS_TYPE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 11
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	MENU_ID               INTEGER
			      ,
	TYPE                  INTEGER
			       DEFAULT 0,
	LINKS                 INTEGER
			       DEFAULT 0,
	WEBSITE_ID            INTEGER
			       DEFAULT 0
);

CREATE TABLE TRACKA_SHOP_EMAILS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	EMAIL                 VARCHAR(250)
			      ,
	SID                   INTEGER
			      
);

CREATE INDEX XIE0957_01 ON TRACKA_SHOP_EMAILS
(
	ID                   ASC
);

CREATE INDEX XIE0957_02 ON TRACKA_SHOP_EMAILS
(
	SID                  ASC
);

CREATE TABLE TRACKA_STAFF
(
	MENU_ID               INTEGER
			      ,
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	NAME                  VARCHAR(250)
			      ,
	PHONE_WRK             VARCHAR(50)
			      ,
	PHONE                 VARCHAR(50)
			      ,
	MOBILE                VARCHAR(50)
			      ,
	TITLE                 VARCHAR(250)
			      ,
	EMAIL                 VARCHAR(250)
			      ,
	CONTENT               CLOB(1048576)
			      ,
	PHOTO                 VARCHAR(250)
			      ,
	QUALS                 VARCHAR(250)
			      ,
	DISPLAY_ORDER         INTEGER
			       DEFAULT 0,
	SID                   INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0958_01 ON TRACKA_STAFF
(
	MENU_ID              ASC
);

CREATE INDEX XIE0958_02 ON TRACKA_STAFF
(
	ID                   ASC
);

CREATE TABLE TRACKA_SURVEY_RESULTS
(
	ID                    INTEGER
			       NOT NULL ,
	UID                   VARCHAR(50)
			      ,
	DATE_STAMP            TIMESTAMP
			      ,
	FORM_ID               INTEGER
			       DEFAULT 0,
	FORM_FIELD_ID         INTEGER
			       DEFAULT 0,
	QUESTION              VARCHAR(8000)
			      ,
	ANSWER                VARCHAR(8000)
			      ,
	IP_ADDRESS            VARCHAR(50)
			      
);

CREATE INDEX XIE0959_01 ON TRACKA_SURVEY_RESULTS
(
	ID                   ASC
);

CREATE INDEX XIE0959_02 ON TRACKA_SURVEY_RESULTS
(
	FORM_ID              ASC
);

CREATE TABLE TRACKA_TEMPLATE_SEC
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SEC_TYPE              INTEGER
			      ,
	TEMPLATE_NAME         VARCHAR(500)
			      
);

CREATE TABLE TRACKA_WEBSITE
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 11
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	NAME                  VARCHAR(250)
			      ,
	ACTIVE                SMALLINT
			       DEFAULT 1,
	SCHOOL                INTEGER
			       DEFAULT 1,
	EMAIL                 VARCHAR(250)
			      ,
	CLIENT_CNTR           INTEGER
			       DEFAULT 1,
	STATS_USER            VARCHAR(50)
			      ,
	STATS_PASS            VARCHAR(50)
			      ,
	FORM_EMAIL            VARCHAR(250)
			      
);

CREATE TABLE TRACKA_WEBSITE_OPTIONS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 41
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	NAME                  VARCHAR(250)
			      ,
	CODE                  VARCHAR(250)
			      ,
	PROTECTED             INTEGER
			      ,
	SECURE                INTEGER
			      
);

CREATE TABLE TRACKA_WEBSITE_USERS
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 11
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	SID                   INTEGER
			      ,
	NAME                  VARCHAR(50)
			      ,
	USER_NAME             VARCHAR(50)
			      ,
	PASSWORD              VARCHAR(50)
			      ,
	EMAIL                 VARCHAR(50)
			      ,
	ADMIN                 SMALLINT
			       DEFAULT 0,
	SYSTEM                INTEGER
			       DEFAULT 0
);

CREATE INDEX XIE0963_01 ON TRACKA_WEBSITE_USERS
(
	ID                   ASC
);

CREATE TABLE TRAIT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	XREF_TABLE_NAME       VARCHAR(40)
			       NOT NULL ,
	XREF_COL_NAME         VARCHAR(30)
			       NOT NULL ,
	DISP_DECIMALS         SMALLINT
			      
);

CREATE TABLE TRAIT_SV
(
	SV_TP_CD              SMALLINT
			       NOT NULL ,
	TRAIT_CD              INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE TRAIT_VAL
(
	TRAIT_CD              INTEGER
			       NOT NULL ,
	CD                    CHAR(9)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ABBR_NAME             CHAR(6)
			       NOT NULL ,
	NAME                  CHAR(25)
			       NOT NULL 
);

CREATE TABLE TRAIT_VAL_DESCR
(
	TRAIT_CD              INTEGER
			       NOT NULL ,
	CD                    CHAR(9)
			       NOT NULL ,
	SEQ                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TEXT                  CHAR(50)
			       NOT NULL 
);

CREATE TABLE UNID_ANML_DT_RSLT
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0507_01 CHECK ( DT_CD IN ('EBL') ),
	TEST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ANML_ID               CHAR(10)
			       NOT NULL ,
	PLATE_NUM             CHAR(10)
			       NOT NULL ,
	RSLT                  DECIMAL(9,3)
			       NOT NULL ,
	POS_IND               CHAR(1)
			       NOT NULL ,
	TEST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	test_date             CHAR(18)
			      ,
	test_date_d           CHAR(18)
			      
);

CREATE INDEX XFK0507_02 ON UNID_ANML_DT_RSLT
(
	DT_CD                ASC,
	PLATE_NUM            ASC
);

CREATE TABLE UNID_ANML_DT_TAG
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	DT_CD                 CHAR(4)
			       NOT NULL  CONSTRAINT  C0519_01 CHECK ( DT_CD IN ('EBL') ),
	ANML_ID               CHAR(10)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	NUM                   INTEGER
			       NOT NULL ,
	DATE                  INTEGER
			       NOT NULL  DEFAULT 0,
	DATE_D                DATE
			       NOT NULL  DEFAULT '0001-01-01',
	date_d                CHAR(18)
			      
);

CREATE INDEX XIE0519_01 ON UNID_ANML_DT_TAG
(
	DT_CD                ASC,
	NUM                  ASC
);

CREATE TABLE UNIT_OF_MSMT
(
	CD                    CHAR(4)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL ,
	MINDA_HEALTH_IND      CHAR(1)
			       CONSTRAINT  C0558_01 CHECK ( MINDA_HEALTH_IND IN ('Y','N') )
);

CREATE TABLE UOM_XLATE
(
	ALT_UOM_CD            CHAR(6)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	UOM_CD                CHAR(4)
			       NOT NULL 
);

CREATE TABLE USER
(
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	LAST_NAME             CHAR(25)
			       NOT NULL ,
	FIRST_NAME            CHAR(25)
			       NOT NULL ,
	READER_CD             CHAR(3)
			      
);

CREATE TABLE VACANT_INSEM_PD
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 200005
					INCREMENT BY 10
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	END_DATE              DATE
			       NOT NULL ,
	RSN_CD                CHAR(1)
			       NOT NULL  CONSTRAINT  C0359_01 CHECK ( RSN_CD IN ('0', '1', '2', '3', 'H', 'W') ),
	RPRT_USER_ID          CHAR(8)
			      ,
	RPRT_PTPT_CD          CHAR(4)
			      ,
	OTH_PTPT_CD           CHAR(4)
			      ,
	CMT                   CHAR(50)
			      ,
	RCVD_DATE             DATE
			       NOT NULL ,
	UPD_USER_ID           CHAR(8)
			      ,
	CONSTRAINT C0359_02 CHECK ( RPRT_USER_ID IS NULL AND RPRT_PTPT_CD IS NOT NULL OR RPRT_USER_ID IS NOT NULL AND RPRT_PTPT_CD IS NULL  ) ,
	CONSTRAINT C0359_03 CHECK ( ST_DATE <= END_DATE ) 
);

CREATE TABLE VFY_RSLT
(
	CD                    CHAR(2)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 CHAR(50)
			       NOT NULL 
);

CREATE TABLE VOL_BV_RSLT
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	VOL_BV_NZ             INTEGER
			      ,
	VOL_BV_REL_NZ         DECIMAL(3,1)
			      ,
	VOL_BV                INTEGER
			       NOT NULL ,
	VOL_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_PV                INTEGER
			       NOT NULL ,
	VOL_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_LV                INTEGER
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	FULL_MODEL_VOL_BV     INTEGER
			      ,
	FULL_MODEL_VOL_BV_REL  DECIMAL(3,1)
			      ,
	FULL_MODEL_VOL_PV     INTEGER
			      ,
	FULL_MODEL_VOL_PV_REL  DECIMAL(3,1)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,1)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE INDEX XIE0787_01 ON VOL_BV_RSLT
(
	UPD_TIME             ASC
);

CREATE TABLE VOL_BV_RSLT_HIST
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	VOL_BV_NZ             INTEGER
			      ,
	VOL_BV_REL_NZ         DECIMAL(3,1)
			      ,
	VOL_BV                INTEGER
			       NOT NULL ,
	VOL_BV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_PV                INTEGER
			       NOT NULL ,
	VOL_PV_REL            DECIMAL(3,1)
			       NOT NULL ,
	VOL_LV                INTEGER
			      ,
	PERSISTENCY_BV        DECIMAL(6,1)
			      ,
	PERSISTENCY_BV_REL    DECIMAL(3,1)
			      ,
	HERD_CNT              INTEGER
			      ,
	EFF_DTR_CONTRIB       INTEGER
			      ,
	DTR_CNT               INTEGER
			      ,
	LACT4_LP_SOLN_1       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_2       DECIMAL(5,3)
			      ,
	LACT4_LP_SOLN_3       DECIMAL(5,3)
			      ,
	PROGENY_CONTRIB       DECIMAL(6,1)
			      ,
	PROGENY_WGT           DECIMAL(7,2)
			      
);

CREATE INDEX XIE0788_01 ON VOL_BV_RSLT_HIST
(
	ANML_KEY             ASC,
	GEO_AREA_ID          ASC,
	EXTR_DATE            ASC
)
 CLUSTER;

CREATE INDEX XIE0788_02 ON VOL_BV_RSLT_HIST
(
	UPD_TIME             ASC
);

CREATE TABLE VOL_RUN
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	TRAIT_CD              CHAR(4)
			       NOT NULL ,
	ECON_WGT_BW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_PW           DECIMAL(6,4)
			       NOT NULL ,
	ECON_WGT_LW           DECIMAL(6,4)
			      ,
	AVG_VOL_BV            INTEGER
			      ,
	AVG_VOL_PV            INTEGER
			      ,
	ANML_CNT              INTEGER
			      ,
	AVG_VOL_BV_NZ         INTEGER
			      
);

CREATE TABLE VOL_RUN_AE_BRD
(
	EXTR_DATE             DATE
			       NOT NULL ,
	GEO_AREA_ID           INTEGER
			       NOT NULL ,
	AE_BRD_CD             SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	AVG_VOL_BV            INTEGER
			      ,
	AVG_VOL_PV            INTEGER
			       NOT NULL ,
	AVG_VOL_BV_NZ         INTEGER
			       NOT NULL ,
	ANML_CNT              INTEGER
			       NOT NULL 
);

CREATE TABLE WEB_SERVER_SESS
(
	SESS_UUID             CHAR(35)
			       NOT NULL ,
	VAR_NAME              CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DATA_TP               CHAR(20)
			       NOT NULL ,
	DATA                  VARCHAR(1000)
			       NOT NULL 
);

CREATE INDEX XIE0279_01 ON WEB_SERVER_SESS
(
	UPD_TIME             ASC
);

CREATE TABLE WEIGHT_VALIDATION
(
	SPECIES_CD            CHAR(1)
			       NOT NULL ,
	EVENT_CD              CHAR(1)
			       NOT NULL ,
	SEX_CD                CHAR(1)
			       NOT NULL ,
	MIN_AGE_DAYS          SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAX_AGE_DAYS          SMALLINT
			       NOT NULL ,
	MIN_WGT               SMALLINT
			      ,
	MAX_WGT               SMALLINT
			      ,
	species_cd            CHAR(18)
			      ,
	event_cd              CHAR(18)
			      ,
	sex_cd                CHAR(18)
			      ,
	min_age_days          CHAR(18)
			      ,
	max_age_days          CHAR(18)
			      
);

CREATE TABLE WORK_GRP
(
	NAME                  CHAR(30)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	DESCR                 VARCHAR(100)
			       NOT NULL ,
	MGR_USER_ID           CHAR(8)
			      ,
	ORG_PTPT_CD           CHAR(4)
			      ,
	DEPT_PARTY_ID         INTEGER
			      ,
	org_ptpt_cd           CHAR(18)
			      
);

CREATE TABLE WORK_GRP_USER
(
	WORK_GRP_NAME         CHAR(30)
			       NOT NULL ,
	USER_ID               CHAR(8)
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE XFER_CARD
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	NUM                   SMALLINT
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	RQST_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_DATE            INTEGER
			       NOT NULL  DEFAULT 0,
	PRINT_TIME            INTEGER
			       NOT NULL ,
	PRINT_ANML_CNT        INTEGER
			       NOT NULL ,
	UNNUM_ANML_IND        CHAR(1)
			       NOT NULL ,
	CARD_RQRD_IND         CHAR(1)
			       NOT NULL ,
	LIST_RQRD_CNT         DECIMAL(1)
			       NOT NULL ,
	CATLG_RQRD_CNT        DECIMAL(1)
			       NOT NULL ,
	AUCTNR_PTPT_CD        CHAR(4)
			       NOT NULL ,
	SALE_DATE             INTEGER
			       NOT NULL  DEFAULT 0,
	SALE_TIME             INTEGER
			       NOT NULL ,
	ALL_ANML_IND          CHAR(1)
			       NOT NULL ,
	ALL_MILK_ANML_IND     CHAR(1)
			       NOT NULL ,
	SEL_SEX_CD            CHAR(1)
			       NOT NULL ,
	SEL_BRD_CD            CHAR(2)
			       NOT NULL ,
	RQST_DATE_D           DATE
			       NOT NULL  DEFAULT '0001-01-01',
	PRINT_DATE_D          DATE
			      ,
	SALE_DATE_D           DATE
			      ,
	rqst_date_d           CHAR(18)
			      ,
	print_date_d          CHAR(18)
			      ,
	print_date            CHAR(18)
			      ,
	rqst_date             CHAR(18)
			      ,
	sale_date             CHAR(18)
			      ,
	sale_date_d           CHAR(18)
			      
);

CREATE INDEX XIE0200_01 ON XFER_CARD
(
	RQST_DATE            ASC
);

CREATE INDEX XIE0200_02 ON XFER_CARD
(
	UNNUM_ANML_IND       ASC
);

CREATE INDEX XIE0200_03 ON XFER_CARD
(
	AUCTNR_PTPT_CD       ASC
);

CREATE TABLE XFER_CARD_RNGE
(
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	XFER_CARD_NUM         SMALLINT
			       NOT NULL ,
	NUM                   INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	ST_BRTH_DATE          INTEGER
			       NOT NULL  DEFAULT 0,
	END_BRTH_DATE         INTEGER
			       NOT NULL  DEFAULT 0,
	ST_BRTH_DATE_D        DATE
			       NOT NULL  DEFAULT '0001-01-01',
	END_BRTH_DATE_D       DATE
			       NOT NULL  DEFAULT '0001-01-01',
	end_brth_date         CHAR(18)
			      ,
	end_brth_date_d       CHAR(18)
			      ,
	st_brth_date          CHAR(18)
			      ,
	st_brth_date_d        CHAR(18)
			      
);

CREATE TABLE XFER_EXCL
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	ST_DATE               DATE
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	END_DATE              DATE
			      ,
	CONSTRAINT C0461_01 CHECK ( END_DATE IS NULL OR ST_DATE <= END_DATE ) 
);

CREATE TABLE YLD_DEV_CGRP
(
	ID                    INTEGER
			      GENERATED BY DEFAULT AS IDENTITY (
					START WITH 1120000
					INCREMENT BY 1
					CACHE 20 ) NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	MAP_REF               CHAR(10)
			       NOT NULL ,
	HERD_NUM              SMALLINT
			       NOT NULL ,
	SSN                   SMALLINT
			       NOT NULL ,
	SSN_CD                DECIMAL(1)
			       NOT NULL ,
	AGE_GRP_CD            DECIMAL(1)
			       NOT NULL ,
	SAMPLE_REGIME_CD      SMALLINT
			       NOT NULL ,
	FIRST_PARTN_DATE      DATE
			       NOT NULL 
);

CREATE TABLE YLD_DEV_FULL_MODEL
(
	ANML_KEY              INTEGER
			       NOT NULL ,
	YLD_DEV_CGRP_ID       INTEGER
			       NOT NULL ,
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	PARTN_DATE            DATE
			       NOT NULL ,
	FAT_YLD_DEV           DECIMAL(4,1)
			       NOT NULL ,
	FAT_YLD_DEV_REL       DECIMAL(3,1)
			       NOT NULL ,
	FAT_EHAT              DECIMAL(6,3)
			       NOT NULL ,
	FAT_BV_HET_COMB       DECIMAL(6,3)
			       NOT NULL ,
	PROT_YLD_DEV          DECIMAL(4,1)
			       NOT NULL ,
	PROT_YLD_DEV_REL      DECIMAL(3,1)
			       NOT NULL ,
	PROT_EHAT             DECIMAL(6,3)
			       NOT NULL ,
	PROT_BV_HET_COMB      DECIMAL(6,3)
			       NOT NULL ,
	VOL_YLD_DEV           SMALLINT
			       NOT NULL ,
	VOL_YLD_DEV_REL       DECIMAL(3,1)
			       NOT NULL ,
	VOL_EHAT              DECIMAL(6,2)
			       NOT NULL ,
	VOL_BV_HET_COMB       DECIMAL(6,2)
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL 
);

CREATE INDEX XFK0571_02 ON YLD_DEV_FULL_MODEL
(
	ANML_KEY             ASC,
	PARTN_DATE           ASC
);

CREATE TABLE YLD_DEV_HIST
(
	UPD_TIME              TIMESTAMP
			       NOT NULL  DEFAULT CURRENT TIMESTAMP,
	YLD_DEV_CGRP_ID       INTEGER
			       NOT NULL ,
	ANML_KEY              INTEGER
			       NOT NULL ,
	PARTN_DATE            DATE
			       NOT NULL ,
	FAT_YLD_DEV           DECIMAL(4,1)
			       NOT NULL ,
	FAT_YLD_DEV_REL       DECIMAL(3,1)
			       NOT NULL ,
	FAT_EHAT              DECIMAL(6,3)
			       NOT NULL ,
	FAT_BV_HET_COMB       DECIMAL(6,3)
			       NOT NULL ,
	PROT_YLD_DEV          DECIMAL(4,1)
			       NOT NULL ,
	PROT_YLD_DEV_REL      DECIMAL(3,1)
			       NOT NULL ,
	PROT_EHAT             DECIMAL(6,3)
			       NOT NULL ,
	PROT_BV_HET_COMB      DECIMAL(6,3)
			       NOT NULL ,
	VOL_YLD_DEV           SMALLINT
			       NOT NULL ,
	VOL_YLD_DEV_REL       DECIMAL(3,1)
			       NOT NULL ,
	VOL_EHAT              DECIMAL(6,2)
			       NOT NULL ,
	VOL_BV_HET_COMB       DECIMAL(6,2)
			       NOT NULL ,
	EXTR_DATE             DATE
			       NOT NULL ,
	AE_SOURCE_CD          CHAR(1)
			       NOT NULL 
);

CREATE INDEX XFK0579_02 ON YLD_DEV_HIST
(
	ANML_KEY             ASC,
	PARTN_DATE           ASC
);

CREATE INDEX XFK0579_04 ON YLD_DEV_HIST
(
	YLD_DEV_CGRP_ID      ASC
);

CREATE TRIGGER D0187U51
  NO CASCADE BEFORE UPDATE OF 
                    conv_date
  ON AB_BULL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date != new.conv_date
   OR old.conv_date IS NULL AND new.conv_date IS NOT NULL
   OR old.conv_date IS NOT NULL AND new.conv_date IS NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 OR new.conv_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0187I52
  NO CASCADE BEFORE INSERT
  ON AB_BULL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date IS NULL 
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01'
   OR new.conv_date = 0
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01')
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL THEN 0 ELSE
  INT(new.conv_date_d) - 19000000 END
 !!


CREATE TRIGGER D0187U01
  NO CASCADE BEFORE UPDATE
  ON AB_BULL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0187I51
  NO CASCADE BEFORE INSERT
  ON AB_BULL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date_d IS NULL 
  AND new.conv_date IS NOT NULL
   OR CHAR(new.conv_date_d,ISO) = '0001-01-01'
  AND new.conv_date IS NOT NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0187U52
  NO CASCADE BEFORE UPDATE OF 
                    conv_date_d
  ON AB_BULL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date_d != new.conv_date_d
   OR old.conv_date_d IS NULL and new.conv_date_d IS NOT NULL
   OR old.conv_date_d IS NOT NULL and new.conv_date_d IS NULL)
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL OR new.conv_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.conv_date_d) - 19000000 END
 !!


CREATE  TRIGGER tD_AB_BULL AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DF_PRODN_DTL WHERE DF_PRODN_DTL.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  DF_PRODN_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008844", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="DF_PRODN_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_015", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because DF_PRODN_DTL exists.')
 !!

CREATE  TRIGGER tD_AB_BULL2 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_DIY_SMN_DLVRY WHERE TECH_DIY_SMN_DLVRY.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  TECH_DIY_SMN_DLVRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fc5", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="TECH_DIY_SMN_DLVRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_014", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because TECH_DIY_SMN_DLVRY exists.')
 !!

CREATE  TRIGGER tD_AB_BULL3 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_SAR_BULL_TRGT WHERE SPS_SAR_BULL_TRGT.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_SAR_BULL_TRGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ae9", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_SAR_BULL_TRGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_013", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_SAR_BULL_TRGT exists.')
 !!

CREATE  TRIGGER tD_AB_BULL4 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_PRDCT_DTR WHERE SPS_PRDCT_DTR.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_PRDCT_DTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f45", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_PRDCT_DTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_012", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_PRDCT_DTR exists.')
 !!

CREATE  TRIGGER tD_AB_BULL5 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_OPTM_ALCN WHERE SPS_OPTM_ALCN.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_OPTM_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008647", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_OPTM_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_011", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_OPTM_ALCN exists.')
 !!

CREATE  TRIGGER tD_AB_BULL6 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MTNG WHERE SPS_MTNG.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_MTNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b95", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_MTNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_010", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_MTNG exists.')
 !!

CREATE  TRIGGER tD_AB_BULL7 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_HERD_DTRS WHERE SPS_HERD_DTRS.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_HERD_DTRS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008623", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_HERD_DTRS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_009", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_HERD_DTRS exists.')
 !!

CREATE  TRIGGER tD_AB_BULL8 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_BULL_EST_DTRS WHERE SPS_BULL_EST_DTRS.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_BULL_EST_DTRS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d59", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_BULL_EST_DTRS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_008", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_BULL_EST_DTRS exists.')
 !!

CREATE  TRIGGER tD_AB_BULL9 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_ALCN_SPLY WHERE SPS_ALCN_SPLY.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SPS_ALCN_SPLY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087a1", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SPS_ALCN_SPLY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_007", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SPS_ALCN_SPLY exists.')
 !!

CREATE  TRIGGER tD_AB_BULL10 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH WHERE SEMEN_BATCH.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000081ef", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_006", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_AB_BULL11 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MRKR_BULL_ALCN WHERE MRKR_BULL_ALCN.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  MRKR_BULL_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085ea", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="MRKR_BULL_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_005", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because MRKR_BULL_ALCN exists.')
 !!

CREATE  TRIGGER tD_AB_BULL12 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_TEAM_ASSGN WHERE BULL_TEAM_ASSGN.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  BULL_TEAM_ASSGN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000088c1", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="BULL_TEAM_ASSGN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_004", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because BULL_TEAM_ASSGN exists.')
 !!

CREATE  TRIGGER tD_AB_BULL13 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ROSTER_RPT WHERE BULL_ROSTER_RPT.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  BULL_ROSTER_RPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000848e", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="BULL_ROSTER_RPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_003", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because BULL_ROSTER_RPT exists.')
 !!

CREATE  TRIGGER tD_AB_BULL14 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BOG_BULL_DCSN WHERE BOG_BULL_DCSN.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  BOG_BULL_DCSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008756", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="BOG_BULL_DCSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_002", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because BOG_BULL_DCSN exists.')
 !!

CREATE  TRIGGER tD_AB_BULL15 AFTER DELETE ON AB_BULL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_BULL_CMT WHERE AB_BULL_CMT.BULL_CD = old.BULL_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL  AB_BULL_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083d7", PARENT_OWNER="", PARENT_TABLE="AB_BULL"
    CHILD_OWNER="", CHILD_TABLE="AB_BULL_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0187_001", FK_COLUMNS="BULL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL because AB_BULL_CMT exists.')
 !!


CREATE TRIGGER D0575U01
  NO CASCADE BEFORE UPDATE
  ON AB_BULL_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0035U01
  NO CASCADE BEFORE UPDATE
  ON AB_BULL_CMT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_BULL_CMT_TP AFTER DELETE ON AB_BULL_CMT_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_BULL_CMT WHERE AB_BULL_CMT.CMT_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_BULL_CMT_TP  AB_BULL_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c24", PARENT_OWNER="", PARENT_TABLE="AB_BULL_CMT_TP"
    CHILD_OWNER="", CHILD_TABLE="AB_BULL_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0035_001", FK_COLUMNS="CMT_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_BULL_CMT_TP because AB_BULL_CMT exists.')
 !!


CREATE TRIGGER D0162U01
  NO CASCADE BEFORE UPDATE
  ON AB_EMPL_ROLE_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_EMPL_ROLE_RE AFTER DELETE ON AB_EMPL_ROLE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_AI_HDR WHERE MDC_AI_HDR.TECH_5_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_ROLE_REF  MDC_AI_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a25", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_ROLE_REF"
    CHILD_OWNER="", CHILD_TABLE="MDC_AI_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0162_005", FK_COLUMNS="TECH_5_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_ROLE_REF because MDC_AI_HDR exists.')
 !!

CREATE  TRIGGER tD_AB_EMPL_ROLE_R2 AFTER DELETE ON AB_EMPL_ROLE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_AI_HDR WHERE MDC_AI_HDR.TECH_4_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_ROLE_REF  MDC_AI_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f90", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_ROLE_REF"
    CHILD_OWNER="", CHILD_TABLE="MDC_AI_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0162_004", FK_COLUMNS="TECH_4_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_ROLE_REF because MDC_AI_HDR exists.')
 !!

CREATE  TRIGGER tD_AB_EMPL_ROLE_R3 AFTER DELETE ON AB_EMPL_ROLE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_AI_HDR WHERE MDC_AI_HDR.TECH_3_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_ROLE_REF  MDC_AI_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009137", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_ROLE_REF"
    CHILD_OWNER="", CHILD_TABLE="MDC_AI_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0162_003", FK_COLUMNS="TECH_3_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_ROLE_REF because MDC_AI_HDR exists.')
 !!

CREATE  TRIGGER tD_AB_EMPL_ROLE_R4 AFTER DELETE ON AB_EMPL_ROLE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_AI_HDR WHERE MDC_AI_HDR.TECH_2_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_ROLE_REF  MDC_AI_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092c4", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_ROLE_REF"
    CHILD_OWNER="", CHILD_TABLE="MDC_AI_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0162_002", FK_COLUMNS="TECH_2_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_ROLE_REF because MDC_AI_HDR exists.')
 !!

CREATE  TRIGGER tD_AB_EMPL_ROLE_R5 AFTER DELETE ON AB_EMPL_ROLE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_AI_HDR WHERE MDC_AI_HDR.TECH_1_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_ROLE_REF  MDC_AI_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f1b", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_ROLE_REF"
    CHILD_OWNER="", CHILD_TABLE="MDC_AI_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0162_001", FK_COLUMNS="TECH_1_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_ROLE_REF because MDC_AI_HDR exists.')
 !!


CREATE TRIGGER D0134U01
  NO CASCADE BEFORE UPDATE
  ON AB_EMPL_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0135I01
  NO CASCADE BEFORE INSERT
  ON AB_EMPL_WKLD_CNSTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.empl_ptpt_cd) )
SIGNAL SQLSTATE 'Z0135'
('D0135I01: empl_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0135U01
  NO CASCADE BEFORE UPDATE
  ON AB_EMPL_WKLD_CNSTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.empl_ptpt_cd) )
SIGNAL SQLSTATE 'Z0135'
('D0135U01: empl_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0135U02
  NO CASCADE BEFORE UPDATE
  ON AB_EMPL_WKLD_CNSTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_EMPL_WKLD_CN AFTER DELETE ON AB_EMPL_WKLD_CNSTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_VST_CNSTR WHERE TECH_VST_CNSTR.EMPL_PTPT_CD = old.EMPL_PTPT_CD AND
                                                 TECH_VST_CNSTR.AB_SCRT_PAD_ID = old.AB_SCRT_PAD_ID AND
                                                 TECH_VST_CNSTR.AB_EMPL_TP_CD = old.AB_EMPL_TP_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_WKLD_CNSTR  TECH_VST_CNSTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a044", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_WKLD_CNSTR"
    CHILD_OWNER="", CHILD_TABLE="TECH_VST_CNSTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0135_002", FK_COLUMNS="EMPL_PTPT_CD""AB_SCRT_PAD_ID""AB_EMPL_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_WKLD_CNSTR because TECH_VST_CNSTR exists.')
 !!

CREATE  TRIGGER tD_AB_EMPL_WKLD_C2 AFTER DELETE ON AB_EMPL_WKLD_CNSTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCENR_GRP_PROF WHERE AB_SCENR_GRP_PROF.EMPL_PTPT_CD = old.EMPL_PTPT_CD AND
                                                    AB_SCENR_GRP_PROF.AB_SCRT_PAD_ID = old.AB_SCRT_PAD_ID AND
                                                    AB_SCENR_GRP_PROF.AB_EMPL_TP_CD = old.AB_EMPL_TP_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_EMPL_WKLD_CNSTR  AB_SCENR_GRP_PROF on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a73b", PARENT_OWNER="", PARENT_TABLE="AB_EMPL_WKLD_CNSTR"
    CHILD_OWNER="", CHILD_TABLE="AB_SCENR_GRP_PROF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0135_001", FK_COLUMNS="EMPL_PTPT_CD""AB_SCRT_PAD_ID""AB_EMPL_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_EMPL_WKLD_CNSTR because AB_SCENR_GRP_PROF exists.')
 !!


CREATE TRIGGER D0373U53
  NO CASCADE BEFORE UPDATE OF 
                    min_insem_end_date
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.min_insem_end_date != new.min_insem_end_date
   OR old.min_insem_end_date IS NULL AND new.min_insem_end_date IS NOT NULL
   OR old.min_insem_end_date IS NOT NULL AND new.min_insem_end_date IS NULL)
SET new.min_insem_end_date_d =
  CASE WHEN new.min_insem_end_date = 0 OR new.min_insem_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.min_insem_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0373I55
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_insem_st_date_d IS NULL 
  AND new.min_insem_st_date IS NOT NULL
   OR CHAR(new.min_insem_st_date_d,ISO) = '0001-01-01'
  AND new.min_insem_st_date IS NOT NULL)
SET new.min_insem_st_date_d =
  CASE WHEN new.min_insem_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.min_insem_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0373U52
  NO CASCADE BEFORE UPDATE OF 
                    frst_work_date_d
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frst_work_date_d != new.frst_work_date_d
   OR old.frst_work_date_d IS NULL and new.frst_work_date_d IS NOT NULL
   OR old.frst_work_date_d IS NOT NULL and new.frst_work_date_d IS NULL)
SET new.frst_work_date =
  CASE WHEN new.frst_work_date_d IS NULL OR new.frst_work_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.frst_work_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373I51
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frst_work_date_d IS NULL 
  AND new.frst_work_date IS NOT NULL
   OR CHAR(new.frst_work_date_d,ISO) = '0001-01-01'
  AND new.frst_work_date IS NOT NULL)
SET new.frst_work_date_d =
  CASE WHEN new.frst_work_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_work_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0373I56
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_insem_st_date IS NULL 
  AND new.min_insem_st_date_d IS NOT NULL
  AND CHAR(new.min_insem_st_date_d,ISO) != '0001-01-01'
   OR new.min_insem_st_date = 0
  AND new.min_insem_st_date_d IS NOT NULL
  AND CHAR(new.min_insem_st_date_d,ISO) != '0001-01-01')
SET new.min_insem_st_date =
  CASE WHEN new.min_insem_st_date_d IS NULL THEN 0 ELSE
  INT(new.min_insem_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373I54
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_insem_end_date IS NULL 
  AND new.min_insem_end_date_d IS NOT NULL
  AND CHAR(new.min_insem_end_date_d,ISO) != '0001-01-01'
   OR new.min_insem_end_date = 0
  AND new.min_insem_end_date_d IS NOT NULL
  AND CHAR(new.min_insem_end_date_d,ISO) != '0001-01-01')
SET new.min_insem_end_date =
  CASE WHEN new.min_insem_end_date_d IS NULL THEN 0 ELSE
  INT(new.min_insem_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373U01
  NO CASCADE BEFORE UPDATE
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0373U51
  NO CASCADE BEFORE UPDATE OF 
                    frst_work_date
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frst_work_date != new.frst_work_date
   OR old.frst_work_date IS NULL AND new.frst_work_date IS NOT NULL
   OR old.frst_work_date IS NOT NULL AND new.frst_work_date IS NULL)
SET new.frst_work_date_d =
  CASE WHEN new.frst_work_date = 0 OR new.frst_work_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_work_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0373I52
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frst_work_date IS NULL 
  AND new.frst_work_date_d IS NOT NULL
  AND CHAR(new.frst_work_date_d,ISO) != '0001-01-01'
   OR new.frst_work_date = 0
  AND new.frst_work_date_d IS NOT NULL
  AND CHAR(new.frst_work_date_d,ISO) != '0001-01-01')
SET new.frst_work_date =
  CASE WHEN new.frst_work_date_d IS NULL THEN 0 ELSE
  INT(new.frst_work_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373U56
  NO CASCADE BEFORE UPDATE OF 
                    min_insem_st_date_d
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.min_insem_st_date_d != new.min_insem_st_date_d
   OR old.min_insem_st_date_d IS NULL and new.min_insem_st_date_d IS NOT NULL
   OR old.min_insem_st_date_d IS NOT NULL and new.min_insem_st_date_d IS NULL)
SET new.min_insem_st_date =
  CASE WHEN new.min_insem_st_date_d IS NULL OR new.min_insem_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.min_insem_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373U54
  NO CASCADE BEFORE UPDATE OF 
                    min_insem_end_date_d
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.min_insem_end_date_d != new.min_insem_end_date_d
   OR old.min_insem_end_date_d IS NULL and new.min_insem_end_date_d IS NOT NULL
   OR old.min_insem_end_date_d IS NOT NULL and new.min_insem_end_date_d IS NULL)
SET new.min_insem_end_date =
  CASE WHEN new.min_insem_end_date_d IS NULL OR new.min_insem_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.min_insem_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0373U55
  NO CASCADE BEFORE UPDATE OF 
                    min_insem_st_date
  ON AB_FLD_EMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.min_insem_st_date != new.min_insem_st_date
   OR old.min_insem_st_date IS NULL AND new.min_insem_st_date IS NOT NULL
   OR old.min_insem_st_date IS NOT NULL AND new.min_insem_st_date IS NULL)
SET new.min_insem_st_date_d =
  CASE WHEN new.min_insem_st_date = 0 OR new.min_insem_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.min_insem_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0373I53
  NO CASCADE BEFORE INSERT
  ON AB_FLD_EMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_insem_end_date_d IS NULL 
  AND new.min_insem_end_date IS NOT NULL
   OR CHAR(new.min_insem_end_date_d,ISO) = '0001-01-01'
  AND new.min_insem_end_date IS NOT NULL)
SET new.min_insem_end_date_d =
  CASE WHEN new.min_insem_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.min_insem_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE  TRIGGER tD_AB_FLD_EMPL AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_TRN_SCHED WHERE TECH_TRN_SCHED.PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_TRN_SCHED on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000850f", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_TRN_SCHED"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_010", FK_COLUMNS="PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_TRN_SCHED exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL2 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_WORKLOAD WHERE TECH_WORKLOAD.PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_WORKLOAD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d6c", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_WORKLOAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_004", FK_COLUMNS="PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_WORKLOAD exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL3 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_ROLE WHERE EMPL_ROLE.PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  EMPL_ROLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007e5b", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="EMPL_ROLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_007", FK_COLUMNS="PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because EMPL_ROLE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL4 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_REVIEW_RESPONSE WHERE AB_TECH_REVIEW_RESPONSE.TECH_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  AB_TECH_REVIEW_RESPONSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093b0", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_REVIEW_RESPONSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_013", FK_COLUMNS="TECH_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because AB_TECH_REVIEW_RESPONSE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL5 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_REVIEW_RESPONSE WHERE AB_TECH_REVIEW_RESPONSE.SUPERMATE_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  AB_TECH_REVIEW_RESPONSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097c7", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_REVIEW_RESPONSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_012", FK_COLUMNS="SUPERMATE_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because AB_TECH_REVIEW_RESPONSE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL6 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_REVIEW_RESPONSE WHERE AB_TECH_REVIEW_RESPONSE.SUPR_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  AB_TECH_REVIEW_RESPONSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092b1", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_REVIEW_RESPONSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_011", FK_COLUMNS="SUPR_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because AB_TECH_REVIEW_RESPONSE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL7 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_PERFORMANCE WHERE TECH_PERFORMANCE.DATAMATE_OWNER_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_PERFORMANCE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ec8", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_PERFORMANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_006", FK_COLUMNS="DATAMATE_OWNER_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_PERFORMANCE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL8 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_PERFORMANCE WHERE TECH_PERFORMANCE.WORKING_TECH_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_PERFORMANCE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ccb", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_PERFORMANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_005", FK_COLUMNS="WORKING_TECH_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_PERFORMANCE exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL9 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM VACANT_INSEM_PD WHERE VACANT_INSEM_PD.RPRT_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  VACANT_INSEM_PD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ca8", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="VACANT_INSEM_PD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_002", FK_COLUMNS="RPRT_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because VACANT_INSEM_PD exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL10 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_DIY_SMN_DLVRY WHERE TECH_DIY_SMN_DLVRY.PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_DIY_SMN_DLVRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000088c2", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_DIY_SMN_DLVRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_001", FK_COLUMNS="PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_DIY_SMN_DLVRY exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL11 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_SUPR WHERE EMPL_SUPR.PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  EMPL_SUPR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007c60", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="EMPL_SUPR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_009", FK_COLUMNS="PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because EMPL_SUPR exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL12 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_SUPR WHERE EMPL_SUPR.SUPR_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  EMPL_SUPR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000851b", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="EMPL_SUPR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_008", FK_COLUMNS="SUPR_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because EMPL_SUPR exists.')
 !!

CREATE  TRIGGER tD_AB_FLD_EMPL13 AFTER DELETE ON AB_FLD_EMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_SEMEN_BATCH WHERE TECH_SEMEN_BATCH.TECH_PTPT_CD = old.PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* AB_FLD_EMPL  TECH_SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bd0", PARENT_OWNER="", PARENT_TABLE="AB_FLD_EMPL"
    CHILD_OWNER="", CHILD_TABLE="TECH_SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0373_003", FK_COLUMNS="TECH_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_FLD_EMPL because TECH_SEMEN_BATCH exists.')
 !!


CREATE TRIGGER D0111I53
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0111U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0111U04
  AFTER UPDATE OF 
        closed_ind,
        smn_dist_pt_num,
        st_date,
        end_date
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (MOD (new.num, 10) = 0)
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
  WHERE amp.ab_grp_rgn_cd = new.rgn_cd
  AND amp.ab_grp_num between (new.num + 1) and (new.num + 9)
  AND amp.plan_chrg_cd != 'N'
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
 !!


CREATE TRIGGER D0111I03
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date >= 1010601
 AND new.closed_ind = '0'
 AND new.dflt_grp_ind = 'N'
 AND new.tech_sv_tp_cd = 'T'
 AND EXISTS (SELECT 1 FROM ab_grp cur
 WHERE (cur.rgn_cd != new.rgn_cd OR cur.num != new.num)
   AND cur.closed_ind = '0'
   AND cur.dflt_grp_ind = 'N'
   AND cur.tech_sv_tp_cd = 'T'
   AND cur.st_date < new.end_date
   AND cur.end_date > new.st_date
   AND cur.main_tech_ptpt_cd = new.main_tech_ptpt_cd
   AND cur.supr_ptpt_cd != new.supr_ptpt_cd) )
-- supervisor must be the same as for the other group
SIGNAL SQLSTATE 'Z0111'
('D0111I03: supervisor must be the same as for other group for tech')
 !!


CREATE TRIGGER D0111I01
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.smn_dist_pt_num != 0
AND NOT EXISTS (
SELECT 1 FROM smn_dist_pt sdp
  WHERE sdp.num = new.smn_dist_pt_num AND sdp.rgn_cd = new.rgn_cd))
-- the semen distribution point number must exist unless it is equal to zero
SIGNAL SQLSTATE 'Z0111'
('D0111I01: invalid semen distribution point')
 !!


CREATE TRIGGER D0111U02
  NO CASCADE BEFORE UPDATE OF 
                    rgn_id
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
          SELECT 1 FROM geo_area ga
          WHERE ga.id = new.rgn_id
          AND ga.geo_area_tp_cd = 'RGN')
     )
-- the geographic area type must be a region
SIGNAL SQLSTATE 'Z0111'
('D0111U02: the geographic area type must be a region')
 !!


CREATE TRIGGER D0111I54
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0111U03
  AFTER UPDATE OF 
        closed_ind,
        smn_tp_cd,
        tech_sv_tp_cd,
        smn_dist_pt_num,
        dflt_grp_ind,
        rgn_id,
        st_date,
        end_date
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log
  (map_ref, herd_num, ssn, num, upd_time)
SELECT map_ref, herd_num, ssn, num, CURRENT TIMESTAMP
  FROM ab_mtng_plan abmp
WHERE abmp.ab_grp_rgn_cd =  new.rgn_cd
  AND abmp.ab_grp_num    =  new.num
  AND abmp.plan_chrg_cd  != 'N'
  AND DATE(INSERT(INSERT(CHAR(abmp.end_date+19000000),7,0,'-'),5,0,'-')) >= CURRENT DATE
 !!


CREATE TRIGGER D0111U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0111U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0111U01
  NO CASCADE BEFORE UPDATE OF 
                    smn_dist_pt_num
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.smn_dist_pt_num != old.smn_dist_pt_num
  AND new.smn_dist_pt_num != 0
  AND new.st_date > 1010531
  AND NOT EXISTS (
SELECT 1 FROM smn_dist_pt sdp
 WHERE sdp.num = new.smn_dist_pt_num AND sdp.rgn_cd = new.rgn_cd))
-- the semen distributution point number must exist unless it is equal to zero
SIGNAL SQLSTATE 'Z0111'
('D0111U01: invalid semen distribution point')
 !!


CREATE TRIGGER D0111U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0111I52
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0111U06
  NO CASCADE BEFORE UPDATE OF 
                    main_tech_ptpt_cd,
                    st_date,
                    end_date,
                    closed_ind,
                    supr_ptpt_cd,
                    tech_sv_tp_cd,
                    dflt_grp_ind
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date >= 1010601
 AND new.closed_ind = '0'
 AND new.dflt_grp_ind = 'N'
 AND new.tech_sv_tp_cd = 'T'
 AND EXISTS (SELECT 1 FROM ab_grp cur
 WHERE (cur.rgn_cd != new.rgn_cd OR cur.num != new.num)
   AND cur.closed_ind = '0'
   AND cur.dflt_grp_ind = 'N'
   AND cur.tech_sv_tp_cd = 'T'
   AND cur.st_date < new.end_date
   AND cur.end_date > new.st_date
   AND cur.main_tech_ptpt_cd = new.main_tech_ptpt_cd
   AND cur.supr_ptpt_cd != new.supr_ptpt_cd) )
-- supervisor must be the same as for the other group
SIGNAL SQLSTATE 'Z0111'
('D0111U06: supervisor must be the same as for other group for tech')
 !!


CREATE TRIGGER D0111I02
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
          SELECT 1 FROM geo_area ga
          WHERE ga.id = new.rgn_id
          AND ga.geo_area_tp_cd = 'RGN')
     )
-- the geographic area type must be a region
SIGNAL SQLSTATE 'Z0111'
('D0111I02: the geographic area type must be a region')
 !!


CREATE TRIGGER D0111I04
  AFTER INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1 FROM ab_grp_wstg agw
    WHERE agw.ab_grp_rgn_cd = new.rgn_cd
      AND agw.ab_grp_num = new.num
      AND agw.brd_cd = ' 5'
      AND agw.ab_scheme_cd = 2))
INSERT INTO ab_grp_wstg (
  ab_grp_rgn_cd
, ab_grp_num
, brd_cd
, ab_scheme_cd
, wstg_pct)
VALUES (
  new.rgn_cd
, new.num
, ' 5'
, 2
, 1)
 !!


CREATE TRIGGER D0111I51
  NO CASCADE BEFORE INSERT
  ON AB_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0111U05
  NO CASCADE BEFORE UPDATE
  ON AB_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_GRP AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_COMB WHERE AB_GRP_COMB.AB_GRP_RGN_CD = old.RGN_CD AND
                                              AB_GRP_COMB.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_COMB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092ba", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_COMB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_001", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_COMB exists.')
 !!

CREATE  TRIGGER tD_AB_GRP2 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN WHERE AB_MTNG_PLAN.AB_GRP_RGN_CD = old.RGN_CD AND
                                               AB_MTNG_PLAN.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_MTNG_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000090f7", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_003", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_MTNG_PLAN exists.')
 !!

CREATE  TRIGGER tD_AB_GRP3 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_PRDCT_DTR WHERE SPS_PRDCT_DTR.RGN_CD = old.RGN_CD AND
                                                SPS_PRDCT_DTR.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  SPS_PRDCT_DTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008877", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="SPS_PRDCT_DTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_013", FK_COLUMNS="RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because SPS_PRDCT_DTR exists.')
 !!

CREATE  TRIGGER tD_AB_GRP4 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_OPTM_ALCN WHERE SPS_OPTM_ALCN.RGN_CD = old.RGN_CD AND
                                                SPS_OPTM_ALCN.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  SPS_OPTM_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009213", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="SPS_OPTM_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_012", FK_COLUMNS="RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because SPS_OPTM_ALCN exists.')
 !!

CREATE  TRIGGER tD_AB_GRP5 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_DESP_DMND WHERE SPS_DESP_DMND.RGN_CD = old.RGN_CD AND
                                                SPS_DESP_DMND.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  SPS_DESP_DMND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008eca", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="SPS_DESP_DMND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_011", FK_COLUMNS="RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because SPS_DESP_DMND exists.')
 !!

CREATE  TRIGGER tD_AB_GRP6 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_HERD WHERE AB_TECH_HERD.AB_GRP_RGN_CD = old.RGN_CD AND
                                               AB_TECH_HERD.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_TECH_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000916a", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_005", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_TECH_HERD exists.')
 !!

CREATE  TRIGGER tD_AB_GRP7 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_WSTG WHERE AB_GRP_WSTG.AB_GRP_RGN_CD = old.RGN_CD AND
                                              AB_GRP_WSTG.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_WSTG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089aa", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_WSTG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_007", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_WSTG exists.')
 !!

CREATE  TRIGGER tD_AB_GRP8 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_SHELF_POSN WHERE AB_GRP_SHELF_POSN.AB_GRP_RGN_CD = old.RGN_CD AND
                                                    AB_GRP_SHELF_POSN.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_SHELF_POSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009927", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_SHELF_POSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_014", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_SHELF_POSN exists.')
 !!

CREATE  TRIGGER tD_AB_GRP9 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INSEM_LLL_SEMEN WHERE INSEM_LLL_SEMEN.INSEM_GRP_RGN_CD = old.RGN_CD AND
                                                  INSEM_LLL_SEMEN.INSEM_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  INSEM_LLL_SEMEN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092a4", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="INSEM_LLL_SEMEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_009", FK_COLUMNS="INSEM_GRP_RGN_CD""INSEM_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because INSEM_LLL_SEMEN exists.')
 !!

CREATE  TRIGGER tD_AB_GRP10 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_ERR WHERE AB_GRP_ERR.RGN_CD = old.RGN_CD AND
                                             AB_GRP_ERR.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087b7", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_010", FK_COLUMNS="RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_ERR exists.')
 !!

CREATE  TRIGGER tD_AB_GRP11 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_DLVRY_INST WHERE AB_GRP_DLVRY_INST.AB_GRP_RGN_CD = old.RGN_CD AND
                                                    AB_GRP_DLVRY_INST.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_DLVRY_INST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f36", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_DLVRY_INST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_002", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_DLVRY_INST exists.')
 !!

CREATE  TRIGGER tD_AB_GRP12 AFTER DELETE ON AB_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_LLL_SMN WHERE AB_GRP_LLL_SMN.AB_GRP_RGN_CD = old.RGN_CD AND
                                                 AB_GRP_LLL_SMN.AB_GRP_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_GRP  AB_GRP_LLL_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000951c", PARENT_OWNER="", PARENT_TABLE="AB_GRP"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_LLL_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0111_015", FK_COLUMNS="AB_GRP_RGN_CD""AB_GRP_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_GRP because AB_GRP_LLL_SMN exists.')
 !!


CREATE TRIGGER D0164U02
  AFTER UPDATE OF 
        alcn_st_date,
        alcn_end_date,
        amalg_st_date,
        amalg_end_date
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (MOD (new.ab_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
            (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = new.ab_grp_rgn_cd
  AND amp.ab_grp_num between (new.ab_grp_num + 1) AND (new.ab_grp_num + 9)
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
  AND amp.plan_chrg_cd != 'N'
  AND SSN = COALESCE(
             CASE WHEN (MOD(new.amalg_st_date,10000)/100 > 5 ) THEN
               (new.amalg_st_date + 19000000)/10000
             ELSE (new.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0164D03
  AFTER DELETE
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (MOD (old.desp_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
            (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = old.desp_grp_rgn_cd
  AND amp.ab_grp_num between (old.desp_grp_num + 1)
                         AND (old.desp_grp_num + 9)
  AND amp.plan_chrg_cd != 'N'
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
  AND SSN = COALESCE(
             CASE WHEN (MOD(old.amalg_st_date,10000)/100 > 5 ) THEN
               (old.amalg_st_date + 19000000)/10000
             ELSE (old.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0164I53
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_st_date_d IS NULL 
  AND new.alcn_st_date IS NOT NULL
   OR CHAR(new.alcn_st_date_d,ISO) = '0001-01-01'
  AND new.alcn_st_date IS NOT NULL)
SET new.alcn_st_date_d =
  CASE WHEN new.alcn_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164U58
  NO CASCADE BEFORE UPDATE OF 
                    amalg_st_date_d
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_st_date_d != new.amalg_st_date_d
   OR old.amalg_st_date_d IS NULL and new.amalg_st_date_d IS NOT NULL
   OR old.amalg_st_date_d IS NOT NULL and new.amalg_st_date_d IS NULL)
SET new.amalg_st_date =
  CASE WHEN new.amalg_st_date_d IS NULL OR new.amalg_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.amalg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164I57
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_st_date_d IS NULL 
  AND new.amalg_st_date IS NOT NULL
   OR CHAR(new.amalg_st_date_d,ISO) = '0001-01-01'
  AND new.amalg_st_date IS NOT NULL)
SET new.amalg_st_date_d =
  CASE WHEN new.amalg_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164I51
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_end_date_d IS NULL 
  AND new.alcn_end_date IS NOT NULL
   OR CHAR(new.alcn_end_date_d,ISO) = '0001-01-01'
  AND new.alcn_end_date IS NOT NULL)
SET new.alcn_end_date_d =
  CASE WHEN new.alcn_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164I52
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_end_date IS NULL 
  AND new.alcn_end_date_d IS NOT NULL
  AND CHAR(new.alcn_end_date_d,ISO) != '0001-01-01'
   OR new.alcn_end_date = 0
  AND new.alcn_end_date_d IS NOT NULL
  AND CHAR(new.alcn_end_date_d,ISO) != '0001-01-01')
SET new.alcn_end_date =
  CASE WHEN new.alcn_end_date_d IS NULL THEN 0 ELSE
  INT(new.alcn_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164U55
  NO CASCADE BEFORE UPDATE OF 
                    amalg_end_date
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_end_date != new.amalg_end_date
   OR old.amalg_end_date IS NULL AND new.amalg_end_date IS NOT NULL
   OR old.amalg_end_date IS NOT NULL AND new.amalg_end_date IS NULL)
SET new.amalg_end_date_d =
  CASE WHEN new.amalg_end_date = 0 OR new.amalg_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164U53
  NO CASCADE BEFORE UPDATE OF 
                    alcn_st_date
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_st_date != new.alcn_st_date
   OR old.alcn_st_date IS NULL AND new.alcn_st_date IS NOT NULL
   OR old.alcn_st_date IS NOT NULL AND new.alcn_st_date IS NULL)
SET new.alcn_st_date_d =
  CASE WHEN new.alcn_st_date = 0 OR new.alcn_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164U03
  AFTER UPDATE OF 
        alcn_st_date,
        alcn_end_date,
        amalg_st_date,
        amalg_end_date
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (MOD (new.desp_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
(map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = new.desp_grp_rgn_cd
AND   amp.ab_grp_num between (new.desp_grp_num + 1)
                         and (new.desp_grp_num + 9)
AND   amp.plan_chrg_cd != 'N'
AND   amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
AND   SSN = COALESCE(
             CASE WHEN (MOD(new.amalg_st_date,10000)/100 > 5 ) THEN
               (new.amalg_st_date + 19000000)/10000
             ELSE (new.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0164I56
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_end_date IS NULL 
  AND new.amalg_end_date_d IS NOT NULL
  AND CHAR(new.amalg_end_date_d,ISO) != '0001-01-01'
   OR new.amalg_end_date = 0
  AND new.amalg_end_date_d IS NOT NULL
  AND CHAR(new.amalg_end_date_d,ISO) != '0001-01-01')
SET new.amalg_end_date =
  CASE WHEN new.amalg_end_date_d IS NULL THEN 0 ELSE
  INT(new.amalg_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164U54
  NO CASCADE BEFORE UPDATE OF 
                    alcn_st_date_d
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_st_date_d != new.alcn_st_date_d
   OR old.alcn_st_date_d IS NULL and new.alcn_st_date_d IS NOT NULL
   OR old.alcn_st_date_d IS NOT NULL and new.alcn_st_date_d IS NULL)
SET new.alcn_st_date =
  CASE WHEN new.alcn_st_date_d IS NULL OR new.alcn_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.alcn_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164I58
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_st_date IS NULL 
  AND new.amalg_st_date_d IS NOT NULL
  AND CHAR(new.amalg_st_date_d,ISO) != '0001-01-01'
   OR new.amalg_st_date = 0
  AND new.amalg_st_date_d IS NOT NULL
  AND CHAR(new.amalg_st_date_d,ISO) != '0001-01-01')
SET new.amalg_st_date =
  CASE WHEN new.amalg_st_date_d IS NULL THEN 0 ELSE
  INT(new.amalg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164U51
  NO CASCADE BEFORE UPDATE OF 
                    alcn_end_date
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_end_date != new.alcn_end_date
   OR old.alcn_end_date IS NULL AND new.alcn_end_date IS NOT NULL
   OR old.alcn_end_date IS NOT NULL AND new.alcn_end_date IS NULL)
SET new.alcn_end_date_d =
  CASE WHEN new.alcn_end_date = 0 OR new.alcn_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164U52
  NO CASCADE BEFORE UPDATE OF 
                    alcn_end_date_d
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_end_date_d != new.alcn_end_date_d
   OR old.alcn_end_date_d IS NULL and new.alcn_end_date_d IS NOT NULL
   OR old.alcn_end_date_d IS NOT NULL and new.alcn_end_date_d IS NULL)
SET new.alcn_end_date =
  CASE WHEN new.alcn_end_date_d IS NULL OR new.alcn_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.alcn_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164U56
  NO CASCADE BEFORE UPDATE OF 
                    amalg_end_date_d
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_end_date_d != new.amalg_end_date_d
   OR old.amalg_end_date_d IS NULL and new.amalg_end_date_d IS NOT NULL
   OR old.amalg_end_date_d IS NOT NULL and new.amalg_end_date_d IS NULL)
SET new.amalg_end_date =
  CASE WHEN new.amalg_end_date_d IS NULL OR new.amalg_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.amalg_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164I02
  AFTER INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (MOD (new.ab_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
            (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = new.ab_grp_rgn_cd
  AND amp.ab_grp_num BETWEEN (new.ab_grp_num + 1) AND (new.ab_grp_num + 9)
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
  AND amp.plan_chrg_cd != 'N'
  AND SSN = COALESCE(
             CASE WHEN (MOD(new.amalg_st_date,10000)/100 > 5 ) THEN
               (new.amalg_st_date + 19000000)/10000
             ELSE (new.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0164D02
  AFTER DELETE
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (MOD (old.ab_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
            (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = old.ab_grp_rgn_cd
  AND amp.ab_grp_num between (old.ab_grp_num + 1) AND (old.ab_grp_num + 9)
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
  AND amp.plan_chrg_cd != 'N'
  AND SSN = COALESCE(
             CASE WHEN (MOD(old.amalg_st_date,10000)/100 > 5 ) THEN
               (old.amalg_st_date + 19000000)/10000
             ELSE (old.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0164I01
  AFTER INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
SELECT map_ref, herd_num, ssn, num, CURRENT TIMESTAMP
FROM ab_mtng_plan abmp
WHERE abmp.ab_grp_rgn_cd = new.ab_grp_rgn_cd
  AND abmp.ab_grp_num = new.ab_grp_num
  AND abmp.plan_chrg_cd != 'N'
  AND abmp.SSN =
    INTEGER (CASE WHEN SUBSTR (CHAR (new.amalg_st_date + 19000000),5,2) > '05' THEN
      SUBSTR (CHAR (new.amalg_st_date + 19000000),1,4)
ELSE
      SUBSTR (CHAR (new.amalg_st_date + 18990000),1,4) END
 !!


CREATE TRIGGER D0164U01
  AFTER UPDATE OF 
        alcn_st_date,
        alcn_end_date,
        desp_grp_rgn_cd,
        desp_grp_num,
        amalg_st_date,
        amalg_end_date
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
SELECT map_ref, herd_num, ssn, num, CURRENT TIMESTAMP
FROM ab_mtng_plan abmp
WHERE abmp.ab_grp_rgn_cd = new.ab_grp_rgn_cd
AND abmp.ab_grp_num = new.ab_grp_num
AND abmp.plan_chrg_cd != 'N'
AND abmp.SSN =
  INTEGER (
      CASE WHEN SUBSTR (CHAR (new.amalg_st_date +
           19000000),5,2) > '05' THEN
        SUBSTR (CHAR (new.amalg_st_date + 19000000),1,4)
      ELSE
        SUBSTR (CHAR (new.amalg_st_date + 18990000),1,4)
      END
 !!


CREATE TRIGGER D0164U04
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0164U57
  NO CASCADE BEFORE UPDATE OF 
                    amalg_st_date
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_st_date != new.amalg_st_date
   OR old.amalg_st_date IS NULL AND new.amalg_st_date IS NOT NULL
   OR old.amalg_st_date IS NOT NULL AND new.amalg_st_date IS NULL)
SET new.amalg_st_date_d =
  CASE WHEN new.amalg_st_date = 0 OR new.amalg_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164D01
  AFTER DELETE
  ON AB_GRP_COMB
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log
(map_ref, herd_num, ssn, num, upd_time)
SELECT map_ref, herd_num, ssn, num, CURRENT TIMESTAMP
FROM ab_mtng_plan abmp
WHERE abmp.ab_grp_rgn_cd = old.ab_grp_rgn_cd
  AND abmp.ab_grp_num    = old.ab_grp_num
  AND abmp.plan_chrg_cd  != 'N'
  AND abmp.ssn           =
-- The season runs from 1/6 - 31/5. SSN is the YEAR, which is
-- the current year when the month is > 5, or current year - 1
-- if the month is <=5.
  INTEGER
  (
    CASE WHEN SUBSTR (CHAR (old.amalg_st_date +
              19000000),5,2) > '05'
    THEN
      SUBSTR(CHAR(old.amalg_st_date + 19000000),1,4)
    ELSE
      SUBSTR (CHAR (old.amalg_st_date + 18990000),1,4)
    END
 !!


CREATE TRIGGER D0164I55
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_end_date_d IS NULL 
  AND new.amalg_end_date IS NOT NULL
   OR CHAR(new.amalg_end_date_d,ISO) = '0001-01-01'
  AND new.amalg_end_date IS NOT NULL)
SET new.amalg_end_date_d =
  CASE WHEN new.amalg_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0164I54
  NO CASCADE BEFORE INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_st_date IS NULL 
  AND new.alcn_st_date_d IS NOT NULL
  AND CHAR(new.alcn_st_date_d,ISO) != '0001-01-01'
   OR new.alcn_st_date = 0
  AND new.alcn_st_date_d IS NOT NULL
  AND CHAR(new.alcn_st_date_d,ISO) != '0001-01-01')
SET new.alcn_st_date =
  CASE WHEN new.alcn_st_date_d IS NULL THEN 0 ELSE
  INT(new.alcn_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0164I03
  AFTER INSERT
  ON AB_GRP_COMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (MOD (new.desp_grp_num, 10) = 0)
INSERT INTO ab_mtng_plan_log
            (map_ref, herd_num, ssn, num, upd_time)
SELECT amp.map_ref, amp.herd_num, amp.ssn, amp.num, CURRENT TIMESTAMP
FROM ab_mtng_plan amp
WHERE amp.ab_grp_rgn_cd = new.desp_grp_rgn_cd
  AND amp.ab_grp_num BETWEEN (new.desp_grp_num + 1)
                         AND (new.desp_grp_num + 9)
  AND amp.plan_chrg_cd != 'N'
  AND amp.end_date >= INT(REPLACE(CHAR(CURRENT DATE,ISO),'-',''))-19000000
  AND SSN = COALESCE(
             CASE WHEN (MOD(new.amalg_st_date,10000)/100 > 5 ) THEN
               (new.amalg_st_date + 19000000)/10000
             ELSE (new.amalg_st_date + 18990000)/10000
             END
 !!


CREATE TRIGGER D0163U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_DLVRY_INST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0074U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0018U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_LLL_SMN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0661U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_SHELF_POSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0076U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_SZE_ADJ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0302U01
  NO CASCADE BEFORE UPDATE
  ON AB_GRP_WSTG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0096U01
  NO CASCADE BEFORE UPDATE
  ON AB_MNGT_RPT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0042I02
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rqst_ptpt_cd) )
SIGNAL SQLSTATE 'Z0042'
('D0042I01: rqst_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0042I54
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042I53
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U56
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042I55
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U03
  NO CASCADE BEFORE UPDATE
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_timestamp = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0042U51
  NO CASCADE BEFORE UPDATE OF 
                    can_date
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date != new.can_date
   OR old.can_date IS NULL AND new.can_date IS NOT NULL
   OR old.can_date IS NOT NULL AND new.can_date IS NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 OR new.can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U01
  AFTER UPDATE OF 
        st_date,
        end_date,
        insem_cd,
        can_date,
        mtng_syst_cd,
        mob_alt_brd_cd,
        cow_cnt,
        yrlg_cnt,
        ab_grp_rgn_cd,
        ab_grp_num,
        sps_frz_sply_ind,
        mtng_plan_sts_cd,
        plan_chrg_cd,
        ps_frz_sply_ind,
        sire_brd_cd,
        core_prod_cd
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((new.end_date_d >= CURRENT DATE
    OR old.end_date_d >= CURRENT DATE)
  AND (old.plan_chrg_cd != 'N'
    OR new.plan_chrg_cd != 'N'))
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
  VALUES (new.map_ref, new.herd_num, new.ssn, new.num, CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0042U02
  NO CASCADE BEFORE UPDATE OF 
                    rqst_ptpt_cd
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rqst_ptpt_cd) )
SIGNAL SQLSTATE 'Z0042'
('D0042I01: rqst_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0042U54
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042I51
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date_d IS NULL 
  AND new.can_date IS NOT NULL
   OR CHAR(new.can_date_d,ISO) = '0001-01-01'
  AND new.can_date IS NOT NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042I52
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date IS NULL 
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01'
   OR new.can_date = 0
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01')
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042U53
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U57
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U58
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) END
 !!


CREATE TRIGGER D0042U52
  NO CASCADE BEFORE UPDATE OF 
                    can_date_d
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date_d != new.can_date_d
   OR old.can_date_d IS NULL and new.can_date_d IS NOT NULL
   OR old.can_date_d IS NOT NULL and new.can_date_d IS NULL)
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL OR new.can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042I01
  AFTER INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.plan_chrg_cd != 'N')
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
  VALUES (new.map_ref, new.herd_num, new.ssn, new.num, CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0042I58
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) END
 !!


CREATE TRIGGER D0042I57
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042I56
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0042U55
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0042U04
  AFTER UPDATE
  ON AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.herd_num = new.herd_num
  AND hd.sr_area_ssn = new.ssn
  AND hd.sv_dtl_upd_date_d != CURRENT DATE
 !!


CREATE  TRIGGER tD_AB_MTNG_PLAN AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_FRZ_SMN WHERE MTNG_PLAN_FRZ_SMN.MAP_REF = old.MAP_REF AND
                                                    MTNG_PLAN_FRZ_SMN.HERD_NUM = old.HERD_NUM AND
                                                    MTNG_PLAN_FRZ_SMN.SSN = old.SSN AND
                                                    MTNG_PLAN_FRZ_SMN.MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  MTNG_PLAN_FRZ_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a532", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_FRZ_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_009", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because MTNG_PLAN_FRZ_SMN exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN2 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN WHERE AB_MTNG_PLAN.MAP_REF = old.MAP_REF AND
                                               AB_MTNG_PLAN.HERD_NUM = old.HERD_NUM AND
                                               AB_MTNG_PLAN.SSN = old.SSN AND
                                               AB_MTNG_PLAN.PRNT_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_MTNG_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009472", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_001", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""PRNT_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_MTNG_PLAN exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN3 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_RQRD_SMN WHERE MTNG_PLAN_RQRD_SMN.MAP_REF = old.MAP_REF AND
                                                     MTNG_PLAN_RQRD_SMN.HERD_NUM = old.HERD_NUM AND
                                                     MTNG_PLAN_RQRD_SMN.SSN = old.SSN AND
                                                     MTNG_PLAN_RQRD_SMN.MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  MTNG_PLAN_RQRD_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a1f8", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_RQRD_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_010", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because MTNG_PLAN_RQRD_SMN exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN4 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_ERR_HIST WHERE MTNG_PLAN_ERR_HIST.MAP_REF = old.MAP_REF AND
                                                     MTNG_PLAN_ERR_HIST.HERD_NUM = old.HERD_NUM AND
                                                     MTNG_PLAN_ERR_HIST.SSN = old.SSN AND
                                                     MTNG_PLAN_ERR_HIST.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  MTNG_PLAN_ERR_HIST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093b9", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_ERR_HIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_008", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because MTNG_PLAN_ERR_HIST exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN5 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FUTR_MTNG_PLAN_DTL WHERE FUTR_MTNG_PLAN_DTL.MAP_REF = old.MAP_REF AND
                                                     FUTR_MTNG_PLAN_DTL.HERD_NUM = old.HERD_NUM AND
                                                     FUTR_MTNG_PLAN_DTL.SSN = old.SSN AND
                                                     FUTR_MTNG_PLAN_DTL.MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  FUTR_MTNG_PLAN_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a60b", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="FUTR_MTNG_PLAN_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_007", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because FUTR_MTNG_PLAN_DTL exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN6 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCRT_PAD_DMND WHERE AB_SCRT_PAD_DMND.MAP_REF = old.MAP_REF AND
                                                   AB_SCRT_PAD_DMND.HERD_NUM = old.HERD_NUM AND
                                                   AB_SCRT_PAD_DMND.SSN = old.SSN AND
                                                   AB_SCRT_PAD_DMND.MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_SCRT_PAD_DMND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009d62", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_SCRT_PAD_DMND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_006", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_SCRT_PAD_DMND exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN7 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCENR_GRP_PLANS WHERE AB_SCENR_GRP_PLANS.MAP_REF = old.MAP_REF AND
                                                     AB_SCENR_GRP_PLANS.HERD_NUM = old.HERD_NUM AND
                                                     AB_SCENR_GRP_PLANS.SSN = old.SSN AND
                                                     AB_SCENR_GRP_PLANS.AB_MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_SCENR_GRP_PLANS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009e3f", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_SCENR_GRP_PLANS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_005", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""AB_MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_SCENR_GRP_PLANS exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN8 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN_LOG WHERE AB_MTNG_PLAN_LOG.MAP_REF = old.MAP_REF AND
                                                   AB_MTNG_PLAN_LOG.HERD_NUM = old.HERD_NUM AND
                                                   AB_MTNG_PLAN_LOG.SSN = old.SSN AND
                                                   AB_MTNG_PLAN_LOG.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_MTNG_PLAN_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092e1", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_004", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_MTNG_PLAN_LOG exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN9 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN_ERR WHERE AB_MTNG_PLAN_ERR.MAP_REF = old.MAP_REF AND
                                                   AB_MTNG_PLAN_ERR.HERD_NUM = old.HERD_NUM AND
                                                   AB_MTNG_PLAN_ERR.SSN = old.SSN AND
                                                   AB_MTNG_PLAN_ERR.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_MTNG_PLAN_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009747", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_003", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_MTNG_PLAN_ERR exists.')
 !!

CREATE  TRIGGER tD_AB_MTNG_PLAN10 AFTER DELETE ON AB_MTNG_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MNGT_RPT WHERE AB_MNGT_RPT.MAP_REF = old.MAP_REF AND
                                              AB_MNGT_RPT.HERD_NUM = old.HERD_NUM AND
                                              AB_MNGT_RPT.SSN = old.SSN AND
                                              AB_MNGT_RPT.MTNG_PLAN_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* AB_MTNG_PLAN  AB_MNGT_RPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093ae", PARENT_OWNER="", PARENT_TABLE="AB_MTNG_PLAN"
    CHILD_OWNER="", CHILD_TABLE="AB_MNGT_RPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0042_002", FK_COLUMNS="MAP_REF""HERD_NUM""SSN""MTNG_PLAN_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_MTNG_PLAN because AB_MNGT_RPT exists.')
 !!


CREATE TRIGGER D0072U01
  NO CASCADE BEFORE UPDATE
  ON AB_MTNG_PLAN_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0625I51
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date_d IS NULL 
  AND new.can_date IS NOT NULL
   OR CHAR(new.can_date_d,ISO) = '0001-01-01'
  AND new.can_date IS NOT NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625I52
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date IS NULL 
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01'
   OR new.can_date = 0
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01')
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625I53
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625I54
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625I55
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625I56
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625I57
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625I58
  NO CASCADE BEFORE INSERT
  ON AB_MTNG_PLAN_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625U51
  NO CASCADE BEFORE UPDATE OF 
                    can_date
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date != new.can_date
   OR old.can_date IS NULL AND new.can_date IS NOT NULL
   OR old.can_date IS NOT NULL AND new.can_date IS NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 OR new.can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625U52
  NO CASCADE BEFORE UPDATE OF 
                    can_date_d
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date_d != new.can_date_d
   OR old.can_date_d IS NULL and new.can_date_d IS NOT NULL
   OR old.can_date_d IS NOT NULL and new.can_date_d IS NULL)
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL OR new.can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625U53
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625U54
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625U55
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625U56
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0625U57
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0625U58
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON AB_MTNG_PLAN_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0083U01
  NO CASCADE BEFORE UPDATE
  ON AB_MTNG_PLAN_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0136U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCENR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_SCENR AFTER DELETE ON AB_SCENR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCENR_GRP_PROF WHERE AB_SCENR_GRP_PROF.AB_SCENR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCENR  AB_SCENR_GRP_PROF on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a65", PARENT_OWNER="", PARENT_TABLE="AB_SCENR"
    CHILD_OWNER="", CHILD_TABLE="AB_SCENR_GRP_PROF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0136_001", FK_COLUMNS="AB_SCENR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCENR because AB_SCENR_GRP_PROF exists.')
 !!


CREATE TRIGGER D0137U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCENR_GRP_PLANS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0138U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCENR_GRP_PROF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_SCENR_GRP_PR AFTER DELETE ON AB_SCENR_GRP_PROF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCENR_GRP_PLANS WHERE AB_SCENR_GRP_PLANS.AB_SCENR_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCENR_GRP_PROF  AB_SCENR_GRP_PLANS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095f7", PARENT_OWNER="", PARENT_TABLE="AB_SCENR_GRP_PROF"
    CHILD_OWNER="", CHILD_TABLE="AB_SCENR_GRP_PLANS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0138_001", FK_COLUMNS="AB_SCENR_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCENR_GRP_PROF because AB_SCENR_GRP_PLANS exists.')
 !!


CREATE TRIGGER D0139U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCRT_PAD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AB_SCRT_PAD AFTER DELETE ON AB_SCRT_PAD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCRT_PAD_USER WHERE AB_SCRT_PAD_USER.AB_SCRT_PAD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCRT_PAD  AB_SCRT_PAD_USER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009043", PARENT_OWNER="", PARENT_TABLE="AB_SCRT_PAD"
    CHILD_OWNER="", CHILD_TABLE="AB_SCRT_PAD_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0139_005", FK_COLUMNS="AB_SCRT_PAD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCRT_PAD because AB_SCRT_PAD_USER exists.')
 !!

CREATE  TRIGGER tD_AB_SCRT_PAD2 AFTER DELETE ON AB_SCRT_PAD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCRT_PAD_DMND WHERE AB_SCRT_PAD_DMND.AB_SCRT_PAD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCRT_PAD  AB_SCRT_PAD_DMND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000902d", PARENT_OWNER="", PARENT_TABLE="AB_SCRT_PAD"
    CHILD_OWNER="", CHILD_TABLE="AB_SCRT_PAD_DMND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0139_004", FK_COLUMNS="AB_SCRT_PAD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCRT_PAD because AB_SCRT_PAD_DMND exists.')
 !!

CREATE  TRIGGER tD_AB_SCRT_PAD3 AFTER DELETE ON AB_SCRT_PAD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCRT_PAD_DM WHERE AB_SCRT_PAD_DM.AB_SCRT_PAD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCRT_PAD  AB_SCRT_PAD_DM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cc5", PARENT_OWNER="", PARENT_TABLE="AB_SCRT_PAD"
    CHILD_OWNER="", CHILD_TABLE="AB_SCRT_PAD_DM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0139_003", FK_COLUMNS="AB_SCRT_PAD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCRT_PAD because AB_SCRT_PAD_DM exists.')
 !!

CREATE  TRIGGER tD_AB_SCRT_PAD4 AFTER DELETE ON AB_SCRT_PAD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_SCENR WHERE AB_SCENR.AB_SCRT_PAD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCRT_PAD  AB_SCENR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008daf", PARENT_OWNER="", PARENT_TABLE="AB_SCRT_PAD"
    CHILD_OWNER="", CHILD_TABLE="AB_SCENR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0139_002", FK_COLUMNS="AB_SCRT_PAD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCRT_PAD because AB_SCENR exists.')
 !!

CREATE  TRIGGER tD_AB_SCRT_PAD5 AFTER DELETE ON AB_SCRT_PAD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_EMPL_WKLD_CNSTR WHERE AB_EMPL_WKLD_CNSTR.AB_SCRT_PAD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_SCRT_PAD  AB_EMPL_WKLD_CNSTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dcc", PARENT_OWNER="", PARENT_TABLE="AB_SCRT_PAD"
    CHILD_OWNER="", CHILD_TABLE="AB_EMPL_WKLD_CNSTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0139_001", FK_COLUMNS="AB_SCRT_PAD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_SCRT_PAD because AB_EMPL_WKLD_CNSTR exists.')
 !!


CREATE TRIGGER D0140U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCRT_PAD_DM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0141U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCRT_PAD_DMND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0142U01
  NO CASCADE BEFORE UPDATE
  ON AB_SCRT_PAD_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0606I01
  NO CASCADE BEFORE INSERT
  ON AB_TECH_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ab_tech_ptpt_cd) )
SIGNAL SQLSTATE 'Z0606'
('D0606I01: ab_tech_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0606U01
  NO CASCADE BEFORE UPDATE OF 
                    ab_tech_ptpt_cd
  ON AB_TECH_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ab_tech_ptpt_cd) )
SIGNAL SQLSTATE 'Z0606'
('D0606I01: ab_tech_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0606U02
  NO CASCADE BEFORE UPDATE
  ON AB_TECH_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0697U01
  NO CASCADE BEFORE UPDATE
  ON AB_TECH_REVIEW_RESPONSE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0697I01
  NO CASCADE BEFORE INSERT
  ON AB_TECH_REVIEW_RESPONSE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_owner_ptpt_cd IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.herd_owner_ptpt_cd) )
SIGNAL SQLSTATE 'Z0016'
('D0016I01: herd_owner_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0697U02
  NO CASCADE BEFORE UPDATE
  ON AB_TECH_REVIEW_RESPONSE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_owner_ptpt_cd IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.herd_owner_ptpt_cd) )
SIGNAL SQLSTATE 'Z0016'
('D0016I01: herd_owner_ptpt_cd does not exist on pfx_user')
 !!


CREATE  TRIGGER tD_AB_TECH_REVIEW_ AFTER DELETE ON AB_TECH_REVIEW_RESPONSE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_ANSWER WHERE REVIEW_ANSWER.RESPONSE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AB_TECH_REVIEW_RESPONSE  REVIEW_ANSWER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009562", PARENT_OWNER="", PARENT_TABLE="AB_TECH_REVIEW_RESPONSE"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_ANSWER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0697_001", FK_COLUMNS="RESPONSE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AB_TECH_REVIEW_RESPONSE because REVIEW_ANSWER exists.')
 !!


CREATE TRIGGER D0329U01
  NO CASCADE BEFORE UPDATE OF 
                    int_chrg_ind
  ON ACCT_ANLYS_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.int_chrg_ind = 'Y'
 AND old.int_chrg_ind != new.int_chrg_ind
 AND EXISTS (
   SELECT 1 FROM gm_ctrct_tp gct
     WHERE new.cd = gct.acct_anlys_grp_cd
       AND gct.bsns_unit_cd IS NULL)
)
SIGNAL SQLSTATE 'Z0329'
('D0329U01: cannot set int_chrg_ind to Y: gm_ctrct_tp.bsns_unit')
 !!


CREATE TRIGGER D0329U02
  NO CASCADE BEFORE UPDATE
  ON ACCT_ANLYS_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ACCT_ANLYS_GRP AFTER DELETE ON ACCT_ANLYS_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CTRCT_TP WHERE GM_CTRCT_TP.ACCT_ANLYS_GRP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ACCT_ANLYS_GRP  GM_CTRCT_TP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009205", PARENT_OWNER="", PARENT_TABLE="ACCT_ANLYS_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_CTRCT_TP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0329_001", FK_COLUMNS="ACCT_ANLYS_GRP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ACCT_ANLYS_GRP because GM_CTRCT_TP exists.')
 !!


CREATE TRIGGER D0884U01
  NO CASCADE BEFORE UPDATE
  ON ACTUATE_PSWD_CHANGE_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0045I51
  NO CASCADE BEFORE INSERT
  ON AD_HOC_RPRT_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0045I52
  NO CASCADE BEFORE INSERT
  ON AD_HOC_RPRT_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0045U01
  NO CASCADE BEFORE UPDATE
  ON AD_HOC_RPRT_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0045U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON AD_HOC_RPRT_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0045U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON AD_HOC_RPRT_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0015I51
  NO CASCADE BEFORE INSERT
  ON ADD_DCO_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_dtl_rcd_date_d IS NULL 
  AND new.herd_dtl_rcd_date IS NOT NULL
   OR CHAR(new.herd_dtl_rcd_date_d,ISO) = '0001-01-01'
  AND new.herd_dtl_rcd_date IS NOT NULL)
SET new.herd_dtl_rcd_date_d =
  CASE WHEN new.herd_dtl_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.herd_dtl_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0015I52
  NO CASCADE BEFORE INSERT
  ON ADD_DCO_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_dtl_rcd_date IS NULL 
  AND new.herd_dtl_rcd_date_d IS NOT NULL
  AND CHAR(new.herd_dtl_rcd_date_d,ISO) != '0001-01-01'
   OR new.herd_dtl_rcd_date = 0
  AND new.herd_dtl_rcd_date_d IS NOT NULL
  AND CHAR(new.herd_dtl_rcd_date_d,ISO) != '0001-01-01')
SET new.herd_dtl_rcd_date =
  CASE WHEN new.herd_dtl_rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0015U01
  NO CASCADE BEFORE UPDATE
  ON ADD_DCO_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0015U51
  NO CASCADE BEFORE UPDATE OF 
                    herd_dtl_rcd_date
  ON ADD_DCO_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.herd_dtl_rcd_date != new.herd_dtl_rcd_date
   OR old.herd_dtl_rcd_date IS NULL AND new.herd_dtl_rcd_date IS NOT NULL
   OR old.herd_dtl_rcd_date IS NOT NULL AND new.herd_dtl_rcd_date IS NULL)
SET new.herd_dtl_rcd_date_d =
  CASE WHEN new.herd_dtl_rcd_date = 0 OR new.herd_dtl_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.herd_dtl_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0015U52
  NO CASCADE BEFORE UPDATE OF 
                    herd_dtl_rcd_date_d
  ON ADD_DCO_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.herd_dtl_rcd_date_d != new.herd_dtl_rcd_date_d
   OR old.herd_dtl_rcd_date_d IS NULL and new.herd_dtl_rcd_date_d IS NOT NULL
   OR old.herd_dtl_rcd_date_d IS NOT NULL and new.herd_dtl_rcd_date_d IS NULL)
SET new.herd_dtl_rcd_date =
  CASE WHEN new.herd_dtl_rcd_date_d IS NULL OR new.herd_dtl_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0102U01
  NO CASCADE BEFORE UPDATE
  ON ADDR_FMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0103U01
  NO CASCADE BEFORE UPDATE
  ON ADDR_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ADDR_USE AFTER DELETE ON ADDR_USE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SOF_ADDR WHERE SOF_ADDR.ADDR_USE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ADDR_USE  SOF_ADDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008657", PARENT_OWNER="", PARENT_TABLE="ADDR_USE"
    CHILD_OWNER="", CHILD_TABLE="SOF_ADDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0103_001", FK_COLUMNS="ADDR_USE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ADDR_USE because SOF_ADDR exists.')
 !!

CREATE  TRIGGER tD_ADDR_USE2 AFTER DELETE ON ADDR_USE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_ADDR WHERE PARTY_ADDR.ADDR_USE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ADDR_USE  PARTY_ADDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008821", PARENT_OWNER="", PARENT_TABLE="ADDR_USE"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ADDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0103_002", FK_COLUMNS="ADDR_USE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ADDR_USE because PARTY_ADDR exists.')
 !!


CREATE TRIGGER D0269U01
  NO CASCADE BEFORE UPDATE
  ON AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AE_BRD AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM OAD_RUN_AE_BRD WHERE OAD_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  OAD_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a31", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="OAD_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_005", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because OAD_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD2 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOT_LONG_RUN_AE_BRD WHERE TOT_LONG_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  TOT_LONG_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bd3", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="TOT_LONG_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_003", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because TOT_LONG_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD3 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SC_RUN_AE_BRD WHERE SC_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  SC_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008555", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="SC_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_001", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because SC_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD4 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RESIDUAL_SURV_RUN_AE_BRD WHERE RESIDUAL_SURV_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  RESIDUAL_SURV_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f37", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="RESIDUAL_SURV_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_007", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because RESIDUAL_SURV_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD5 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FERT_RUN_AE_BRD WHERE FERT_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  FERT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087e6", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="FERT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_002", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because FERT_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD6 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BODY_COND_SCORE_RUN_AE_BRD WHERE BODY_COND_SCORE_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  BODY_COND_SCORE_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ced", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="BODY_COND_SCORE_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_006", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because BODY_COND_SCORE_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD7 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM_PCT WHERE AE_RUN_SUMM_PCT.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  AE_RUN_SUMM_PCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ba3", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM_PCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_013", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because AE_RUN_SUMM_PCT exists.')
 !!

CREATE  TRIGGER tD_AE_BRD8 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM WHERE AE_RUN_SUMM.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  AE_RUN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a1a", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_012", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because AE_RUN_SUMM exists.')
 !!

CREATE  TRIGGER tD_AE_BRD9 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM VOL_RUN_AE_BRD WHERE VOL_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  VOL_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008da4", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="VOL_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_014", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because VOL_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD10 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROT_RUN_AE_BRD WHERE PROT_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  PROT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000853a", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="PROT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_016", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because PROT_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD11 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LWGT_RUN_AE_BRD WHERE LWGT_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  LWGT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f64", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="LWGT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_008", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because LWGT_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD12 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FAT_RUN_AE_BRD WHERE FAT_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  FAT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086c2", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="FAT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_015", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because FAT_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD13 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BW_PW_RUN_AE_BRD WHERE BW_PW_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  BW_PW_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008efd", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="BW_PW_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_017", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because BW_PW_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD14 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GESTATION_LENGTH_RUN_AE_BRD WHERE GESTATION_LENGTH_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  GESTATION_LENGTH_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000963a", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="GESTATION_LENGTH_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_010", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because GESTATION_LENGTH_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD15 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALVING_DIFF_RUN_AE_BRD WHERE CALVING_DIFF_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  CALVING_DIFF_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d4a", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="CALVING_DIFF_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_011", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because CALVING_DIFF_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD16 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HIGH_INPUT_RUN_AE_BRD WHERE HIGH_INPUT_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  HIGH_INPUT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009152", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="HIGH_INPUT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_018", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because HIGH_INPUT_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD17 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOP_RUN_AE_BRD WHERE TOP_RUN_AE_BRD.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  TOP_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083cf", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="TOP_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_009", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because TOP_RUN_AE_BRD exists.')
 !!

CREATE  TRIGGER tD_AE_BRD18 AFTER DELETE ON AE_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANIMAL WHERE ANIMAL.AE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_BRD  ANIMAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f31", PARENT_OWNER="", PARENT_TABLE="AE_BRD"
    CHILD_OWNER="", CHILD_TABLE="ANIMAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0269_004", FK_COLUMNS="AE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_BRD because ANIMAL exists.')
 !!


CREATE TRIGGER D0013U01
  NO CASCADE BEFORE UPDATE
  ON AE_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AE_ERR AFTER DELETE ON AE_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_ERR_SUMM WHERE AE_ERR_SUMM.AE_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_ERR  AE_ERR_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000855b", PARENT_OWNER="", PARENT_TABLE="AE_ERR"
    CHILD_OWNER="", CHILD_TABLE="AE_ERR_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0013_002", FK_COLUMNS="AE_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_ERR because AE_ERR_SUMM exists.')
 !!

CREATE  TRIGGER tD_AE_ERR2 AFTER DELETE ON AE_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_EXTR_ERR WHERE AE_EXTR_ERR.AE_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* AE_ERR  AE_EXTR_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008172", PARENT_OWNER="", PARENT_TABLE="AE_ERR"
    CHILD_OWNER="", CHILD_TABLE="AE_EXTR_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0013_001", FK_COLUMNS="AE_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_ERR because AE_EXTR_ERR exists.')
 !!


CREATE TRIGGER D0123U01
  NO CASCADE BEFORE UPDATE
  ON AE_ERR_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0014I51
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014I52
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0014I53
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.event_date_d IS NULL 
  AND new.event_date IS NOT NULL
   OR CHAR(new.event_date_d,ISO) = '0001-01-01'
  AND new.event_date IS NOT NULL)
SET new.event_date_d =
  CASE WHEN new.event_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.event_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014I54
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.event_date IS NULL 
  AND new.event_date_d IS NOT NULL
  AND CHAR(new.event_date_d,ISO) != '0001-01-01'
   OR new.event_date = 0
  AND new.event_date_d IS NOT NULL
  AND CHAR(new.event_date_d,ISO) != '0001-01-01')
SET new.event_date =
  CASE WHEN new.event_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.event_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.event_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.event_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0014I55
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rslv_date_d IS NULL 
  AND new.rslv_date IS NOT NULL
   OR CHAR(new.rslv_date_d,ISO) = '0001-01-01'
  AND new.rslv_date IS NOT NULL)
SET new.rslv_date_d =
  CASE WHEN new.rslv_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rslv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014I56
  NO CASCADE BEFORE INSERT
  ON AE_EXTR_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rslv_date IS NULL 
  AND new.rslv_date_d IS NOT NULL
  AND CHAR(new.rslv_date_d,ISO) != '0001-01-01'
   OR new.rslv_date = 0
  AND new.rslv_date_d IS NOT NULL
  AND CHAR(new.rslv_date_d,ISO) != '0001-01-01')
SET new.rslv_date =
  CASE WHEN new.rslv_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rslv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rslv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rslv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0014U01
  NO CASCADE BEFORE UPDATE
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0014U51
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014U52
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0014U53
  NO CASCADE BEFORE UPDATE OF 
                    event_date
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.event_date != new.event_date
   OR old.event_date IS NULL AND new.event_date IS NOT NULL
   OR old.event_date IS NOT NULL AND new.event_date IS NULL)
SET new.event_date_d =
  CASE WHEN new.event_date = 0 OR new.event_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.event_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014U54
  NO CASCADE BEFORE UPDATE OF 
                    event_date_d
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.event_date_d != new.event_date_d
   OR old.event_date_d IS NULL and new.event_date_d IS NOT NULL
   OR old.event_date_d IS NOT NULL and new.event_date_d IS NULL)
SET new.event_date =
  CASE WHEN new.event_date_d IS NULL OR new.event_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.event_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.event_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.event_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0014U55
  NO CASCADE BEFORE UPDATE OF 
                    rslv_date
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rslv_date != new.rslv_date
   OR old.rslv_date IS NULL AND new.rslv_date IS NOT NULL
   OR old.rslv_date IS NOT NULL AND new.rslv_date IS NULL)
SET new.rslv_date_d =
  CASE WHEN new.rslv_date = 0 OR new.rslv_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rslv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0014U56
  NO CASCADE BEFORE UPDATE OF 
                    rslv_date_d
  ON AE_EXTR_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rslv_date_d != new.rslv_date_d
   OR old.rslv_date_d IS NULL and new.rslv_date_d IS NOT NULL
   OR old.rslv_date_d IS NOT NULL and new.rslv_date_d IS NULL)
SET new.rslv_date =
  CASE WHEN new.rslv_date_d IS NULL OR new.rslv_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rslv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rslv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rslv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0493U01
  NO CASCADE BEFORE UPDATE
  ON AE_HERD_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0493I52
  NO CASCADE BEFORE INSERT
  ON AE_HERD_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0493I51
  NO CASCADE BEFORE INSERT
  ON AE_HERD_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0493U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON AE_HERD_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0493U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON AE_HERD_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0243U01
  NO CASCADE BEFORE UPDATE
  ON AE_RUN_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0244U01
  NO CASCADE BEFORE UPDATE
  ON AE_RUN_SUMM_PCT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0242U01
  NO CASCADE BEFORE UPDATE
  ON AE_RUN_SUMM_RULE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AE_RUN_SUMM_RUL AFTER DELETE ON AE_RUN_SUMM_RULE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM_PCT WHERE AE_RUN_SUMM_PCT.RULE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AE_RUN_SUMM_RULE  AE_RUN_SUMM_PCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e33", PARENT_OWNER="", PARENT_TABLE="AE_RUN_SUMM_RULE"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM_PCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0242_002", FK_COLUMNS="RULE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_RUN_SUMM_RULE because AE_RUN_SUMM_PCT exists.')
 !!

CREATE  TRIGGER tD_AE_RUN_SUMM_RU2 AFTER DELETE ON AE_RUN_SUMM_RULE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM WHERE AE_RUN_SUMM.RULE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* AE_RUN_SUMM_RULE  AE_RUN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000914c", PARENT_OWNER="", PARENT_TABLE="AE_RUN_SUMM_RULE"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0242_001", FK_COLUMNS="RULE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AE_RUN_SUMM_RULE because AE_RUN_SUMM exists.')
 !!


CREATE TRIGGER D0449I52
  NO CASCADE BEFORE INSERT
  ON AE_SIRE_TRANS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0449U01
  NO CASCADE BEFORE UPDATE
  ON AE_SIRE_TRANS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0449U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON AE_SIRE_TRANS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0449U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON AE_SIRE_TRANS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0449I51
  NO CASCADE BEFORE INSERT
  ON AE_SIRE_TRANS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0566U01
  NO CASCADE BEFORE UPDATE
  ON AFFECT_BODY_PART
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0068U01
  NO CASCADE BEFORE UPDATE
  ON AHB_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0632U01
  NO CASCADE BEFORE UPDATE
  ON AHB_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0577U01
  NO CASCADE BEFORE UPDATE
  ON ALLELE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ALLELE AFTER DELETE ON ALLELE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_DNA_PROFILE WHERE GM_DNA_PROFILE.LOCUS_CD = old.LOCUS_CD AND
                                                 GM_DNA_PROFILE.ALLELE_CD_2 = old.ALLELE_CD) > 0)
    /* erwin Builtin Trigger */
    /* ALLELE  GM_DNA_PROFILE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e7a", PARENT_OWNER="", PARENT_TABLE="ALLELE"
    CHILD_OWNER="", CHILD_TABLE="GM_DNA_PROFILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0577_003", FK_COLUMNS="LOCUS_CD""ALLELE_CD_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ALLELE because GM_DNA_PROFILE exists.')
 !!

CREATE  TRIGGER tD_ALLELE2 AFTER DELETE ON ALLELE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_DNA_PROFILE WHERE GM_DNA_PROFILE.LOCUS_CD = old.LOCUS_CD AND
                                                 GM_DNA_PROFILE.ALLELE_CD_1 = old.ALLELE_CD) > 0)
    /* erwin Builtin Trigger */
    /* ALLELE  GM_DNA_PROFILE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000907a", PARENT_OWNER="", PARENT_TABLE="ALLELE"
    CHILD_OWNER="", CHILD_TABLE="GM_DNA_PROFILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0577_002", FK_COLUMNS="LOCUS_CD""ALLELE_CD_1" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ALLELE because GM_DNA_PROFILE exists.')
 !!

CREATE  TRIGGER tD_ALLELE3 AFTER DELETE ON ALLELE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LOCUS_PHNTP WHERE LOCUS_PHNTP.LOCUS_CD = old.LOCUS_CD AND
                                              LOCUS_PHNTP.ALLELE_CD_2 = old.ALLELE_CD) > 0)
    /* erwin Builtin Trigger */
    /* ALLELE  LOCUS_PHNTP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f58", PARENT_OWNER="", PARENT_TABLE="ALLELE"
    CHILD_OWNER="", CHILD_TABLE="LOCUS_PHNTP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0577_004", FK_COLUMNS="LOCUS_CD""ALLELE_CD_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ALLELE because LOCUS_PHNTP exists.')
 !!

CREATE  TRIGGER tD_ALLELE4 AFTER DELETE ON ALLELE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LOCUS_PHNTP WHERE LOCUS_PHNTP.LOCUS_CD = old.LOCUS_CD AND
                                              LOCUS_PHNTP.ALLELE_CD_1 = old.ALLELE_CD) > 0)
    /* erwin Builtin Trigger */
    /* ALLELE  LOCUS_PHNTP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008df7", PARENT_OWNER="", PARENT_TABLE="ALLELE"
    CHILD_OWNER="", CHILD_TABLE="LOCUS_PHNTP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0577_001", FK_COLUMNS="LOCUS_CD""ALLELE_CD_1" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ALLELE because LOCUS_PHNTP exists.')
 !!


CREATE TRIGGER D0648U01
  NO CASCADE BEFORE UPDATE
  ON ALLELE_ACTION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ALLELE_ACTION AFTER DELETE ON ALLELE_ACTION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LOCUS_ALLELE WHERE LOCUS_ALLELE.ALLELE_ACTION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ALLELE_ACTION  LOCUS_ALLELE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009387", PARENT_OWNER="", PARENT_TABLE="ALLELE_ACTION"
    CHILD_OWNER="", CHILD_TABLE="LOCUS_ALLELE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0648_001", FK_COLUMNS="ALLELE_ACTION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ALLELE_ACTION because LOCUS_ALLELE exists.')
 !!


CREATE TRIGGER D0001D01
  AFTER DELETE
  ON ANIMAL
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_animal (
  anml_key
) VALUES (
  old.anml_key
)
 !!


CREATE TRIGGER D0001U53
  NO CASCADE BEFORE UPDATE OF 
                    cm_unsuit_date
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.cm_unsuit_date != new.cm_unsuit_date
   OR old.cm_unsuit_date IS NULL AND new.cm_unsuit_date IS NOT NULL
   OR old.cm_unsuit_date IS NOT NULL AND new.cm_unsuit_date IS NULL)
SET new.cm_unsuit_date_d =
  CASE WHEN new.cm_unsuit_date = 0 OR new.cm_unsuit_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.cm_unsuit_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001I52
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_date IS NULL 
  AND new.brth_date_d IS NOT NULL
  AND CHAR(new.brth_date_d,ISO) != '0001-01-01'
   OR new.brth_date = 0
  AND new.brth_date_d IS NOT NULL
  AND CHAR(new.brth_date_d,ISO) != '0001-01-01')
SET new.brth_date =
  CASE WHEN new.brth_date_d IS NULL THEN 0 ELSE
  INT(new.brth_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I53
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cm_unsuit_date_d IS NULL 
  AND new.cm_unsuit_date IS NOT NULL
   OR CHAR(new.cm_unsuit_date_d,ISO) = '0001-01-01'
  AND new.cm_unsuit_date IS NOT NULL)
SET new.cm_unsuit_date_d =
  CASE WHEN new.cm_unsuit_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.cm_unsuit_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U57
  NO CASCADE BEFORE UPDATE OF 
                    top_reg_date
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.top_reg_date != new.top_reg_date
   OR old.top_reg_date IS NULL AND new.top_reg_date IS NOT NULL
   OR old.top_reg_date IS NOT NULL AND new.top_reg_date IS NULL)
SET new.top_reg_date_d =
  CASE WHEN new.top_reg_date = 0 OR new.top_reg_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.top_reg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001I58
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.top_reg_date IS NULL 
  AND new.top_reg_date_d IS NOT NULL
  AND CHAR(new.top_reg_date_d,ISO) != '0001-01-01'
   OR new.top_reg_date = 0
  AND new.top_reg_date_d IS NOT NULL
  AND CHAR(new.top_reg_date_d,ISO) != '0001-01-01')
SET new.top_reg_date =
  CASE WHEN new.top_reg_date_d IS NULL THEN 0 ELSE
  INT(new.top_reg_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001U01
  NO CASCADE BEFORE UPDATE
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0001U55
  NO CASCADE BEFORE UPDATE OF 
                    id_anml_add_date
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.id_anml_add_date != new.id_anml_add_date
   OR old.id_anml_add_date IS NULL AND new.id_anml_add_date IS NOT NULL
   OR old.id_anml_add_date IS NOT NULL AND new.id_anml_add_date IS NULL)
SET new.id_anml_add_date_d =
  CASE WHEN new.id_anml_add_date = 0 OR new.id_anml_add_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.id_anml_add_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U56
  NO CASCADE BEFORE UPDATE OF 
                    id_anml_add_date_d
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.id_anml_add_date_d != new.id_anml_add_date_d
   OR old.id_anml_add_date_d IS NULL and new.id_anml_add_date_d IS NOT NULL
   OR old.id_anml_add_date_d IS NOT NULL and new.id_anml_add_date_d IS NULL)
SET new.id_anml_add_date =
  CASE WHEN new.id_anml_add_date_d IS NULL OR new.id_anml_add_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.id_anml_add_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I54
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cm_unsuit_date IS NULL 
  AND new.cm_unsuit_date_d IS NOT NULL
  AND CHAR(new.cm_unsuit_date_d,ISO) != '0001-01-01'
   OR new.cm_unsuit_date = 0
  AND new.cm_unsuit_date_d IS NOT NULL
  AND CHAR(new.cm_unsuit_date_d,ISO) != '0001-01-01')
SET new.cm_unsuit_date =
  CASE WHEN new.cm_unsuit_date_d IS NULL THEN 0 ELSE
  INT(new.cm_unsuit_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I55
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.id_anml_add_date_d IS NULL 
  AND new.id_anml_add_date IS NOT NULL
   OR CHAR(new.id_anml_add_date_d,ISO) = '0001-01-01'
  AND new.id_anml_add_date IS NOT NULL)
SET new.id_anml_add_date_d =
  CASE WHEN new.id_anml_add_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.id_anml_add_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U58
  NO CASCADE BEFORE UPDATE OF 
                    top_reg_date_d
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.top_reg_date_d != new.top_reg_date_d
   OR old.top_reg_date_d IS NULL and new.top_reg_date_d IS NOT NULL
   OR old.top_reg_date_d IS NOT NULL and new.top_reg_date_d IS NULL)
SET new.top_reg_date =
  CASE WHEN new.top_reg_date_d IS NULL OR new.top_reg_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.top_reg_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I56
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.id_anml_add_date IS NULL 
  AND new.id_anml_add_date_d IS NOT NULL
  AND CHAR(new.id_anml_add_date_d,ISO) != '0001-01-01'
   OR new.id_anml_add_date = 0
  AND new.id_anml_add_date_d IS NOT NULL
  AND CHAR(new.id_anml_add_date_d,ISO) != '0001-01-01')
SET new.id_anml_add_date =
  CASE WHEN new.id_anml_add_date_d IS NULL THEN 0 ELSE
  INT(new.id_anml_add_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I57
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.top_reg_date_d IS NULL 
  AND new.top_reg_date IS NOT NULL
   OR CHAR(new.top_reg_date_d,ISO) = '0001-01-01'
  AND new.top_reg_date IS NOT NULL)
SET new.top_reg_date_d =
  CASE WHEN new.top_reg_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.top_reg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U51
  NO CASCADE BEFORE UPDATE OF 
                    brth_date
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.brth_date != new.brth_date
   OR old.brth_date IS NULL AND new.brth_date IS NOT NULL
   OR old.brth_date IS NOT NULL AND new.brth_date IS NULL)
SET new.brth_date_d =
  CASE WHEN new.brth_date = 0 OR new.brth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U54
  NO CASCADE BEFORE UPDATE OF 
                    cm_unsuit_date_d
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.cm_unsuit_date_d != new.cm_unsuit_date_d
   OR old.cm_unsuit_date_d IS NULL and new.cm_unsuit_date_d IS NOT NULL
   OR old.cm_unsuit_date_d IS NOT NULL and new.cm_unsuit_date_d IS NULL)
SET new.cm_unsuit_date =
  CASE WHEN new.cm_unsuit_date_d IS NULL OR new.cm_unsuit_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.cm_unsuit_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001I51
  NO CASCADE BEFORE INSERT
  ON ANIMAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_date_d IS NULL 
  AND new.brth_date IS NOT NULL
   OR CHAR(new.brth_date_d,ISO) = '0001-01-01'
  AND new.brth_date IS NOT NULL)
SET new.brth_date_d =
  CASE WHEN new.brth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0001U52
  NO CASCADE BEFORE UPDATE OF 
                    brth_date_d
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.brth_date_d != new.brth_date_d
   OR old.brth_date_d IS NULL and new.brth_date_d IS NOT NULL
   OR old.brth_date_d IS NOT NULL and new.brth_date_d IS NULL)
SET new.brth_date =
  CASE WHEN new.brth_date_d IS NULL OR new.brth_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.brth_date_d) - 19000000 END
 !!


CREATE TRIGGER D0001U02
  AFTER UPDATE OF 
        sire_anml_key,
        dam_anml_key,
        sire_offl_cd,
        dam_offl_cd
  ON ANIMAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key > 0 
  AND (old.sire_anml_key != new.sire_anml_key
   OR old.dam_anml_key != new.dam_anml_key
   OR old.sire_offl_cd != new.sire_offl_cd
   OR old.dam_offl_cd != new.dam_offl_cd) AND 
      old.sire_anml_key != 0
   OR old.dam_anml_key != 0
   OR old.sire_offl_cd != 0
   OR old.dam_offl_cd != 0)
INSERT INTO anml_ancestry_log(
  anml_key
, prev_sire_anml_key
, prev_sire_offl_cd
, prev_dam_anml_key
, prev_dam_offl_cd
) VALUES (
  old.anml_key
, NULLIF(old.sire_anml_key,0)
, CASE WHEN old.sire_anml_key = 0 THEN NULLIF(old.sire_offl_cd,0) ELSE old.sire_offl_cd END
 !!


CREATE TRIGGER D0366U01
  NO CASCADE BEFORE UPDATE
  ON ANIMAL_EXT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0600U01
  NO CASCADE BEFORE UPDATE
  ON ANML_ANCESTRY_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0604U02
  NO CASCADE BEFORE UPDATE
  ON ANML_CARCASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.data_source_cd = 'M' AND 
     (old.processor_party_id != new.processor_party_id
   OR old.kill_date != new.kill_date
   OR old.carcass_val != new.carcass_val
   OR old.weight != new.weight
   OR old.cat_cd != new.cat_cd
   OR old.sex_cd != new.sex_cd
   OR old.fat_class != new.fat_class
   OR old.weight_class != new.weight_class
   OR old.muscle_score != new.muscle_score))
SIGNAL SQLSTATE 'Z0604'
('D0604U02: cannot change anml_carcass data')
 !!


CREATE TRIGGER D0604I01
  NO CASCADE BEFORE INSERT
  ON ANML_CARCASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'CARCASS_DATA_SOURCE_CD'
      AND c.cd = new.data_source_cd) )
SIGNAL SQLSTATE 'Z0604'
('D0604I01: invalid carcass data source code')
 !!


CREATE TRIGGER D0604U03
  NO CASCADE BEFORE UPDATE OF 
                    data_source_cd
  ON ANML_CARCASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.data_source_cd != old.data_source_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'CARCASS_DATA_SOURCE_CD'
      AND c.cd = new.data_source_cd) )
SIGNAL SQLSTATE 'Z0604'
('D0604I01: invalid carcass data source code')
 !!


CREATE TRIGGER D0604U01
  NO CASCADE BEFORE UPDATE
  ON ANML_CARCASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0601U01
  NO CASCADE BEFORE UPDATE
  ON ANML_CHAR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0515U01
  NO CASCADE BEFORE UPDATE
  ON ANML_DT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0512I51
  NO CASCADE BEFORE INSERT
  ON ANML_DT_HOLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0512I52
  NO CASCADE BEFORE INSERT
  ON ANML_DT_HOLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0512I53
  NO CASCADE BEFORE INSERT
  ON ANML_DT_HOLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0512I54
  NO CASCADE BEFORE INSERT
  ON ANML_DT_HOLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0512U01
  NO CASCADE BEFORE UPDATE
  ON ANML_DT_HOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0512U51
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON ANML_DT_HOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0512U52
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON ANML_DT_HOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0512U53
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON ANML_DT_HOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0512U54
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON ANML_DT_HOLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0506I51
  NO CASCADE BEFORE INSERT
  ON ANML_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0506I52
  NO CASCADE BEFORE INSERT
  ON ANML_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0506U01
  NO CASCADE BEFORE UPDATE
  ON ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0506U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0506U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0509I51
  NO CASCADE BEFORE INSERT
  ON ANML_DT_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0509I52
  NO CASCADE BEFORE INSERT
  ON ANML_DT_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0509U01
  NO CASCADE BEFORE UPDATE
  ON ANML_DT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0509U51
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON ANML_DT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0509U52
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON ANML_DT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0518I51
  NO CASCADE BEFORE INSERT
  ON ANML_DT_TAG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0518I52
  NO CASCADE BEFORE INSERT
  ON ANML_DT_TAG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0518U01
  NO CASCADE BEFORE UPDATE
  ON ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0518U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0518U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0463U01
  NO CASCADE BEFORE UPDATE
  ON ANML_EVENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ANML_EVENT AFTER DELETE ON ANML_EVENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DOC_ANML_EVENT WHERE DOC_ANML_EVENT.ANML_EVENT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_EVENT  DOC_ANML_EVENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e13", PARENT_OWNER="", PARENT_TABLE="ANML_EVENT"
    CHILD_OWNER="", CHILD_TABLE="DOC_ANML_EVENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0463_001", FK_COLUMNS="ANML_EVENT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_EVENT because DOC_ANML_EVENT exists.')
 !!


CREATE TRIGGER D0966U01
  NO CASCADE BEFORE UPDATE
  ON ANML_FATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE  TRIGGER tD_ANML_FATE AFTER DELETE ON ANML_FATE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_NEW_BORN_FATE WHERE MINDA_OPT_NEW_BORN_FATE.NEW_BORN_ANML_FATE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_FATE  MINDA_OPT_NEW_BORN_FATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a111", PARENT_OWNER="", PARENT_TABLE="ANML_FATE"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_NEW_BORN_FATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0966_001", FK_COLUMNS="NEW_BORN_ANML_FATE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_FATE because MINDA_OPT_NEW_BORN_FATE exists.')
 !!

CREATE  TRIGGER tD_ANML_FATE2 AFTER DELETE ON ANML_FATE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_FATE_CAUSE WHERE MINDA_OPT_FATE_CAUSE.ANML_FATE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_FATE  MINDA_OPT_FATE_CAUSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009233", PARENT_OWNER="", PARENT_TABLE="ANML_FATE"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_FATE_CAUSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0966_002", FK_COLUMNS="ANML_FATE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_FATE because MINDA_OPT_FATE_CAUSE exists.')
 !!


CREATE TRIGGER D0691U01
  NO CASCADE BEFORE UPDATE
  ON ANML_KEY_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0079I51
  NO CASCADE BEFORE INSERT
  ON ANML_LOCN_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date_d IS NULL 
  AND new.anml_num_st_date IS NOT NULL
   OR CHAR(new.anml_num_st_date_d,ISO) = '0001-01-01'
  AND new.anml_num_st_date IS NOT NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0079I52
  NO CASCADE BEFORE INSERT
  ON ANML_LOCN_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date IS NULL 
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01'
   OR new.anml_num_st_date = 0
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01')
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0079I53
  NO CASCADE BEFORE INSERT
  ON ANML_LOCN_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date_d IS NULL 
  AND new.xfer_in_date IS NOT NULL
   OR CHAR(new.xfer_in_date_d,ISO) = '0001-01-01'
  AND new.xfer_in_date IS NOT NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0079I54
  NO CASCADE BEFORE INSERT
  ON ANML_LOCN_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date IS NULL 
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01'
   OR new.xfer_in_date = 0
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01')
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0079U01
  NO CASCADE BEFORE UPDATE
  ON ANML_LOCN_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0079U51
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date
  ON ANML_LOCN_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date != new.anml_num_st_date
   OR old.anml_num_st_date IS NULL AND new.anml_num_st_date IS NOT NULL
   OR old.anml_num_st_date IS NOT NULL AND new.anml_num_st_date IS NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 OR new.anml_num_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0079U52
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date_d
  ON ANML_LOCN_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date_d != new.anml_num_st_date_d
   OR old.anml_num_st_date_d IS NULL and new.anml_num_st_date_d IS NOT NULL
   OR old.anml_num_st_date_d IS NOT NULL and new.anml_num_st_date_d IS NULL)
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL OR new.anml_num_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0079U53
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date
  ON ANML_LOCN_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date != new.xfer_in_date
   OR old.xfer_in_date IS NULL AND new.xfer_in_date IS NOT NULL
   OR old.xfer_in_date IS NOT NULL AND new.xfer_in_date IS NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 OR new.xfer_in_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0079U54
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date_d
  ON ANML_LOCN_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date_d != new.xfer_in_date_d
   OR old.xfer_in_date_d IS NULL and new.xfer_in_date_d IS NOT NULL
   OR old.xfer_in_date_d IS NOT NULL and new.xfer_in_date_d IS NULL)
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL OR new.xfer_in_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0151I51
  NO CASCADE BEFORE INSERT
  ON ANML_LOCUS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0151D01
  AFTER DELETE
  ON ANML_LOCUS
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO anml_locus_audit (
  upd_time
, anml_key
, cattle_locus_cd
, allele_1_cd
, allele_1_prob
, allele_2_cd
, allele_2_prob
, phntp_mthd_cd
, phntp_ptpt_cd
, gntp_mthd_cd
, rcd_date
, smpl_id
, test_date
, upd_user_id
, upd_pgm_id)
VALUES (
  old.upd_time
, old.anml_key
, old.cattle_locus_cd
, old.allele_1_cd
, old.allele_1_prob
, old.allele_2_cd
, old.allele_2_prob
, old.phntp_mthd_cd
, old.phntp_ptpt_cd
, old.gntp_mthd_cd
, old.rcd_date_d
, old.smpl_id
, old.test_date
, old.upd_user_id
, old.upd_pgm_id)
 !!


CREATE TRIGGER D0151U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON ANML_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0151U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON ANML_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0151I52
  NO CASCADE BEFORE INSERT
  ON ANML_LOCUS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0151U02
  AFTER UPDATE
  ON ANML_LOCUS
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO anml_locus_audit (
  upd_time
, anml_key
, cattle_locus_cd
, allele_1_cd
, allele_1_prob
, allele_2_cd
, allele_2_prob
, phntp_mthd_cd
, phntp_ptpt_cd
, gntp_mthd_cd
, rcd_date
, smpl_id
, test_date
, upd_user_id
, upd_pgm_id)
VALUES (
  old.upd_time
, old.anml_key
, old.cattle_locus_cd
, old.allele_1_cd
, old.allele_1_prob
, old.allele_2_cd
, old.allele_2_prob
, old.phntp_mthd_cd
, old.phntp_ptpt_cd
, old.gntp_mthd_cd
, old.rcd_date_d
, old.smpl_id
, old.test_date
, old.upd_user_id
, old.upd_pgm_id)
 !!


CREATE TRIGGER D0151U01
  NO CASCADE BEFORE UPDATE
  ON ANML_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0844U01
  NO CASCADE BEFORE UPDATE
  ON ANML_MEDICAL_TREATMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ANML_MEDICAL_TR AFTER DELETE ON ANML_MEDICAL_TREATMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AFFECT_BODY_PART WHERE AFFECT_BODY_PART.ANML_MEDICAL_TREATMENT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANML_MEDICAL_TREATMENT  AFFECT_BODY_PART on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000add2", PARENT_OWNER="", PARENT_TABLE="ANML_MEDICAL_TREATMENT"
    CHILD_OWNER="", CHILD_TABLE="AFFECT_BODY_PART"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0844_001", FK_COLUMNS="ANML_MEDICAL_TREATMENT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_MEDICAL_TREATMENT because AFFECT_BODY_PART exists.')
 !!


CREATE TRIGGER D0353I51
  NO CASCADE BEFORE INSERT
  ON ANML_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shift_date_d IS NULL 
  AND new.shift_date IS NOT NULL
   OR CHAR(new.shift_date_d,ISO) = '0001-01-01'
  AND new.shift_date IS NOT NULL)
SET new.shift_date_d =
  CASE WHEN new.shift_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.shift_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0353I52
  NO CASCADE BEFORE INSERT
  ON ANML_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shift_date IS NULL 
  AND new.shift_date_d IS NOT NULL
  AND CHAR(new.shift_date_d,ISO) != '0001-01-01'
   OR new.shift_date = 0
  AND new.shift_date_d IS NOT NULL
  AND CHAR(new.shift_date_d,ISO) != '0001-01-01')
SET new.shift_date =
  CASE WHEN new.shift_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.shift_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0353U01
  NO CASCADE BEFORE UPDATE
  ON ANML_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0353U51
  NO CASCADE BEFORE UPDATE OF 
                    shift_date
  ON ANML_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.shift_date != new.shift_date
   OR old.shift_date IS NULL AND new.shift_date IS NOT NULL
   OR old.shift_date IS NOT NULL AND new.shift_date IS NULL)
SET new.shift_date_d =
  CASE WHEN new.shift_date = 0 OR new.shift_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.shift_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0353U52
  NO CASCADE BEFORE UPDATE OF 
                    shift_date_d
  ON ANML_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.shift_date_d != new.shift_date_d
   OR old.shift_date_d IS NULL and new.shift_date_d IS NOT NULL
   OR old.shift_date_d IS NOT NULL and new.shift_date_d IS NULL)
SET new.shift_date =
  CASE WHEN new.shift_date_d IS NULL OR new.shift_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.shift_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0716U01
  NO CASCADE BEFORE UPDATE
  ON ANML_NAME_IDX
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0005I01
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0005'
('D0005I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0005I51
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005I52
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005I53
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005I54
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005I55
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_rcd_date_d IS NULL 
  AND new.xfer_rcd_date IS NOT NULL
   OR CHAR(new.xfer_rcd_date_d,ISO) = '0001-01-01'
  AND new.xfer_rcd_date IS NOT NULL)
SET new.xfer_rcd_date_d =
  CASE WHEN new.xfer_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005I56
  NO CASCADE BEFORE INSERT
  ON ANML_OWNR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_rcd_date IS NULL 
  AND new.xfer_rcd_date_d IS NOT NULL
  AND CHAR(new.xfer_rcd_date_d,ISO) != '0001-01-01'
   OR new.xfer_rcd_date = 0
  AND new.xfer_rcd_date_d IS NOT NULL
  AND CHAR(new.xfer_rcd_date_d,ISO) != '0001-01-01')
SET new.xfer_rcd_date =
  CASE WHEN new.xfer_rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005U01
  NO CASCADE BEFORE UPDATE
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0005'
('D0005I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0005U02
  NO CASCADE BEFORE UPDATE
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0005U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005U55
  NO CASCADE BEFORE UPDATE OF 
                    xfer_rcd_date
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_rcd_date != new.xfer_rcd_date
   OR old.xfer_rcd_date IS NULL AND new.xfer_rcd_date IS NOT NULL
   OR old.xfer_rcd_date IS NOT NULL AND new.xfer_rcd_date IS NULL)
SET new.xfer_rcd_date_d =
  CASE WHEN new.xfer_rcd_date = 0 OR new.xfer_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0005U56
  NO CASCADE BEFORE UPDATE OF 
                    xfer_rcd_date_d
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_rcd_date_d != new.xfer_rcd_date_d
   OR old.xfer_rcd_date_d IS NULL and new.xfer_rcd_date_d IS NOT NULL
   OR old.xfer_rcd_date_d IS NOT NULL and new.xfer_rcd_date_d IS NULL)
SET new.xfer_rcd_date =
  CASE WHEN new.xfer_rcd_date_d IS NULL OR new.xfer_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0005D01
  AFTER DELETE
  ON ANML_OWNR
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_anml_ownr (
  anml_key
, ownr_tp_cd
, ownr_cnt
, upd_time
, ownr_ptpt_cd
, invc_num
, invc_line
, sale_price
, rtnd_straw_cnt
, st_date_d
, end_date_d
, xfer_rcd_date_d
) VALUES (
  old.anml_key
, old.ownr_tp_cd
, old.ownr_cnt
, old.upd_time
, old.ownr_ptpt_cd
, old.invc_num
, old.invc_line
, old.sale_price
, old.rtnd_straw_cnt
, old.st_date_d
, old.end_date_d
, old.xfer_rcd_date_d
)
 !!


CREATE TRIGGER D0005U03
  AFTER UPDATE OF 
        anml_key,
        ownr_tp_cd,
        ownr_cnt
  ON ANML_OWNR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.ownr_tp_cd != new.ownr_tp_cd
   OR old.ownr_cnt != new.ownr_cnt)
INSERT INTO del_anml_ownr (
  anml_key
, ownr_tp_cd
, ownr_cnt
, upd_time
, ownr_ptpt_cd
, invc_num
, invc_line
, sale_price
, rtnd_straw_cnt
, st_date_d
, end_date_d
, xfer_rcd_date_d
) VALUES (
  old.anml_key
, old.ownr_tp_cd
, old.ownr_cnt
, old.upd_time
, old.ownr_ptpt_cd
, old.invc_num
, old.invc_line
, old.sale_price
, old.rtnd_straw_cnt
, old.st_date_d
, old.end_date_d
, old.xfer_rcd_date_d
)
 !!


CREATE TRIGGER D0839U01
  NO CASCADE BEFORE UPDATE
  ON ANML_SAMPLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ANML_SAMPLE AFTER DELETE ON ANML_SAMPLE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAMPLE_TEST WHERE SAMPLE_TEST.ANML_SAMPLE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SAMPLE  SAMPLE_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f42", PARENT_OWNER="", PARENT_TABLE="ANML_SAMPLE"
    CHILD_OWNER="", CHILD_TABLE="SAMPLE_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0839_001", FK_COLUMNS="ANML_SAMPLE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SAMPLE because SAMPLE_TEST exists.')
 !!


CREATE TRIGGER D0175U01
  NO CASCADE BEFORE UPDATE
  ON ANML_SEL_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0330U01
  NO CASCADE BEFORE UPDATE
  ON ANML_SMPL_MTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ANML_SMPL_MTR AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TEST_VAR WHERE TEST_VAR.SAMPLE_MATTER_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  TEST_VAR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bc7", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="TEST_VAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_004", FK_COLUMNS="SAMPLE_MATTER_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because TEST_VAR exists.')
 !!

CREATE  TRIGGER tD_ANML_SMPL_MTR2 AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML WHERE GM_RCPT_ANML.SAMPLE_MATTER_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  GM_RCPT_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008653", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_006", FK_COLUMNS="SAMPLE_MATTER_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because GM_RCPT_ANML exists.')
 !!

CREATE  TRIGGER tD_ANML_SMPL_MTR3 AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_SAMPLE WHERE ANML_SAMPLE.SAMPLE_MATTER_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  ANML_SAMPLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e03", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="ANML_SAMPLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_003", FK_COLUMNS="SAMPLE_MATTER_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because ANML_SAMPLE exists.')
 !!

CREATE  TRIGGER tD_ANML_SMPL_MTR4 AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL WHERE GM_SMPL.ANML_SMPL_MTR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  GM_SMPL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086b2", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_002", FK_COLUMNS="ANML_SMPL_MTR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because GM_SMPL exists.')
 !!

CREATE  TRIGGER tD_ANML_SMPL_MTR5 AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PROD WHERE GM_PROD.ANML_SMPL_MTR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  GM_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a30", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="GM_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_001", FK_COLUMNS="ANML_SMPL_MTR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because GM_PROD exists.')
 !!

CREATE  TRIGGER tD_ANML_SMPL_MTR6 AFTER DELETE ON ANML_SMPL_MTR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM_DFLT WHERE GM_SUBM_DFLT.SAMPLE_MATTER_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ANML_SMPL_MTR  GM_SUBM_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cbd", PARENT_OWNER="", PARENT_TABLE="ANML_SMPL_MTR"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0330_005", FK_COLUMNS="SAMPLE_MATTER_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANML_SMPL_MTR because GM_SUBM_DFLT exists.')
 !!


CREATE TRIGGER D0306I51
  NO CASCADE BEFORE INSERT
  ON ANML_SPS_STS_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0306I52
  NO CASCADE BEFORE INSERT
  ON ANML_SPS_STS_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0306U01
  NO CASCADE BEFORE UPDATE
  ON ANML_SPS_STS_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0306U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON ANML_SPS_STS_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0306U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON ANML_SPS_STS_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0399U54
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date_d
  ON ANML_WGH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date_d != new.wgt_date_d
   OR old.wgt_date_d IS NULL and new.wgt_date_d IS NOT NULL
   OR old.wgt_date_d IS NOT NULL and new.wgt_date_d IS NULL)
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL OR new.wgt_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.wgt_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0399I54
  NO CASCADE BEFORE INSERT
  ON ANML_WGH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date IS NULL 
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01'
   OR new.wgt_date = 0
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01')
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.wgt_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0399I53
  NO CASCADE BEFORE INSERT
  ON ANML_WGH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date_d IS NULL 
  AND new.wgt_date IS NOT NULL
   OR CHAR(new.wgt_date_d,ISO) = '0001-01-01'
  AND new.wgt_date IS NOT NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0399U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON ANML_WGH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0399U53
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date
  ON ANML_WGH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date != new.wgt_date
   OR old.wgt_date IS NULL AND new.wgt_date IS NOT NULL
   OR old.wgt_date IS NOT NULL AND new.wgt_date IS NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 OR new.wgt_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0399I52
  NO CASCADE BEFORE INSERT
  ON ANML_WGH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0399U01
  NO CASCADE BEFORE UPDATE
  ON ANML_WGH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0399U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON ANML_WGH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0399I51
  NO CASCADE BEFORE INSERT
  ON ANML_WGH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0224I53
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.term_date_d IS NULL 
  AND new.term_date IS NOT NULL
   OR CHAR(new.term_date_d,ISO) = '0001-01-01'
  AND new.term_date IS NOT NULL)
SET new.term_date_d =
  CASE WHEN new.term_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.term_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0224U53
  NO CASCADE BEFORE UPDATE OF 
                    term_date
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.term_date != new.term_date
   OR old.term_date IS NULL AND new.term_date IS NOT NULL
   OR old.term_date IS NOT NULL AND new.term_date IS NULL)
SET new.term_date_d =
  CASE WHEN new.term_date = 0 OR new.term_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.term_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0224I01
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.seller_ptpt_cd) )
SIGNAL SQLSTATE 'Z0224'
('D0224I01: seller_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0224U52
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0224U54
  NO CASCADE BEFORE UPDATE OF 
                    term_date_d
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.term_date_d != new.term_date_d
   OR old.term_date_d IS NULL and new.term_date_d IS NOT NULL
   OR old.term_date_d IS NOT NULL and new.term_date_d IS NULL)
SET new.term_date =
  CASE WHEN new.term_date_d IS NULL OR new.term_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.term_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.term_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.term_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0224U01
  AFTER UPDATE OF 
        seller_ptpt_cd
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.seller_ptpt_cd) )
SIGNAL SQLSTATE 'Z0224'
('D0224I01: seller_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0224I52
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0224I54
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.term_date IS NULL 
  AND new.term_date_d IS NOT NULL
  AND CHAR(new.term_date_d,ISO) != '0001-01-01'
   OR new.term_date = 0
  AND new.term_date_d IS NOT NULL
  AND CHAR(new.term_date_d,ISO) != '0001-01-01')
SET new.term_date =
  CASE WHEN new.term_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.term_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.term_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.term_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0224I51
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0224U03
  NO CASCADE BEFORE UPDATE
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0224I02
  NO CASCADE BEFORE INSERT
  ON ANML_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.buyer_ptpt_cd IS NOT NULL AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.buyer_ptpt_cd) )
SIGNAL SQLSTATE 'Z0224'
('D0224I01: buyer_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0224U51
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0224U02
  AFTER UPDATE OF 
        buyer_ptpt_cd
  ON ANML_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.buyer_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.buyer_ptpt_cd) )
SIGNAL SQLSTATE 'Z0224'
('D0224I01: buyer_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0201U01
  NO CASCADE BEFORE UPDATE
  ON ANML_XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0698U01
  NO CASCADE BEFORE UPDATE
  ON ANSWER_SET
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_ANSWER_SET AFTER DELETE ON ANSWER_SET
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN WHERE REVIEW_QSTN.ANSWER_SET_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANSWER_SET  REVIEW_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fd2", PARENT_OWNER="", PARENT_TABLE="ANSWER_SET"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0698_001", FK_COLUMNS="ANSWER_SET_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANSWER_SET because REVIEW_QSTN exists.')
 !!

CREATE  TRIGGER tD_ANSWER_SET2 AFTER DELETE ON ANSWER_SET
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANSWER_VALUE WHERE ANSWER_VALUE.ANSWER_SET_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANSWER_SET  ANSWER_VALUE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089b9", PARENT_OWNER="", PARENT_TABLE="ANSWER_SET"
    CHILD_OWNER="", CHILD_TABLE="ANSWER_VALUE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0698_002", FK_COLUMNS="ANSWER_SET_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANSWER_SET because ANSWER_VALUE exists.')
 !!


CREATE TRIGGER D0699U01
  NO CASCADE BEFORE UPDATE
  ON ANSWER_VALUE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0699U02
  NO CASCADE BEFORE UPDATE OF 
                    text,
                    number,
                    DATE,
                    TIME
  ON ANSWER_VALUE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.text IS NULL AND new.text IS NOT NULL
    OR old.number IS NULL AND new.number IS NOT NULL
    OR old.date IS NULL AND new.date IS NOT NULL
    OR old.time IS NULL AND new.time IS NOT NULL
    OR new.text IS NULL AND old.text IS NOT NULL
    OR new.number IS NULL AND old.number IS NOT NULL
    OR new.date IS NULL AND old.date IS NOT NULL
    OR new.time IS NULL AND old.time IS NOT NULL) 
  AND EXISTS (
    SELECT 1 FROM review_qstn q
    WHERE q.min_correct_answer_value_id = new.id 
       OR q.max_correct_answer_value_id = new.id) )
SIGNAL SQLSTATE 'Z0699'
('D0699I01: cannot change value that is already used')
 !!


CREATE  TRIGGER tD_ANSWER_VALUE AFTER DELETE ON ANSWER_VALUE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN WHERE REVIEW_QSTN.MIN_CORRECT_ANSWER_VALUE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANSWER_VALUE  REVIEW_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c8f", PARENT_OWNER="", PARENT_TABLE="ANSWER_VALUE"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0699_002", FK_COLUMNS="MIN_CORRECT_ANSWER_VALUE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANSWER_VALUE because REVIEW_QSTN exists.')
 !!

CREATE  TRIGGER tD_ANSWER_VALUE2 AFTER DELETE ON ANSWER_VALUE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN WHERE REVIEW_QSTN.MAX_CORRECT_ANSWER_VALUE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* ANSWER_VALUE  REVIEW_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009b13", PARENT_OWNER="", PARENT_TABLE="ANSWER_VALUE"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0699_001", FK_COLUMNS="MAX_CORRECT_ANSWER_VALUE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ANSWER_VALUE because REVIEW_QSTN exists.')
 !!


CREATE TRIGGER D0288U01
  NO CASCADE BEFORE UPDATE
  ON APPL_PGM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0289U01
  NO CASCADE BEFORE UPDATE
  ON APPL_WORK_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_APPL_WORK_GRP AFTER DELETE ON APPL_WORK_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_SHORT_CUT WHERE PGM_SHORT_CUT.WORK_GRP_NAME = old.WORK_GRP_NAME AND
                                                PGM_SHORT_CUT.APPL_NAME = old.APPL_NAME) > 0)
    /* erwin Builtin Trigger */
    /* APPL_WORK_GRP  PGM_SHORT_CUT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009b6b", PARENT_OWNER="", PARENT_TABLE="APPL_WORK_GRP"
    CHILD_OWNER="", CHILD_TABLE="PGM_SHORT_CUT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0289_002", FK_COLUMNS="WORK_GRP_NAME""APPL_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete APPL_WORK_GRP because PGM_SHORT_CUT exists.')
 !!

CREATE  TRIGGER tD_APPL_WORK_GRP2 AFTER DELETE ON APPL_WORK_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_DB_SCRTY WHERE PGM_DB_SCRTY.WORK_GRP_NAME = old.WORK_GRP_NAME AND
                                               PGM_DB_SCRTY.APPL_NAME = old.APPL_NAME) > 0)
    /* erwin Builtin Trigger */
    /* APPL_WORK_GRP  PGM_DB_SCRTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099e8", PARENT_OWNER="", PARENT_TABLE="APPL_WORK_GRP"
    CHILD_OWNER="", CHILD_TABLE="PGM_DB_SCRTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0289_001", FK_COLUMNS="WORK_GRP_NAME""APPL_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete APPL_WORK_GRP because PGM_DB_SCRTY exists.')
 !!


CREATE TRIGGER D0286U01
  NO CASCADE BEFORE UPDATE
  ON APPLICATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_APPLICATION AFTER DELETE ON APPLICATION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM APPL_WORK_GRP WHERE APPL_WORK_GRP.APPL_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* APPLICATION  APPL_WORK_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a3b", PARENT_OWNER="", PARENT_TABLE="APPLICATION"
    CHILD_OWNER="", CHILD_TABLE="APPL_WORK_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0286_002", FK_COLUMNS="APPL_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete APPLICATION because APPL_WORK_GRP exists.')
 !!

CREATE  TRIGGER tD_APPLICATION2 AFTER DELETE ON APPLICATION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM APPL_PGM WHERE APPL_PGM.APPL_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* APPLICATION  APPL_PGM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a54", PARENT_OWNER="", PARENT_TABLE="APPLICATION"
    CHILD_OWNER="", CHILD_TABLE="APPL_PGM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0286_001", FK_COLUMNS="APPL_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete APPLICATION because APPL_PGM exists.')
 !!


CREATE TRIGGER D0400I51
  NO CASCADE BEFORE INSERT
  ON AR_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0400I52
  NO CASCADE BEFORE INSERT
  ON AR_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0400U01
  NO CASCADE BEFORE UPDATE
  ON AR_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0400U51
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON AR_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0400U52
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON AR_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0203U01
  NO CASCADE BEFORE UPDATE
  ON AREA_TRAIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_AREA_TRAIT AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LEAST_SQUARES_EST_MATRIX WHERE LEAST_SQUARES_EST_MATRIX.TRAIT_CD = old.TRAIT_CD AND
                                                           LEAST_SQUARES_EST_MATRIX.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  LEAST_SQUARES_EST_MATRIX on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a1f3", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="LEAST_SQUARES_EST_MATRIX"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_017", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because LEAST_SQUARES_EST_MATRIX exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT2 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HETEROSIS_EST WHERE HETEROSIS_EST.TRAIT_CD = old.TRAIT_CD AND
                                                HETEROSIS_EST.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  HETEROSIS_EST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009bfb", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="HETEROSIS_EST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_016", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because HETEROSIS_EST exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT3 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOT_LONG_RUN WHERE TOT_LONG_RUN.TRAIT_CD = old.TRAIT_CD AND
                                               TOT_LONG_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  TOT_LONG_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009755", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="TOT_LONG_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_003", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because TOT_LONG_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT4 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SC_RUN WHERE SC_RUN.TRAIT_CD = old.TRAIT_CD AND
                                         SC_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  SC_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000904b", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="SC_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_002", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because SC_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT5 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RESIDUAL_SURV_RUN WHERE RESIDUAL_SURV_RUN.TRAIT_CD = old.TRAIT_CD AND
                                                    RESIDUAL_SURV_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  RESIDUAL_SURV_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000979a", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="RESIDUAL_SURV_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_005", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because RESIDUAL_SURV_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT6 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FERT_RUN WHERE FERT_RUN.TRAIT_CD = old.TRAIT_CD AND
                                           FERT_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  FERT_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e17", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="FERT_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_001", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because FERT_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT7 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BODY_COND_SCORE_RUN WHERE BODY_COND_SCORE_RUN.TRAIT_CD = old.TRAIT_CD AND
                                                      BODY_COND_SCORE_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  BODY_COND_SCORE_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009601", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="BODY_COND_SCORE_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_004", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because BODY_COND_SCORE_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT8 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM_PCT WHERE AE_RUN_SUMM_PCT.TRAIT_CD = old.TRAIT_CD AND
                                                  AE_RUN_SUMM_PCT.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  AE_RUN_SUMM_PCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092fa", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM_PCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_011", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because AE_RUN_SUMM_PCT exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT9 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM WHERE AE_RUN_SUMM.TRAIT_CD = old.TRAIT_CD AND
                                              AE_RUN_SUMM.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  AE_RUN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009369", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_010", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because AE_RUN_SUMM exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT10 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM VOL_RUN WHERE VOL_RUN.TRAIT_CD = old.TRAIT_CD AND
                                          VOL_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  VOL_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c9a", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="VOL_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_012", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because VOL_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT11 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROT_RUN WHERE PROT_RUN.TRAIT_CD = old.TRAIT_CD AND
                                           PROT_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  PROT_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092fa", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="PROT_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_014", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because PROT_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT12 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LWGT_RUN WHERE LWGT_RUN.TRAIT_CD = old.TRAIT_CD AND
                                           LWGT_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  LWGT_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087a4", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="LWGT_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_009", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because LWGT_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT13 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FAT_RUN WHERE FAT_RUN.TRAIT_CD = old.TRAIT_CD AND
                                          FAT_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  FAT_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e2c", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="FAT_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_013", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because FAT_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT14 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BW_PW_RUN WHERE BW_PW_RUN.TRAIT_CD = old.TRAIT_CD AND
                                            BW_PW_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  BW_PW_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f15", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="BW_PW_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_015", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because BW_PW_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT15 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GESTATION_LENGTH_RUN WHERE GESTATION_LENGTH_RUN.TRAIT_CD = old.TRAIT_CD AND
                                                       GESTATION_LENGTH_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  GESTATION_LENGTH_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009cb3", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="GESTATION_LENGTH_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_007", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because GESTATION_LENGTH_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT16 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALVING_DIFF_RUN WHERE CALVING_DIFF_RUN.TRAIT_CD = old.TRAIT_CD AND
                                                   CALVING_DIFF_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  CALVING_DIFF_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009967", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="CALVING_DIFF_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_008", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because CALVING_DIFF_RUN exists.')
 !!

CREATE  TRIGGER tD_AREA_TRAIT17 AFTER DELETE ON AREA_TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOP_RUN WHERE TOP_RUN.TRAIT_CD = old.TRAIT_CD AND
                                          TOP_RUN.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* AREA_TRAIT  TOP_RUN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a6d", PARENT_OWNER="", PARENT_TABLE="AREA_TRAIT"
    CHILD_OWNER="", CHILD_TABLE="TOP_RUN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0203_006", FK_COLUMNS="TRAIT_CD""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete AREA_TRAIT because TOP_RUN exists.')
 !!


CREATE TRIGGER D0532I51
  NO CASCADE BEFORE INSERT
  ON AUTO_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0532I52
  NO CASCADE BEFORE INSERT
  ON AUTO_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0532U01
  NO CASCADE BEFORE UPDATE
  ON AUTO_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0532U51
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON AUTO_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0532U52
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON AUTO_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0532I01
  NO CASCADE BEFORE INSERT
  ON AUTO_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0532'
('D0532I01: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0532U02
  NO CASCADE BEFORE UPDATE OF 
                    rprt_tp_cd
  ON AUTO_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rprt_tp_cd != new.rprt_tp_cd
  AND NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0532'
('D0532U02: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0176U01
  NO CASCADE BEFORE UPDATE
  ON AVAIL_RPRT_DLVRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0321U01
  NO CASCADE BEFORE UPDATE
  ON AY_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0521I51
  NO CASCADE BEFORE INSERT
  ON BARCD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date_d IS NULL 
  AND new.proc_date IS NOT NULL
   OR CHAR(new.proc_date_d,ISO) = '0001-01-01'
  AND new.proc_date IS NOT NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0521I52
  NO CASCADE BEFORE INSERT
  ON BARCD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date IS NULL 
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01'
   OR new.proc_date = 0
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01')
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0521U01
  NO CASCADE BEFORE UPDATE
  ON BARCD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0521U51
  NO CASCADE BEFORE UPDATE OF 
                    proc_date
  ON BARCD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date != new.proc_date
   OR old.proc_date IS NULL AND new.proc_date IS NOT NULL
   OR old.proc_date IS NOT NULL AND new.proc_date IS NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 OR new.proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0521U52
  NO CASCADE BEFORE UPDATE OF 
                    proc_date_d
  ON BARCD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date_d != new.proc_date_d
   OR old.proc_date_d IS NULL and new.proc_date_d IS NOT NULL
   OR old.proc_date_d IS NOT NULL and new.proc_date_d IS NULL)
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL OR new.proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0660U02
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BATCH_JOB_STS_CD'
      AND c.cd = new.sts_cd) )
SIGNAL SQLSTATE 'Z0660'
('D0660U02: invalid status code')
 !!


CREATE TRIGGER D0660U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0660I01
  NO CASCADE BEFORE INSERT
  ON BATCH_JOB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BATCH_JOB_STS_CD'
      AND c.cd = new.sts_cd) )
SIGNAL SQLSTATE 'Z0660'
('D0660I01: invalid status code')
 !!


CREATE  TRIGGER tD_BATCH_JOB AFTER DELETE ON BATCH_JOB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_REPORT WHERE BATCH_JOB_REPORT.JOB_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB  BATCH_JOB_REPORT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008944", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_REPORT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0660_003", FK_COLUMNS="JOB_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB because BATCH_JOB_REPORT exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB2 AFTER DELETE ON BATCH_JOB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR WHERE BATCH_JOB_INITIATOR.JOB_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB  BATCH_JOB_INITIATOR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dc6", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0660_001", FK_COLUMNS="JOB_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB because BATCH_JOB_INITIATOR exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB3 AFTER DELETE ON BATCH_JOB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_DATA WHERE BATCH_JOB_DATA.JOB_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB  BATCH_JOB_DATA on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008949", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_DATA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0660_002", FK_COLUMNS="JOB_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB because BATCH_JOB_DATA exists.')
 !!


CREATE TRIGGER D0656U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BATCH_JOB_CLASS AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB WHERE BATCH_JOB.CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ac8", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_009", FK_COLUMNS="CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS2 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_READER WHERE BATCH_JOB_READER.CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_READER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009086", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_READER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_010", FK_COLUMNS="CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_READER exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS3 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR_SHIFT WHERE BATCH_JOB_INITIATOR_SHIFT.CLASS_CD_4 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR_SHIFT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097e3", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR_SHIFT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_008", FK_COLUMNS="CLASS_CD_4" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR_SHIFT exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS4 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR_SHIFT WHERE BATCH_JOB_INITIATOR_SHIFT.CLASS_CD_3 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR_SHIFT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097ae", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR_SHIFT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_007", FK_COLUMNS="CLASS_CD_3" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR_SHIFT exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS5 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR_SHIFT WHERE BATCH_JOB_INITIATOR_SHIFT.CLASS_CD_2 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR_SHIFT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f9b", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR_SHIFT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_006", FK_COLUMNS="CLASS_CD_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR_SHIFT exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS6 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR_SHIFT WHERE BATCH_JOB_INITIATOR_SHIFT.CLASS_CD_1 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR_SHIFT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a375", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR_SHIFT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_005", FK_COLUMNS="CLASS_CD_1" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR_SHIFT exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS7 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR WHERE BATCH_JOB_INITIATOR.CLASS_CD_4 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000997f", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_004", FK_COLUMNS="CLASS_CD_4" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS8 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR WHERE BATCH_JOB_INITIATOR.CLASS_CD_3 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009d10", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_003", FK_COLUMNS="CLASS_CD_3" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLAS9 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR WHERE BATCH_JOB_INITIATOR.CLASS_CD_2 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009cbd", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_002", FK_COLUMNS="CLASS_CD_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_CLA10 AFTER DELETE ON BATCH_JOB_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR WHERE BATCH_JOB_INITIATOR.CLASS_CD_1 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_CLASS  BATCH_JOB_INITIATOR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009760", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_CLASS"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0656_001", FK_COLUMNS="CLASS_CD_1" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_CLASS because BATCH_JOB_INITIATOR exists.')
 !!


CREATE TRIGGER D0727U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_DATA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0657U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_INITIATOR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BATCH_JOB_INITI AFTER DELETE ON BATCH_JOB_INITIATOR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB WHERE BATCH_JOB.INITIATOR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_INITIATOR  BATCH_JOB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095d2", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_INITIATOR"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0657_002", FK_COLUMNS="INITIATOR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_INITIATOR because BATCH_JOB exists.')
 !!

CREATE  TRIGGER tD_BATCH_JOB_INIT2 AFTER DELETE ON BATCH_JOB_INITIATOR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_INITIATOR_SHIFT WHERE BATCH_JOB_INITIATOR_SHIFT.INITIATOR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_INITIATOR  BATCH_JOB_INITIATOR_SHIFT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a29e", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_INITIATOR"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_INITIATOR_SHIFT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0657_001", FK_COLUMNS="INITIATOR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_INITIATOR because BATCH_JOB_INITIATOR_SHIFT exists.')
 !!


CREATE TRIGGER D0658U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_INITIATOR_SHIFT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0659U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_READER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0659I01
  NO CASCADE BEFORE INSERT
  ON BATCH_JOB_READER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BATCH_JOB_STS_CD'
      AND c.cd = new.sts_cd) )
SIGNAL SQLSTATE 'Z0659'
('D0659I01: invalid status code')
 !!


CREATE TRIGGER D0659U02
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_READER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BATCH_JOB_STS_CD'
      AND c.cd = new.sts_cd) )
SIGNAL SQLSTATE 'Z0659'
('D0659U02: invalid status code')
 !!


CREATE TRIGGER D0729U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_REPORT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0730U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_JOB_REPORT_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BATCH_JOB_REPOR AFTER DELETE ON BATCH_JOB_REPORT_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_REPORT WHERE BATCH_JOB_REPORT.PROC_NUM = old.PROC_NUM AND
                                                   BATCH_JOB_REPORT.RPRT_NAME = old.RPRT_NAME) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_JOB_REPORT_REF  BATCH_JOB_REPORT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f42", PARENT_OWNER="", PARENT_TABLE="BATCH_JOB_REPORT_REF"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_REPORT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0730_001", FK_COLUMNS="PROC_NUM""RPRT_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_JOB_REPORT_REF because BATCH_JOB_REPORT exists.')
 !!


CREATE TRIGGER D0210U01
  NO CASCADE BEFORE UPDATE
  ON BATCH_UPD_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BATCH_UPD_ERR AFTER DELETE ON BATCH_UPD_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_UPD_RSLV_ERR WHERE HERD_UPD_RSLV_ERR.BATCH_UPD_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_UPD_ERR  HERD_UPD_RSLV_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009651", PARENT_OWNER="", PARENT_TABLE="BATCH_UPD_ERR"
    CHILD_OWNER="", CHILD_TABLE="HERD_UPD_RSLV_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0210_002", FK_COLUMNS="BATCH_UPD_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_UPD_ERR because HERD_UPD_RSLV_ERR exists.')
 !!

CREATE  TRIGGER tD_BATCH_UPD_ERR2 AFTER DELETE ON BATCH_UPD_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPECIES_BATCH_UPD_ERR WHERE SPECIES_BATCH_UPD_ERR.BATCH_UPD_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_UPD_ERR  SPECIES_BATCH_UPD_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009dc5", PARENT_OWNER="", PARENT_TABLE="BATCH_UPD_ERR"
    CHILD_OWNER="", CHILD_TABLE="SPECIES_BATCH_UPD_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0210_003", FK_COLUMNS="BATCH_UPD_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_UPD_ERR because SPECIES_BATCH_UPD_ERR exists.')
 !!

CREATE  TRIGGER tD_BATCH_UPD_ERR3 AFTER DELETE ON BATCH_UPD_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_UPD_ERR WHERE HERD_UPD_ERR.BATCH_UPD_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BATCH_UPD_ERR  HERD_UPD_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009019", PARENT_OWNER="", PARENT_TABLE="BATCH_UPD_ERR"
    CHILD_OWNER="", CHILD_TABLE="HERD_UPD_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0210_001", FK_COLUMNS="BATCH_UPD_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BATCH_UPD_ERR because HERD_UPD_ERR exists.')
 !!


CREATE TRIGGER D0665U01
  NO CASCADE BEFORE UPDATE
  ON BODY_COND_SCORE_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0666U01
  NO CASCADE BEFORE UPDATE
  ON BODY_COND_SCORE_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0667U01
  NO CASCADE BEFORE UPDATE
  ON BODY_COND_SCORE_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BODY_COND_SCORE AFTER DELETE ON BODY_COND_SCORE_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BODY_COND_SCORE_RUN_AE_BRD WHERE BODY_COND_SCORE_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                             BODY_COND_SCORE_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* BODY_COND_SCORE_RUN  BODY_COND_SCORE_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a6d8", PARENT_OWNER="", PARENT_TABLE="BODY_COND_SCORE_RUN"
    CHILD_OWNER="", CHILD_TABLE="BODY_COND_SCORE_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0667_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BODY_COND_SCORE_RUN because BODY_COND_SCORE_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0668U01
  NO CASCADE BEFORE UPDATE
  ON BODY_COND_SCORE_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0560U01
  NO CASCADE BEFORE UPDATE
  ON BODY_PART
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BODY_PART AFTER DELETE ON BODY_PART
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AFFECT_BODY_PART WHERE AFFECT_BODY_PART.BODY_PART_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BODY_PART  AFFECT_BODY_PART on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e7a", PARENT_OWNER="", PARENT_TABLE="BODY_PART"
    CHILD_OWNER="", CHILD_TABLE="AFFECT_BODY_PART"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0560_001", FK_COLUMNS="BODY_PART_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BODY_PART because AFFECT_BODY_PART exists.')
 !!


CREATE TRIGGER D0725I01
  NO CASCADE BEFORE INSERT
  ON BOG_BULL_DCSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LENGTH(RTRIM(VALUE(new.cmt,' '))) < 2
 AND (EXISTS (
     SELECT 1 FROM bog_bull_dcsn_ref dr
       WHERE new.dcsn_cd = dr.cd
         AND dr.cmt_rqrd_ind = 'Y')
  OR EXISTS (
     SELECT 1 FROM bog_bull_rsn_ref rr
       WHERE new.rsn_cd = rr.cd
         AND rr.cmt_rqrd_ind = 'Y')))
SIGNAL SQLSTATE 'Z0725'
('D0725I01: a comment must be entered')
 !!


CREATE TRIGGER D0725U01
  NO CASCADE BEFORE UPDATE
  ON BOG_BULL_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (LENGTH(RTRIM(VALUE(new.cmt,' '))) < 2
 AND (EXISTS (
     SELECT 1 FROM bog_bull_dcsn_ref dr
       WHERE new.dcsn_cd = dr.cd
         AND dr.cmt_rqrd_ind = 'Y')
  OR EXISTS (
     SELECT 1 FROM bog_bull_rsn_ref rr
       WHERE new.rsn_cd = rr.cd
         AND rr.cmt_rqrd_ind = 'Y')))
SIGNAL SQLSTATE 'Z0725'
('D0725U01: a comment must be entered')
 !!


CREATE TRIGGER D0725U03
  NO CASCADE BEFORE UPDATE
  ON BOG_BULL_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0723U01
  NO CASCADE BEFORE UPDATE
  ON BOG_BULL_DCSN_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BOG_BULL_DCSN_R AFTER DELETE ON BOG_BULL_DCSN_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BOG_BULL_DCSN WHERE BOG_BULL_DCSN.DCSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BOG_BULL_DCSN_REF  BOG_BULL_DCSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008eb2", PARENT_OWNER="", PARENT_TABLE="BOG_BULL_DCSN_REF"
    CHILD_OWNER="", CHILD_TABLE="BOG_BULL_DCSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0723_001", FK_COLUMNS="DCSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BOG_BULL_DCSN_REF because BOG_BULL_DCSN exists.')
 !!


CREATE TRIGGER D0724U01
  NO CASCADE BEFORE UPDATE
  ON BOG_BULL_RSN_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BOG_BULL_RSN_RE AFTER DELETE ON BOG_BULL_RSN_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BOG_BULL_DCSN WHERE BOG_BULL_DCSN.RSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BOG_BULL_RSN_REF  BOG_BULL_DCSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008986", PARENT_OWNER="", PARENT_TABLE="BOG_BULL_RSN_REF"
    CHILD_OWNER="", CHILD_TABLE="BOG_BULL_DCSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0724_001", FK_COLUMNS="RSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BOG_BULL_RSN_REF because BOG_BULL_DCSN exists.')
 !!


CREATE TRIGGER D0227U01
  NO CASCADE BEFORE UPDATE
  ON BRAT_COANCESTRY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0228U01
  NO CASCADE BEFORE UPDATE
  ON BRAT_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0229U01
  NO CASCADE BEFORE UPDATE
  ON BRAT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0230U01
  NO CASCADE BEFORE UPDATE
  ON BRAT_RUN_BULL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0233U01
  NO CASCADE BEFORE UPDATE
  ON BRAT_RUN_DATA
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BRAT_RUN_DATA AFTER DELETE ON BRAT_RUN_DATA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BRAT_RUN_BULL WHERE BRAT_RUN_BULL.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRAT_RUN_DATA  BRAT_RUN_BULL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008519", PARENT_OWNER="", PARENT_TABLE="BRAT_RUN_DATA"
    CHILD_OWNER="", CHILD_TABLE="BRAT_RUN_BULL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0233_002", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRAT_RUN_DATA because BRAT_RUN_BULL exists.')
 !!

CREATE  TRIGGER tD_BRAT_RUN_DATA2 AFTER DELETE ON BRAT_RUN_DATA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BRAT_RSLT WHERE BRAT_RSLT.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRAT_RUN_DATA  BRAT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008562", PARENT_OWNER="", PARENT_TABLE="BRAT_RUN_DATA"
    CHILD_OWNER="", CHILD_TABLE="BRAT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0233_004", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRAT_RUN_DATA because BRAT_RSLT exists.')
 !!

CREATE  TRIGGER tD_BRAT_RUN_DATA3 AFTER DELETE ON BRAT_RUN_DATA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BRAT_LOG WHERE BRAT_LOG.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRAT_RUN_DATA  BRAT_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b9f", PARENT_OWNER="", PARENT_TABLE="BRAT_RUN_DATA"
    CHILD_OWNER="", CHILD_TABLE="BRAT_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0233_003", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRAT_RUN_DATA because BRAT_LOG exists.')
 !!

CREATE  TRIGGER tD_BRAT_RUN_DATA4 AFTER DELETE ON BRAT_RUN_DATA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BRAT_COANCESTRY WHERE BRAT_COANCESTRY.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRAT_RUN_DATA  BRAT_COANCESTRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008aac", PARENT_OWNER="", PARENT_TABLE="BRAT_RUN_DATA"
    CHILD_OWNER="", CHILD_TABLE="BRAT_COANCESTRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0233_001", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRAT_RUN_DATA because BRAT_COANCESTRY exists.')
 !!


CREATE TRIGGER D0364U01
  NO CASCADE BEFORE UPDATE
  ON BRD_SOC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BRD_SOC AFTER DELETE ON BRD_SOC
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRGNY_HDBK_DFLT WHERE PRGNY_HDBK_DFLT.BSOC_PARTY_ID = old.PARTY_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRD_SOC  PRGNY_HDBK_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c10", PARENT_OWNER="", PARENT_TABLE="BRD_SOC"
    CHILD_OWNER="", CHILD_TABLE="PRGNY_HDBK_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0364_002", FK_COLUMNS="BSOC_PARTY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRD_SOC because PRGNY_HDBK_DFLT exists.')
 !!

CREATE  TRIGGER tD_BRD_SOC2 AFTER DELETE ON BRD_SOC
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HDBK_SECT_STS WHERE HDBK_SECT_STS.BSOC_PARTY_ID = old.PARTY_ID) > 0)
    /* erwin Builtin Trigger */
    /* BRD_SOC  HDBK_SECT_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008891", PARENT_OWNER="", PARENT_TABLE="BRD_SOC"
    CHILD_OWNER="", CHILD_TABLE="HDBK_SECT_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0364_001", FK_COLUMNS="BSOC_PARTY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRD_SOC because HDBK_SECT_STS exists.')
 !!


CREATE TRIGGER D0248U01
  NO CASCADE BEFORE UPDATE
  ON BRD_STEP_STS_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BRD_STEP_STS_RE AFTER DELETE ON BRD_STEP_STS_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DTL WHERE HERD_DTL.BRD_STEP_STS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BRD_STEP_STS_REF  HERD_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000985a", PARENT_OWNER="", PARENT_TABLE="BRD_STEP_STS_REF"
    CHILD_OWNER="", CHILD_TABLE="HERD_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0248_001", FK_COLUMNS="BRD_STEP_STS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BRD_STEP_STS_REF because HERD_DTL exists.')
 !!


CREATE TRIGGER D0605U01
  NO CASCADE BEFORE UPDATE
  ON BRD_XLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0003U01
  NO CASCADE BEFORE UPDATE
  ON BREED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BREED AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM NC_SUBM_MODEL WHERE NC_SUBM_MODEL.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  NC_SUBM_MODEL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000080d7", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="NC_SUBM_MODEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_003", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because NC_SUBM_MODEL exists.')
 !!

CREATE  TRIGGER tD_BREED2 AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CROSS_BRD WHERE CROSS_BRD.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  CROSS_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008424", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="CROSS_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_002", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because CROSS_BRD exists.')
 !!

CREATE  TRIGGER tD_BREED3 AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM E_REG_RQST WHERE E_REG_RQST.REG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  E_REG_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000081f5", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="E_REG_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_005", FK_COLUMNS="REG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because E_REG_RQST exists.')
 !!

CREATE  TRIGGER tD_BREED4 AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BRD_SOC WHERE BRD_SOC.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  BRD_SOC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007a8c", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="BRD_SOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_001", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because BRD_SOC exists.')
 !!

CREATE  TRIGGER tD_BREED5 AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_WSTG WHERE AB_GRP_WSTG.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  AB_GRP_WSTG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008432", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_WSTG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_004", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because AB_GRP_WSTG exists.')
 !!

CREATE  TRIGGER tD_BREED6 AFTER DELETE ON BREED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ANML WHERE GM_ANML.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BREED  GM_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000084df", PARENT_OWNER="", PARENT_TABLE="BREED"
    CHILD_OWNER="", CHILD_TABLE="GM_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0003_006", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BREED because GM_ANML exists.')
 !!


CREATE TRIGGER D0186I51
  NO CASCADE BEFORE INSERT
  ON BRTH_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0186I52
  NO CASCADE BEFORE INSERT
  ON BRTH_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0186U01
  NO CASCADE BEFORE UPDATE
  ON BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0186U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0186U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0186D01
  AFTER DELETE
  ON BRTH_ID
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_brth_id (
  pfx
, yr
, num
, anml_key
, upd_time
, rcd_date_d
) VALUES (
  old.pfx
, old.yr
, old.num
, old.anml_key
, old.upd_time
, old.rcd_date_d
)
 !!


CREATE TRIGGER D0186U02
  AFTER UPDATE OF 
        pfx,
        yr,
        num
  ON BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pfx != new.pfx
   OR old.yr != new.yr
   OR old.num != new.num)
INSERT INTO del_brth_id (
  pfx
, yr
, num
, anml_key
, upd_time
, rcd_date_d
) VALUES (
  old.pfx
, old.yr
, old.num
, old.anml_key
, old.upd_time
, old.rcd_date_d
)
 !!


CREATE TRIGGER D0576U01
  NO CASCADE BEFORE UPDATE
  ON BSNS_RULE_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0331U01
  NO CASCADE BEFORE UPDATE
  ON BSNS_UNIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BSNS_UNIT AFTER DELETE ON BSNS_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CTRCT_TP WHERE GM_CTRCT_TP.BSNS_UNIT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BSNS_UNIT  GM_CTRCT_TP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e30", PARENT_OWNER="", PARENT_TABLE="BSNS_UNIT"
    CHILD_OWNER="", CHILD_TABLE="GM_CTRCT_TP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0331_001", FK_COLUMNS="BSNS_UNIT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BSNS_UNIT because GM_CTRCT_TP exists.')
 !!


CREATE TRIGGER D0188U01
  NO CASCADE BEFORE UPDATE
  ON BSOC_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0188I52
  NO CASCADE BEFORE INSERT
  ON BSOC_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date IS NULL 
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01'
   OR new.conv_date = 0
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01')
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.conv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0188D01
  AFTER DELETE
  ON BSOC_ANML_ID
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_bsoc_anml_id (
  bsoc_ptpt_cd
, hdbk_num
, sex_cd
, upd_time
, anml_key
, tattoo_cd
, conv_date_d
) VALUES (
  old.bsoc_ptpt_cd
, old.hdbk_num
, old.sex_cd
, old.upd_time
, old.anml_key
, old.tattoo_cd
, old.conv_date_d
)
 !!


CREATE TRIGGER D0188U51
  NO CASCADE BEFORE UPDATE OF 
                    conv_date
  ON BSOC_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date != new.conv_date
   OR old.conv_date IS NULL AND new.conv_date IS NOT NULL
   OR old.conv_date IS NOT NULL AND new.conv_date IS NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 OR new.conv_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0188I51
  NO CASCADE BEFORE INSERT
  ON BSOC_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date_d IS NULL 
  AND new.conv_date IS NOT NULL
   OR CHAR(new.conv_date_d,ISO) = '0001-01-01'
  AND new.conv_date IS NOT NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0188U02
  AFTER UPDATE OF 
        bsoc_ptpt_cd,
        hdbk_num,
        sex_cd
  ON BSOC_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.bsoc_ptpt_cd != new.bsoc_ptpt_cd
   OR old.hdbk_num != new.hdbk_num
   OR old.sex_cd != new.sex_cd)
INSERT INTO del_bsoc_anml_id (
  bsoc_ptpt_cd
, hdbk_num
, sex_cd
, upd_time
, anml_key
, tattoo_cd
, conv_date_d
) VALUES (
  old.bsoc_ptpt_cd
, old.hdbk_num
, old.sex_cd
, old.upd_time
, old.anml_key
, old.tattoo_cd
, old.conv_date_d
)
 !!


CREATE TRIGGER D0188U52
  NO CASCADE BEFORE UPDATE OF 
                    conv_date_d
  ON BSOC_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date_d != new.conv_date_d
   OR old.conv_date_d IS NULL and new.conv_date_d IS NOT NULL
   OR old.conv_date_d IS NOT NULL and new.conv_date_d IS NULL)
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL OR new.conv_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.conv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0063U01
  NO CASCADE BEFORE UPDATE OF 
                    memb_ptpt_cd
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.memb_ptpt_cd) )
SIGNAL SQLSTATE 'Z0063'
('D0063I01: memb_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0063U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0063U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0063I01
  NO CASCADE BEFORE INSERT
  ON BSOC_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.memb_ptpt_cd) )
SIGNAL SQLSTATE 'Z0063'
('D0063I01: memb_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0063I53
  NO CASCADE BEFORE INSERT
  ON BSOC_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0063U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0063I51
  NO CASCADE BEFORE INSERT
  ON BSOC_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0063I52
  NO CASCADE BEFORE INSERT
  ON BSOC_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0063U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0063I54
  NO CASCADE BEFORE INSERT
  ON BSOC_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0063U02
  NO CASCADE BEFORE UPDATE
  ON BSOC_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0391U01
  NO CASCADE BEFORE UPDATE
  ON BSOC_MEMB_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0022I54
  NO CASCADE BEFORE INSERT
  ON BSOC_MTNG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0022U52
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date_d
  ON BSOC_MTNG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date_d != new.mtng_date_d
   OR old.mtng_date_d IS NULL and new.mtng_date_d IS NOT NULL
   OR old.mtng_date_d IS NOT NULL and new.mtng_date_d IS NULL)
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL OR new.mtng_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0022U51
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date
  ON BSOC_MTNG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date != new.mtng_date
   OR old.mtng_date IS NULL AND new.mtng_date IS NOT NULL
   OR old.mtng_date IS NOT NULL AND new.mtng_date IS NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 OR new.mtng_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0022U54
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON BSOC_MTNG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0022U53
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON BSOC_MTNG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0022I53
  NO CASCADE BEFORE INSERT
  ON BSOC_MTNG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0022I51
  NO CASCADE BEFORE INSERT
  ON BSOC_MTNG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date_d IS NULL 
  AND new.mtng_date IS NOT NULL
   OR CHAR(new.mtng_date_d,ISO) = '0001-01-01'
  AND new.mtng_date IS NOT NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0022I52
  NO CASCADE BEFORE INSERT
  ON BSOC_MTNG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date IS NULL 
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01'
   OR new.mtng_date = 0
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01')
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0425U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_APPROACH
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
   ,new.upd_user_id = USER
 !!


CREATE TRIGGER D0425U02
  AFTER UPDATE OF 
        dam_decision_cd,
        mtng_1_anml_key,
        mtng_2_anml_key,
        mtng_3_anml_key,
        contract_price,
        proving_scheme_cd
  ON BULL_ACQ_APPROACH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.dam_decision_cd,'~~') != VALUE(new.dam_decision_cd,'~~')
   OR VALUE(old.mtng_1_anml_key,2147483647) != VALUE(new.mtng_1_anml_key,2147483647)
   OR VALUE(old.mtng_2_anml_key,2147483647) != VALUE(new.mtng_2_anml_key,2147483647)
   OR VALUE(old.mtng_3_anml_key,2147483647) != VALUE(new.mtng_3_anml_key,2147483647)
   OR VALUE(old.contract_price,2147483647) != VALUE(new.contract_price,2147483647)
   OR old.proving_scheme_cd != new.proving_scheme_cd)
INSERT INTO bull_acq_approach_log (
  dam_anml_key
, ssn
, num
, upd_time
, dam_decision_cd
, mtng_1_anml_key
, mtng_2_anml_key
, mtng_3_anml_key
, contract_price
, proving_scheme_cd)
VALUES (
  old.dam_anml_key
, old.ssn
, old.num
, old.upd_time
, old.dam_decision_cd
, old.mtng_1_anml_key
, old.mtng_2_anml_key
, old.mtng_3_anml_key
, old.contract_price
, old.proving_scheme_cd
)
 !!


CREATE TRIGGER D0425I01
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_APPROACH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0425U03
  NO CASCADE BEFORE UPDATE OF 
                    cmt
  ON BULL_ACQ_APPROACH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0425I02
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_APPROACH
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET (new.bull_acq_mgr_id, new.insp_bull_acq_mgr_id) = (
    SELECT bam.id, bam.id
    FROM bull_acq_mgr bam
       , herd_dtl hd
    WHERE new.breeder_party_id = hd.ownr_party_id
      AND hd.sr_area_ssn = (
        SELECT MAX(hd2.sr_area_ssn)
        FROM herd_dtl hd2
        WHERE hd2.ownr_party_id = new.breeder_party_id
          AND hd2.sr_area_ssn in (new.ssn, new.ssn - 1))
      AND bam.rm_area_rgn_cd = hd.rm_area_rgn_cd
      AND bam.dm_area_cd = hd.dm_area_cd
      AND bam.ssn = new.ssn
      AND bam.proving_scheme_cd = new.proving_scheme_cd)
 !!


CREATE TRIGGER D0425U04
  NO CASCADE BEFORE UPDATE OF 
                    breeder_party_id
  ON BULL_ACQ_APPROACH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.breeder_party_id != new.breeder_party_id)
SET new.bull_acq_mgr_id = (
    SELECT bam.id
    FROM bull_acq_mgr bam
       , herd_dtl hd
    WHERE new.breeder_party_id = hd.ownr_party_id
      AND hd.sr_area_ssn = (
        SELECT MAX(hd2.sr_area_ssn)
        FROM herd_dtl hd2
        WHERE hd2.ownr_party_id = new.breeder_party_id
          AND hd2.sr_area_ssn in (new.ssn, new.ssn - 1))
      AND bam.rm_area_rgn_cd = hd.rm_area_rgn_cd
      AND bam.dm_area_cd = hd.dm_area_cd
      AND bam.ssn = new.ssn
      AND bam.proving_scheme_cd = new.proving_scheme_cd)
 !!


CREATE  TRIGGER tD_BULL_ACQ_APPROA AFTER DELETE ON BULL_ACQ_APPROACH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_ORDER_HDR WHERE SEMEN_ORDER_HDR.DAM_ANML_KEY = old.DAM_ANML_KEY AND
                                                  SEMEN_ORDER_HDR.SSN = old.SSN AND
                                                  SEMEN_ORDER_HDR.BULL_ACQ_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_APPROACH  SEMEN_ORDER_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f97", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_APPROACH"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_ORDER_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0425_004", FK_COLUMNS="DAM_ANML_KEY""SSN""BULL_ACQ_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_APPROACH because SEMEN_ORDER_HDR exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_APPRO2 AFTER DELETE ON BULL_ACQ_APPROACH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_PURCH_EVAL WHERE CALF_PURCH_EVAL.DAM_ANML_KEY = old.DAM_ANML_KEY AND
                                                  CALF_PURCH_EVAL.SSN = old.SSN AND
                                                  CALF_PURCH_EVAL.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_APPROACH  CALF_PURCH_EVAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009804", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_APPROACH"
    CHILD_OWNER="", CHILD_TABLE="CALF_PURCH_EVAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0425_001", FK_COLUMNS="DAM_ANML_KEY""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_APPROACH because CALF_PURCH_EVAL exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_APPRO3 AFTER DELETE ON BULL_ACQ_APPROACH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_EMBRYO_EVENT WHERE BULL_ACQ_EMBRYO_EVENT.DAM_ANML_KEY = old.DAM_ANML_KEY AND
                                                        BULL_ACQ_EMBRYO_EVENT.SSN = old.SSN AND
                                                        BULL_ACQ_EMBRYO_EVENT.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_APPROACH  BULL_ACQ_EMBRYO_EVENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f43", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_APPROACH"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_EMBRYO_EVENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0425_003", FK_COLUMNS="DAM_ANML_KEY""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_APPROACH because BULL_ACQ_EMBRYO_EVENT exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_APPRO4 AFTER DELETE ON BULL_ACQ_APPROACH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH_RCPNT WHERE BULL_ACQ_APPROACH_RCPNT.DAM_ANML_KEY = old.DAM_ANML_KEY AND
                                                          BULL_ACQ_APPROACH_RCPNT.SSN = old.SSN AND
                                                          BULL_ACQ_APPROACH_RCPNT.NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_APPROACH  BULL_ACQ_APPROACH_RCPNT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a325", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_APPROACH"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH_RCPNT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0425_002", FK_COLUMNS="DAM_ANML_KEY""SSN""NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_APPROACH because BULL_ACQ_APPROACH_RCPNT exists.')
 !!


CREATE TRIGGER D0882U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0882U02
  NO CASCADE BEFORE UPDATE OF 
                    doc_num,
                    et_rcpnt_anml_key
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.doc_num != '2005bull_acq'
  AND (new.doc_num != old.doc_num OR
       new.et_rcpnt_anml_key != old.et_rcpnt_anml_key)
  AND EXISTS (
    SELECT 1 FROM bull_acq_approach_rcpnt baar
    WHERE new.doc_num = baar.doc_num
      AND new.et_rcpnt_anml_key  = baar.et_rcpnt_anml_key))
SIGNAL SQLSTATE 'Z0882'
('D0882U02: duplicate embryo recipient')
 !!


CREATE TRIGGER D0882U03
  NO CASCADE BEFORE UPDATE OF 
                    dam_anml_key,
                    ssn,
                    num
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.dam_anml_key <> old.dam_anml_key OR
      new.ssn <> old.ssn OR
      new.num <> old.num
  AND EXISTS
  (SELECT 1 FROM calf_purch_eval cpe
    WHERE new.id = cpe.rcpnt_id
      AND (new.dam_anml_key <> cpe.dam_anml_key
       OR new.ssn = cpe.ssn
       OR new.num = cpe.num) ) )
SIGNAL SQLSTATE 'Z0882'
('D0882U03: calf purch eval is for different dam')
 !!


CREATE TRIGGER D0882U04
  NO CASCADE BEFORE UPDATE OF 
                    anml_ref
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_ref IS NULL 
  AND new.anml_ref IS NOT NULL
  AND old.doc_num IS NOT NULL)
SIGNAL SQLSTATE 'Z0882'
('D0882U04: document id already supplied')
 !!


CREATE TRIGGER D0882U05
  NO CASCADE BEFORE UPDATE OF 
                    doc_num
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.doc_num IS NOT NULL
  AND new.doc_num IS NULL)
SIGNAL SQLSTATE 'Z0882'
('D0882U05: document id cannot be set to null')
 !!


CREATE TRIGGER D0882I01
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.doc_num != '2005bull_acq'
  AND EXISTS (
    SELECT 1 FROM bull_acq_approach_rcpnt baar
    WHERE new.doc_num = baar.doc_num
      AND new.et_rcpnt_anml_key  = baar.et_rcpnt_anml_key))
SIGNAL SQLSTATE 'Z0882'
('D0882I01: duplicate embryo recipient')
 !!


CREATE TRIGGER D0882I02
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_APPROACH_RCPNT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.doc_num IS NOT NULL AND new.et_rcpnt_anml_key IS NOT NULL AND new.anml_ref IS NOT NULL
   OR new.doc_num IS NULL AND new.et_rcpnt_anml_key IS NULL AND new.anml_ref IS NULL)
SIGNAL SQLSTATE 'Z0882'
('D0882I02: document id OR animal ref must be entered')
 !!


CREATE  TRIGGER tD_BULL_ACQ_APPROA AFTER DELETE ON BULL_ACQ_APPROACH_RCPNT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_PURCH_EVAL WHERE CALF_PURCH_EVAL.RCPNT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_APPROACH_RCPNT  CALF_PURCH_EVAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009e59", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_APPROACH_RCPNT"
    CHILD_OWNER="", CHILD_TABLE="CALF_PURCH_EVAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0882_001", FK_COLUMNS="RCPNT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_APPROACH_RCPNT because CALF_PURCH_EVAL exists.')
 !!


CREATE TRIGGER D0435U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON BULL_ACQ_CALF_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0435I52
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_CALF_DCSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0435I51
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_CALF_DCSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0435U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON BULL_ACQ_CALF_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0435U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_CALF_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_ACQ_CALF_D AFTER DELETE ON BULL_ACQ_CALF_DCSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.CALF_STS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_CALF_DCSN  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096d4", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_CALF_DCSN"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0435_001", FK_COLUMNS="CALF_STS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_CALF_DCSN because BULL_ACQ_APPROACH exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_CALF_2 AFTER DELETE ON BULL_ACQ_CALF_DCSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH_RCPNT WHERE BULL_ACQ_APPROACH_RCPNT.CALF_STS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_CALF_DCSN  BULL_ACQ_APPROACH_RCPNT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009dfa", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_CALF_DCSN"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH_RCPNT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0435_002", FK_COLUMNS="CALF_STS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_CALF_DCSN because BULL_ACQ_APPROACH_RCPNT exists.')
 !!


CREATE TRIGGER D0878U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_CONTRACT_DECISION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_ACQ_CONTRA AFTER DELETE ON BULL_ACQ_CONTRACT_DECISION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.CONTRACT_DECISION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_CONTRACT_DECISION  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a100", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_CONTRACT_DECISION"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0878_001", FK_COLUMNS="CONTRACT_DECISION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_CONTRACT_DECISION because BULL_ACQ_APPROACH exists.')
 !!


CREATE TRIGGER D0426U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON BULL_ACQ_DAM_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0426I52
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_DAM_DCSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0426U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_DAM_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0426U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON BULL_ACQ_DAM_DCSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0426I51
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_DAM_DCSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE  TRIGGER tD_BULL_ACQ_DAM_DC AFTER DELETE ON BULL_ACQ_DAM_DCSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.DAM_DECISION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_DAM_DCSN  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009a26", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_DAM_DCSN"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0426_001", FK_COLUMNS="DAM_DECISION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_DAM_DCSN because BULL_ACQ_APPROACH exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_DAM_D2 AFTER DELETE ON BULL_ACQ_DAM_DCSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POTENTIAL_BULL_PARENT_DECISION WHERE POTENTIAL_BULL_PARENT_DECISION.DAM_DECISION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_DAM_DCSN  POTENTIAL_BULL_PARENT_DECISION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a6c9", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_DAM_DCSN"
    CHILD_OWNER="", CHILD_TABLE="POTENTIAL_BULL_PARENT_DECISION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0426_002", FK_COLUMNS="DAM_DECISION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_DAM_DCSN because POTENTIAL_BULL_PARENT_DECISION exists.')
 !!


CREATE TRIGGER D0881U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_EMBRYO_EVENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0881I01
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_EMBRYO_EVENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.embryo_prodn_method_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'EMBRYO_PRODN_METHOD_CD'
      AND c.cd = new.embryo_prodn_method_cd) )
SIGNAL SQLSTATE 'Z0881'
('D0881I01: invalid embryo production method code')
 !!


CREATE TRIGGER D0881U02
  NO CASCADE BEFORE UPDATE OF 
                    embryo_prodn_method_cd
  ON BULL_ACQ_EMBRYO_EVENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.embryo_prodn_method_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'EMBRYO_PRODN_METHOD_CD'
      AND c.cd = new.embryo_prodn_method_cd) )
SIGNAL SQLSTATE 'Z0881'
('D0881U02: invalid embryo production method code')
 !!


CREATE TRIGGER D0881I02
  NO CASCADE BEFORE INSERT
  ON BULL_ACQ_EMBRYO_EVENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.event_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0881'
('D0881I02: the event date must not be in the future')
 !!


CREATE TRIGGER D0881U03
  NO CASCADE BEFORE UPDATE OF 
                    event_date
  ON BULL_ACQ_EMBRYO_EVENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.event_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0881'
('D0881I02: the event date must not be in the future')
 !!


CREATE TRIGGER D0857U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_MGR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_ACQ_MGR AFTER DELETE ON BULL_ACQ_MGR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.BULL_ACQ_MGR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_MGR  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d74", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_MGR"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0857_002", FK_COLUMNS="BULL_ACQ_MGR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_MGR because BULL_ACQ_APPROACH exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_MGR2 AFTER DELETE ON BULL_ACQ_MGR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.INSP_BULL_ACQ_MGR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_MGR  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093ac", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_MGR"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0857_001", FK_COLUMNS="INSP_BULL_ACQ_MGR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_MGR because BULL_ACQ_APPROACH exists.')
 !!

CREATE  TRIGGER tD_BULL_ACQ_MGR3 AFTER DELETE ON BULL_ACQ_MGR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_PURCH_EVAL WHERE CALF_PURCH_EVAL.INSP_BULL_ACQ_MGR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_MGR  CALF_PURCH_EVAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096b2", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_MGR"
    CHILD_OWNER="", CHILD_TABLE="CALF_PURCH_EVAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0857_002", FK_COLUMNS="INSP_BULL_ACQ_MGR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_MGR because CALF_PURCH_EVAL exists.')
 !!


CREATE TRIGGER D0858U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ACQ_SIRE_DECISION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_ACQ_SIRE_D AFTER DELETE ON BULL_ACQ_SIRE_DECISION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POTENTIAL_BULL_PARENT_DECISION WHERE POTENTIAL_BULL_PARENT_DECISION.SIRE_DECISION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* BULL_ACQ_SIRE_DECISION  POTENTIAL_BULL_PARENT_DECISION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000b010", PARENT_OWNER="", PARENT_TABLE="BULL_ACQ_SIRE_DECISION"
    CHILD_OWNER="", CHILD_TABLE="POTENTIAL_BULL_PARENT_DECISION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0858_001", FK_COLUMNS="SIRE_DECISION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_ACQ_SIRE_DECISION because POTENTIAL_BULL_PARENT_DECISION exists.')
 !!


CREATE TRIGGER D0840U01
  NO CASCADE BEFORE UPDATE
  ON BULL_BREEDER
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_BREEDER AFTER DELETE ON BULL_BREEDER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_ORDER_HDR WHERE SEMEN_ORDER_HDR.BREEDER_PARTY_ID = old.PARTY_ID AND
                                                  SEMEN_ORDER_HDR.SSN = old.SSN) > 0)
    /* erwin Builtin Trigger */
    /* BULL_BREEDER  SEMEN_ORDER_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096b4", PARENT_OWNER="", PARENT_TABLE="BULL_BREEDER"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_ORDER_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0840_002", FK_COLUMNS="BREEDER_PARTY_ID""SSN" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_BREEDER because SEMEN_ORDER_HDR exists.')
 !!

CREATE  TRIGGER tD_BULL_BREEDER2 AFTER DELETE ON BULL_BREEDER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.BREEDER_PARTY_ID = old.PARTY_ID AND
                                                    BULL_ACQ_APPROACH.SSN = old.SSN) > 0)
    /* erwin Builtin Trigger */
    /* BULL_BREEDER  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c3d", PARENT_OWNER="", PARENT_TABLE="BULL_BREEDER"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0840_001", FK_COLUMNS="BREEDER_PARTY_ID""SSN" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_BREEDER because BULL_ACQ_APPROACH exists.')
 !!


CREATE TRIGGER D0859U01
  NO CASCADE BEFORE UPDATE
  ON BULL_CALF_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0860U01
  NO CASCADE BEFORE UPDATE
  ON BULL_CALF_CONTRACT_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0860I01
  NO CASCADE BEFORE INSERT
  ON BULL_CALF_CONTRACT_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_CONTRACT_TP_CD'
      AND c.cd = new.contract_tp_cd) )
SIGNAL SQLSTATE 'Z0860'
('D0860I01: invalid contract type code')
 !!


CREATE TRIGGER D0860U02
  NO CASCADE BEFORE UPDATE
  ON BULL_CALF_CONTRACT_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_CONTRACT_TP_CD'
      AND c.cd = new.contract_tp_cd) )
SIGNAL SQLSTATE 'Z0860'
('D0860U02: invalid contract type code')
 !!


CREATE TRIGGER D0861I01
  NO CASCADE BEFORE INSERT
  ON BULL_CALF_CONTRACT_SIRE_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_CONTRACT_TP_CD'
      AND c.cd = new.contract_tp_cd) )
SIGNAL SQLSTATE 'Z0861'
('D0861I01: invalid contract type code')
 !!


CREATE TRIGGER D0861U01
  NO CASCADE BEFORE UPDATE
  ON BULL_CALF_CONTRACT_SIRE_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0861U02
  NO CASCADE BEFORE UPDATE
  ON BULL_CALF_CONTRACT_SIRE_ASSUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_CONTRACT_TP_CD'
      AND c.cd = new.contract_tp_cd) )
SIGNAL SQLSTATE 'Z0861'
('D0861U02: invalid contract type code')
 !!


CREATE TRIGGER D0550I51
  NO CASCADE BEFORE INSERT
  ON BULL_MKTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0550I52
  NO CASCADE BEFORE INSERT
  ON BULL_MKTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0550I53
  NO CASCADE BEFORE INSERT
  ON BULL_MKTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0550I54
  NO CASCADE BEFORE INSERT
  ON BULL_MKTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0550U01
  NO CASCADE BEFORE UPDATE
  ON BULL_MKTR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0550U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON BULL_MKTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0550U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON BULL_MKTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0550U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON BULL_MKTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0550U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON BULL_MKTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0580U01
  NO CASCADE BEFORE UPDATE
  ON BULL_ROSTER_RPT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0581U01
  NO CASCADE BEFORE UPDATE
  ON BULL_TEAM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BULL_TEAM AFTER DELETE ON BULL_TEAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_TEAM_ASSGN WHERE BULL_TEAM_ASSGN.BULL_TEAM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* BULL_TEAM  BULL_TEAM_ASSGN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f03", PARENT_OWNER="", PARENT_TABLE="BULL_TEAM"
    CHILD_OWNER="", CHILD_TABLE="BULL_TEAM_ASSGN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0581_001", FK_COLUMNS="BULL_TEAM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BULL_TEAM because BULL_TEAM_ASSGN exists.')
 !!


CREATE TRIGGER D0582U01
  NO CASCADE BEFORE UPDATE
  ON BULL_TEAM_ASSGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0775U01
  NO CASCADE BEFORE UPDATE
  ON BW_PW_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0776U01
  NO CASCADE BEFORE UPDATE
  ON BW_PW_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0777U01
  NO CASCADE BEFORE UPDATE
  ON BW_PW_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_BW_PW_RUN AFTER DELETE ON BW_PW_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BW_PW_RUN_AE_BRD WHERE BW_PW_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                   BW_PW_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* BW_PW_RUN  BW_PW_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093e7", PARENT_OWNER="", PARENT_TABLE="BW_PW_RUN"
    CHILD_OWNER="", CHILD_TABLE="BW_PW_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0777_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete BW_PW_RUN because BW_PW_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0778U01
  NO CASCADE BEFORE UPDATE
  ON BW_PW_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0652U01
  NO CASCADE BEFORE UPDATE
  ON CALENDAR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0542I51
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_date_d IS NULL 
  AND new.clvg_date IS NOT NULL
   OR CHAR(new.clvg_date_d,ISO) = '0001-01-01'
  AND new.clvg_date IS NOT NULL)
SET new.clvg_date_d =
  CASE WHEN new.clvg_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0542I52
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_date IS NULL 
  AND new.clvg_date_d IS NOT NULL
  AND CHAR(new.clvg_date_d,ISO) != '0001-01-01'
   OR new.clvg_date = 0
  AND new.clvg_date_d IS NOT NULL
  AND CHAR(new.clvg_date_d,ISO) != '0001-01-01')
SET new.clvg_date =
  CASE WHEN new.clvg_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.clvg_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.clvg_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.clvg_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0542U01
  NO CASCADE BEFORE UPDATE
  ON CALF_DEFECT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0542U51
  NO CASCADE BEFORE UPDATE OF 
                    clvg_date
  ON CALF_DEFECT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_date != new.clvg_date
   OR old.clvg_date IS NULL AND new.clvg_date IS NOT NULL
   OR old.clvg_date IS NOT NULL AND new.clvg_date IS NULL)
SET new.clvg_date_d =
  CASE WHEN new.clvg_date = 0 OR new.clvg_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0542U52
  NO CASCADE BEFORE UPDATE OF 
                    clvg_date_d
  ON CALF_DEFECT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_date_d != new.clvg_date_d
   OR old.clvg_date_d IS NULL and new.clvg_date_d IS NOT NULL
   OR old.clvg_date_d IS NOT NULL and new.clvg_date_d IS NULL)
SET new.clvg_date =
  CASE WHEN new.clvg_date_d IS NULL OR new.clvg_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.clvg_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.clvg_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.clvg_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0543I01
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0543'
('D0543I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0543I51
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0543I52
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0543U01
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON CALF_DEFECT_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0543'
('D0543I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0543U02
  NO CASCADE BEFORE UPDATE
  ON CALF_DEFECT_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0543U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON CALF_DEFECT_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0543U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON CALF_DEFECT_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0541I51
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT_RPRT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0541I52
  NO CASCADE BEFORE INSERT
  ON CALF_DEFECT_RPRT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0541U01
  NO CASCADE BEFORE UPDATE
  ON CALF_DEFECT_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0541U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON CALF_DEFECT_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0541U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON CALF_DEFECT_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_CALF_DEFECT_RPR AFTER DELETE ON CALF_DEFECT_RPRT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT_ACT WHERE CALF_DEFECT_ACT.RPRT_YR = old.YR AND
                                                  CALF_DEFECT_ACT.RPRT_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* CALF_DEFECT_RPRT  CALF_DEFECT_ACT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009592", PARENT_OWNER="", PARENT_TABLE="CALF_DEFECT_RPRT"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT_ACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0541_001", FK_COLUMNS="RPRT_YR""RPRT_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CALF_DEFECT_RPRT because CALF_DEFECT_ACT exists.')
 !!

CREATE  TRIGGER tD_CALF_DEFECT_RP2 AFTER DELETE ON CALF_DEFECT_RPRT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT WHERE CALF_DEFECT.RPRT_YR = old.YR AND
                                              CALF_DEFECT.RPRT_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* CALF_DEFECT_RPRT  CALF_DEFECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009238", PARENT_OWNER="", PARENT_TABLE="CALF_DEFECT_RPRT"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0541_002", FK_COLUMNS="RPRT_YR""RPRT_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CALF_DEFECT_RPRT because CALF_DEFECT exists.')
 !!


CREATE TRIGGER D0862U01
  NO CASCADE BEFORE UPDATE
  ON CALF_PURCH_COND
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0865U01
  NO CASCADE BEFORE UPDATE
  ON CALF_PURCH_COND_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CALF_PURCH_COND AFTER DELETE ON CALF_PURCH_COND_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_PURCH_COND WHERE CALF_PURCH_COND.PURCH_COND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CALF_PURCH_COND_REF  CALF_PURCH_COND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009932", PARENT_OWNER="", PARENT_TABLE="CALF_PURCH_COND_REF"
    CHILD_OWNER="", CHILD_TABLE="CALF_PURCH_COND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0873_001", FK_COLUMNS="PURCH_COND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CALF_PURCH_COND_REF because CALF_PURCH_COND exists.')
 !!


CREATE TRIGGER D0448I05
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bull_acq_mgr_decision_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_MGR_DECISION_CD'
      AND c.cd = new.bull_acq_mgr_decision_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0448'
('D0448I05: invalid bull acquisition manager decision code')
 !!


CREATE TRIGGER D0448I06
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.contract_price IS NULL)
  SET new.contract_price = (
    SELECT baa.contract_price
    FROM bull_acq_approach baa
    WHERE baa.dam_anml_key = new.dam_anml_key
      AND baa.ssn = new.ssn
      AND baa.num = new.num)
 !!


CREATE TRIGGER D0448U06
  NO CASCADE BEFORE UPDATE OF 
                    bull_acq_mgr_decision_cd
  ON CALF_PURCH_EVAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.bull_acq_mgr_decision_cd IS NOT NULL
 AND new.bull_acq_mgr_decision_cd != VALUE(old.bull_acq_mgr_decision_cd,'~')
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'BULL_ACQ_MGR_DECISION_CD'
      AND c.cd = new.bull_acq_mgr_decision_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0448'
('D0448U06: invalid bull acquisition manager decision code')
 !!


CREATE TRIGGER D0448I04
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0448U05
  NO CASCADE BEFORE UPDATE OF 
                    cmt
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0448U01
  NO CASCADE BEFORE UPDATE
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0448I01
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_ab_bull_cd IS NOT NULL
 AND EXISTS (
   SELECT 1 FROM calf_purch_eval cpe
   WHERE cpe.tag_ab_bull_cd = new.tag_ab_bull_cd
     AND (cpe.brth_id_pfx != new.brth_id_pfx
       OR cpe.brth_id_yr  != new.brth_id_yr
       OR cpe.brth_id_num != new.brth_id_num) ) )
-- the tag AB bull code must be unique
SIGNAL SQLSTATE 'Z0448'
('D0448I01: the tag AB bull code must be unique')
 !!


CREATE TRIGGER D0448U02
  NO CASCADE BEFORE UPDATE OF 
                    tag_ab_bull_cd
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_ab_bull_cd IS NOT NULL
 AND EXISTS (
   SELECT 1 FROM calf_purch_eval cpe
   WHERE cpe.tag_ab_bull_cd = new.tag_ab_bull_cd
     AND (cpe.brth_id_pfx != new.brth_id_pfx
       OR cpe.brth_id_yr  != new.brth_id_yr
       OR cpe.brth_id_num != new.brth_id_num) ) )
-- the tag AB bull code must be unique
SIGNAL SQLSTATE 'Z0448'
('D0448U02: the tag AB bull code must be unique')
 !!


CREATE TRIGGER D0448I02
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'CALF_PYMT_AUTH_CD'
      AND c.cd = new.pymt_auth_cd) )
SIGNAL SQLSTATE 'Z0448'
('D0448I02: invalid payment authorisation code')
 !!


CREATE TRIGGER D0448U03
  NO CASCADE BEFORE UPDATE OF 
                    pymt_auth_cd
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'CALF_PYMT_AUTH_CD'
      AND c.cd = new.pymt_auth_cd) )
SIGNAL SQLSTATE 'Z0448'
('D0448I02: invalid payment authorisation code')
 !!


CREATE TRIGGER D0448I03
  NO CASCADE BEFORE INSERT
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcpnt_id IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 FROM bull_acq_approach_rcpnt baar
    WHERE baar.id = new.rcpnt_id
      AND baar.dam_anml_key = new.dam_anml_key
      AND baar.ssn = new.ssn
      AND baar.num = new.num) )
SIGNAL SQLSTATE 'Z0448'
('D0448I03: recipient is for different dam')
 !!


CREATE TRIGGER D0448U04
  NO CASCADE BEFORE UPDATE OF 
                    dam_anml_key,
                    ssn,
                    num,
                    rcpnt_id
  ON CALF_PURCH_EVAL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcpnt_id IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 FROM bull_acq_approach_rcpnt baar
    WHERE baar.id = new.rcpnt_id
      AND baar.dam_anml_key = new.dam_anml_key
      AND baar.ssn = new.ssn
      AND baar.num = new.num) )
SIGNAL SQLSTATE 'Z0448'
('D0448U04: recipient is for different dam')
 !!


CREATE  TRIGGER tD_CALF_PURCH_EVAL AFTER DELETE ON CALF_PURCH_EVAL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_PURCH_COND WHERE CALF_PURCH_COND.BRTH_ID_PFX = old.BRTH_ID_PFX AND
                                                  CALF_PURCH_COND.BRTH_ID_YR = old.BRTH_ID_YR AND
                                                  CALF_PURCH_COND.BRTH_ID_NUM = old.BRTH_ID_NUM) > 0)
    /* erwin Builtin Trigger */
    /* CALF_PURCH_EVAL  CALF_PURCH_COND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009fa6", PARENT_OWNER="", PARENT_TABLE="CALF_PURCH_EVAL"
    CHILD_OWNER="", CHILD_TABLE="CALF_PURCH_COND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0448_001", FK_COLUMNS="BRTH_ID_PFX""BRTH_ID_YR""BRTH_ID_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CALF_PURCH_EVAL because CALF_PURCH_COND exists.')
 !!


CREATE TRIGGER D0669U01
  NO CASCADE BEFORE UPDATE
  ON CALVING_DIFF_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CALVING_DIFF_RU AFTER DELETE ON CALVING_DIFF_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALVING_DIFF_RUN_AE_BRD WHERE CALVING_DIFF_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                          CALVING_DIFF_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* CALVING_DIFF_RUN  CALVING_DIFF_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a42c", PARENT_OWNER="", PARENT_TABLE="CALVING_DIFF_RUN"
    CHILD_OWNER="", CHILD_TABLE="CALVING_DIFF_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0669_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CALVING_DIFF_RUN because CALVING_DIFF_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0670U01
  NO CASCADE BEFORE UPDATE
  ON CALVING_DIFF_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0608U01
  NO CASCADE BEFORE UPDATE
  ON CARCASS_CATEGORY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CARCASS_CATEGOR AFTER DELETE ON CARCASS_CATEGORY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CARCASS_VALIDATION WHERE CARCASS_VALIDATION.CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CARCASS_CATEGORY  CARCASS_VALIDATION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000968c", PARENT_OWNER="", PARENT_TABLE="CARCASS_CATEGORY"
    CHILD_OWNER="", CHILD_TABLE="CARCASS_VALIDATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0608_001", FK_COLUMNS="CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CARCASS_CATEGORY because CARCASS_VALIDATION exists.')
 !!

CREATE  TRIGGER tD_CARCASS_CATEGO2 AFTER DELETE ON CARCASS_CATEGORY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_CARCASS WHERE ANML_CARCASS.CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CARCASS_CATEGORY  ANML_CARCASS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ac7", PARENT_OWNER="", PARENT_TABLE="CARCASS_CATEGORY"
    CHILD_OWNER="", CHILD_TABLE="ANML_CARCASS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0608_002", FK_COLUMNS="CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CARCASS_CATEGORY because ANML_CARCASS exists.')
 !!


CREATE TRIGGER D0609U01
  NO CASCADE BEFORE UPDATE
  ON CARCASS_CLASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CARCASS_CLASS AFTER DELETE ON CARCASS_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CARCASS_VALIDATION WHERE CARCASS_VALIDATION.CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CARCASS_CLASS  CARCASS_VALIDATION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c63", PARENT_OWNER="", PARENT_TABLE="CARCASS_CLASS"
    CHILD_OWNER="", CHILD_TABLE="CARCASS_VALIDATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0609_001", FK_COLUMNS="CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CARCASS_CLASS because CARCASS_VALIDATION exists.')
 !!


CREATE TRIGGER D0603U01
  NO CASCADE BEFORE UPDATE
  ON CARCASS_VALIDATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0603I02
  NO CASCADE BEFORE INSERT
  ON CARCASS_VALIDATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEX_CD'
      AND c.cd = new.sex_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0603'
('D0603I02: invalid sex code')
 !!


CREATE TRIGGER D0603U03
  NO CASCADE BEFORE UPDATE OF 
                    sex_cd
  ON CARCASS_VALIDATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sex_cd != new.sex_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEX_CD'
      AND c.cd = new.sex_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0603'
('D0603U03: invalid sex code')
 !!


CREATE TRIGGER D0152U01
  NO CASCADE BEFORE UPDATE
  ON CATTLE_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CATTLE_LOCUS AFTER DELETE ON CATTLE_LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LOCUS_ALLELE WHERE LOCUS_ALLELE.CATTLE_LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CATTLE_LOCUS  LOCUS_ALLELE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dbe", PARENT_OWNER="", PARENT_TABLE="CATTLE_LOCUS"
    CHILD_OWNER="", CHILD_TABLE="LOCUS_ALLELE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0152_001", FK_COLUMNS="CATTLE_LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CATTLE_LOCUS because LOCUS_ALLELE exists.')
 !!

CREATE  TRIGGER tD_CATTLE_LOCUS2 AFTER DELETE ON CATTLE_LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TEST_VAR WHERE TEST_VAR.CATTLE_LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CATTLE_LOCUS  TEST_VAR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091dc", PARENT_OWNER="", PARENT_TABLE="CATTLE_LOCUS"
    CHILD_OWNER="", CHILD_TABLE="TEST_VAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0152_001", FK_COLUMNS="CATTLE_LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CATTLE_LOCUS because TEST_VAR exists.')
 !!

CREATE  TRIGGER tD_CATTLE_LOCUS3 AFTER DELETE ON CATTLE_LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PHENOTYPE WHERE PHENOTYPE.CATTLE_LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CATTLE_LOCUS  PHENOTYPE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009154", PARENT_OWNER="", PARENT_TABLE="CATTLE_LOCUS"
    CHILD_OWNER="", CHILD_TABLE="PHENOTYPE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0152_002", FK_COLUMNS="CATTLE_LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CATTLE_LOCUS because PHENOTYPE exists.')
 !!


CREATE TRIGGER D0255U01
  NO CASCADE BEFORE UPDATE
  ON CD_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
   ,new.upd_user_id = USER
 !!


CREATE TRIGGER D0552U01
  NO CASCADE BEFORE UPDATE
  ON CD_REF_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
   ,new.upd_user_id = USER
 !!


CREATE TRIGGER D0199U01
  NO CASCADE BEFORE UPDATE
  ON CD_REF_SYSCOLUMNS_XREF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0024U01
  NO CASCADE BEFORE UPDATE
  ON CHRG_BASIS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CHRG_BASIS AFTER DELETE ON CHRG_BASIS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CORE_PROD_CHRG WHERE CORE_PROD_CHRG.CHRG_BASIS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CHRG_BASIS  CORE_PROD_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009144", PARENT_OWNER="", PARENT_TABLE="CHRG_BASIS"
    CHILD_OWNER="", CHILD_TABLE="CORE_PROD_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0024_001", FK_COLUMNS="CHRG_BASIS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CHRG_BASIS because CORE_PROD_CHRG exists.')
 !!


CREATE TRIGGER D0516U01
  NO CASCADE BEFORE UPDATE
  ON CHRG_RSLV_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0143U01
  NO CASCADE BEFORE UPDATE
  ON CNSTR_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0349I51
  NO CASCADE BEFORE INSERT
  ON CO_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0349I52
  NO CASCADE BEFORE INSERT
  ON CO_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0349U01
  NO CASCADE BEFORE UPDATE
  ON CO_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0349U51
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON CO_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0349U52
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON CO_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0177U01
  NO CASCADE BEFORE UPDATE
  ON COL_DMN_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_COL_DMN_REF AFTER DELETE ON COL_DMN_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PARM_REF WHERE RPRT_PARM_REF.COL_DMN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* COL_DMN_REF  RPRT_PARM_REF on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000088fa", PARENT_OWNER="", PARENT_TABLE="COL_DMN_REF"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PARM_REF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0177_001", FK_COLUMNS="COL_DMN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COL_DMN_REF because RPRT_PARM_REF exists.')
 !!

CREATE  TRIGGER tD_COL_DMN_REF2 AFTER DELETE ON COL_DMN_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PARM WHERE RPRT_PARM.FR1_DMN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* COL_DMN_REF  RPRT_PARM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000855d", PARENT_OWNER="", PARENT_TABLE="COL_DMN_REF"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PARM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0177_002", FK_COLUMNS="FR1_DMN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COL_DMN_REF because RPRT_PARM exists.')
 !!


CREATE TRIGGER D0583U01
  NO CASCADE BEFORE UPDATE
  ON COMP_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_COMP_CAT AFTER DELETE ON COMP_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM COMPETENCY WHERE COMPETENCY.COMP_CAT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* COMP_CAT  COMPETENCY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e34", PARENT_OWNER="", PARENT_TABLE="COMP_CAT"
    CHILD_OWNER="", CHILD_TABLE="COMPETENCY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0583_001", FK_COLUMNS="COMP_CAT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COMP_CAT because COMPETENCY exists.')
 !!


CREATE TRIGGER D0584U01
  NO CASCADE BEFORE UPDATE
  ON COMP_LVL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0531I51
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.act_date_d IS NULL 
  AND new.act_date IS NOT NULL
   OR CHAR(new.act_date_d,ISO) = '0001-01-01'
  AND new.act_date IS NOT NULL)
SET new.act_date_d =
  CASE WHEN new.act_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.act_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531I52
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.act_date IS NULL 
  AND new.act_date_d IS NOT NULL
  AND CHAR(new.act_date_d,ISO) != '0001-01-01'
   OR new.act_date = 0
  AND new.act_date_d IS NOT NULL
  AND CHAR(new.act_date_d,ISO) != '0001-01-01')
SET new.act_date =
  CASE WHEN new.act_date_d IS NULL THEN 0 ELSE
  INT(new.act_date_d) - 19000000 END
 !!


CREATE TRIGGER D0531I53
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531I54
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0531U01
  NO CASCADE BEFORE UPDATE
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0531U51
  NO CASCADE BEFORE UPDATE OF 
                    act_date
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.act_date != new.act_date
   OR old.act_date IS NULL AND new.act_date IS NOT NULL
   OR old.act_date IS NOT NULL AND new.act_date IS NULL)
SET new.act_date_d =
  CASE WHEN new.act_date = 0 OR new.act_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.act_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531U52
  NO CASCADE BEFORE UPDATE OF 
                    act_date_d
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.act_date_d != new.act_date_d
   OR old.act_date_d IS NULL and new.act_date_d IS NOT NULL
   OR old.act_date_d IS NOT NULL and new.act_date_d IS NULL)
SET new.act_date =
  CASE WHEN new.act_date_d IS NULL OR new.act_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.act_date_d) - 19000000 END
 !!


CREATE TRIGGER D0531U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0531D01
  AFTER DELETE
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO comp_rprt_rqst_log (
  id
, upd_time
, map_ref
, herd_num
, date
, time
, chrg_ptpt_cd
, rprt_tp_cd
, num
, anml_key
, rcpnt_ptpt_cd
, copy_cnt
, rqrd_date
, one_off_ind
, rprt_medium_cd
, acct_xmit_ind
, rprt_chrg_cd
, desp_inst
, upd_user_id
, ssn
, anml_cnt
, create_pgm_id
, pg_cnt
, rprt_act_cd
, print_job_num
, output_cat_ptpt_cd
, output_cat_cd
, parm
, ext_parm_xml
, extr_date
, act_date_d
, rqst_date_d
, complete_ind
, LIC_action_date
, LIC_action_user_id
, distribute_ind
, LIC_action
, rprt_err_rsn_cd
, date_d
--, url
--, download_ind
--, web_view_ind
)
VALUES(
  old.id
, old.upd_time
, old.map_ref
, old.herd_num
, old.date
, old.time
, old.chrg_ptpt_cd
, old.rprt_tp_cd
, old.num
, old.anml_key
, old.rcpnt_ptpt_cd
, old.copy_cnt
, old.rqrd_date
, old.one_off_ind
, old.rprt_medium_cd
, old.acct_xmit_ind
, old.rprt_chrg_cd
, old.desp_inst
, old.upd_user_id
, old.ssn
, old.anml_cnt
, old.create_pgm_id
, old.pg_cnt
, old.rprt_act_cd
, old.print_job_num
, old.output_cat_ptpt_cd
, old.output_cat_cd
, old.parm
, old.ext_parm_xml
, old.extr_date
, old.act_date_d
, old.rqst_date_d
, old.complete_ind
, old.LIC_action_date
, old.LIC_action_user_id
, old.distribute_ind
, old.LIC_action
, old.rprt_err_rsn_cd
, date_d
--, old.url
--, old.download_ind
--, old.web_view_ind
)
 !!


CREATE TRIGGER D0531U02
  AFTER UPDATE
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO comp_rprt_rqst_log (
  id
, upd_time
, map_ref
, herd_num
, date
, time
, chrg_ptpt_cd
, rprt_tp_cd
, num
, anml_key
, rcpnt_ptpt_cd
, copy_cnt
, rqrd_date
, one_off_ind
, rprt_medium_cd
, acct_xmit_ind
, rprt_chrg_cd
, desp_inst
, upd_user_id
, ssn
, anml_cnt
, create_pgm_id
, pg_cnt
, rprt_act_cd
, print_job_num
, output_cat_ptpt_cd
, output_cat_cd
, parm
, ext_parm_xml
, extr_date
, act_date_d
, rqst_date_d
, complete_ind
, LIC_action_date
, LIC_action_user_id
, distribute_ind
, LIC_action
, rprt_err_rsn_cd
, date_d
--, url
--, download_ind
--, web_view_ind
)
VALUES(
  old.id
, old.upd_time
, old.map_ref
, old.herd_num
, old.date
, old.time
, old.chrg_ptpt_cd
, old.rprt_tp_cd
, old.num
, old.anml_key
, old.rcpnt_ptpt_cd
, old.copy_cnt
, old.rqrd_date
, old.one_off_ind
, old.rprt_medium_cd
, old.acct_xmit_ind
, old.rprt_chrg_cd
, old.desp_inst
, old.upd_user_id
, old.ssn
, old.anml_cnt
, old.create_pgm_id
, old.pg_cnt
, old.rprt_act_cd
, old.print_job_num
, old.output_cat_ptpt_cd
, old.output_cat_cd
, old.parm
, old.ext_parm_xml
, old.extr_date
, old.act_date_d
, old.rqst_date_d
, old.complete_ind
, old.LIC_action_date
, old.LIC_action_user_id
, old.distribute_ind
, old.LIC_action
, old.rprt_err_rsn_cd
, date_d
--, old.url
--, old.download_ind
--, old.web_view_ind
)
 !!


CREATE TRIGGER D0531I55
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531I56
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(new.date_d) - 19000000 END
 !!


CREATE TRIGGER D0531U55
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0531U56
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.act_date_d != new.act_date_d
   OR old.act_date_d IS NULL and new.act_date_d IS NOT NULL
   OR old.act_date_d IS NOT NULL and new.act_date_d IS NULL)
SET new.act_date =
  CASE WHEN new.act_date_d IS NULL OR new.act_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.act_date_d) - 19000000 END
 !!


CREATE TRIGGER D0531I01
  NO CASCADE BEFORE INSERT
  ON COMP_RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0531'
('D0531I01: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0531U03
  NO CASCADE BEFORE UPDATE OF 
                    rprt_tp_cd
  ON COMP_RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rprt_tp_cd != new.rprt_tp_cd
  AND NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0531'
('D0531U03: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0585U01
  NO CASCADE BEFORE UPDATE
  ON COMPETENCY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_COMPETENCY AFTER DELETE ON COMPETENCY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TEAM_MATRIX WHERE TEAM_MATRIX.COMP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* COMPETENCY  TEAM_MATRIX on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cd3", PARENT_OWNER="", PARENT_TABLE="COMPETENCY"
    CHILD_OWNER="", CHILD_TABLE="TEAM_MATRIX"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0585_003", FK_COLUMNS="COMP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COMPETENCY because TEAM_MATRIX exists.')
 !!

CREATE  TRIGGER tD_COMPETENCY2 AFTER DELETE ON COMPETENCY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_COMP WHERE EMPL_COMP.COMP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* COMPETENCY  EMPL_COMP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085e3", PARENT_OWNER="", PARENT_TABLE="COMPETENCY"
    CHILD_OWNER="", CHILD_TABLE="EMPL_COMP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0585_002", FK_COLUMNS="COMP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COMPETENCY because EMPL_COMP exists.')
 !!

CREATE  TRIGGER tD_COMPETENCY3 AFTER DELETE ON COMPETENCY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM COMP_LVL WHERE COMP_LVL.COMP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* COMPETENCY  COMP_LVL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ae9", PARENT_OWNER="", PARENT_TABLE="COMPETENCY"
    CHILD_OWNER="", CHILD_TABLE="COMP_LVL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0585_001", FK_COLUMNS="COMP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COMPETENCY because COMP_LVL exists.')
 !!


CREATE TRIGGER D0264U01
  NO CASCADE BEFORE UPDATE
  ON CONF_SVY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0275U01
  NO CASCADE BEFORE UPDATE
  ON CONF_SVY_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0004U01
  NO CASCADE BEFORE UPDATE
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0004I01
  NO CASCADE BEFORE INSERT
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SSN_CD'
      AND c.cd = LTRIM(CHAR(INT(new.ssn_cd)))) )
SIGNAL SQLSTATE 'Z0004'
('D0004I01: invalid season code')
 !!


CREATE TRIGGER D0004I02
  NO CASCADE BEFORE INSERT
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0004'
('D0004I02: invalid age group code')
 !!


CREATE TRIGGER D0004I03
  NO CASCADE BEFORE INSERT
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0004'
('D0004I03: invalid sample regime code')
 !!


CREATE TRIGGER D0004U02
  NO CASCADE BEFORE UPDATE OF 
                    ssn_cd
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SSN_CD'
      AND c.cd = LTRIM(CHAR(INT(new.ssn_cd)))) )
SIGNAL SQLSTATE 'Z0004'
('D0004U02: invalid season code')
 !!


CREATE TRIGGER D0004U03
  NO CASCADE BEFORE UPDATE
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0004'
('D0004U03: invalid age group code')
 !!


CREATE TRIGGER D0004U04
  NO CASCADE BEFORE UPDATE
  ON CONTEMPORARY_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0004'
('D0004U04: invalid sample regime code')
 !!


CREATE TRIGGER D0027U01
  NO CASCADE BEFORE UPDATE
  ON CORE_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CORE_PROD AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_FRZ_SMN WHERE MTNG_PLAN_FRZ_SMN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  MTNG_PLAN_FRZ_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cea", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_FRZ_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_003", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because MTNG_PLAN_FRZ_SMN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD2 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN WHERE AB_MTNG_PLAN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  AB_MTNG_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b2a", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_001", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because AB_MTNG_PLAN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD3 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f9e", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_007", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD4 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_RQRD_SMN WHERE MTNG_PLAN_RQRD_SMN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  MTNG_PLAN_RQRD_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094d6", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_RQRD_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_004", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because MTNG_PLAN_RQRD_SMN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD5 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SYNC_FRZ_LLL_PD WHERE SYNC_FRZ_LLL_PD.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  SYNC_FRZ_LLL_PD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009412", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="SYNC_FRZ_LLL_PD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_014", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because SYNC_FRZ_LLL_PD exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD6 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SMN_SPLR_BRAND WHERE SMN_SPLR_BRAND.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  SMN_SPLR_BRAND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cd6", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="SMN_SPLR_BRAND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_008", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because SMN_SPLR_BRAND exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD7 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH WHERE SEMEN_BATCH.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000082d0", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_009", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD8 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROD_PRSRVTN WHERE PROD_PRSRVTN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  PROD_PRSRVTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cb3", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_PRSRVTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_013", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because PROD_PRSRVTN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD9 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM NC_SUBM_MODEL WHERE NC_SUBM_MODEL.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  NC_SUBM_MODEL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000883d", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="NC_SUBM_MODEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_008", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because NC_SUBM_MODEL exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD10 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LLL_PD WHERE LLL_PD.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  LLL_PD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083d5", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="LLL_PD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_012", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because LLL_PD exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD11 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000885b", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_006", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because LAB_COLLN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD12 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FUTR_MTNG_PLAN_DTL WHERE FUTR_MTNG_PLAN_DTL.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  FUTR_MTNG_PLAN_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008678", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="FUTR_MTNG_PLAN_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_002", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because FUTR_MTNG_PLAN_DTL exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD13 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CORE_PROD_CHRG WHERE CORE_PROD_CHRG.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  CORE_PROD_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b75", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="CORE_PROD_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_011", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because CORE_PROD_CHRG exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD14 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_TEAM WHERE BULL_TEAM.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  BULL_TEAM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008699", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="BULL_TEAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_015", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because BULL_TEAM exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD15 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_SEMEN_BATCH WHERE TECH_SEMEN_BATCH.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  TECH_SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092aa", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="TECH_SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_005", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because TECH_SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD16 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INSEM_LLL_SEMEN WHERE INSEM_LLL_SEMEN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  INSEM_LLL_SEMEN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a42", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="INSEM_LLL_SEMEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_017", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because INSEM_LLL_SEMEN exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD17 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SOF_AB_MTNG_PLAN_CHANGE WHERE SOF_AB_MTNG_PLAN_CHANGE.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  SOF_AB_MTNG_PLAN_CHANGE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009467", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="SOF_AB_MTNG_PLAN_CHANGE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_010", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because SOF_AB_MTNG_PLAN_CHANGE exists.')
 !!

CREATE  TRIGGER tD_CORE_PROD18 AFTER DELETE ON CORE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_LLL_SMN WHERE AB_GRP_LLL_SMN.CORE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CORE_PROD  AB_GRP_LLL_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b60", PARENT_OWNER="", PARENT_TABLE="CORE_PROD"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_LLL_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0027_016", FK_COLUMNS="CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CORE_PROD because AB_GRP_LLL_SMN exists.')
 !!


CREATE TRIGGER D0028U01
  NO CASCADE BEFORE UPDATE
  ON CORE_PROD_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0251U01
  NO CASCADE BEFORE UPDATE
  ON COUNTRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_COUNTRY AFTER DELETE ON COUNTRY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ANML WHERE GM_ANML.OSEAS_CTRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* COUNTRY  GM_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cd6", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="GM_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0251_001", FK_COLUMNS="OSEAS_CTRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete COUNTRY because GM_ANML exists.')
 !!


CREATE TRIGGER D0025I51
  NO CASCADE BEFORE INSERT
  ON CR_MTNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0025I52
  NO CASCADE BEFORE INSERT
  ON CR_MTNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0025I53
  NO CASCADE BEFORE INSERT
  ON CR_MTNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0025I54
  NO CASCADE BEFORE INSERT
  ON CR_MTNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0025U01
  NO CASCADE BEFORE UPDATE
  ON CR_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0025U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON CR_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0025U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON CR_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0025U53
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON CR_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0025U54
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON CR_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0234U01
  NO CASCADE BEFORE UPDATE
  ON CR_MTNG_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0002U01
  NO CASCADE BEFORE UPDATE
  ON CROSS_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0002D01
  AFTER DELETE
  ON CROSS_BRD
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_cross_brd (
  anml_key
, brd_cd
, upd_time
, portion_16th
, anml_reg_cd
, hdbk_sect_cd
, hdbk_sect_sts_cd
, frgn_hdbk_anml_num
, stud_fee_ind
, hdbk_vol
, frgn_hdbk_name
, hdbk_sect_sts_id
, bsoc_proc_date_d
) VALUES (
  old.anml_key
, old.brd_cd
, old.upd_time
, old.portion_16th
, old.anml_reg_cd
, old.hdbk_sect_cd
, old.hdbk_sect_sts_cd
, old.frgn_hdbk_anml_num
, old.stud_fee_ind
, old.hdbk_vol
, old.frgn_hdbk_name
, old.hdbk_sect_sts_id
, old.bsoc_proc_date_d
)
 !!


CREATE TRIGGER D0002I51
  NO CASCADE BEFORE INSERT
  ON CROSS_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bsoc_proc_date_d IS NULL 
  AND new.bsoc_proc_date IS NOT NULL
   OR CHAR(new.bsoc_proc_date_d,ISO) = '0001-01-01'
  AND new.bsoc_proc_date IS NOT NULL)
SET new.bsoc_proc_date_d =
  CASE WHEN new.bsoc_proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.bsoc_proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0002U51
  NO CASCADE BEFORE UPDATE OF 
                    bsoc_proc_date
  ON CROSS_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.bsoc_proc_date != new.bsoc_proc_date
   OR old.bsoc_proc_date IS NULL AND new.bsoc_proc_date IS NOT NULL
   OR old.bsoc_proc_date IS NOT NULL AND new.bsoc_proc_date IS NULL)
SET new.bsoc_proc_date_d =
  CASE WHEN new.bsoc_proc_date = 0 OR new.bsoc_proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.bsoc_proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0002U52
  NO CASCADE BEFORE UPDATE OF 
                    bsoc_proc_date_d
  ON CROSS_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.bsoc_proc_date_d != new.bsoc_proc_date_d
   OR old.bsoc_proc_date_d IS NULL and new.bsoc_proc_date_d IS NOT NULL
   OR old.bsoc_proc_date_d IS NOT NULL and new.bsoc_proc_date_d IS NULL)
SET new.bsoc_proc_date =
  CASE WHEN new.bsoc_proc_date_d IS NULL OR new.bsoc_proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0002U02
  AFTER UPDATE OF 
        anml_key,
        brd_cd
  ON CROSS_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.brd_cd != new.brd_cd)
INSERT INTO del_cross_brd (
  anml_key
, brd_cd
, upd_time
, portion_16th
, anml_reg_cd
, hdbk_sect_cd
, hdbk_sect_sts_cd
, frgn_hdbk_anml_num
, stud_fee_ind
, hdbk_vol
, frgn_hdbk_name
, hdbk_sect_sts_id
, bsoc_proc_date_d
) VALUES (
  old.anml_key
, old.brd_cd
, old.upd_time
, old.portion_16th
, old.anml_reg_cd
, old.hdbk_sect_cd
, old.hdbk_sect_sts_cd
, old.frgn_hdbk_anml_num
, old.stud_fee_ind
, old.hdbk_vol
, old.frgn_hdbk_name
, old.hdbk_sect_sts_id
, old.bsoc_proc_date_d
)
 !!


CREATE TRIGGER D0002I52
  NO CASCADE BEFORE INSERT
  ON CROSS_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bsoc_proc_date IS NULL 
  AND new.bsoc_proc_date_d IS NOT NULL
  AND CHAR(new.bsoc_proc_date_d,ISO) != '0001-01-01'
   OR new.bsoc_proc_date = 0
  AND new.bsoc_proc_date_d IS NOT NULL
  AND CHAR(new.bsoc_proc_date_d,ISO) != '0001-01-01')
SET new.bsoc_proc_date =
  CASE WHEN new.bsoc_proc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.bsoc_proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0537U01
  NO CASCADE BEFORE UPDATE
  ON CTCT_MTHD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CTCT_MTHD AFTER DELETE ON CTCT_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_DTR_CMPL_ACT WHERE MILK_DTR_CMPL_ACT.CTCT_MTHD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CTCT_MTHD  MILK_DTR_CMPL_ACT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c6b", PARENT_OWNER="", PARENT_TABLE="CTCT_MTHD"
    CHILD_OWNER="", CHILD_TABLE="MILK_DTR_CMPL_ACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0537_002", FK_COLUMNS="CTCT_MTHD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CTCT_MTHD because MILK_DTR_CMPL_ACT exists.')
 !!

CREATE  TRIGGER tD_CTCT_MTHD2 AFTER DELETE ON CTCT_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT_ACT WHERE CALF_DEFECT_ACT.CTCT_MTHD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CTCT_MTHD  CALF_DEFECT_ACT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dec", PARENT_OWNER="", PARENT_TABLE="CTCT_MTHD"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT_ACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0537_001", FK_COLUMNS="CTCT_MTHD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CTCT_MTHD because CALF_DEFECT_ACT exists.')
 !!


CREATE TRIGGER D0006I03
  AFTER INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (                           
  SELECT 1 FROM cross_brd cb
  WHERE new.anml_key = cb.anml_key
    AND cb.anml_reg_cd = 1)
AND NOT EXISTS (
  SELECT 1 FROM xfer_excl xe
  WHERE new.anml_key = xe.anml_key
    AND CURRENT DATE >= xe.st_date
    AND CURRENT DATE <= VALUE(xe.end_date,'9999-12-31')) )               
INSERT INTO reg_anml_mvmt (
  map_ref
, herd_num
, anml_key
, xfer_in_date)
VALUES (
  new.map_ref
, new.herd_num
, new.anml_key
, new.xfer_in_date_d)
 !!


CREATE TRIGGER D0006I01
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cow_num != 99999 AND EXISTS (
  SELECT 1 FROM curr_anml_locn cur
    WHERE cur.map_ref = new.map_ref
    AND cur.herd_num = new.herd_num
    AND cur.cow_num = new.cow_num
    AND cur.anml_key != new.anml_key) )
  SIGNAL SQLSTATE 'Z0006'
  ('D0006I01: Cow num must be unique in herd')
 !!


CREATE TRIGGER D0006I02
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM prev_anml_locn prev
    WHERE prev.anml_key = new.anml_key
    AND prev.xfer_in_date = new.xfer_in_date
    AND prev.anml_num_st_date = new.anml_num_st_date) )
  SIGNAL SQLSTATE 'Z0006'
  ('D0006I02: Same xfer_in / num_st_date exists on prev_locn')
 !!


CREATE TRIGGER D0006I04
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.rcd_date = CURRENT DATE
 !!


CREATE TRIGGER D0006I51
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_end_date_d IS NULL 
  AND new.anml_num_end_date IS NOT NULL
   OR CHAR(new.anml_num_end_date_d,ISO) = '0001-01-01'
  AND new.anml_num_end_date IS NOT NULL)
SET new.anml_num_end_date_d =
  CASE WHEN new.anml_num_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006I52
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_end_date IS NULL 
  AND new.anml_num_end_date_d IS NOT NULL
  AND CHAR(new.anml_num_end_date_d,ISO) != '0001-01-01'
   OR new.anml_num_end_date = 0
  AND new.anml_num_end_date_d IS NOT NULL
  AND CHAR(new.anml_num_end_date_d,ISO) != '0001-01-01')
SET new.anml_num_end_date =
  CASE WHEN new.anml_num_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006I53
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date_d IS NULL 
  AND new.anml_num_st_date IS NOT NULL
   OR CHAR(new.anml_num_st_date_d,ISO) = '0001-01-01'
  AND new.anml_num_st_date IS NOT NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006I54
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date IS NULL 
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01'
   OR new.anml_num_st_date = 0
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01')
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006I55
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date_d IS NULL 
  AND new.xfer_in_date IS NOT NULL
   OR CHAR(new.xfer_in_date_d,ISO) = '0001-01-01'
  AND new.xfer_in_date IS NOT NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006I56
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date IS NULL 
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01'
   OR new.xfer_in_date = 0
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01')
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006I57
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_out_date_d IS NULL 
  AND new.xfer_out_date IS NOT NULL
   OR CHAR(new.xfer_out_date_d,ISO) = '0001-01-01'
  AND new.xfer_out_date IS NOT NULL)
SET new.xfer_out_date_d =
  CASE WHEN new.xfer_out_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_out_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006I58
  NO CASCADE BEFORE INSERT
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_out_date IS NULL 
  AND new.xfer_out_date_d IS NOT NULL
  AND CHAR(new.xfer_out_date_d,ISO) != '0001-01-01'
   OR new.xfer_out_date = 0
  AND new.xfer_out_date_d IS NOT NULL
  AND CHAR(new.xfer_out_date_d,ISO) != '0001-01-01')
SET new.xfer_out_date =
  CASE WHEN new.xfer_out_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_out_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006U01
  NO CASCADE BEFORE UPDATE
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cow_num != 99999 AND EXISTS (
  SELECT 1 FROM curr_anml_locn cur
    WHERE cur.map_ref = new.map_ref
    AND cur.herd_num = new.herd_num
    AND cur.cow_num = new.cow_num
    AND cur.anml_key != new.anml_key) )
  SIGNAL SQLSTATE 'Z0006'
  ('D0006U01: Cow num must be unique in herd')
 !!


CREATE TRIGGER D0006U02
  NO CASCADE BEFORE UPDATE
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cow_num != 99999 AND EXISTS (
  SELECT 1 FROM prev_anml_locn prev
    WHERE prev.anml_key = new.anml_key
    AND prev.xfer_in_date = new.xfer_in_date
    AND prev.anml_num_st_date = new.anml_num_st_date) )
  SIGNAL SQLSTATE 'Z0006'
  ('D0006U02: Same xfer_in / num_st_date exists on prev_locn')
 !!


CREATE TRIGGER D0006U03
  NO CASCADE BEFORE UPDATE
  ON CURR_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0006U51
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_end_date
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_end_date != new.anml_num_end_date
   OR old.anml_num_end_date IS NULL AND new.anml_num_end_date IS NOT NULL
   OR old.anml_num_end_date IS NOT NULL AND new.anml_num_end_date IS NULL)
SET new.anml_num_end_date_d =
  CASE WHEN new.anml_num_end_date = 0 OR new.anml_num_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006U52
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_end_date_d
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_end_date_d != new.anml_num_end_date_d
   OR old.anml_num_end_date_d IS NULL and new.anml_num_end_date_d IS NOT NULL
   OR old.anml_num_end_date_d IS NOT NULL and new.anml_num_end_date_d IS NULL)
SET new.anml_num_end_date =
  CASE WHEN new.anml_num_end_date_d IS NULL OR new.anml_num_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006U53
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date != new.anml_num_st_date
   OR old.anml_num_st_date IS NULL AND new.anml_num_st_date IS NOT NULL
   OR old.anml_num_st_date IS NOT NULL AND new.anml_num_st_date IS NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 OR new.anml_num_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006U54
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date_d
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date_d != new.anml_num_st_date_d
   OR old.anml_num_st_date_d IS NULL and new.anml_num_st_date_d IS NOT NULL
   OR old.anml_num_st_date_d IS NOT NULL and new.anml_num_st_date_d IS NULL)
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL OR new.anml_num_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006U55
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date != new.xfer_in_date
   OR old.xfer_in_date IS NULL AND new.xfer_in_date IS NOT NULL
   OR old.xfer_in_date IS NOT NULL AND new.xfer_in_date IS NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 OR new.xfer_in_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006U56
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date_d
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date_d != new.xfer_in_date_d
   OR old.xfer_in_date_d IS NULL and new.xfer_in_date_d IS NOT NULL
   OR old.xfer_in_date_d IS NOT NULL and new.xfer_in_date_d IS NULL)
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL OR new.xfer_in_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006U57
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_date
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_out_date != new.xfer_out_date
   OR old.xfer_out_date IS NULL AND new.xfer_out_date IS NOT NULL
   OR old.xfer_out_date IS NOT NULL AND new.xfer_out_date IS NULL)
SET new.xfer_out_date_d =
  CASE WHEN new.xfer_out_date = 0 OR new.xfer_out_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_out_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0006U58
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_date_d
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_out_date_d != new.xfer_out_date_d
   OR old.xfer_out_date_d IS NULL and new.xfer_out_date_d IS NOT NULL
   OR old.xfer_out_date_d IS NOT NULL and new.xfer_out_date_d IS NULL)
SET new.xfer_out_date =
  CASE WHEN new.xfer_out_date_d IS NULL OR new.xfer_out_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_out_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0006D01
  AFTER DELETE
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_curr_anml_locn (
  anml_key
, upd_time
, map_ref
, herd_num
, cow_num_alpha
, cow_num
, num
, fate_cd
, fate_cause_cd
, export_ctry_cd
, rcd_date
, anml_num_st_date_d
, anml_num_end_date_d
, xfer_in_date_d
, xfer_out_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.cow_num_alpha
, old.cow_num
, old.num
, old.fate_cd
, old.fate_cause_cd
, old.export_ctry_cd
, old.rcd_date
, old.anml_num_st_date_d
, old.anml_num_end_date_d
, old.xfer_in_date_d
, old.xfer_out_date_d
)
 !!


CREATE TRIGGER D0006U04
  AFTER UPDATE OF 
        anml_key
  ON CURR_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key)
INSERT INTO del_curr_anml_locn (
  anml_key
, upd_time
, map_ref
, herd_num
, cow_num_alpha
, cow_num
, num
, fate_cd
, fate_cause_cd
, export_ctry_cd
, rcd_date
, anml_num_st_date_d
, anml_num_end_date_d
, xfer_in_date_d
, xfer_out_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.cow_num_alpha
, old.cow_num
, old.num
, old.fate_cd
, old.fate_cause_cd
, old.export_ctry_cd
, old.rcd_date
, old.anml_num_st_date_d
, old.anml_num_end_date_d
, old.xfer_in_date_d
, old.xfer_out_date_d
)
 !!


CREATE TRIGGER D0253U01
  NO CASCADE BEFORE UPDATE
  ON CURR_PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0254U01
  NO CASCADE BEFORE UPDATE
  ON CURR_PFX_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0491U01
  NO CASCADE BEFORE UPDATE
  ON CUST_PROD_CLASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_CUST_PROD_CLASS AFTER DELETE ON CUST_PROD_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CUST_TRACE_PROD WHERE CUST_TRACE_PROD.CUST_PROD_CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CUST_PROD_CLASS  CUST_TRACE_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099e6", PARENT_OWNER="", PARENT_TABLE="CUST_PROD_CLASS"
    CHILD_OWNER="", CHILD_TABLE="CUST_TRACE_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0491_001", FK_COLUMNS="CUST_PROD_CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CUST_PROD_CLASS because CUST_TRACE_PROD exists.')
 !!

CREATE  TRIGGER tD_CUST_PROD_CLAS2 AFTER DELETE ON CUST_PROD_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_INVC WHERE TRACE_INVC.CUST_PROD_CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* CUST_PROD_CLASS  TRACE_INVC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008aca", PARENT_OWNER="", PARENT_TABLE="CUST_PROD_CLASS"
    CHILD_OWNER="", CHILD_TABLE="TRACE_INVC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0491_002", FK_COLUMNS="CUST_PROD_CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete CUST_PROD_CLASS because TRACE_INVC exists.')
 !!


CREATE TRIGGER D0492U01
  NO CASCADE BEFORE UPDATE
  ON CUST_TRACE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0310U01
  NO CASCADE BEFORE UPDATE
  ON DAM_AGE_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DAM_AGE_GRP AFTER DELETE ON DAM_AGE_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.DAM_AGE_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DAM_AGE_GRP  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c58", PARENT_OWNER="", PARENT_TABLE="DAM_AGE_GRP"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0310_001", FK_COLUMNS="DAM_AGE_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DAM_AGE_GRP because PRDCT_DTR_PROB exists.')
 !!


CREATE TRIGGER D0087U01
  NO CASCADE BEFORE UPDATE
  ON DATA_DICT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0646U01
  NO CASCADE BEFORE UPDATE
  ON DATAMATE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DATAMATE_PROD AFTER DELETE ON DATAMATE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DMATE_HERD WHERE DMATE_HERD.DEFAULT_DMATE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DATAMATE_PROD  DMATE_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092de", PARENT_OWNER="", PARENT_TABLE="DATAMATE_PROD"
    CHILD_OWNER="", CHILD_TABLE="DMATE_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0646_002", FK_COLUMNS="DEFAULT_DMATE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DATAMATE_PROD because DMATE_HERD exists.')
 !!

CREATE  TRIGGER tD_DATAMATE_PROD2 AFTER DELETE ON DATAMATE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SMN_SPLR_BRAND WHERE SMN_SPLR_BRAND.DATAMATE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DATAMATE_PROD  SMN_SPLR_BRAND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095ef", PARENT_OWNER="", PARENT_TABLE="DATAMATE_PROD"
    CHILD_OWNER="", CHILD_TABLE="SMN_SPLR_BRAND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0646_001", FK_COLUMNS="DATAMATE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DATAMATE_PROD because SMN_SPLR_BRAND exists.')
 !!


CREATE TRIGGER D0311U01
  NO CASCADE BEFORE UPDATE
  ON DAYS_AFT_MTNG_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DAYS_AFT_MTNG_G AFTER DELETE ON DAYS_AFT_MTNG_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.DAYS_AFT_MTNG_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DAYS_AFT_MTNG_GRP  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009991", PARENT_OWNER="", PARENT_TABLE="DAYS_AFT_MTNG_GRP"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0311_001", FK_COLUMNS="DAYS_AFT_MTNG_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DAYS_AFT_MTNG_GRP because PRDCT_DTR_PROB exists.')
 !!


CREATE TRIGGER D0174U01
  NO CASCADE BEFORE UPDATE
  ON DB_TABLE_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0956U01
  NO CASCADE BEFORE UPDATE
  ON DB_TABLE_GRP_CLASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DB_TABLE_GRP_CL AFTER DELETE ON DB_TABLE_GRP_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DB_TABLE_GRP_REF WHERE DB_TABLE_GRP_REF.GRP_CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DB_TABLE_GRP_CLASS  DB_TABLE_GRP_REF on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009973", PARENT_OWNER="", PARENT_TABLE="DB_TABLE_GRP_CLASS"
    CHILD_OWNER="", CHILD_TABLE="DB_TABLE_GRP_REF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0956_001", FK_COLUMNS="GRP_CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DB_TABLE_GRP_CLASS because DB_TABLE_GRP_REF exists.')
 !!


CREATE TRIGGER D0950U01
  NO CASCADE BEFORE UPDATE
  ON DB_TABLE_GRP_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DB_TABLE_GRP_RE AFTER DELETE ON DB_TABLE_GRP_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DB_TABLE_GRP WHERE DB_TABLE_GRP.GRP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DB_TABLE_GRP_REF  DB_TABLE_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c19", PARENT_OWNER="", PARENT_TABLE="DB_TABLE_GRP_REF"
    CHILD_OWNER="", CHILD_TABLE="DB_TABLE_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0950_001", FK_COLUMNS="GRP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DB_TABLE_GRP_REF because DB_TABLE_GRP exists.')
 !!


CREATE TRIGGER D0539U01
  NO CASCADE BEFORE UPDATE
  ON DEFECT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DEFECT AFTER DELETE ON DEFECT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_DTR_CMPL WHERE MILK_DTR_CMPL.DEFECT_CAT_CD = old.DEFECT_CAT_CD AND
                                                MILK_DTR_CMPL.DEFECT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DEFECT  MILK_DTR_CMPL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009341", PARENT_OWNER="", PARENT_TABLE="DEFECT"
    CHILD_OWNER="", CHILD_TABLE="MILK_DTR_CMPL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0539_002", FK_COLUMNS="DEFECT_CAT_CD""DEFECT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DEFECT because MILK_DTR_CMPL exists.')
 !!

CREATE  TRIGGER tD_DEFECT2 AFTER DELETE ON DEFECT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT WHERE CALF_DEFECT.DEFECT_CAT_CD = old.DEFECT_CAT_CD AND
                                              CALF_DEFECT.DEFECT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DEFECT  CALF_DEFECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a73", PARENT_OWNER="", PARENT_TABLE="DEFECT"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0539_001", FK_COLUMNS="DEFECT_CAT_CD""DEFECT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DEFECT because CALF_DEFECT exists.')
 !!


CREATE TRIGGER D0538U01
  NO CASCADE BEFORE UPDATE
  ON DEFECT_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DEFECT_CAT AFTER DELETE ON DEFECT_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DEFECT WHERE DEFECT.DEFECT_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DEFECT_CAT  DEFECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089eb", PARENT_OWNER="", PARENT_TABLE="DEFECT_CAT"
    CHILD_OWNER="", CHILD_TABLE="DEFECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0538_001", FK_COLUMNS="DEFECT_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DEFECT_CAT because DEFECT exists.')
 !!


CREATE TRIGGER D0235U01
  NO CASCADE BEFORE UPDATE
  ON DEL_MDC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0236I51
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date_d IS NULL 
  AND new.mtng_date IS NOT NULL
   OR CHAR(new.mtng_date_d,ISO) = '0001-01-01'
  AND new.mtng_date IS NOT NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236I52
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date IS NULL 
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01'
   OR new.mtng_date = 0
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01')
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0236I53
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.payroll_date_d IS NULL 
  AND new.payroll_date IS NOT NULL
   OR CHAR(new.payroll_date_d,ISO) = '0001-01-01'
  AND new.payroll_date IS NOT NULL)
SET new.payroll_date_d =
  CASE WHEN new.payroll_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.payroll_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236I54
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.payroll_date IS NULL 
  AND new.payroll_date_d IS NOT NULL
  AND CHAR(new.payroll_date_d,ISO) != '0001-01-01'
   OR new.payroll_date = 0
  AND new.payroll_date_d IS NOT NULL
  AND CHAR(new.payroll_date_d,ISO) != '0001-01-01')
SET new.payroll_date =
  CASE WHEN new.payroll_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.payroll_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.payroll_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.payroll_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0236I55
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236I56
  NO CASCADE BEFORE INSERT
  ON DEL_MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0236U51
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date != new.mtng_date
   OR old.mtng_date IS NULL AND new.mtng_date IS NOT NULL
   OR old.mtng_date IS NOT NULL AND new.mtng_date IS NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 OR new.mtng_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236U52
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date_d
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date_d != new.mtng_date_d
   OR old.mtng_date_d IS NULL and new.mtng_date_d IS NOT NULL
   OR old.mtng_date_d IS NOT NULL and new.mtng_date_d IS NULL)
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL OR new.mtng_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0236U53
  NO CASCADE BEFORE UPDATE OF 
                    payroll_date
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.payroll_date != new.payroll_date
   OR old.payroll_date IS NULL AND new.payroll_date IS NOT NULL
   OR old.payroll_date IS NOT NULL AND new.payroll_date IS NULL)
SET new.payroll_date_d =
  CASE WHEN new.payroll_date = 0 OR new.payroll_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.payroll_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236U54
  NO CASCADE BEFORE UPDATE OF 
                    payroll_date_d
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.payroll_date_d != new.payroll_date_d
   OR old.payroll_date_d IS NULL and new.payroll_date_d IS NOT NULL
   OR old.payroll_date_d IS NOT NULL and new.payroll_date_d IS NULL)
SET new.payroll_date =
  CASE WHEN new.payroll_date_d IS NULL OR new.payroll_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.payroll_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.payroll_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.payroll_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0236U55
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0236U56
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON DEL_MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0586U01
  NO CASCADE BEFORE UPDATE
  ON DEPARTMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DEPARTMENT AFTER DELETE ON DEPARTMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POSN_DEPT WHERE POSN_DEPT.DEPT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DEPARTMENT  POSN_DEPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000088d0", PARENT_OWNER="", PARENT_TABLE="DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="POSN_DEPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0586_001", FK_COLUMNS="DEPT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DEPARTMENT because POSN_DEPT exists.')
 !!


CREATE TRIGGER D0534I51
  NO CASCADE BEFORE INSERT
  ON DESP_FROZEN_SMN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0534I52
  NO CASCADE BEFORE INSERT
  ON DESP_FROZEN_SMN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0534U01
  NO CASCADE BEFORE UPDATE
  ON DESP_FROZEN_SMN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0534U51
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON DESP_FROZEN_SMN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0534U52
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON DESP_FROZEN_SMN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0614I01
  NO CASCADE BEFORE INSERT
  ON DESP_LLL_SEMEN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS(
   SELECT 1 FROM smn_dist_pt sdp, geo_area ga
    WHERE new.insem_grp_rgn_cd = sdp.rgn_cd
      AND new.semen_dist_pt_num = sdp.num
      AND new.semen_alcn_rgn_cd = ga.short_descr
      AND ga.geo_area_tp_cd = 'SAR'))
-- the semen distribution point must exist
SIGNAL SQLSTATE 'Z0614'
('D0614I01: Invalid Semen Distribution Point')
 !!


CREATE TRIGGER D0614U01
  NO CASCADE BEFORE UPDATE
  ON DESP_LLL_SEMEN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0614U02
  NO CASCADE BEFORE UPDATE OF 
                    insem_grp_rgn_cd,
                    semen_dist_pt_num,
                    semen_alcn_rgn_cd
  ON DESP_LLL_SEMEN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.insem_grp_rgn_cd != new.insem_grp_rgn_cd OR
       old.semen_dist_pt_num != new.semen_dist_pt_num OR
       old.semen_alcn_rgn_cd != new.semen_alcn_rgn_cd)
  AND NOT EXISTS(
   SELECT 1 FROM smn_dist_pt sdp, geo_area ga
    WHERE new.insem_grp_rgn_cd = sdp.rgn_cd
      AND new.semen_dist_pt_num = sdp.num
      AND new.semen_alcn_rgn_cd = ga.short_descr
      AND ga.geo_area_tp_cd = 'SAR'))
-- the semen distribution point must exist
SIGNAL SQLSTATE 'Z0614'
('D0614U01: Invalid Semen Distribution Point')
 !!


CREATE TRIGGER D0741I01
  NO CASCADE BEFORE INSERT
  ON DF_PRODN_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0741U01
  NO CASCADE BEFORE UPDATE
  ON DF_PRODN_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0500U01
  NO CASCADE BEFORE UPDATE
  ON DIAG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DIAG_TEST AFTER DELETE ON DIAG_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_PLAN WHERE HERD_DT_PLAN.DT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DIAG_TEST  HERD_DT_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bbd", PARENT_OWNER="", PARENT_TABLE="DIAG_TEST"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0500_002", FK_COLUMNS="DT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DIAG_TEST because HERD_DT_PLAN exists.')
 !!


CREATE TRIGGER D0501U01
  NO CASCADE BEFORE UPDATE
  ON DIAG_TEST_KIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0502I51
  NO CASCADE BEFORE INSERT
  ON DIAG_TEST_PLATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0502I52
  NO CASCADE BEFORE INSERT
  ON DIAG_TEST_PLATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0502U01
  NO CASCADE BEFORE UPDATE
  ON DIAG_TEST_PLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0502U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON DIAG_TEST_PLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0502U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON DIAG_TEST_PLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_DIAG_TEST_PLATE AFTER DELETE ON DIAG_TEST_PLATE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POOL_DT_RSLT WHERE POOL_DT_RSLT.DT_CD = old.DT_CD AND
                                               POOL_DT_RSLT.PLATE_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* DIAG_TEST_PLATE  POOL_DT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000935d", PARENT_OWNER="", PARENT_TABLE="DIAG_TEST_PLATE"
    CHILD_OWNER="", CHILD_TABLE="POOL_DT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0502_003", FK_COLUMNS="DT_CD""PLATE_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DIAG_TEST_PLATE because POOL_DT_RSLT exists.')
 !!

CREATE  TRIGGER tD_DIAG_TEST_PLAT2 AFTER DELETE ON DIAG_TEST_PLATE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_DT_HOLD WHERE ANML_DT_HOLD.DT_CD = old.DT_CD AND
                                               ANML_DT_HOLD.PLATE_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* DIAG_TEST_PLATE  ANML_DT_HOLD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097bd", PARENT_OWNER="", PARENT_TABLE="DIAG_TEST_PLATE"
    CHILD_OWNER="", CHILD_TABLE="ANML_DT_HOLD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0502_001", FK_COLUMNS="DT_CD""PLATE_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DIAG_TEST_PLATE because ANML_DT_HOLD exists.')
 !!


CREATE TRIGGER D0104U02
  NO CASCADE BEFORE UPDATE
  ON DISP_ADDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DISP_ADDR AFTER DELETE ON DISP_ADDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.RPRT_ADDR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DISP_ADDR  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087db", PARENT_OWNER="", PARENT_TABLE="DISP_ADDR"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0104_003", FK_COLUMNS="RPRT_ADDR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DISP_ADDR because GM_SUBM exists.')
 !!

CREATE  TRIGGER tD_DISP_ADDR2 AFTER DELETE ON DISP_ADDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.SMPL_KIT_ADDR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DISP_ADDR  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008422", PARENT_OWNER="", PARENT_TABLE="DISP_ADDR"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0104_001", FK_COLUMNS="SMPL_KIT_ADDR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DISP_ADDR because GM_SUBM exists.')
 !!

CREATE  TRIGGER tD_DISP_ADDR3 AFTER DELETE ON DISP_ADDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_ADDR WHERE PARTY_ADDR.ADDR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DISP_ADDR  PARTY_ADDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000820c", PARENT_OWNER="", PARENT_TABLE="DISP_ADDR"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ADDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0104_002", FK_COLUMNS="ADDR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DISP_ADDR because PARTY_ADDR exists.')
 !!


CREATE TRIGGER D0517U01
  NO CASCADE BEFORE UPDATE
  ON DLVRY_INST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DLVRY_INST AFTER DELETE ON DLVRY_INST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_DLVRY_INST WHERE AB_GRP_DLVRY_INST.DLVRY_INST_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DLVRY_INST  AB_GRP_DLVRY_INST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009360", PARENT_OWNER="", PARENT_TABLE="DLVRY_INST"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_DLVRY_INST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0517_001", FK_COLUMNS="DLVRY_INST_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DLVRY_INST because AB_GRP_DLVRY_INST exists.')
 !!


CREATE TRIGGER D0376D01
  AFTER DELETE
  ON DM_AREA
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'DM_AREA', old.rm_area_rgn_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.cd))) || '|' ||
  LTRIM(RTRIM(CHAR(old.ssn))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR(old.avg_tech_nrr_yrlg), ' '))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR(old.avg_tech_nrr_cow), ' '))) || '|')
 !!


CREATE TRIGGER D0376I01
  AFTER INSERT
  ON DM_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'DM_AREA', new.rm_area_rgn_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.cd))) || '|' ||
  LTRIM(RTRIM(CHAR(new.ssn))) || '|' ||
  LTRIM(RTRIM (VALUE(CHAR(new.avg_tech_nrr_yrlg), ' '))) || '|' ||
  LTRIM(RTRIM (VALUE(CHAR (new.avg_tech_nrr_cow), ' '))) || '|')
 !!


CREATE TRIGGER D0376U01
  AFTER UPDATE
  ON DM_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'DM_AREA',
  new.rm_area_rgn_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.cd))) || '|' ||
  LTRIM(RTRIM(CHAR(new.ssn))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR (old.avg_tech_nrr_yrlg), ' '))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR (old.avg_tech_nrr_cow), ' '))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR (new.avg_tech_nrr_yrlg), ' '))) || '|' ||
  LTRIM(RTRIM (VALUE (CHAR (new.avg_tech_nrr_cow), ' '))) || '|')
 !!


CREATE TRIGGER D0376U02
  NO CASCADE BEFORE UPDATE
  ON DM_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0376I02
  NO CASCADE BEFORE INSERT
  ON DM_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != ' ')
SET new.party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
 !!


CREATE TRIGGER D0376U03
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON DM_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != old.ptpt_cd)
SET new.party_id = (
  CASE WHEN new.ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
  END
 !!


CREATE TRIGGER D0408U01
  NO CASCADE BEFORE UPDATE
  ON DMAN_LICENSEE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0408U52
  NO CASCADE BEFORE UPDATE OF 
                    expiry_date_d
  ON DMAN_LICENSEE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.expiry_date_d != new.expiry_date_d
   OR old.expiry_date_d IS NULL and new.expiry_date_d IS NOT NULL
   OR old.expiry_date_d IS NOT NULL and new.expiry_date_d IS NULL)
SET new.expiry_date =
  CASE WHEN new.expiry_date_d IS NULL OR new.expiry_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.expiry_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0408I51
  NO CASCADE BEFORE INSERT
  ON DMAN_LICENSEE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date_d IS NULL 
  AND new.expiry_date IS NOT NULL
   OR CHAR(new.expiry_date_d,ISO) = '0001-01-01'
  AND new.expiry_date IS NOT NULL)
SET new.expiry_date_d =
  CASE WHEN new.expiry_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.expiry_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0408I52
  NO CASCADE BEFORE INSERT
  ON DMAN_LICENSEE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date IS NULL 
  AND new.expiry_date_d IS NOT NULL
  AND CHAR(new.expiry_date_d,ISO) != '0001-01-01'
   OR new.expiry_date = 0
  AND new.expiry_date_d IS NOT NULL
  AND CHAR(new.expiry_date_d,ISO) != '0001-01-01')
SET new.expiry_date =
  CASE WHEN new.expiry_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.expiry_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0408U51
  NO CASCADE BEFORE UPDATE OF 
                    expiry_date
  ON DMAN_LICENSEE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.expiry_date != new.expiry_date
   OR old.expiry_date IS NULL AND new.expiry_date IS NOT NULL
   OR old.expiry_date IS NOT NULL AND new.expiry_date IS NULL)
SET new.expiry_date_d =
  CASE WHEN new.expiry_date = 0 OR new.expiry_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.expiry_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0607U01
  NO CASCADE BEFORE UPDATE
  ON DMATE_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0607I01
  NO CASCADE BEFORE INSERT
  ON DMATE_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dmate_herd_sts_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'DMATE_HERD_STS_CD'
      AND c.cd = new.dmate_herd_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0607'
('D0607I01: invalid DataMATE herd status code')
 !!


CREATE TRIGGER D0607U02
  NO CASCADE BEFORE UPDATE OF 
                    dmate_herd_sts_cd
  ON DMATE_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.dmate_herd_sts_cd IS NOT NULL
  AND VALUE(new.dmate_herd_sts_cd,'~') != VALUE(old.dmate_herd_sts_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'DMATE_HERD_STS_CD'
      AND c.cd = new.dmate_herd_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0607'
('D0607U02: invalid DataMATE herd status code')
 !!


CREATE TRIGGER D0662U01
  NO CASCADE BEFORE UPDATE
  ON DMATE_SEMEN_STOCK_ITEM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0438U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0438U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438I54
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.follow_up_date IS NULL 
  AND new.follow_up_date_d IS NOT NULL
  AND CHAR(new.follow_up_date_d,ISO) != '0001-01-01'
   OR new.follow_up_date = 0
  AND new.follow_up_date_d IS NOT NULL
  AND CHAR(new.follow_up_date_d,ISO) != '0001-01-01')
SET new.follow_up_date =
  CASE WHEN new.follow_up_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.follow_up_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.follow_up_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.follow_up_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0438U55
  NO CASCADE BEFORE UPDATE OF 
                    term_date
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.term_date != new.term_date
   OR old.term_date IS NULL AND new.term_date IS NOT NULL
   OR old.term_date IS NOT NULL AND new.term_date IS NULL)
SET new.term_date_d =
  CASE WHEN new.term_date = 0 OR new.term_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.term_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438I53
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.follow_up_date_d IS NULL 
  AND new.follow_up_date IS NOT NULL
   OR CHAR(new.follow_up_date_d,ISO) = '0001-01-01'
  AND new.follow_up_date IS NOT NULL)
SET new.follow_up_date_d =
  CASE WHEN new.follow_up_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.follow_up_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438U53
  NO CASCADE BEFORE UPDATE OF 
                    follow_up_date
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.follow_up_date != new.follow_up_date
   OR old.follow_up_date IS NULL AND new.follow_up_date IS NOT NULL
   OR old.follow_up_date IS NOT NULL AND new.follow_up_date IS NULL)
SET new.follow_up_date_d =
  CASE WHEN new.follow_up_date = 0 OR new.follow_up_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.follow_up_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438I55
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.term_date_d IS NULL 
  AND new.term_date IS NOT NULL
   OR CHAR(new.term_date_d,ISO) = '0001-01-01'
  AND new.term_date IS NOT NULL)
SET new.term_date_d =
  CASE WHEN new.term_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.term_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438U54
  NO CASCADE BEFORE UPDATE OF 
                    follow_up_date_d
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.follow_up_date_d != new.follow_up_date_d
   OR old.follow_up_date_d IS NULL and new.follow_up_date_d IS NOT NULL
   OR old.follow_up_date_d IS NOT NULL and new.follow_up_date_d IS NULL)
SET new.follow_up_date =
  CASE WHEN new.follow_up_date_d IS NULL OR new.follow_up_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.follow_up_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.follow_up_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.follow_up_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0438U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0438U56
  NO CASCADE BEFORE UPDATE OF 
                    term_date_d
  ON DMG_ENQ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.term_date_d != new.term_date_d
   OR old.term_date_d IS NULL and new.term_date_d IS NOT NULL
   OR old.term_date_d IS NOT NULL and new.term_date_d IS NULL)
SET new.term_date =
  CASE WHEN new.term_date_d IS NULL OR new.term_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.term_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.term_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.term_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0438I51
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0438I52
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0438I56
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.term_date IS NULL 
  AND new.term_date_d IS NOT NULL
  AND CHAR(new.term_date_d,ISO) != '0001-01-01'
   OR new.term_date = 0
  AND new.term_date_d IS NOT NULL
  AND CHAR(new.term_date_d,ISO) != '0001-01-01')
SET new.term_date =
  CASE WHEN new.term_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.term_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.term_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.term_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0446U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0440U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0443U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_CLNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0442I51
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_CTCT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0442I52
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_CTCT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0442U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_CTCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0442U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON DMG_ENQ_CTCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0442U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON DMG_ENQ_CTCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0535U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_CTCT_TEXT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0439U53
  NO CASCADE BEFORE UPDATE OF 
                    alcn_date
  ON DMG_ENQ_DEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_date != new.alcn_date
   OR old.alcn_date IS NULL AND new.alcn_date IS NOT NULL
   OR old.alcn_date IS NOT NULL AND new.alcn_date IS NULL)
SET new.alcn_date_d =
  CASE WHEN new.alcn_date = 0 OR new.alcn_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0439I53
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_DEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_date_d IS NULL 
  AND new.alcn_date IS NOT NULL
   OR CHAR(new.alcn_date_d,ISO) = '0001-01-01'
  AND new.alcn_date IS NOT NULL)
SET new.alcn_date_d =
  CASE WHEN new.alcn_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0439I52
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_DEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.act_date IS NULL 
  AND new.act_date_d IS NOT NULL
  AND CHAR(new.act_date_d,ISO) != '0001-01-01'
   OR new.act_date = 0
  AND new.act_date_d IS NOT NULL
  AND CHAR(new.act_date_d,ISO) != '0001-01-01')
SET new.act_date =
  CASE WHEN new.act_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.act_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.act_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.act_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0439U51
  NO CASCADE BEFORE UPDATE OF 
                    act_date
  ON DMG_ENQ_DEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.act_date != new.act_date
   OR old.act_date IS NULL AND new.act_date IS NOT NULL
   OR old.act_date IS NOT NULL AND new.act_date IS NULL)
SET new.act_date_d =
  CASE WHEN new.act_date = 0 OR new.act_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.act_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0439I51
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_DEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.act_date_d IS NULL 
  AND new.act_date IS NOT NULL
   OR CHAR(new.act_date_d,ISO) = '0001-01-01'
  AND new.act_date IS NOT NULL)
SET new.act_date_d =
  CASE WHEN new.act_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.act_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0439I54
  NO CASCADE BEFORE INSERT
  ON DMG_ENQ_DEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_date IS NULL 
  AND new.alcn_date_d IS NOT NULL
  AND CHAR(new.alcn_date_d,ISO) != '0001-01-01'
   OR new.alcn_date = 0
  AND new.alcn_date_d IS NOT NULL
  AND CHAR(new.alcn_date_d,ISO) != '0001-01-01')
SET new.alcn_date =
  CASE WHEN new.alcn_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0439U54
  NO CASCADE BEFORE UPDATE OF 
                    alcn_date_d
  ON DMG_ENQ_DEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_date_d != new.alcn_date_d
   OR old.alcn_date_d IS NULL and new.alcn_date_d IS NOT NULL
   OR old.alcn_date_d IS NOT NULL and new.alcn_date_d IS NULL)
SET new.alcn_date =
  CASE WHEN new.alcn_date_d IS NULL OR new.alcn_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0439U52
  NO CASCADE BEFORE UPDATE OF 
                    act_date_d
  ON DMG_ENQ_DEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.act_date_d != new.act_date_d
   OR old.act_date_d IS NULL and new.act_date_d IS NOT NULL
   OR old.act_date_d IS NOT NULL and new.act_date_d IS NULL)
SET new.act_date =
  CASE WHEN new.act_date_d IS NULL OR new.act_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.act_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.act_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.act_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0439U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_DEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0445U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0457U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0447U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0444U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_TERM_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0441U01
  NO CASCADE BEFORE UPDATE
  ON DMG_ENQ_TEXT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0529I51
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0529I52
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0529U01
  NO CASCADE BEFORE UPDATE
  ON DNA_PRNTG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0529U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON DNA_PRNTG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0529U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON DNA_PRNTG_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0536U53
  NO CASCADE BEFORE UPDATE OF 
                    sire_date
  ON DNA_PRNTG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sire_date != new.sire_date
   OR old.sire_date IS NULL AND new.sire_date IS NOT NULL
   OR old.sire_date IS NOT NULL AND new.sire_date IS NULL)
SET new.sire_date_d =
  CASE WHEN new.sire_date = 0 OR new.sire_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sire_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0536U52
  NO CASCADE BEFORE UPDATE OF 
                    dam_date_d
  ON DNA_PRNTG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.dam_date_d != new.dam_date_d
   OR old.dam_date_d IS NULL and new.dam_date_d IS NOT NULL
   OR old.dam_date_d IS NOT NULL and new.dam_date_d IS NULL)
SET new.dam_date =
  CASE WHEN new.dam_date_d IS NULL OR new.dam_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.dam_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.dam_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.dam_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0536I51
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dam_date_d IS NULL 
  AND new.dam_date IS NOT NULL
   OR CHAR(new.dam_date_d,ISO) = '0001-01-01'
  AND new.dam_date IS NOT NULL)
SET new.dam_date_d =
  CASE WHEN new.dam_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.dam_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0536U51
  NO CASCADE BEFORE UPDATE OF 
                    dam_date
  ON DNA_PRNTG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.dam_date != new.dam_date
   OR old.dam_date IS NULL AND new.dam_date IS NOT NULL
   OR old.dam_date IS NOT NULL AND new.dam_date IS NULL)
SET new.dam_date_d =
  CASE WHEN new.dam_date = 0 OR new.dam_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.dam_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0536I52
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dam_date IS NULL 
  AND new.dam_date_d IS NOT NULL
  AND CHAR(new.dam_date_d,ISO) != '0001-01-01'
   OR new.dam_date = 0
  AND new.dam_date_d IS NOT NULL
  AND CHAR(new.dam_date_d,ISO) != '0001-01-01')
SET new.dam_date =
  CASE WHEN new.dam_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.dam_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.dam_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.dam_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0536U01
  NO CASCADE BEFORE UPDATE
  ON DNA_PRNTG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0536I54
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sire_date IS NULL 
  AND new.sire_date_d IS NOT NULL
  AND CHAR(new.sire_date_d,ISO) != '0001-01-01'
   OR new.sire_date = 0
  AND new.sire_date_d IS NOT NULL
  AND CHAR(new.sire_date_d,ISO) != '0001-01-01')
SET new.sire_date =
  CASE WHEN new.sire_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.sire_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.sire_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.sire_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0536U54
  NO CASCADE BEFORE UPDATE OF 
                    sire_date_d
  ON DNA_PRNTG_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sire_date_d != new.sire_date_d
   OR old.sire_date_d IS NULL and new.sire_date_d IS NOT NULL
   OR old.sire_date_d IS NOT NULL and new.sire_date_d IS NULL)
SET new.sire_date =
  CASE WHEN new.sire_date_d IS NULL OR new.sire_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.sire_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.sire_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.sire_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0536I53
  NO CASCADE BEFORE INSERT
  ON DNA_PRNTG_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sire_date_d IS NULL 
  AND new.sire_date IS NOT NULL
   OR CHAR(new.sire_date_d,ISO) = '0001-01-01'
  AND new.sire_date IS NOT NULL)
SET new.sire_date_d =
  CASE WHEN new.sire_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sire_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0528I54
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_NTFY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0528U52
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date_d
  ON DNA_TEST_NTFY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date_d != new.rcvd_date_d
   OR old.rcvd_date_d IS NULL and new.rcvd_date_d IS NOT NULL
   OR old.rcvd_date_d IS NOT NULL and new.rcvd_date_d IS NULL)
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL OR new.rcvd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcvd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0528I53
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_NTFY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0528U53
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON DNA_TEST_NTFY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0528I52
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_NTFY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date IS NULL 
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01'
   OR new.rcvd_date = 0
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01')
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcvd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0528I51
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_NTFY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date_d IS NULL 
  AND new.rcvd_date IS NOT NULL
   OR CHAR(new.rcvd_date_d,ISO) = '0001-01-01'
  AND new.rcvd_date IS NOT NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0528U54
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON DNA_TEST_NTFY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0528U51
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date
  ON DNA_TEST_NTFY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date != new.rcvd_date
   OR old.rcvd_date IS NULL AND new.rcvd_date IS NOT NULL
   OR old.rcvd_date IS NOT NULL AND new.rcvd_date IS NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 OR new.rcvd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0527I51
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0527I52
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0527I53
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0527I54
  NO CASCADE BEFORE INSERT
  ON DNA_TEST_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0527U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON DNA_TEST_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0527U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON DNA_TEST_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0527U53
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON DNA_TEST_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0527U54
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON DNA_TEST_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0524U01
  NO CASCADE BEFORE UPDATE
  ON DNA_TEST_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0464U01
  NO CASCADE BEFORE UPDATE
  ON DOC_ANML_EVENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0222U02
  NO CASCADE BEFORE UPDATE OF 
                    text
  ON DOC_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', text) > 0)
  SET new.text = replace(text,x'0D0A','  ')
 !!


CREATE TRIGGER D0222U01
  NO CASCADE BEFORE UPDATE
  ON DOC_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0222I01
  NO CASCADE BEFORE INSERT
  ON DOC_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', text) > 0)    SET new.text = replace(text,x'0D0A','  ')
 !!


CREATE TRIGGER D0215U01
  NO CASCADE BEFORE UPDATE
  ON DOC_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0225U01
  NO CASCADE BEFORE UPDATE
  ON DOC_ID_LOCK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0216U01
  NO CASCADE BEFORE UPDATE
  ON DOC_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0223U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON DOC_TRACKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0223U01
  NO CASCADE BEFORE UPDATE
  ON DOC_TRACKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0223U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON DOC_TRACKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(new.date_d) - 19000000 END
 !!


CREATE TRIGGER D0223I51
  NO CASCADE BEFORE INSERT
  ON DOC_TRACKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0223I52
  NO CASCADE BEFORE INSERT
  ON DOC_TRACKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(new.date_d) - 19000000 END
 !!


CREATE TRIGGER D0214U01
  NO CASCADE BEFORE UPDATE
  ON DOC_TRACKING_PT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DOC_TRACKING_PT AFTER DELETE ON DOC_TRACKING_PT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DOC_TRACKING WHERE DOC_TRACKING.DOC_TRACKING_PT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DOC_TRACKING_PT  DOC_TRACKING on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094de", PARENT_OWNER="", PARENT_TABLE="DOC_TRACKING_PT"
    CHILD_OWNER="", CHILD_TABLE="DOC_TRACKING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0214_001", FK_COLUMNS="DOC_TRACKING_PT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DOC_TRACKING_PT because DOC_TRACKING exists.')
 !!


CREATE TRIGGER D0221I51
  NO CASCADE BEFORE INSERT
  ON DOCUMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date_d IS NULL 
  AND new.can_date IS NOT NULL
   OR CHAR(new.can_date_d,ISO) = '0001-01-01'
  AND new.can_date IS NOT NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0221U52
  NO CASCADE BEFORE UPDATE OF 
                    can_date_d
  ON DOCUMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date_d != new.can_date_d
   OR old.can_date_d IS NULL and new.can_date_d IS NOT NULL
   OR old.can_date_d IS NOT NULL and new.can_date_d IS NULL)
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL OR new.can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0221U51
  NO CASCADE BEFORE UPDATE OF 
                    can_date
  ON DOCUMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date != new.can_date
   OR old.can_date IS NULL AND new.can_date IS NOT NULL
   OR old.can_date IS NOT NULL AND new.can_date IS NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 OR new.can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0221U01
  NO CASCADE BEFORE UPDATE
  ON DOCUMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0221I53
  NO CASCADE BEFORE INSERT
  ON DOCUMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0221I54
  NO CASCADE BEFORE INSERT
  ON DOCUMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(new.create_date_d) - 19000000 END
 !!


CREATE TRIGGER D0221U54
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON DOCUMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.create_date_d) - 19000000 END
 !!


CREATE TRIGGER D0221I52
  NO CASCADE BEFORE INSERT
  ON DOCUMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date IS NULL 
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01'
   OR new.can_date = 0
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01')
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL THEN 0 ELSE
  INT(new.can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0221U53
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON DOCUMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE  TRIGGER tD_DOCUMENT AFTER DELETE ON DOCUMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DOC_TRACKING WHERE DOC_TRACKING.DOC_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DOCUMENT  DOC_TRACKING on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000859d", PARENT_OWNER="", PARENT_TABLE="DOCUMENT"
    CHILD_OWNER="", CHILD_TABLE="DOC_TRACKING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0221_002", FK_COLUMNS="DOC_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DOCUMENT because DOC_TRACKING exists.')
 !!

CREATE  TRIGGER tD_DOCUMENT2 AFTER DELETE ON DOCUMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RCVD_FILE_CONTNS WHERE RCVD_FILE_CONTNS.DOC_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DOCUMENT  RCVD_FILE_CONTNS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000845a", PARENT_OWNER="", PARENT_TABLE="DOCUMENT"
    CHILD_OWNER="", CHILD_TABLE="RCVD_FILE_CONTNS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0221_003", FK_COLUMNS="DOC_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DOCUMENT because RCVD_FILE_CONTNS exists.')
 !!

CREATE  TRIGGER tD_DOCUMENT3 AFTER DELETE ON DOCUMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMBRYO_XFER WHERE EMBRYO_XFER.DOC_NUM = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DOCUMENT  EMBRYO_XFER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b7c", PARENT_OWNER="", PARENT_TABLE="DOCUMENT"
    CHILD_OWNER="", CHILD_TABLE="EMBRYO_XFER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0221_004", FK_COLUMNS="DOC_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DOCUMENT because EMBRYO_XFER exists.')
 !!

CREATE  TRIGGER tD_DOCUMENT4 AFTER DELETE ON DOCUMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DOC_ANML_EVENT WHERE DOC_ANML_EVENT.DOC_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* DOCUMENT  DOC_ANML_EVENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008851", PARENT_OWNER="", PARENT_TABLE="DOCUMENT"
    CHILD_OWNER="", CHILD_TABLE="DOC_ANML_EVENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0221_001", FK_COLUMNS="DOC_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DOCUMENT because DOC_ANML_EVENT exists.')
 !!


CREATE TRIGGER D0080I51
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_end_date_d IS NULL 
  AND new.alcn_end_date IS NOT NULL
   OR CHAR(new.alcn_end_date_d,ISO) = '0001-01-01'
  AND new.alcn_end_date IS NOT NULL)
SET new.alcn_end_date_d =
  CASE WHEN new.alcn_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080I52
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_end_date IS NULL 
  AND new.alcn_end_date_d IS NOT NULL
  AND CHAR(new.alcn_end_date_d,ISO) != '0001-01-01'
   OR new.alcn_end_date = 0
  AND new.alcn_end_date_d IS NOT NULL
  AND CHAR(new.alcn_end_date_d,ISO) != '0001-01-01')
SET new.alcn_end_date =
  CASE WHEN new.alcn_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080I53
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_st_date_d IS NULL 
  AND new.alcn_st_date IS NOT NULL
   OR CHAR(new.alcn_st_date_d,ISO) = '0001-01-01'
  AND new.alcn_st_date IS NOT NULL)
SET new.alcn_st_date_d =
  CASE WHEN new.alcn_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080I54
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_st_date IS NULL 
  AND new.alcn_st_date_d IS NOT NULL
  AND CHAR(new.alcn_st_date_d,ISO) != '0001-01-01'
   OR new.alcn_st_date = 0
  AND new.alcn_st_date_d IS NOT NULL
  AND CHAR(new.alcn_st_date_d,ISO) != '0001-01-01')
SET new.alcn_st_date =
  CASE WHEN new.alcn_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080I55
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_end_date_d IS NULL 
  AND new.amalg_end_date IS NOT NULL
   OR CHAR(new.amalg_end_date_d,ISO) = '0001-01-01'
  AND new.amalg_end_date IS NOT NULL)
SET new.amalg_end_date_d =
  CASE WHEN new.amalg_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080I56
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_end_date IS NULL 
  AND new.amalg_end_date_d IS NOT NULL
  AND CHAR(new.amalg_end_date_d,ISO) != '0001-01-01'
   OR new.amalg_end_date = 0
  AND new.amalg_end_date_d IS NOT NULL
  AND CHAR(new.amalg_end_date_d,ISO) != '0001-01-01')
SET new.amalg_end_date =
  CASE WHEN new.amalg_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.amalg_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.amalg_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.amalg_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080I57
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_st_date_d IS NULL 
  AND new.amalg_st_date IS NOT NULL
   OR CHAR(new.amalg_st_date_d,ISO) = '0001-01-01'
  AND new.amalg_st_date IS NOT NULL)
SET new.amalg_st_date_d =
  CASE WHEN new.amalg_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080I58
  NO CASCADE BEFORE INSERT
  ON DOSE_CALC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.amalg_st_date IS NULL 
  AND new.amalg_st_date_d IS NOT NULL
  AND CHAR(new.amalg_st_date_d,ISO) != '0001-01-01'
   OR new.amalg_st_date = 0
  AND new.amalg_st_date_d IS NOT NULL
  AND CHAR(new.amalg_st_date_d,ISO) != '0001-01-01')
SET new.amalg_st_date =
  CASE WHEN new.amalg_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.amalg_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.amalg_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.amalg_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080U01
  NO CASCADE BEFORE UPDATE
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0080U51
  NO CASCADE BEFORE UPDATE OF 
                    alcn_end_date
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_end_date != new.alcn_end_date
   OR old.alcn_end_date IS NULL AND new.alcn_end_date IS NOT NULL
   OR old.alcn_end_date IS NOT NULL AND new.alcn_end_date IS NULL)
SET new.alcn_end_date_d =
  CASE WHEN new.alcn_end_date = 0 OR new.alcn_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080U52
  NO CASCADE BEFORE UPDATE OF 
                    alcn_end_date_d
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_end_date_d != new.alcn_end_date_d
   OR old.alcn_end_date_d IS NULL and new.alcn_end_date_d IS NOT NULL
   OR old.alcn_end_date_d IS NOT NULL and new.alcn_end_date_d IS NULL)
SET new.alcn_end_date =
  CASE WHEN new.alcn_end_date_d IS NULL OR new.alcn_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080U53
  NO CASCADE BEFORE UPDATE OF 
                    alcn_st_date
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_st_date != new.alcn_st_date
   OR old.alcn_st_date IS NULL AND new.alcn_st_date IS NOT NULL
   OR old.alcn_st_date IS NOT NULL AND new.alcn_st_date IS NULL)
SET new.alcn_st_date_d =
  CASE WHEN new.alcn_st_date = 0 OR new.alcn_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080U54
  NO CASCADE BEFORE UPDATE OF 
                    alcn_st_date_d
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_st_date_d != new.alcn_st_date_d
   OR old.alcn_st_date_d IS NULL and new.alcn_st_date_d IS NOT NULL
   OR old.alcn_st_date_d IS NOT NULL and new.alcn_st_date_d IS NULL)
SET new.alcn_st_date =
  CASE WHEN new.alcn_st_date_d IS NULL OR new.alcn_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080U55
  NO CASCADE BEFORE UPDATE OF 
                    amalg_end_date
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_end_date != new.amalg_end_date
   OR old.amalg_end_date IS NULL AND new.amalg_end_date IS NOT NULL
   OR old.amalg_end_date IS NOT NULL AND new.amalg_end_date IS NULL)
SET new.amalg_end_date_d =
  CASE WHEN new.amalg_end_date = 0 OR new.amalg_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080U56
  NO CASCADE BEFORE UPDATE OF 
                    amalg_end_date_d
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_end_date_d != new.amalg_end_date_d
   OR old.amalg_end_date_d IS NULL and new.amalg_end_date_d IS NOT NULL
   OR old.amalg_end_date_d IS NOT NULL and new.amalg_end_date_d IS NULL)
SET new.amalg_end_date =
  CASE WHEN new.amalg_end_date_d IS NULL OR new.amalg_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.amalg_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.amalg_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.amalg_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0080U57
  NO CASCADE BEFORE UPDATE OF 
                    amalg_st_date
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_st_date != new.amalg_st_date
   OR old.amalg_st_date IS NULL AND new.amalg_st_date IS NOT NULL
   OR old.amalg_st_date IS NOT NULL AND new.amalg_st_date IS NULL)
SET new.amalg_st_date_d =
  CASE WHEN new.amalg_st_date = 0 OR new.amalg_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.amalg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0080U58
  NO CASCADE BEFORE UPDATE OF 
                    amalg_st_date_d
  ON DOSE_CALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.amalg_st_date_d != new.amalg_st_date_d
   OR old.amalg_st_date_d IS NULL and new.amalg_st_date_d IS NOT NULL
   OR old.amalg_st_date_d IS NOT NULL and new.amalg_st_date_d IS NULL)
SET new.amalg_st_date =
  CASE WHEN new.amalg_st_date_d IS NULL OR new.amalg_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.amalg_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.amalg_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.amalg_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0562U01
  NO CASCADE BEFORE UPDATE
  ON DRUG_PRIM_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_DRUG_PRIM_USE AFTER DELETE ON DRUG_PRIM_USE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HLTH_PROD WHERE HLTH_PROD.DRUG_PRIM_USE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DRUG_PRIM_USE  HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bbc", PARENT_OWNER="", PARENT_TABLE="DRUG_PRIM_USE"
    CHILD_OWNER="", CHILD_TABLE="HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0562_001", FK_COLUMNS="DRUG_PRIM_USE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DRUG_PRIM_USE because HLTH_PROD exists.')
 !!


CREATE TRIGGER D0100U01
  NO CASCADE BEFORE UPDATE
  ON DRY_COY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0100I01
  NO CASCADE BEFORE INSERT
  ON DRY_COY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != ' ')
SET new.party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
 !!


CREATE TRIGGER D0100U02
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON DRY_COY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != old.ptpt_cd)
SET new.party_id = (
  CASE WHEN new.ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
  END
 !!


CREATE  TRIGGER tD_DRY_COY AFTER DELETE ON DRY_COY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT WHERE HERD_DT.SPLY_DCO_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* DRY_COY  HERD_DT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083a2", PARENT_OWNER="", PARENT_TABLE="DRY_COY"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0100_001", FK_COLUMNS="SPLY_DCO_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete DRY_COY because HERD_DT exists.')
 !!


CREATE TRIGGER D0178U01
  NO CASCADE BEFORE UPDATE
  ON DTL_LVL_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0057U01
  NO CASCADE BEFORE UPDATE
  ON E_EXCHANGE_FMT_TP_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_E_EXCHANGE_FMT_ AFTER DELETE ON E_EXCHANGE_FMT_TP_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM E_EXCHANGE_RCD_TP_REF WHERE E_EXCHANGE_RCD_TP_REF.E_EXCHANGE_FMT_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* E_EXCHANGE_FMT_TP_REF  E_EXCHANGE_RCD_TP_REF on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a8e8", PARENT_OWNER="", PARENT_TABLE="E_EXCHANGE_FMT_TP_REF"
    CHILD_OWNER="", CHILD_TABLE="E_EXCHANGE_RCD_TP_REF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0057_001", FK_COLUMNS="E_EXCHANGE_FMT_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete E_EXCHANGE_FMT_TP_REF because E_EXCHANGE_RCD_TP_REF exists.')
 !!


CREATE TRIGGER D0058U01
  NO CASCADE BEFORE UPDATE
  ON E_EXCHANGE_RCD_TP_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_E_EXCHANGE_RCD_ AFTER DELETE ON E_EXCHANGE_RCD_TP_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_PERFORMANCE WHERE TECH_PERFORMANCE.E_EXCHANGE_FMT_TP_CD = old.E_EXCHANGE_FMT_TP_CD AND
                                                   TECH_PERFORMANCE.E_EXCHANGE_RCD_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* E_EXCHANGE_RCD_TP_REF  TECH_PERFORMANCE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a60b", PARENT_OWNER="", PARENT_TABLE="E_EXCHANGE_RCD_TP_REF"
    CHILD_OWNER="", CHILD_TABLE="TECH_PERFORMANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0058_001", FK_COLUMNS="E_EXCHANGE_FMT_TP_CD""E_EXCHANGE_RCD_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete E_EXCHANGE_RCD_TP_REF because TECH_PERFORMANCE exists.')
 !!


CREATE TRIGGER D0523U01
  NO CASCADE BEFORE UPDATE
  ON E_MINDA_OPT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0522U01
  NO CASCADE BEFORE UPDATE
  ON E_MINDA_ORD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0522U52
  NO CASCADE BEFORE UPDATE OF 
                    can_date_d
  ON E_MINDA_ORD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date_d != new.can_date_d
   OR old.can_date_d IS NULL and new.can_date_d IS NOT NULL
   OR old.can_date_d IS NOT NULL and new.can_date_d IS NULL)
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL OR new.can_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.can_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.can_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.can_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0522U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON E_MINDA_ORD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0522I51
  NO CASCADE BEFORE INSERT
  ON E_MINDA_ORD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date_d IS NULL 
  AND new.can_date IS NOT NULL
   OR CHAR(new.can_date_d,ISO) = '0001-01-01'
  AND new.can_date IS NOT NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0522U51
  NO CASCADE BEFORE UPDATE OF 
                    can_date
  ON E_MINDA_ORD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.can_date != new.can_date
   OR old.can_date IS NULL AND new.can_date IS NOT NULL
   OR old.can_date IS NOT NULL AND new.can_date IS NULL)
SET new.can_date_d =
  CASE WHEN new.can_date = 0 OR new.can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0522I54
  NO CASCADE BEFORE INSERT
  ON E_MINDA_ORD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0522U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON E_MINDA_ORD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0522I52
  NO CASCADE BEFORE INSERT
  ON E_MINDA_ORD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_date IS NULL 
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01'
   OR new.can_date = 0
  AND new.can_date_d IS NOT NULL
  AND CHAR(new.can_date_d,ISO) != '0001-01-01')
SET new.can_date =
  CASE WHEN new.can_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.can_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.can_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.can_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0522I53
  NO CASCADE BEFORE INSERT
  ON E_MINDA_ORD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0354U01
  NO CASCADE BEFORE UPDATE
  ON E_REG_EXCL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0350U02
  NO CASCADE BEFORE UPDATE
  ON E_REG_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0350I01
  NO CASCADE BEFORE INSERT
  ON E_REG_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1
  FROM bsoc_memb bm
  WHERE bm.memb_ptpt_cd = new.memb_ptpt_cd
    AND bm.org_ptpt_cd = new.org_ptpt_cd
    AND DATE(INSERT(INSERT(
        CHAR(bm.st_date+19000000),7,0,'-'),5,0,'-')) =
             new.memb_st_date))
-- The breed society member must exist
SIGNAL SQLSTATE 'Z0350'
('D0350I01: The breed society member must exist')
 !!


CREATE TRIGGER D0350U01
  NO CASCADE BEFORE UPDATE
  ON E_REG_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1
  FROM bsoc_memb bm
  WHERE bm.memb_ptpt_cd = new.memb_ptpt_cd
    AND bm.org_ptpt_cd = new.org_ptpt_cd
    AND DATE(INSERT(INSERT(
        CHAR(bm.st_date+19000000),7,0,'-'),5,0,'-')) =
             new.memb_st_date))
-- The breed society member must exist
SIGNAL SQLSTATE 'Z0350'
('D0350U01: The breed society member must exist')
 !!


CREATE  TRIGGER tD_E_REG_RQST AFTER DELETE ON E_REG_RQST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM E_REG_RQST_ANML WHERE E_REG_RQST_ANML.E_REG_RQST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* E_REG_RQST  E_REG_RQST_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009605", PARENT_OWNER="", PARENT_TABLE="E_REG_RQST"
    CHILD_OWNER="", CHILD_TABLE="E_REG_RQST_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0350_001", FK_COLUMNS="E_REG_RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete E_REG_RQST because E_REG_RQST_ANML exists.')
 !!

CREATE  TRIGGER tD_E_REG_RQST2 AFTER DELETE ON E_REG_RQST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM E_REG_EXCL WHERE E_REG_EXCL.REG_RQST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* E_REG_RQST  E_REG_EXCL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086fa", PARENT_OWNER="", PARENT_TABLE="E_REG_RQST"
    CHILD_OWNER="", CHILD_TABLE="E_REG_EXCL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0350_002", FK_COLUMNS="REG_RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete E_REG_RQST because E_REG_EXCL exists.')
 !!


CREATE TRIGGER D0351U01
  NO CASCADE BEFORE UPDATE
  ON E_REG_RQST_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0771U01
  NO CASCADE BEFORE UPDATE
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0771I03
  NO CASCADE BEFORE INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM Electronic_ID old
WHERE old.eid = new.eid
  AND old.anml_key <> new.anml_key 
  AND old.reuse_ind = 'N'
  AND old.st_date != new.st_date))
  SIGNAL SQLSTATE 'Z0771'
('D0771I03: reuse_ind must = Y to re-allocate EID')
 !!


CREATE TRIGGER D0771I06
  NO CASCADE BEFORE INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM Electronic_ID cur
  WHERE cur.anml_key = new.anml_key
    AND cur.st_date <> new.st_date
    AND new.st_date <= cur.end_date
  AND VALUE (new.end_date, DATE('9999-12-31') ) >= cur.st_date) )
SIGNAL SQLSTATE 'Z0771'
('D0771I06: animal may only have 1 EID at any one time')
 !!


CREATE TRIGGER D0771I02
  NO CASCADE BEFORE INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NOT NULL AND
      new.end_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0771'
('D0771I02: the end date must not be in the future')
 !!


CREATE TRIGGER D0771U03
  NO CASCADE BEFORE UPDATE
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NOT NULL AND
      new.end_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0771'
('D0771U03: the end date must not be in the future')
 !!


CREATE TRIGGER D0771U02
  NO CASCADE BEFORE UPDATE
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0771'
('D0771U02: the start date must not be in the future')
 !!


CREATE TRIGGER D0771I01
  NO CASCADE BEFORE INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0771'
('D0771I01: the start date must not be in the future')
 !!


CREATE TRIGGER D0771I04
  NO CASCADE BEFORE INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM Electronic_ID cur
  WHERE cur.eid = new.eid
    AND cur.st_date <> new.st_date
    AND new.st_date <= cur.end_date
  AND VALUE (new.end_date, DATE('9999-12-31') ) >= cur.st_date) )
SIGNAL SQLSTATE 'Z0771'
('D0771I04: EID may only be allocated once at any one time')
 !!


CREATE TRIGGER D0771U07
  AFTER UPDATE OF 
        anml_key
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE Electronic_ID SET end_date = (new.st_date - 1 DAYS) 
WHERE  anml_key = new.anml_key 
  AND st_date != new.st_date
  AND end_date IS NULL
 !!


CREATE TRIGGER D0771U08
  NO CASCADE BEFORE UPDATE OF 
                    EID
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM Electronic_ID old
WHERE old.eid = new.eid
  AND old.anml_key <> new.anml_key 
  AND old.reuse_ind = 'N'
  AND old.st_date != new.st_date))
  SIGNAL SQLSTATE 'Z0771'
('D0771U08: reuse_ind must = Y to re-allocate EID')
 !!


CREATE TRIGGER D0771U06
  NO CASCADE BEFORE UPDATE OF 
                    anml_key,
                    st_date,
                    end_date
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.st_date != new.st_date 
   OR VALUE(old.end_date, '9999-12-31') != VALUE(new.end_date, '9999-12-31'))
  AND EXISTS (
    SELECT 1 FROM electronic_id ei
     WHERE ei.anml_key = new.anml_key
       AND ei.st_date != old.st_date
       AND new.st_date <= VALUE (ei.end_date, '9999-12-31')
       AND VALUE (new.end_date, '9999-12-31') >= ei.st_date))
   SIGNAL SQLSTATE 'Z0771'
('D0771U06: animal may only have 1 EID at any one time')
 !!


CREATE TRIGGER D0771U05
  AFTER UPDATE OF 
        eid
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE Electronic_ID ei SET ei.end_date = (new.st_date - 1 DAYS) 
WHERE ei.eid = new.eid
  AND ei.reuse_ind = 'Y'
  AND ei.st_date < new.st_date
  AND ei.end_date IS NULL
 !!


CREATE TRIGGER D0771U09
  NO CASCADE BEFORE UPDATE OF 
                    st_date,
                    end_date,
                    eid
  ON ELECTRONIC_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.st_date != new.st_date 
   OR VALUE(old.end_date, '9999-12-31') != VALUE(new.end_date, '9999-12-31'))
  AND EXISTS (
    SELECT 1 FROM electronic_id ei
     WHERE ei.eid = new.eid
       AND ei.st_date != old.st_date
       AND new.st_date <= VALUE (ei.end_date, '9999-12-31')
       AND VALUE (new.end_date, '9999-12-31') >= ei.st_date))
   SIGNAL SQLSTATE 'Z0771'
('D0771U09: EID may only be allocated once at any one time')
 !!


CREATE TRIGGER D0771I05
  AFTER INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE Electronic_ID ei SET ei.end_date = (new.st_date - 1 DAYS) 
WHERE ei.eid = new.eid
  AND ei.reuse_ind = 'Y'
  AND ei.st_date < new.st_date
  AND ei.end_date IS NULL
 !!


CREATE TRIGGER D0771I07
  AFTER INSERT
  ON ELECTRONIC_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE Electronic_ID ei SET ei.end_date = (new.st_date - 1 DAYS) 
WHERE  ei.anml_key = new.anml_key 
  AND ei.st_date < new.st_date
  AND ei.end_date IS NULL
 !!


CREATE TRIGGER D0326U01
  NO CASCADE BEFORE UPDATE
  ON EMBRYO_RCPNT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_EMBRYO_RCPNT AFTER DELETE ON EMBRYO_RCPNT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH_RCPNT WHERE BULL_ACQ_APPROACH_RCPNT.DOC_NUM = old.DOC_NUM AND
                                                          BULL_ACQ_APPROACH_RCPNT.ET_RCPNT_ANML_KEY = old.ANML_KEY) > 0)
    /* erwin Builtin Trigger */
    /* EMBRYO_RCPNT  BULL_ACQ_APPROACH_RCPNT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a2fe", PARENT_OWNER="", PARENT_TABLE="EMBRYO_RCPNT"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH_RCPNT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0326_001", FK_COLUMNS="DOC_NUM""ET_RCPNT_ANML_KEY" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EMBRYO_RCPNT because BULL_ACQ_APPROACH_RCPNT exists.')
 !!


CREATE TRIGGER D0654U01
  NO CASCADE BEFORE UPDATE
  ON EMBRYO_SIRE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0327I01
  NO CASCADE BEFORE INSERT
  ON EMBRYO_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tech_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.tech_ptpt_cd) )
SIGNAL SQLSTATE 'Z0327'
('D0327I01: tech_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0327I02
  NO CASCADE BEFORE INSERT
  ON EMBRYO_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ownr_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0327'
('D0327I02: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0327I03
  NO CASCADE BEFORE INSERT
  ON EMBRYO_XFER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvry_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0327'
('D0327I03: recovery date must not be in the future')
 !!


CREATE TRIGGER D0327U01
  NO CASCADE BEFORE UPDATE OF 
                    tech_ptpt_cd
  ON EMBRYO_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.tech_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.tech_ptpt_cd) )
SIGNAL SQLSTATE 'Z0327'
('D0327I01: tech_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0327U02
  NO CASCADE BEFORE UPDATE OF 
                    ownr_ptpt_cd
  ON EMBRYO_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ownr_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0327'
('D0327I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0327U03
  NO CASCADE BEFORE UPDATE
  ON EMBRYO_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvry_date > CURRENT DATE)
SIGNAL SQLSTATE 'Z0327'
('D0327I03: recovery date must not be in the future')
 !!


CREATE TRIGGER D0327U04
  NO CASCADE BEFORE UPDATE
  ON EMBRYO_XFER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_EMBRYO_XFER AFTER DELETE ON EMBRYO_XFER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EMBRYO_SIRE
      WHERE
        EMBRYO_SIRE.DOC_NUM = old.DOC_NUM
 !!

CREATE  TRIGGER tD_EMBRYO_XFER2 AFTER DELETE ON EMBRYO_XFER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EMBRYO_RCPNT
      WHERE
        EMBRYO_RCPNT.DOC_NUM = old.DOC_NUM
 !!


CREATE TRIGGER D0587U01
  NO CASCADE BEFORE UPDATE
  ON EMPL_COMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0588U01
  NO CASCADE BEFORE UPDATE
  ON EMPL_POSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0374I52
  NO CASCADE BEFORE INSERT
  ON EMPL_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0374I51
  NO CASCADE BEFORE INSERT
  ON EMPL_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0374U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON EMPL_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0374I54
  NO CASCADE BEFORE INSERT
  ON EMPL_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0374U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON EMPL_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0374U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON EMPL_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0374U01
  NO CASCADE BEFORE UPDATE
  ON EMPL_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0374I53
  NO CASCADE BEFORE INSERT
  ON EMPL_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0374U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON EMPL_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0377I51
  NO CASCADE BEFORE INSERT
  ON EMPL_SUPR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0377I52
  NO CASCADE BEFORE INSERT
  ON EMPL_SUPR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0377U01
  NO CASCADE BEFORE UPDATE
  ON EMPL_SUPR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0377U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON EMPL_SUPR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0377U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON EMPL_SUPR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0578U01
  NO CASCADE BEFORE UPDATE
  ON EMPL_USER_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0589U01
  NO CASCADE BEFORE UPDATE
  ON EMPLOYEE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_EMPLOYEE AFTER DELETE ON EMPLOYEE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_USER_ID WHERE EMPL_USER_ID.EMPL_NO = old.EMPL_NO) > 0)
    /* erwin Builtin Trigger */
    /* EMPLOYEE  EMPL_USER_ID on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087ab", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPL_USER_ID"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0589_003", FK_COLUMNS="EMPL_NO" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EMPLOYEE because EMPL_USER_ID exists.')
 !!

CREATE  TRIGGER tD_EMPLOYEE2 AFTER DELETE ON EMPLOYEE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_POSN WHERE EMPL_POSN.EMPL_NO = old.EMPL_NO) > 0)
    /* erwin Builtin Trigger */
    /* EMPLOYEE  EMPL_POSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086cc", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPL_POSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0589_002", FK_COLUMNS="EMPL_NO" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EMPLOYEE because EMPL_POSN exists.')
 !!

CREATE  TRIGGER tD_EMPLOYEE3 AFTER DELETE ON EMPLOYEE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_COMP WHERE EMPL_COMP.EMPL_NO = old.EMPL_NO) > 0)
    /* erwin Builtin Trigger */
    /* EMPLOYEE  EMPL_COMP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f51", PARENT_OWNER="", PARENT_TABLE="EMPLOYEE"
    CHILD_OWNER="", CHILD_TABLE="EMPL_COMP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0589_001", FK_COLUMNS="EMPL_NO" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EMPLOYEE because EMPL_COMP exists.')
 !!


CREATE TRIGGER D0773U01
  NO CASCADE BEFORE UPDATE
  ON EXCLUDED_SPS_COW
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE  TRIGGER tD_EXPLAIN_INSTANC AFTER DELETE ON EXPLAIN_INSTANCE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_STATEMENT
      WHERE
        EXPLAIN_STATEMENT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_STATEMENT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_STATEMENT.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_STATEMENT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_STATEMENT.SOURCE_VERSION = old.SOURCE_VERSION
 !!

CREATE  TRIGGER tU_EXPLAIN_INSTANC NO CASCADE BEFORE UPDATE ON EXPLAIN_INSTANCE
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_INSTANCE WHERE EXPLAIN_INSTANCE.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                    EXPLAIN_INSTANCE.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                    EXPLAIN_INSTANCE.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                    EXPLAIN_INSTANCE.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                    EXPLAIN_INSTANCE.SOURCE_VERSION <> new.SOURCE_VERSION) > 0) AND
((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                               EXPLAIN_STATEMENT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                               EXPLAIN_STATEMENT.SOURCE_NAME = old.SOURCE_NAME AND
                                               EXPLAIN_STATEMENT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                               EXPLAIN_STATEMENT.SOURCE_VERSION = old.SOURCE_VERSION) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_INSTANCE  EXPLAIN_STATEMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000b935", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_STATEMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145111830", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_INSTANCE because EXPLAIN_STATEMENT exists.')
 !!


CREATE  TRIGGER tD_EXPLAIN_STATEME AFTER DELETE ON EXPLAIN_STATEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_OBJECT
      WHERE
        EXPLAIN_OBJECT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_OBJECT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_OBJECT.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_OBJECT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_OBJECT.SOURCE_VERSION = old.SOURCE_VERSION AND
        EXPLAIN_OBJECT.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
        EXPLAIN_OBJECT.STMTNO = old.STMTNO AND
        EXPLAIN_OBJECT.SECTNO = old.SECTNO
 !!

CREATE  TRIGGER tD_EXPLAIN_STATEM2 AFTER DELETE ON EXPLAIN_STATEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_ARGUMENT
      WHERE
        EXPLAIN_ARGUMENT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_ARGUMENT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_ARGUMENT.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_ARGUMENT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_ARGUMENT.SOURCE_VERSION = old.SOURCE_VERSION AND
        EXPLAIN_ARGUMENT.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
        EXPLAIN_ARGUMENT.STMTNO = old.STMTNO AND
        EXPLAIN_ARGUMENT.SECTNO = old.SECTNO
 !!

CREATE  TRIGGER tD_EXPLAIN_STATEM3 AFTER DELETE ON EXPLAIN_STATEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_STREAM
      WHERE
        EXPLAIN_STREAM.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_STREAM.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_STREAM.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_STREAM.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_STREAM.SOURCE_VERSION = old.SOURCE_VERSION AND
        EXPLAIN_STREAM.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
        EXPLAIN_STREAM.STMTNO = old.STMTNO AND
        EXPLAIN_STREAM.SECTNO = old.SECTNO
 !!

CREATE  TRIGGER tD_EXPLAIN_STATEM4 AFTER DELETE ON EXPLAIN_STATEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_PREDICATE
      WHERE
        EXPLAIN_PREDICATE.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_PREDICATE.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_PREDICATE.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_PREDICATE.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_PREDICATE.SOURCE_VERSION = old.SOURCE_VERSION AND
        EXPLAIN_PREDICATE.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
        EXPLAIN_PREDICATE.STMTNO = old.STMTNO AND
        EXPLAIN_PREDICATE.SECTNO = old.SECTNO
 !!

CREATE  TRIGGER tD_EXPLAIN_STATEM5 AFTER DELETE ON EXPLAIN_STATEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM EXPLAIN_OPERATOR
      WHERE
        EXPLAIN_OPERATOR.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
        EXPLAIN_OPERATOR.EXPLAIN_TIME = old.EXPLAIN_TIME AND
        EXPLAIN_OPERATOR.SOURCE_NAME = old.SOURCE_NAME AND
        EXPLAIN_OPERATOR.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
        EXPLAIN_OPERATOR.SOURCE_VERSION = old.SOURCE_VERSION AND
        EXPLAIN_OPERATOR.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
        EXPLAIN_OPERATOR.STMTNO = old.STMTNO AND
        EXPLAIN_OPERATOR.SECTNO = old.SECTNO
 !!

CREATE  TRIGGER tU_EXPLAIN_STATEME NO CASCADE BEFORE UPDATE ON EXPLAIN_STATEMENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                     EXPLAIN_STATEMENT.SOURCE_VERSION <> new.SOURCE_VERSION OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_LEVEL <> new.EXPLAIN_LEVEL OR 
                                                     EXPLAIN_STATEMENT.STMTNO <> new.STMTNO OR 
                                                     EXPLAIN_STATEMENT.SECTNO <> new.SECTNO) > 0) AND
((SELECT count(*) FROM EXPLAIN_OBJECT WHERE EXPLAIN_OBJECT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                            EXPLAIN_OBJECT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                            EXPLAIN_OBJECT.SOURCE_NAME = old.SOURCE_NAME AND
                                            EXPLAIN_OBJECT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                            EXPLAIN_OBJECT.SOURCE_VERSION = old.SOURCE_VERSION AND
                                            EXPLAIN_OBJECT.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
                                            EXPLAIN_OBJECT.STMTNO = old.STMTNO AND
                                            EXPLAIN_OBJECT.SECTNO = old.SECTNO) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_STATEMENT  EXPLAIN_OBJECT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000c955", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_STATEMENT"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_OBJECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145112290", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION""EXPLAIN_LEVEL""STMTNO""SECTNO" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_STATEMENT because EXPLAIN_OBJECT exists.')
 !!

CREATE  TRIGGER tU_EXPLAIN_STATEM2 NO CASCADE BEFORE UPDATE ON EXPLAIN_STATEMENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                     EXPLAIN_STATEMENT.SOURCE_VERSION <> new.SOURCE_VERSION OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_LEVEL <> new.EXPLAIN_LEVEL OR 
                                                     EXPLAIN_STATEMENT.STMTNO <> new.STMTNO OR 
                                                     EXPLAIN_STATEMENT.SECTNO <> new.SECTNO) > 0) AND
((SELECT count(*) FROM EXPLAIN_ARGUMENT WHERE EXPLAIN_ARGUMENT.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                              EXPLAIN_ARGUMENT.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                              EXPLAIN_ARGUMENT.SOURCE_NAME = old.SOURCE_NAME AND
                                              EXPLAIN_ARGUMENT.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                              EXPLAIN_ARGUMENT.SOURCE_VERSION = old.SOURCE_VERSION AND
                                              EXPLAIN_ARGUMENT.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
                                              EXPLAIN_ARGUMENT.STMTNO = old.STMTNO AND
                                              EXPLAIN_ARGUMENT.SECTNO = old.SECTNO) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_STATEMENT  EXPLAIN_ARGUMENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000c534", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_STATEMENT"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_ARGUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145112030", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION""EXPLAIN_LEVEL""STMTNO""SECTNO" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_STATEMENT because EXPLAIN_ARGUMENT exists.')
 !!

CREATE  TRIGGER tU_EXPLAIN_STATEM3 NO CASCADE BEFORE UPDATE ON EXPLAIN_STATEMENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                     EXPLAIN_STATEMENT.SOURCE_VERSION <> new.SOURCE_VERSION OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_LEVEL <> new.EXPLAIN_LEVEL OR 
                                                     EXPLAIN_STATEMENT.STMTNO <> new.STMTNO OR 
                                                     EXPLAIN_STATEMENT.SECTNO <> new.SECTNO) > 0) AND
((SELECT count(*) FROM EXPLAIN_STREAM WHERE EXPLAIN_STREAM.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                            EXPLAIN_STREAM.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                            EXPLAIN_STREAM.SOURCE_NAME = old.SOURCE_NAME AND
                                            EXPLAIN_STREAM.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                            EXPLAIN_STREAM.SOURCE_VERSION = old.SOURCE_VERSION AND
                                            EXPLAIN_STREAM.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
                                            EXPLAIN_STREAM.STMTNO = old.STMTNO AND
                                            EXPLAIN_STREAM.SECTNO = old.SECTNO) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_STATEMENT  EXPLAIN_STREAM on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000c1ed", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_STATEMENT"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_STREAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145113300", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION""EXPLAIN_LEVEL""STMTNO""SECTNO" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_STATEMENT because EXPLAIN_STREAM exists.')
 !!

CREATE  TRIGGER tU_EXPLAIN_STATEM4 NO CASCADE BEFORE UPDATE ON EXPLAIN_STATEMENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                     EXPLAIN_STATEMENT.SOURCE_VERSION <> new.SOURCE_VERSION OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_LEVEL <> new.EXPLAIN_LEVEL OR 
                                                     EXPLAIN_STATEMENT.STMTNO <> new.STMTNO OR 
                                                     EXPLAIN_STATEMENT.SECTNO <> new.SECTNO) > 0) AND
((SELECT count(*) FROM EXPLAIN_PREDICATE WHERE EXPLAIN_PREDICATE.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                               EXPLAIN_PREDICATE.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                               EXPLAIN_PREDICATE.SOURCE_NAME = old.SOURCE_NAME AND
                                               EXPLAIN_PREDICATE.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                               EXPLAIN_PREDICATE.SOURCE_VERSION = old.SOURCE_VERSION AND
                                               EXPLAIN_PREDICATE.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
                                               EXPLAIN_PREDICATE.STMTNO = old.STMTNO AND
                                               EXPLAIN_PREDICATE.SECTNO = old.SECTNO) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_STATEMENT  EXPLAIN_PREDICATE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000c93c", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_STATEMENT"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_PREDICATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145113020", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION""EXPLAIN_LEVEL""STMTNO""SECTNO" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_STATEMENT because EXPLAIN_PREDICATE exists.')
 !!

CREATE  TRIGGER tU_EXPLAIN_STATEM5 NO CASCADE BEFORE UPDATE ON EXPLAIN_STATEMENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM EXPLAIN_STATEMENT WHERE EXPLAIN_STATEMENT.EXPLAIN_REQUESTER <> new.EXPLAIN_REQUESTER OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_TIME <> new.EXPLAIN_TIME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_NAME <> new.SOURCE_NAME OR 
                                                     EXPLAIN_STATEMENT.SOURCE_SCHEMA <> new.SOURCE_SCHEMA OR 
                                                     EXPLAIN_STATEMENT.SOURCE_VERSION <> new.SOURCE_VERSION OR 
                                                     EXPLAIN_STATEMENT.EXPLAIN_LEVEL <> new.EXPLAIN_LEVEL OR 
                                                     EXPLAIN_STATEMENT.STMTNO <> new.STMTNO OR 
                                                     EXPLAIN_STATEMENT.SECTNO <> new.SECTNO) > 0) AND
((SELECT count(*) FROM EXPLAIN_OPERATOR WHERE EXPLAIN_OPERATOR.EXPLAIN_REQUESTER = old.EXPLAIN_REQUESTER AND
                                              EXPLAIN_OPERATOR.EXPLAIN_TIME = old.EXPLAIN_TIME AND
                                              EXPLAIN_OPERATOR.SOURCE_NAME = old.SOURCE_NAME AND
                                              EXPLAIN_OPERATOR.SOURCE_SCHEMA = old.SOURCE_SCHEMA AND
                                              EXPLAIN_OPERATOR.SOURCE_VERSION = old.SOURCE_VERSION AND
                                              EXPLAIN_OPERATOR.EXPLAIN_LEVEL = old.EXPLAIN_LEVEL AND
                                              EXPLAIN_OPERATOR.STMTNO = old.STMTNO AND
                                              EXPLAIN_OPERATOR.SECTNO = old.SECTNO) > 0))
  /* erwin Builtin Trigger */
  /* EXPLAIN_STATEMENT  EXPLAIN_OPERATOR on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000cd51", PARENT_OWNER="", PARENT_TABLE="EXPLAIN_STATEMENT"
    CHILD_OWNER="", CHILD_TABLE="EXPLAIN_OPERATOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SQL051104145112500", FK_COLUMNS="EXPLAIN_REQUESTER""EXPLAIN_TIME""SOURCE_NAME""SOURCE_SCHEMA""
              SOURCE_VERSION""EXPLAIN_LEVEL""STMTNO""SECTNO" */
       SIGNAL SQLSTATE '75001' ('Cannot update EXPLAIN_STATEMENT because EXPLAIN_OPERATOR exists.')
 !!


CREATE TRIGGER D0108U01
  NO CASCADE BEFORE UPDATE
  ON EZ_LINK_ANML_MILK_SAMPLE_FLASK
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0304U01
  NO CASCADE BEFORE UPDATE
  ON EZ_LINK_APPL_EXCEPT_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0610U01
  NO CASCADE BEFORE UPDATE
  ON EZ_LINK_EXCEPT_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_EZ_LINK_EXCEPT_ AFTER DELETE ON EZ_LINK_EXCEPT_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_APPL_EXCEPT_LOG WHERE EZ_LINK_APPL_EXCEPT_LOG.EXCEPT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* EZ_LINK_EXCEPT_REF  EZ_LINK_APPL_EXCEPT_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009d1b", PARENT_OWNER="", PARENT_TABLE="EZ_LINK_EXCEPT_REF"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_APPL_EXCEPT_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0610_001", FK_COLUMNS="EXCEPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EZ_LINK_EXCEPT_REF because EZ_LINK_APPL_EXCEPT_LOG exists.')
 !!


CREATE TRIGGER D0611I01
  NO CASCADE BEFORE INSERT
  ON EZ_LINK_FARM_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sts_cd IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'EZ_LINK_FARM_VISIT_STS_CD'
      AND c.cd = new.sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0611' 
('D0611I01: invalid status code')
 !!


CREATE TRIGGER D0611U01
  NO CASCADE BEFORE UPDATE
  ON EZ_LINK_FARM_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0611U02
  NO CASCADE BEFORE UPDATE OF 
                    sts_cd
  ON EZ_LINK_FARM_VISIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.sts_cd IS NOT NULL
  AND VALUE(old.sts_cd,'~') != new.sts_cd
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'EZ_LINK_FARM_VISIT_STS_CD'
      AND c.cd = new.sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0611' 
('D0611U02: invalid status code')
 !!


CREATE TRIGGER D0611I02
  NO CASCADE BEFORE INSERT
  ON EZ_LINK_FARM_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_tp_id IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'HERD_TEST_TYPE_ID'
      AND c.cd = LTRIM(CHAR(new.test_tp_id))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0611' 
('D0611I02: invalid test type id')
 !!


CREATE TRIGGER D0611U03
  NO CASCADE BEFORE UPDATE OF 
                    test_tp_id
  ON EZ_LINK_FARM_VISIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.test_tp_id IS NOT NULL
  AND VALUE(old.test_tp_id,-1) != new.test_tp_id
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'HERD_TEST_TYPE_ID'
      AND c.cd = LTRIM(CHAR(new.test_tp_id))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0611' 
('D0611U03: invalid test type id')
 !!


CREATE  TRIGGER tD_EZ_LINK_FARM_VI AFTER DELETE ON EZ_LINK_FARM_VISIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_ANML_MILK_SAMPLE_FLASK WHERE EZ_LINK_ANML_MILK_SAMPLE_FLASK.RGN_CD = old.RGN_CD AND
                                                                 EZ_LINK_ANML_MILK_SAMPLE_FLASK.HERD_CD = old.HERD_CD AND
                                                                 EZ_LINK_ANML_MILK_SAMPLE_FLASK.TEST_DATE = old.TEST_DATE AND
                                                                 EZ_LINK_ANML_MILK_SAMPLE_FLASK.EZ_LINK_SERIAL_NUM = old.EZ_LINK_SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* EZ_LINK_FARM_VISIT  EZ_LINK_ANML_MILK_SAMPLE_FLASK on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000b563", PARENT_OWNER="", PARENT_TABLE="EZ_LINK_FARM_VISIT"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_ANML_MILK_SAMPLE_FLASK"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0611_001", FK_COLUMNS="RGN_CD""HERD_CD""TEST_DATE""EZ_LINK_SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete EZ_LINK_FARM_VISIT because EZ_LINK_ANML_MILK_SAMPLE_FLASK exists.')
 !!


CREATE TRIGGER D0180U01
  NO CASCADE BEFORE UPDATE
  ON FARM_ACTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_FARM_ACTY AFTER DELETE ON FARM_ACTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PRPS WHERE RPRT_PRPS.FARM_ACTY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* FARM_ACTY  RPRT_PRPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c2c", PARENT_OWNER="", PARENT_TABLE="FARM_ACTY"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PRPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0180_001", FK_COLUMNS="FARM_ACTY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete FARM_ACTY because RPRT_PRPS exists.')
 !!


CREATE TRIGGER D0779U01
  NO CASCADE BEFORE UPDATE
  ON FAT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0780U01
  NO CASCADE BEFORE UPDATE
  ON FAT_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0781U01
  NO CASCADE BEFORE UPDATE
  ON FAT_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_FAT_RUN AFTER DELETE ON FAT_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FAT_RUN_AE_BRD WHERE FAT_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                 FAT_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* FAT_RUN  FAT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c7e", PARENT_OWNER="", PARENT_TABLE="FAT_RUN"
    CHILD_OWNER="", CHILD_TABLE="FAT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0781_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete FAT_RUN because FAT_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0782U01
  NO CASCADE BEFORE UPDATE
  ON FAT_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0179U01
  NO CASCADE BEFORE UPDATE
  ON FATE_CAUSE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0179I01
  NO CASCADE BEFORE INSERT
  ON FATE_CAUSE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sex_cd IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEX_CD'
      AND c.cd = new.sex_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0169' 
('D0179I01: invalid sex code')
 !!


CREATE TRIGGER D0179U02
  NO CASCADE BEFORE UPDATE OF 
                    sex_cd
  ON FATE_CAUSE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.sex_cd IS NOT NULL
  AND VALUE(old.sex_cd,'~') != new.sex_cd
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEX_CD'
      AND c.cd = new.sex_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0179'
('D0179U02: invalid sex code')
 !!


CREATE  TRIGGER tD_FATE_CAUSE AFTER DELETE ON FATE_CAUSE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ANML WHERE HERD_ANML.FATE_CAUSE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* FATE_CAUSE  HERD_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e81", PARENT_OWNER="", PARENT_TABLE="FATE_CAUSE"
    CHILD_OWNER="", CHILD_TABLE="HERD_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0179_001", FK_COLUMNS="FATE_CAUSE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete FATE_CAUSE because HERD_ANML exists.')
 !!

CREATE  TRIGGER tD_FATE_CAUSE2 AFTER DELETE ON FATE_CAUSE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_FATE_CAUSE WHERE MINDA_OPT_FATE_CAUSE.FATE_CAUSE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* FATE_CAUSE  MINDA_OPT_FATE_CAUSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092a6", PARENT_OWNER="", PARENT_TABLE="FATE_CAUSE"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_FATE_CAUSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0179_002", FK_COLUMNS="FATE_CAUSE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete FATE_CAUSE because MINDA_OPT_FATE_CAUSE exists.')
 !!


CREATE TRIGGER D0019I01
  NO CASCADE BEFORE INSERT
  ON FEMALE_REPROD_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.obs_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FEMALE_REPROD_STS_OBS_CD'
      AND c.cd = new.obs_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0019'
('D0019I01: invalid observation code')
 !!


CREATE TRIGGER D0019I02
  NO CASCADE BEFORE INSERT
  ON FEMALE_REPROD_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.obs_cmt_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FEMALE_REPROD_STS_OBS_CMT_CD'
      AND c.cd = new.obs_cmt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0019'
('D0019I02: invalid observation comment code')
 !!


CREATE TRIGGER D0019I51
  NO CASCADE BEFORE INSERT
  ON FEMALE_REPROD_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.obs_date_d IS NULL 
  AND new.obs_date IS NOT NULL
   OR CHAR(new.obs_date_d,ISO) = '0001-01-01'
  AND new.obs_date IS NOT NULL)
SET new.obs_date_d =
  CASE WHEN new.obs_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.obs_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0019I52
  NO CASCADE BEFORE INSERT
  ON FEMALE_REPROD_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.obs_date IS NULL 
  AND new.obs_date_d IS NOT NULL
  AND CHAR(new.obs_date_d,ISO) != '0001-01-01'
   OR new.obs_date = 0
  AND new.obs_date_d IS NOT NULL
  AND CHAR(new.obs_date_d,ISO) != '0001-01-01')
SET new.obs_date =
  CASE WHEN new.obs_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.obs_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.obs_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.obs_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0019U01
  NO CASCADE BEFORE UPDATE
  ON FEMALE_REPROD_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0019U02
  NO CASCADE BEFORE UPDATE OF 
                    obs_cmt_cd
  ON FEMALE_REPROD_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.obs_cd,'~') != VALUE(old.obs_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FEMALE_REPROD_STS_OBS_CD'
      AND c.cd = new.obs_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0019'
('D0019U02: invalid observation code')
 !!


CREATE TRIGGER D0019U03
  NO CASCADE BEFORE UPDATE
  ON FEMALE_REPROD_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.obs_cmt_cd IS NOT NULL
 AND VALUE(old.obs_cmt_cd,'~') != new.obs_cmt_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FEMALE_REPROD_STS_OBS_CMT_CD'
      AND c.cd = new.obs_cmt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0019'
('D0019U03: invalid observation comment code')
 !!


CREATE TRIGGER D0019U51
  NO CASCADE BEFORE UPDATE OF 
                    obs_date
  ON FEMALE_REPROD_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.obs_date != new.obs_date
   OR old.obs_date IS NULL AND new.obs_date IS NOT NULL
   OR old.obs_date IS NOT NULL AND new.obs_date IS NULL)
SET new.obs_date_d =
  CASE WHEN new.obs_date = 0 OR new.obs_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.obs_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0019U52
  NO CASCADE BEFORE UPDATE OF 
                    obs_date_d
  ON FEMALE_REPROD_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.obs_date_d != new.obs_date_d
   OR old.obs_date_d IS NULL and new.obs_date_d IS NOT NULL
   OR old.obs_date_d IS NOT NULL and new.obs_date_d IS NULL)
SET new.obs_date =
  CASE WHEN new.obs_date_d IS NULL OR new.obs_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.obs_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.obs_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.obs_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0205I01
  NO CASCADE BEFORE INSERT
  ON FERT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0205'
('D0205I01: invalid ae source code')
 !!


CREATE TRIGGER D0205U02
  NO CASCADE BEFORE UPDATE
  ON FERT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0205'
('D0205U02: invalid ae source code')
 !!


CREATE TRIGGER D0205U01
  NO CASCADE BEFORE UPDATE
  ON FERT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0159U01
  NO CASCADE BEFORE UPDATE
  ON FERT_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0206U01
  NO CASCADE BEFORE UPDATE
  ON FERT_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_FERT_RUN AFTER DELETE ON FERT_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FERT_RUN_AE_BRD WHERE FERT_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                  FERT_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* FERT_RUN  FERT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009b3c", PARENT_OWNER="", PARENT_TABLE="FERT_RUN"
    CHILD_OWNER="", CHILD_TABLE="FERT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0206_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete FERT_RUN because FERT_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0270U01
  NO CASCADE BEFORE UPDATE
  ON FERT_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0268U01
  NO CASCADE BEFORE UPDATE
  ON FR_74_77_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0266U01
  NO CASCADE BEFORE UPDATE
  ON FR_JNR_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0267U01
  NO CASCADE BEFORE UPDATE
  ON FR_SNR_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0084I01
  NO CASCADE BEFORE INSERT
  ON FRZ_USE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
          SELECT 1 FROM geo_area ga
          WHERE ga.id = new.smn_alcn_rgn_id
          AND ga.geo_area_tp_cd = 'SAR')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0084'
('D0084I01: the geographic area type must be a semen allcn region')
 !!


CREATE TRIGGER D0084U01
  NO CASCADE BEFORE UPDATE
  ON FRZ_USE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
          SELECT 1 FROM geo_area ga
          WHERE ga.id = new.smn_alcn_rgn_id
          AND ga.geo_area_tp_cd = 'SAR')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0084'
('D0084U01: the geographic area type must be a semen allcn region')
 !!


CREATE TRIGGER D0084U02
  NO CASCADE BEFORE UPDATE
  ON FRZ_USE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0032D01
  AFTER DELETE
  ON FUTR_MTNG_PLAN_DTL
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (old.eff_date >= CURRENT DATE)
INSERT INTO ab_mtng_plan_log 
  (map_ref, herd_num, ssn, num, upd_time) 
  VALUES (old.map_ref, old.herd_num, old.ssn, old.mtng_plan_num, 
CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0032I01
  AFTER INSERT
  ON FUTR_MTNG_PLAN_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  new.map_ref,
  new.herd_num,
  new.ssn,
  new.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0032U02
  NO CASCADE BEFORE UPDATE
  ON FUTR_MTNG_PLAN_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0032U01
  AFTER UPDATE
  ON FUTR_MTNG_PLAN_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (map_ref, herd_num, ssn, num, upd_time)
  VALUES (new.map_ref, new.herd_num, new.ssn, new.mtng_plan_num, CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0060I01
  NO CASCADE BEFORE INSERT
  ON GEO_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.srch_descr = UPPER(new.descr)
 !!


CREATE TRIGGER D0060U01
  NO CASCADE BEFORE UPDATE OF 
                    descr
  ON GEO_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.srch_descr = UPPER(new.descr)
 !!


CREATE TRIGGER D0060U02
  NO CASCADE BEFORE UPDATE
  ON GEO_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GEO_AREA AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROPERTY WHERE PROPERTY.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  PROPERTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008616", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="PROPERTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_026", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because PROPERTY exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA2 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_ERR_SUMM WHERE AE_ERR_SUMM.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  AE_ERR_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008641", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="AE_ERR_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_032", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because AE_ERR_SUMM exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA3 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM_PCT WHERE AE_RUN_SUMM_PCT.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  AE_RUN_SUMM_PCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000889a", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM_PCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_040", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because AE_RUN_SUMM_PCT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA4 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_RUN_SUMM WHERE AE_RUN_SUMM.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  AE_RUN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089fb", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="AE_RUN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_039", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because AE_RUN_SUMM exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA5 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AREA_TRAIT WHERE AREA_TRAIT.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  AREA_TRAIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008588", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="AREA_TRAIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_029", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because AREA_TRAIT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA6 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAR_DESP_ORDER WHERE SAR_DESP_ORDER.SAR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SAR_DESP_ORDER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085d2", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SAR_DESP_ORDER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_025", FK_COLUMNS="SAR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SAR_DESP_ORDER exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA7 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AE_EXTR_ERR WHERE AE_EXTR_ERR.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  AE_EXTR_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086e9", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="AE_EXTR_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_028", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because AE_EXTR_ERR exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA8 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_SAR_TRGT WHERE SPS_SAR_TRGT.SAR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_SAR_TRGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b4f", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_SAR_TRGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_013", FK_COLUMNS="SAR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_SAR_TRGT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA9 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_SAR_BULL_TRGT WHERE SPS_SAR_BULL_TRGT.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_SAR_BULL_TRGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000942c", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_SAR_BULL_TRGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_020", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_SAR_BULL_TRGT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA10 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_PRDCT_DTR WHERE SPS_PRDCT_DTR.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_PRDCT_DTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008560", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_PRDCT_DTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_019", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_PRDCT_DTR exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA11 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_OPTM_ALCN WHERE SPS_OPTM_ALCN.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_OPTM_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b5b", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_OPTM_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_018", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_OPTM_ALCN exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA12 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MTNG WHERE SPS_MTNG.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_MTNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008558", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_MTNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_017", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_MTNG exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA13 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MTNG WHERE SPS_MTNG.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_MTNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007e90", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_MTNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_012", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_MTNG exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA14 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_LLL_UTLSTN WHERE SPS_LLL_UTLSTN.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_LLL_UTLSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a17", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_LLL_UTLSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_011", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_LLL_UTLSTN exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA15 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_INSEM_DTR WHERE SPS_INSEM_DTR.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_INSEM_DTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086a3", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_INSEM_DTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_010", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_INSEM_DTR exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA16 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_DESP_DMND WHERE SPS_DESP_DMND.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_DESP_DMND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008add", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_DESP_DMND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_016", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_DESP_DMND exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA17 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_BULL_EST_DTRS WHERE SPS_BULL_EST_DTRS.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_BULL_EST_DTRS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000984c", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_BULL_EST_DTRS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_015", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_BULL_EST_DTRS exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA18 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SMN_DIST_PT WHERE SMN_DIST_PT.SMN_ALCN_RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SMN_DIST_PT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008217", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SMN_DIST_PT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_014", FK_COLUMNS="SMN_ALCN_RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SMN_DIST_PT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA19 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SUPPL_SIRE WHERE INTL_SUPPL_SIRE.COUNTRY_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  INTL_SUPPL_SIRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008370", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="INTL_SUPPL_SIRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_024", FK_COLUMNS="COUNTRY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because INTL_SUPPL_SIRE exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA20 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SIRE WHERE INTL_SIRE.COUNTRY_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  INTL_SIRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085ee", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="INTL_SIRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_023", FK_COLUMNS="COUNTRY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because INTL_SIRE exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA21 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ROAD_ARC WHERE ROAD_ARC.ISLAND_GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  ROAD_ARC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f86", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="ROAD_ARC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_007", FK_COLUMNS="ISLAND_GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because ROAD_ARC exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA22 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f9f", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_009", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because PRDCT_DTR_PROB exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA23 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_PARTY WHERE INTL_PARTY.COUNTRY_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  INTL_PARTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f7c", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="INTL_PARTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_022", FK_COLUMNS="COUNTRY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because INTL_PARTY exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA24 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SUPPLIER_EID_HDR WHERE SUPPLIER_EID_HDR.GEO_AREA_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SUPPLIER_EID_HDR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009347", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SUPPLIER_EID_HDR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_041", FK_COLUMNS="GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SUPPLIER_EID_HDR exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA25 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM NC_SUBM_MODEL WHERE NC_SUBM_MODEL.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  NC_SUBM_MODEL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000895f", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="NC_SUBM_MODEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_042", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because NC_SUBM_MODEL exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA26 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LLL_DTR_PROB WHERE LLL_DTR_PROB.RGN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  LLL_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009246", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="LLL_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_008", FK_COLUMNS="RGN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because LLL_DTR_PROB exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA27 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GEO_AREA_STRUCT WHERE GEO_AREA_STRUCT.PRNT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  GEO_AREA_STRUCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083c7", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="GEO_AREA_STRUCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_006", FK_COLUMNS="PRNT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because GEO_AREA_STRUCT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA28 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GEO_AREA_STRUCT WHERE GEO_AREA_STRUCT.ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  GEO_AREA_STRUCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008109", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="GEO_AREA_STRUCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_005", FK_COLUMNS="ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because GEO_AREA_STRUCT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA29 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML WHERE INTL_ANML.HDBK_COUNTRY_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  INTL_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ea2", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_021", FK_COLUMNS="HDBK_COUNTRY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because INTL_ANML exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA30 AFTER DELETE ON GEO_AREA
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_SALE_STOCK_LIST WHERE SPS_SALE_STOCK_LIST.PROVINCE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA  SPS_SALE_STOCK_LIST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c1", PARENT_OWNER="", PARENT_TABLE="GEO_AREA"
    CHILD_OWNER="", CHILD_TABLE="SPS_SALE_STOCK_LIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0060_022", FK_COLUMNS="PROVINCE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA because SPS_SALE_STOCK_LIST exists.')
 !!


CREATE TRIGGER D0106U02
  NO CASCADE BEFORE UPDATE
  ON GEO_AREA_STRUCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0061U01
  NO CASCADE BEFORE UPDATE
  ON GEO_AREA_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GEO_AREA_TP AFTER DELETE ON GEO_AREA_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GEO_AREA_TP_STRUCT WHERE GEO_AREA_TP_STRUCT.PRNT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA_TP  GEO_AREA_TP_STRUCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093f8", PARENT_OWNER="", PARENT_TABLE="GEO_AREA_TP"
    CHILD_OWNER="", CHILD_TABLE="GEO_AREA_TP_STRUCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0061_003", FK_COLUMNS="PRNT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA_TP because GEO_AREA_TP_STRUCT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA_TP2 AFTER DELETE ON GEO_AREA_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GEO_AREA_TP_STRUCT WHERE GEO_AREA_TP_STRUCT.CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA_TP  GEO_AREA_TP_STRUCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091eb", PARENT_OWNER="", PARENT_TABLE="GEO_AREA_TP"
    CHILD_OWNER="", CHILD_TABLE="GEO_AREA_TP_STRUCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0061_001", FK_COLUMNS="CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA_TP because GEO_AREA_TP_STRUCT exists.')
 !!

CREATE  TRIGGER tD_GEO_AREA_TP3 AFTER DELETE ON GEO_AREA_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GEO_AREA WHERE GEO_AREA.GEO_AREA_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GEO_AREA_TP  GEO_AREA on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008886", PARENT_OWNER="", PARENT_TABLE="GEO_AREA_TP"
    CHILD_OWNER="", CHILD_TABLE="GEO_AREA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0061_002", FK_COLUMNS="GEO_AREA_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GEO_AREA_TP because GEO_AREA exists.')
 !!


CREATE TRIGGER D0107U01
  NO CASCADE BEFORE UPDATE
  ON GEO_AREA_TP_STRUCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0880U01
  NO CASCADE BEFORE UPDATE
  ON GESTATION_LENGTH_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0671U01
  NO CASCADE BEFORE UPDATE
  ON GESTATION_LENGTH_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GESTATION_LENGT AFTER DELETE ON GESTATION_LENGTH_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GESTATION_LENGTH_RUN_AE_BRD WHERE GESTATION_LENGTH_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                              GESTATION_LENGTH_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* GESTATION_LENGTH_RUN  GESTATION_LENGTH_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000adde", PARENT_OWNER="", PARENT_TABLE="GESTATION_LENGTH_RUN"
    CHILD_OWNER="", CHILD_TABLE="GESTATION_LENGTH_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0671_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GESTATION_LENGTH_RUN because GESTATION_LENGTH_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0672U01
  NO CASCADE BEFORE UPDATE
  ON GESTATION_LENGTH_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0144U01
  NO CASCADE BEFORE UPDATE
  ON GIS_PT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GIS_PT AFTER DELETE ON GIS_PT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GIS_PT_PROP_DISTNC WHERE GIS_PT_PROP_DISTNC.GIS_PT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GIS_PT  GIS_PT_PROP_DISTNC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e06", PARENT_OWNER="", PARENT_TABLE="GIS_PT"
    CHILD_OWNER="", CHILD_TABLE="GIS_PT_PROP_DISTNC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0144_002", FK_COLUMNS="GIS_PT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GIS_PT because GIS_PT_PROP_DISTNC exists.')
 !!

CREATE  TRIGGER tD_GIS_PT2 AFTER DELETE ON GIS_PT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_EMPL_WKLD_CNSTR WHERE AB_EMPL_WKLD_CNSTR.GIS_PT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GIS_PT  AB_EMPL_WKLD_CNSTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083d6", PARENT_OWNER="", PARENT_TABLE="GIS_PT"
    CHILD_OWNER="", CHILD_TABLE="AB_EMPL_WKLD_CNSTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0144_001", FK_COLUMNS="GIS_PT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GIS_PT because AB_EMPL_WKLD_CNSTR exists.')
 !!


CREATE TRIGGER D0145U01
  NO CASCADE BEFORE UPDATE
  ON GIS_PT_PROP_DISTNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0146U01
  NO CASCADE BEFORE UPDATE
  ON GIS_PT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0332I01
  NO CASCADE BEFORE INSERT
  ON GM_ACCT_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (
NOT EXISTS (
  SELECT 1 FROM gm_core_prod gcp WHERE gcp.cd = new.gm_prod_cd)
AND NOT EXISTS (
  SELECT 1 FROM gm_sndry_prod gsp WHERE gsp.cd = new.gm_prod_cd)
)
SIGNAL SQLSTATE 'Z0332'
('D0332I01: the product must be either a core or sundry product')
 !!


CREATE TRIGGER D0332U01
  NO CASCADE BEFORE UPDATE OF 
                    gm_prod_cd
  ON GM_ACCT_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.gm_prod_cd != new.gm_prod_cd
AND NOT EXISTS (
  SELECT 1 FROM gm_core_prod gcp WHERE gcp.cd = new.gm_prod_cd)
AND NOT EXISTS (
  SELECT 1 FROM gm_sndry_prod gsp WHERE gsp.cd = new.gm_prod_cd)
)
SIGNAL SQLSTATE 'Z0332'
('D0332U01: the product must be either a core or sundry product')
 !!


CREATE TRIGGER D0332U02
  NO CASCADE BEFORE UPDATE
  ON GM_ACCT_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0803U02
  NO CASCADE BEFORE UPDATE OF 
                    spcs_cd,
                    brd_cd
  ON GM_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((VALUE(new.brd_cd,' ') != VALUE(old.brd_cd,' ')
   OR new.spcs_cd != old.spcs_cd)
  AND new.brd_cd IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 FROM breed b
    WHERE b.cd = new.brd_cd
      AND b.spcs_cd = new.spcs_cd) )
SIGNAL SQLSTATE 'Z0803'
('D0803U02: species incorrect for breed')
 !!


CREATE TRIGGER D0803U01
  NO CASCADE BEFORE UPDATE
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0803I02
  NO CASCADE BEFORE INSERT
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brd_cd IS NOT NULL
AND NOT EXISTS (
  SELECT 1 FROM breed b
  WHERE b.cd = new.brd_cd
    AND b.spcs_cd = new.spcs_cd) )
SIGNAL SQLSTATE 'Z0803'
('D0803I02: species incorrect for breed')
 !!


CREATE TRIGGER D0803I03
  NO CASCADE BEFORE INSERT
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.brth_date,'0001-01-01') > CURRENT DATE)
SIGNAL SQLSTATE 'Z0803'
('D0803I03: birth date must not be a future date')
 !!


CREATE TRIGGER D0803U03
  NO CASCADE BEFORE UPDATE OF 
                    brth_date
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.brth_date,'0001-01-01') > CURRENT DATE)
SIGNAL SQLSTATE 'Z0803'
('D0803U03: birth date must not be a future date')
 !!


CREATE TRIGGER D0803I04
  NO CASCADE BEFORE INSERT
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_id_pfx IS NOT NULL 
AND NOT EXISTS(
    SELECT 1 FROM pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.brth_id_pfx) )
SIGNAL SQLSTATE 'Z0803'
('D0803I04: animal id prefix does not exist')
 !!


CREATE TRIGGER D0803U04
  NO CASCADE BEFORE UPDATE OF 
                    brth_id_pfx
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_id_pfx IS NOT NULL 
AND NOT EXISTS(
    SELECT 1 FROM pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.brth_id_pfx) )
SIGNAL SQLSTATE 'Z0803'
('D0803U04: animal id prefix does not exist')
 !!


CREATE TRIGGER D0803I05
  NO CASCADE BEFORE INSERT
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_id_pfx IS NOT NULL 
AND EXISTS(
    SELECT 1 FROM gm_anml ga
    WHERE ga.brth_id_pfx = new.brth_id_pfx
      AND ga.brth_id_yr = new.brth_id_yr
      AND ga.brth_id_num = new.brth_id_num) )
SIGNAL SQLSTATE 'Z0803'
('D0803I05: duplicate birth id')
 !!


CREATE TRIGGER D0803I06
  NO CASCADE BEFORE INSERT
  ON GM_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.oseas_id IS NOT NULL 
AND EXISTS(
    SELECT 1 FROM gm_anml ga
    WHERE ga.oseas_id = new.oseas_id
      AND ga.oseas_ctry_cd = new.oseas_ctry_cd) )
SIGNAL SQLSTATE 'Z0803'
('D0803I06: duplicate overseas id')
 !!


CREATE TRIGGER D0803U05
  NO CASCADE BEFORE UPDATE OF 
                    brth_id_pfx,
                    brth_id_yr,
                    brth_id_num
  ON GM_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.brth_id_pfx IS NOT NULL 
AND (new.brth_id_pfx != old.brth_id_pfx OR
     new.brth_id_yr != old.brth_id_yr OR
     new.brth_id_num != old.brth_id_num)
AND EXISTS(
    SELECT 1 FROM gm_anml ga
    WHERE ga.brth_id_pfx = new.brth_id_pfx
      AND ga.brth_id_yr = new.brth_id_yr
      AND ga.brth_id_num = new.brth_id_num) )
SIGNAL SQLSTATE 'Z0803'
('D0803U05: duplicate birth id')
 !!


CREATE TRIGGER D0803U06
  NO CASCADE BEFORE UPDATE OF 
                    oseas_id,
                    oseas_ctry_cd
  ON GM_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.oseas_id IS NOT NULL 
AND (new.oseas_id != old.oseas_id OR
     new.oseas_ctry_cd != old.oseas_ctry_cd)
AND EXISTS(
    SELECT 1 FROM gm_anml ga
    WHERE ga.oseas_id = new.oseas_id
      AND ga.oseas_ctry_cd = new.oseas_ctry_cd) )
SIGNAL SQLSTATE 'Z0803'
('D0803U06: duplicate overseas id')
 !!


CREATE  TRIGGER tD_GM_ANML AFTER DELETE ON GM_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL WHERE GM_SMPL.GM_ANML_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_ANML  GM_SMPL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b03", PARENT_OWNER="", PARENT_TABLE="GM_ANML"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0803_001", FK_COLUMNS="GM_ANML_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_ANML because GM_SMPL exists.')
 !!

CREATE  TRIGGER tD_GM_ANML2 AFTER DELETE ON GM_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_GRP_ANML WHERE GM_PRNT_GRP_ANML.GM_ANML_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_ANML  GM_PRNT_GRP_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009331", PARENT_OWNER="", PARENT_TABLE="GM_ANML"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_GRP_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0803_002", FK_COLUMNS="GM_ANML_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_ANML because GM_PRNT_GRP_ANML exists.')
 !!


CREATE TRIGGER D0556U01
  NO CASCADE BEFORE UPDATE
  ON GM_ANML_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0450U01
  NO CASCADE BEFORE UPDATE
  ON GM_AUDIT_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0928U01
  NO CASCADE BEFORE UPDATE
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0928I03
  NO CASCADE BEFORE INSERT
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_profile_opt_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_HERD_PROFILE_OPT_CD'
      AND c.cd = new.herd_profile_opt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928I03: invalid herd profile option code')
 !!


CREATE TRIGGER D0928I01
  NO CASCADE BEFORE INSERT
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.booking_sts_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_BOOKING_STS_CD'
      AND c.cd = new.booking_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928I01: invalid booking status code')
 !!


CREATE TRIGGER D0928I02
  NO CASCADE BEFORE INSERT
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pymt_method_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_PYMT_METHOD_CD'
      AND c.cd = new.pymt_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928I02: invalid payment method code')
 !!


CREATE TRIGGER D0928U02
  NO CASCADE BEFORE UPDATE OF 
                    booking_sts_cd
  ON GM_BOOKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.booking_sts_cd IS NOT NULL
  AND VALUE(new.booking_sts_cd,'~') != VALUE(old.booking_sts_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_BOOKING_STS_CD'
      AND c.cd = new.booking_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928U02: invalid booking status code')
 !!


CREATE TRIGGER D0928U03
  NO CASCADE BEFORE UPDATE OF 
                    pymt_method_cd
  ON GM_BOOKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.pymt_method_cd IS NOT NULL
  AND VALUE(new.pymt_method_cd,'~') != VALUE(old.pymt_method_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_PYMT_METHOD_CD'
      AND c.cd = new.pymt_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928U03: invalid payment method code')
 !!


CREATE TRIGGER D0928U04
  NO CASCADE BEFORE UPDATE OF 
                    herd_profile_opt_cd
  ON GM_BOOKING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_profile_opt_cd IS NOT NULL
  AND VALUE(new.herd_profile_opt_cd,'~') != VALUE(old.herd_profile_opt_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_HERD_PROFILE_OPT_CD'
      AND c.cd = new.herd_profile_opt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0928'
('D0928U04: invalid herd profile option code')
 !!


CREATE TRIGGER D0928I04
  NO CASCADE BEFORE INSERT
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0928'
('D0928I04: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0928U05
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0928'
('D0928U05: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0928I05
  NO CASCADE BEFORE INSERT
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dm_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.dm_ptpt_cd) )
SIGNAL SQLSTATE 'Z0928'
('D0928I05: dm_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0928U06
  NO CASCADE BEFORE UPDATE OF 
                    dm_ptpt_cd
  ON GM_BOOKING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dm_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.dm_ptpt_cd) )
SIGNAL SQLSTATE 'Z0928'
('D0928U06: dm_ptpt_cd does not exist on pfx_user')
 !!


CREATE  TRIGGER tD_GM_BOOKING AFTER DELETE ON GM_BOOKING
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.BOOKING_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_BOOKING  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bc0", PARENT_OWNER="", PARENT_TABLE="GM_BOOKING"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0928_001", FK_COLUMNS="BOOKING_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_BOOKING because GM_SUBM exists.')
 !!


CREATE TRIGGER D0333U01
  NO CASCADE BEFORE UPDATE
  ON GM_CLNT_CTRCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_CLNT_CTRCT AFTER DELETE ON GM_CLNT_CTRCT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.PTPT_CD = old.PTPT_CD AND
                                          GM_SUBM.CTRCT_TP_CD = old.CTRCT_TP_CD AND
                                          GM_SUBM.CLNT_CTRCT_ST_DATE = old.ST_DATE) > 0)
    /* erwin Builtin Trigger */
    /* GM_CLNT_CTRCT  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009467", PARENT_OWNER="", PARENT_TABLE="GM_CLNT_CTRCT"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0333_001", FK_COLUMNS="PTPT_CD""CTRCT_TP_CD""CLNT_CTRCT_ST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_CLNT_CTRCT because GM_SUBM exists.')
 !!


CREATE TRIGGER D0555U51
  NO CASCADE BEFORE UPDATE OF 
                    end_brth_date
  ON GM_CLNT_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_brth_date != new.end_brth_date
   OR old.end_brth_date IS NULL AND new.end_brth_date IS NOT NULL
   OR old.end_brth_date IS NOT NULL AND new.end_brth_date IS NULL)
SET new.end_brth_date_d =
  CASE WHEN new.end_brth_date = 0 OR new.end_brth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0555I52
  NO CASCADE BEFORE INSERT
  ON GM_CLNT_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_brth_date IS NULL 
  AND new.end_brth_date_d IS NOT NULL
  AND CHAR(new.end_brth_date_d,ISO) != '0001-01-01'
   OR new.end_brth_date = 0
  AND new.end_brth_date_d IS NOT NULL
  AND CHAR(new.end_brth_date_d,ISO) != '0001-01-01')
SET new.end_brth_date =
  CASE WHEN new.end_brth_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0555U54
  NO CASCADE BEFORE UPDATE OF 
                    st_brth_date_d
  ON GM_CLNT_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_brth_date_d != new.st_brth_date_d
   OR old.st_brth_date_d IS NULL and new.st_brth_date_d IS NOT NULL
   OR old.st_brth_date_d IS NOT NULL and new.st_brth_date_d IS NULL)
SET new.st_brth_date =
  CASE WHEN new.st_brth_date_d IS NULL OR new.st_brth_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0555U01
  NO CASCADE BEFORE UPDATE
  ON GM_CLNT_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0555I54
  NO CASCADE BEFORE INSERT
  ON GM_CLNT_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_brth_date IS NULL 
  AND new.st_brth_date_d IS NOT NULL
  AND CHAR(new.st_brth_date_d,ISO) != '0001-01-01'
   OR new.st_brth_date = 0
  AND new.st_brth_date_d IS NOT NULL
  AND CHAR(new.st_brth_date_d,ISO) != '0001-01-01')
SET new.st_brth_date =
  CASE WHEN new.st_brth_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0555I53
  NO CASCADE BEFORE INSERT
  ON GM_CLNT_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_brth_date_d IS NULL 
  AND new.st_brth_date IS NOT NULL
   OR CHAR(new.st_brth_date_d,ISO) = '0001-01-01'
  AND new.st_brth_date IS NOT NULL)
SET new.st_brth_date_d =
  CASE WHEN new.st_brth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0555U52
  NO CASCADE BEFORE UPDATE OF 
                    end_brth_date_d
  ON GM_CLNT_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_brth_date_d != new.end_brth_date_d
   OR old.end_brth_date_d IS NULL and new.end_brth_date_d IS NOT NULL
   OR old.end_brth_date_d IS NOT NULL and new.end_brth_date_d IS NULL)
SET new.end_brth_date =
  CASE WHEN new.end_brth_date_d IS NULL OR new.end_brth_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0555U53
  NO CASCADE BEFORE UPDATE OF 
                    st_brth_date
  ON GM_CLNT_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_brth_date != new.st_brth_date
   OR old.st_brth_date IS NULL AND new.st_brth_date IS NOT NULL
   OR old.st_brth_date IS NOT NULL AND new.st_brth_date IS NULL)
SET new.st_brth_date_d =
  CASE WHEN new.st_brth_date = 0 OR new.st_brth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0555I51
  NO CASCADE BEFORE INSERT
  ON GM_CLNT_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_brth_date_d IS NULL 
  AND new.end_brth_date IS NOT NULL
   OR CHAR(new.end_brth_date_d,ISO) = '0001-01-01'
  AND new.end_brth_date IS NOT NULL)
SET new.end_brth_date_d =
  CASE WHEN new.end_brth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0451U01
  NO CASCADE BEFORE UPDATE
  ON GM_CLNT_RSTRCT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0334D01
  NO CASCADE BEFORE DELETE
  ON GM_CORE_PROD
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (
EXISTS (
  SELECT 1 FROM gm_acct_prod gap WHERE gap.gm_prod_cd = old.cd)
)
SIGNAL SQLSTATE 'Z0334'
('D0334D01: the product code exists as an accounting product')
 !!


CREATE TRIGGER D0334I01
  NO CASCADE BEFORE INSERT
  ON GM_CORE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (
EXISTS (
  SELECT 1 FROM gm_sndry_prod gsp WHERE gsp.cd = new.cd)
)
SIGNAL SQLSTATE 'Z0334'
('D0334I01: the product code is used for a sundry product')
 !!


CREATE TRIGGER D0334U01
  NO CASCADE BEFORE UPDATE OF 
                    cd
  ON GM_CORE_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.cd != new.cd
AND EXISTS (
  SELECT 1 FROM gm_sndry_prod gsp WHERE gsp.cd = new.cd)
)
SIGNAL SQLSTATE 'Z0334'
('D0334U01: the product code is used for a sundry product')
 !!


CREATE TRIGGER D0334U02
  NO CASCADE BEFORE UPDATE
  ON GM_CORE_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0335I01
  NO CASCADE BEFORE INSERT
  ON GM_CTRCT_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bsns_unit_cd IS NULL
AND EXISTS (
  SELECT 1 FROM acct_anlys_grp aag
    WHERE aag.cd = new.acct_anlys_grp_cd
      AND aag.int_chrg_ind = 'Y')
)
SIGNAL SQLSTATE 'Z0335'
('D0335I01: the business unit must be entered')
 !!


CREATE TRIGGER D0335U01
  NO CASCADE BEFORE UPDATE
  ON GM_CTRCT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.bsns_unit_cd IS NULL
AND   old.bsns_unit_cd IS NOT NULL
AND EXISTS (
  SELECT 1 FROM acct_anlys_grp aag
    WHERE aag.cd = new.acct_anlys_grp_cd
      AND aag.int_chrg_ind = 'Y')
OR    new.bsns_unit_cd IS NULL
AND   old.acct_anlys_grp_cd <> new.acct_anlys_grp_cd
AND EXISTS (
  SELECT 1 FROM acct_anlys_grp aag
    WHERE aag.cd = new.acct_anlys_grp_cd
      AND aag.int_chrg_ind = 'Y')
)
SIGNAL SQLSTATE 'Z0335'
('D0335U01: the business unit must be entered')
 !!


CREATE TRIGGER D0335U02
  NO CASCADE BEFORE UPDATE
  ON GM_CTRCT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_CTRCT_TP AFTER DELETE ON GM_CTRCT_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PROD WHERE GM_PROD.CTRCT_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_CTRCT_TP  GM_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c49", PARENT_OWNER="", PARENT_TABLE="GM_CTRCT_TP"
    CHILD_OWNER="", CHILD_TABLE="GM_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0335_002", FK_COLUMNS="CTRCT_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_CTRCT_TP because GM_PROD exists.')
 !!

CREATE  TRIGGER tD_GM_CTRCT_TP2 AFTER DELETE ON GM_CTRCT_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CLNT_CTRCT WHERE GM_CLNT_CTRCT.CTRCT_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_CTRCT_TP  GM_CLNT_CTRCT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000946c", PARENT_OWNER="", PARENT_TABLE="GM_CTRCT_TP"
    CHILD_OWNER="", CHILD_TABLE="GM_CLNT_CTRCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0335_001", FK_COLUMNS="CTRCT_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_CTRCT_TP because GM_CLNT_CTRCT exists.')
 !!


CREATE TRIGGER D0336U01
  NO CASCADE BEFORE UPDATE
  ON GM_DNA_PROFILE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0554U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON GM_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0554I52
  NO CASCADE BEFORE INSERT
  ON GM_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0554U01
  NO CASCADE BEFORE UPDATE
  ON GM_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0554I51
  NO CASCADE BEFORE INSERT
  ON GM_DWNLD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0554U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON GM_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_GM_DWNLD AFTER DELETE ON GM_DWNLD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CLNT_DWNLD WHERE GM_CLNT_DWNLD.GM_DWNLD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_DWNLD  GM_CLNT_DWNLD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cab", PARENT_OWNER="", PARENT_TABLE="GM_DWNLD"
    CHILD_OWNER="", CHILD_TABLE="GM_CLNT_DWNLD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0554_001", FK_COLUMNS="GM_DWNLD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_DWNLD because GM_CLNT_DWNLD exists.')
 !!


CREATE TRIGGER D0452U01
  NO CASCADE BEFORE UPDATE
  ON GM_LAB_PROC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_LAB_PROC AFTER DELETE ON GM_LAB_PROC
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_LAB_TEST_PROC WHERE GM_LAB_TEST_PROC.LAB_PROC_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_LAB_PROC  GM_LAB_TEST_PROC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008515", PARENT_OWNER="", PARENT_TABLE="GM_LAB_PROC"
    CHILD_OWNER="", CHILD_TABLE="GM_LAB_TEST_PROC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0452_001", FK_COLUMNS="LAB_PROC_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_LAB_PROC because GM_LAB_TEST_PROC exists.')
 !!


CREATE TRIGGER D0590U01
  NO CASCADE BEFORE UPDATE
  ON GM_LAB_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_LAB_TEST AFTER DELETE ON GM_LAB_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_LAB_TEST_PROC WHERE GM_LAB_TEST_PROC.CORE_PROD_CD = old.CORE_PROD_CD AND
                                                   GM_LAB_TEST_PROC.LAB_PTPT_CD = old.LAB_PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_LAB_TEST  GM_LAB_TEST_PROC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009875", PARENT_OWNER="", PARENT_TABLE="GM_LAB_TEST"
    CHILD_OWNER="", CHILD_TABLE="GM_LAB_TEST_PROC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0590_001", FK_COLUMNS="CORE_PROD_CD""LAB_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_LAB_TEST because GM_LAB_TEST_PROC exists.')
 !!


CREATE TRIGGER D0453U01
  NO CASCADE BEFORE UPDATE
  ON GM_LAB_TEST_PROC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0591U01
  NO CASCADE BEFORE UPDATE
  ON GM_PRNT_FLD_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0337U01
  NO CASCADE BEFORE UPDATE
  ON GM_PRNT_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PRNT_GRP AFTER DELETE ON GM_PRNT_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML WHERE GM_RCPT_ANML.BULL_TEAM_PARENT_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_GRP  GM_RCPT_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000098ce", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0337_005", FK_COLUMNS="BULL_TEAM_PARENT_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_GRP because GM_RCPT_ANML exists.')
 !!

CREATE  TRIGGER tD_GM_PRNT_GRP2 AFTER DELETE ON GM_PRNT_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML WHERE GM_RCPT_ANML.FEMALE_PARENT_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_GRP  GM_RCPT_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000090ac", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0337_004", FK_COLUMNS="FEMALE_PARENT_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_GRP because GM_RCPT_ANML exists.')
 !!

CREATE  TRIGGER tD_GM_PRNT_GRP3 AFTER DELETE ON GM_PRNT_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML WHERE GM_RCPT_ANML.MALE_PARENT_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_GRP  GM_RCPT_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009273", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0337_003", FK_COLUMNS="MALE_PARENT_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_GRP because GM_RCPT_ANML exists.')
 !!

CREATE  TRIGGER tD_GM_PRNT_GRP4 AFTER DELETE ON GM_PRNT_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL_PRNT_GRP WHERE GM_SMPL_PRNT_GRP.PRNT_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_GRP  GM_SMPL_PRNT_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094b1", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL_PRNT_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0337_002", FK_COLUMNS="PRNT_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_GRP because GM_SMPL_PRNT_GRP exists.')
 !!

CREATE  TRIGGER tD_GM_PRNT_GRP5 AFTER DELETE ON GM_PRNT_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_GRP_ANML WHERE GM_PRNT_GRP_ANML.PRNT_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_GRP  GM_PRNT_GRP_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009411", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_GRP_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0337_001", FK_COLUMNS="PRNT_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_GRP because GM_PRNT_GRP_ANML exists.')
 !!


CREATE TRIGGER D0338U01
  NO CASCADE BEFORE UPDATE
  ON GM_PRNT_GRP_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0592U01
  NO CASCADE BEFORE UPDATE
  ON GM_PRNT_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PRNT_TEST AFTER DELETE ON GM_PRNT_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_FLD_LOCUS WHERE GM_PRNT_FLD_LOCUS.PRNT_TEST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PRNT_TEST  GM_PRNT_FLD_LOCUS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bb8", PARENT_OWNER="", PARENT_TABLE="GM_PRNT_TEST"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_FLD_LOCUS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0592_001", FK_COLUMNS="PRNT_TEST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PRNT_TEST because GM_PRNT_FLD_LOCUS exists.')
 !!


CREATE TRIGGER D0339U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PROD AFTER DELETE ON GM_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PROD_PRICE WHERE GM_PROD_PRICE.PROD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_PROD  GM_PROD_PRICE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008726", PARENT_OWNER="", PARENT_TABLE="GM_PROD"
    CHILD_OWNER="", CHILD_TABLE="GM_PROD_PRICE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0339_001", FK_COLUMNS="PROD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PROD because GM_PROD_PRICE exists.')
 !!


CREATE TRIGGER D0340U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD_COMP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0341U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PROD_GRP AFTER DELETE ON GM_PROD_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SNDRY_PROD WHERE GM_SNDRY_PROD.PROD_GRP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_PROD_GRP  GM_SNDRY_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000939d", PARENT_OWNER="", PARENT_TABLE="GM_PROD_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_SNDRY_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0341_002", FK_COLUMNS="PROD_GRP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PROD_GRP because GM_SNDRY_PROD exists.')
 !!

CREATE  TRIGGER tD_GM_PROD_GRP2 AFTER DELETE ON GM_PROD_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CORE_PROD WHERE GM_CORE_PROD.PROD_GRP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_PROD_GRP  GM_CORE_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c3b", PARENT_OWNER="", PARENT_TABLE="GM_PROD_GRP"
    CHILD_OWNER="", CHILD_TABLE="GM_CORE_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0341_001", FK_COLUMNS="PROD_GRP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PROD_GRP because GM_CORE_PROD exists.')
 !!


CREATE TRIGGER D0413U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD_LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PROD_LOCUS AFTER DELETE ON GM_PROD_LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_DNA_PROFILE WHERE GM_DNA_PROFILE.LOCUS_CD = old.LOCUS_CD AND
                                                 GM_DNA_PROFILE.CORE_PROD_CD = old.CORE_PROD_CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_PROD_LOCUS  GM_DNA_PROFILE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093e4", PARENT_OWNER="", PARENT_TABLE="GM_PROD_LOCUS"
    CHILD_OWNER="", CHILD_TABLE="GM_DNA_PROFILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0413_001", FK_COLUMNS="LOCUS_CD""CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PROD_LOCUS because GM_DNA_PROFILE exists.')
 !!


CREATE TRIGGER D0414U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD_PRICE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0454U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROD_ROYALTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0455U01
  NO CASCADE BEFORE UPDATE
  ON GM_PROJ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_PROJ AFTER DELETE ON GM_PROJ
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.PROJ_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_PROJ  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000803c", PARENT_OWNER="", PARENT_TABLE="GM_PROJ"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0455_001", FK_COLUMNS="PROJ_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_PROJ because GM_SUBM exists.')
 !!


CREATE TRIGGER D0960_001
  NO CASCADE BEFORE UPDATE
  ON GM_RCPT_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_RCPT_ANML AFTER DELETE ON GM_RCPT_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML_TEST WHERE GM_RCPT_ANML_TEST.RCPT_ANML_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_RCPT_ANML  GM_RCPT_ANML_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000929e", PARENT_OWNER="", PARENT_TABLE="GM_RCPT_ANML"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0960_001", FK_COLUMNS="RCPT_ANML_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_RCPT_ANML because GM_RCPT_ANML_TEST exists.')
 !!


CREATE TRIGGER D0968_001
  NO CASCADE BEFORE UPDATE
  ON GM_RCPT_ANML_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0593U01
  NO CASCADE BEFORE UPDATE
  ON GM_ROYALTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_ROYALTY AFTER DELETE ON GM_ROYALTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ROYALTY_AMT WHERE GM_ROYALTY_AMT.ROYALTY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_ROYALTY  GM_ROYALTY_AMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f17", PARENT_OWNER="", PARENT_TABLE="GM_ROYALTY"
    CHILD_OWNER="", CHILD_TABLE="GM_ROYALTY_AMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0593_003", FK_COLUMNS="ROYALTY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_ROYALTY because GM_ROYALTY_AMT exists.')
 !!

CREATE  TRIGGER tD_GM_ROYALTY2 AFTER DELETE ON GM_ROYALTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PROD_ROYALTY WHERE GM_PROD_ROYALTY.ROYALTY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_ROYALTY  GM_PROD_ROYALTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008af2", PARENT_OWNER="", PARENT_TABLE="GM_ROYALTY"
    CHILD_OWNER="", CHILD_TABLE="GM_PROD_ROYALTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0593_002", FK_COLUMNS="ROYALTY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_ROYALTY because GM_PROD_ROYALTY exists.')
 !!

CREATE  TRIGGER tD_GM_ROYALTY3 AFTER DELETE ON GM_ROYALTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_LAB_TEST_PROC WHERE GM_LAB_TEST_PROC.ROYALTY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_ROYALTY  GM_LAB_TEST_PROC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009077", PARENT_OWNER="", PARENT_TABLE="GM_ROYALTY"
    CHILD_OWNER="", CHILD_TABLE="GM_LAB_TEST_PROC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0593_001", FK_COLUMNS="ROYALTY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_ROYALTY because GM_LAB_TEST_PROC exists.')
 !!


CREATE TRIGGER D0456U01
  NO CASCADE BEFORE UPDATE
  ON GM_ROYALTY_AMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0415U01
  NO CASCADE BEFORE UPDATE
  ON GM_SALE_SRCE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_SALE_SRCE AFTER DELETE ON GM_SALE_SRCE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.SALE_SRCE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_SALE_SRCE  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a4c", PARENT_OWNER="", PARENT_TABLE="GM_SALE_SRCE"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0415_002", FK_COLUMNS="SALE_SRCE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SALE_SRCE because GM_SUBM exists.')
 !!

CREATE  TRIGGER tD_GM_SALE_SRCE2 AFTER DELETE ON GM_SALE_SRCE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ACCT_PROD WHERE GM_ACCT_PROD.SALE_SRCE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* GM_SALE_SRCE  GM_ACCT_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008df0", PARENT_OWNER="", PARENT_TABLE="GM_SALE_SRCE"
    CHILD_OWNER="", CHILD_TABLE="GM_ACCT_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0415_001", FK_COLUMNS="SALE_SRCE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SALE_SRCE because GM_ACCT_PROD exists.')
 !!


CREATE TRIGGER D0416U01
  NO CASCADE BEFORE UPDATE
  ON GM_SMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0416I01
  NO CASCADE BEFORE INSERT
  ON GM_SMPL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.anml_ref = LTRIM(new.anml_ref)
 !!


CREATE  TRIGGER tD_GM_SMPL AFTER DELETE ON GM_SMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SNDRY_SMPL_CHRG WHERE GM_SNDRY_SMPL_CHRG.SMPL_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL  GM_SNDRY_SMPL_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089ca", PARENT_OWNER="", PARENT_TABLE="GM_SMPL"
    CHILD_OWNER="", CHILD_TABLE="GM_SNDRY_SMPL_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0416_004", FK_COLUMNS="SMPL_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL because GM_SNDRY_SMPL_CHRG exists.')
 !!

CREATE  TRIGGER tD_GM_SMPL2 AFTER DELETE ON GM_SMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL_TEST_RQST WHERE GM_SMPL_TEST_RQST.SMPL_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL  GM_SMPL_TEST_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000877b", PARENT_OWNER="", PARENT_TABLE="GM_SMPL"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL_TEST_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0416_003", FK_COLUMNS="SMPL_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL because GM_SMPL_TEST_RQST exists.')
 !!

CREATE  TRIGGER tD_GM_SMPL3 AFTER DELETE ON GM_SMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_TEST WHERE GM_PRNT_TEST.SIRE_SMPL_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL  GM_PRNT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008734", PARENT_OWNER="", PARENT_TABLE="GM_SMPL"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0416_002", FK_COLUMNS="SIRE_SMPL_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL because GM_PRNT_TEST exists.')
 !!

CREATE  TRIGGER tD_GM_SMPL4 AFTER DELETE ON GM_SMPL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_TEST WHERE GM_PRNT_TEST.DAM_SMPL_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL  GM_PRNT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008213", PARENT_OWNER="", PARENT_TABLE="GM_SMPL"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0416_001", FK_COLUMNS="DAM_SMPL_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL because GM_PRNT_TEST exists.')
 !!


CREATE TRIGGER D0418U01
  NO CASCADE BEFORE UPDATE
  ON GM_SMPL_LAB_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_SMPL_LAB_TES AFTER DELETE ON GM_SMPL_LAB_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_DNA_PROFILE WHERE GM_DNA_PROFILE.TEST_RQST_ID = old.TEST_RQST_ID AND
                                                 GM_DNA_PROFILE.TEST_NUM = old.TEST_NUM) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL_LAB_TEST  GM_DNA_PROFILE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009a8a", PARENT_OWNER="", PARENT_TABLE="GM_SMPL_LAB_TEST"
    CHILD_OWNER="", CHILD_TABLE="GM_DNA_PROFILE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0418_001", FK_COLUMNS="TEST_RQST_ID""TEST_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL_LAB_TEST because GM_DNA_PROFILE exists.')
 !!


CREATE TRIGGER D0420U01
  NO CASCADE BEFORE UPDATE
  ON GM_SMPL_PRNT_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0421U01
  NO CASCADE BEFORE UPDATE
  ON GM_SMPL_TEST_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_SMPL_TEST_RQ AFTER DELETE ON GM_SMPL_TEST_RQST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL_PRNT_GRP WHERE GM_SMPL_PRNT_GRP.TEST_RQST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL_TEST_RQST  GM_SMPL_PRNT_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000926e", PARENT_OWNER="", PARENT_TABLE="GM_SMPL_TEST_RQST"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL_PRNT_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0421_003", FK_COLUMNS="TEST_RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL_TEST_RQST because GM_SMPL_PRNT_GRP exists.')
 !!

CREATE  TRIGGER tD_GM_SMPL_TEST_R2 AFTER DELETE ON GM_SMPL_TEST_RQST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL_LAB_TEST WHERE GM_SMPL_LAB_TEST.TEST_RQST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL_TEST_RQST  GM_SMPL_LAB_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093bf", PARENT_OWNER="", PARENT_TABLE="GM_SMPL_TEST_RQST"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL_LAB_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0421_001", FK_COLUMNS="TEST_RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL_TEST_RQST because GM_SMPL_LAB_TEST exists.')
 !!

CREATE  TRIGGER tD_GM_SMPL_TEST_R3 AFTER DELETE ON GM_SMPL_TEST_RQST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_TEST WHERE GM_PRNT_TEST.TEST_RQST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SMPL_TEST_RQST  GM_PRNT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e91", PARENT_OWNER="", PARENT_TABLE="GM_SMPL_TEST_RQST"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0421_002", FK_COLUMNS="TEST_RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SMPL_TEST_RQST because GM_PRNT_TEST exists.')
 !!


CREATE TRIGGER D0422D01
  NO CASCADE BEFORE DELETE
  ON GM_SNDRY_PROD
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (
EXISTS (
  SELECT 1 FROM gm_acct_prod gap WHERE gap.gm_prod_cd = old.cd)
)
SIGNAL SQLSTATE 'Z0422'
('D0422D01: the product code exists as an accounting product')
 !!


CREATE TRIGGER D0422I01
  NO CASCADE BEFORE INSERT
  ON GM_SNDRY_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (
EXISTS (
  SELECT 1 FROM gm_core_prod gcp WHERE gcp.cd = new.cd)
)
SIGNAL SQLSTATE 'Z0422'
('D0422I01: the product code is used for a core product')
 !!


CREATE TRIGGER D0422U01
  NO CASCADE BEFORE UPDATE OF 
                    cd
  ON GM_SNDRY_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.cd != new.cd
AND EXISTS (
  SELECT 1 FROM gm_core_prod gcp WHERE gcp.cd = new.cd)
)
SIGNAL SQLSTATE 'Z0422'
('D0422U01: the product code is used for a core product')
 !!


CREATE TRIGGER D0422U02
  NO CASCADE BEFORE UPDATE
  ON GM_SNDRY_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0423U01
  NO CASCADE BEFORE UPDATE
  ON GM_SNDRY_SMPL_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0424U01
  NO CASCADE BEFORE UPDATE
  ON GM_SNDRY_SUBM_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0427U01
  NO CASCADE BEFORE UPDATE
  ON GM_SUBM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0427I01
  NO CASCADE BEFORE INSERT
  ON GM_SUBM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_delivery_method_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_RPRT_DELIVERY_METHOD_CD'
      AND c.cd = new.rprt_delivery_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0427'
('D0427I01: invalid report delivery method code')
 !!


CREATE TRIGGER D0427U02
  NO CASCADE BEFORE UPDATE OF 
                    rprt_delivery_method_cd
  ON GM_SUBM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_delivery_method_cd IS NOT NULL
  AND VALUE(new.rprt_delivery_method_cd,'~') != VALUE(old.rprt_delivery_method_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'GM_RPRT_DELIVERY_METHOD_CD'
      AND c.cd = new.rprt_delivery_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0427'
('D0427U02: invalid report delivery method code')
 !!


CREATE  TRIGGER tD_GM_SUBM AFTER DELETE ON GM_SUBM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SNDRY_SUBM_CHRG WHERE GM_SNDRY_SUBM_CHRG.SUBM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM  GM_SNDRY_SUBM_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c8", PARENT_OWNER="", PARENT_TABLE="GM_SUBM"
    CHILD_OWNER="", CHILD_TABLE="GM_SNDRY_SUBM_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0427_004", FK_COLUMNS="SUBM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM because GM_SNDRY_SUBM_CHRG exists.')
 !!

CREATE  TRIGGER tD_GM_SUBM2 AFTER DELETE ON GM_SUBM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SNDRY_SMPL_CHRG WHERE GM_SNDRY_SMPL_CHRG.SUBM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM  GM_SNDRY_SMPL_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009167", PARENT_OWNER="", PARENT_TABLE="GM_SUBM"
    CHILD_OWNER="", CHILD_TABLE="GM_SNDRY_SMPL_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0427_003", FK_COLUMNS="SUBM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM because GM_SNDRY_SMPL_CHRG exists.')
 !!

CREATE  TRIGGER tD_GM_SUBM3 AFTER DELETE ON GM_SUBM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL_TEST_RQST WHERE GM_SMPL_TEST_RQST.SUBM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM  GM_SMPL_TEST_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bec", PARENT_OWNER="", PARENT_TABLE="GM_SUBM"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL_TEST_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0427_002", FK_COLUMNS="SUBM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM because GM_SMPL_TEST_RQST exists.')
 !!

CREATE  TRIGGER tD_GM_SUBM4 AFTER DELETE ON GM_SUBM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SMPL WHERE GM_SMPL.SUBM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM  GM_SMPL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000892d", PARENT_OWNER="", PARENT_TABLE="GM_SUBM"
    CHILD_OWNER="", CHILD_TABLE="GM_SMPL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0427_001", FK_COLUMNS="SUBM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM because GM_SMPL exists.')
 !!

CREATE  TRIGGER tD_GM_SUBM5 AFTER DELETE ON GM_SUBM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM_DFLT WHERE GM_SUBM_DFLT.SUBM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM  GM_SUBM_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a07", PARENT_OWNER="", PARENT_TABLE="GM_SUBM"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0427_005", FK_COLUMNS="SUBM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM because GM_SUBM_DFLT exists.')
 !!


CREATE TRIGGER D0934U01
  NO CASCADE BEFORE UPDATE
  ON GM_SUBM_DFLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0948U01
  NO CASCADE BEFORE UPDATE
  ON GM_SUBM_DFLT_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_GM_SUBM_DFLT_TE AFTER DELETE ON GM_SUBM_DFLT_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_RCPT_ANML_TEST WHERE GM_RCPT_ANML_TEST.DFLT_TEST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* GM_SUBM_DFLT_TEST  GM_RCPT_ANML_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009d6e", PARENT_OWNER="", PARENT_TABLE="GM_SUBM_DFLT_TEST"
    CHILD_OWNER="", CHILD_TABLE="GM_RCPT_ANML_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0948_001", FK_COLUMNS="DFLT_TEST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete GM_SUBM_DFLT_TEST because GM_RCPT_ANML_TEST exists.')
 !!


CREATE TRIGGER D0231U01
  NO CASCADE BEFORE UPDATE
  ON HAND_HELD_UNIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HAND_HELD_UNIT AFTER DELETE ON HAND_HELD_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DMATE_SEMEN_STOCK_ITEM WHERE DMATE_SEMEN_STOCK_ITEM.HHU_SERIAL_NUM = old.SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HAND_HELD_UNIT  DMATE_SEMEN_STOCK_ITEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000984a", PARENT_OWNER="", PARENT_TABLE="HAND_HELD_UNIT"
    CHILD_OWNER="", CHILD_TABLE="DMATE_SEMEN_STOCK_ITEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0231_005", FK_COLUMNS="HHU_SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HAND_HELD_UNIT because DMATE_SEMEN_STOCK_ITEM exists.')
 !!

CREATE  TRIGGER tD_HAND_HELD_UNIT2 AFTER DELETE ON HAND_HELD_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_FARM_VISIT WHERE EZ_LINK_FARM_VISIT.EZ_LINK_SERIAL_NUM = old.SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HAND_HELD_UNIT  EZ_LINK_FARM_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097bc", PARENT_OWNER="", PARENT_TABLE="HAND_HELD_UNIT"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_FARM_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0231_003", FK_COLUMNS="EZ_LINK_SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HAND_HELD_UNIT because EZ_LINK_FARM_VISIT exists.')
 !!

CREATE  TRIGGER tD_HAND_HELD_UNIT3 AFTER DELETE ON HAND_HELD_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_APPL_EXCEPT_LOG WHERE EZ_LINK_APPL_EXCEPT_LOG.SERIAL_NUM = old.SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HAND_HELD_UNIT  EZ_LINK_APPL_EXCEPT_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000956a", PARENT_OWNER="", PARENT_TABLE="HAND_HELD_UNIT"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_APPL_EXCEPT_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0231_004", FK_COLUMNS="SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HAND_HELD_UNIT because EZ_LINK_APPL_EXCEPT_LOG exists.')
 !!

CREATE  TRIGGER tD_HAND_HELD_UNIT4 AFTER DELETE ON HAND_HELD_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HHU_ALCN WHERE HHU_ALCN.SERIAL_NUM = old.SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HAND_HELD_UNIT  HHU_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bb3", PARENT_OWNER="", PARENT_TABLE="HAND_HELD_UNIT"
    CHILD_OWNER="", CHILD_TABLE="HHU_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0231_002", FK_COLUMNS="SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HAND_HELD_UNIT because HHU_ALCN exists.')
 !!

CREATE  TRIGGER tD_HAND_HELD_UNIT5 AFTER DELETE ON HAND_HELD_UNIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DMATE_HERD WHERE DMATE_HERD.SERIAL_NUM = old.SERIAL_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HAND_HELD_UNIT  DMATE_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e53", PARENT_OWNER="", PARENT_TABLE="HAND_HELD_UNIT"
    CHILD_OWNER="", CHILD_TABLE="DMATE_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0231_001", FK_COLUMNS="SERIAL_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HAND_HELD_UNIT because DMATE_HERD exists.')
 !!


CREATE TRIGGER D0357U01
  NO CASCADE BEFORE UPDATE
  ON HDBK_SECT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HDBK_SECT_STS AFTER DELETE ON HDBK_SECT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRGNY_HDBK_DFLT WHERE PRGNY_HDBK_DFLT.SIRE_HDBK_SECT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HDBK_SECT_STS  PRGNY_HDBK_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091f5", PARENT_OWNER="", PARENT_TABLE="HDBK_SECT_STS"
    CHILD_OWNER="", CHILD_TABLE="PRGNY_HDBK_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0357_004", FK_COLUMNS="SIRE_HDBK_SECT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HDBK_SECT_STS because PRGNY_HDBK_DFLT exists.')
 !!

CREATE  TRIGGER tD_HDBK_SECT_STS2 AFTER DELETE ON HDBK_SECT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRGNY_HDBK_DFLT WHERE PRGNY_HDBK_DFLT.PRGNY_HDBK_SECT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HDBK_SECT_STS  PRGNY_HDBK_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009842", PARENT_OWNER="", PARENT_TABLE="HDBK_SECT_STS"
    CHILD_OWNER="", CHILD_TABLE="PRGNY_HDBK_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0357_003", FK_COLUMNS="PRGNY_HDBK_SECT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HDBK_SECT_STS because PRGNY_HDBK_DFLT exists.')
 !!

CREATE  TRIGGER tD_HDBK_SECT_STS3 AFTER DELETE ON HDBK_SECT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRGNY_HDBK_DFLT WHERE PRGNY_HDBK_DFLT.DAM_HDBK_SECT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HDBK_SECT_STS  PRGNY_HDBK_DFLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095f8", PARENT_OWNER="", PARENT_TABLE="HDBK_SECT_STS"
    CHILD_OWNER="", CHILD_TABLE="PRGNY_HDBK_DFLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0357_001", FK_COLUMNS="DAM_HDBK_SECT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HDBK_SECT_STS because PRGNY_HDBK_DFLT exists.')
 !!

CREATE  TRIGGER tD_HDBK_SECT_STS4 AFTER DELETE ON HDBK_SECT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CROSS_BRD WHERE CROSS_BRD.HDBK_SECT_STS_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HDBK_SECT_STS  CROSS_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ea8", PARENT_OWNER="", PARENT_TABLE="HDBK_SECT_STS"
    CHILD_OWNER="", CHILD_TABLE="CROSS_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0357_002", FK_COLUMNS="HDBK_SECT_STS_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HDBK_SECT_STS because CROSS_BRD exists.')
 !!


CREATE TRIGGER D0017I01
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_cd != 0
 AND EXISTS (
   SELECT 1 FROM herd h
   WHERE h.rgn_cd = new.rgn_cd
     AND h.herd_cd = new.herd_cd
     AND (h.map_ref != new.map_ref OR
          h.herd_num != new.herd_num)) )
-- the region / herd code must be unique
SIGNAL SQLSTATE 'Z0017'
('D0017I01: Region Code / Herd Code must be unique')
 !!


CREATE TRIGGER D0017U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0017U02
  NO CASCADE BEFORE UPDATE
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0017I51
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0017U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0017I53
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0017U01
  NO CASCADE BEFORE UPDATE OF 
                    rgn_cd,
                    herd_cd
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_CD != 0
 AND (new.rgn_CD != old.rgn_CD OR
      new.herd_CD != old.herd_CD)
 AND EXISTS (
    SELECT 1 FROM herd h
    WHERE h.rgn_CD = new.rgn_CD
      AND h.herd_CD = new.herd_CD
      AND (h.map_ref != new.map_ref OR
           h.herd_num != new.herd_num)) )
-- the region / herd code must be unique
SIGNAL SQLSTATE 'Z0017'
('D0017U01: Region Code / herd Code must be unique')
 !!


CREATE TRIGGER D0017I54
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0017U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0017U03
  NO CASCADE BEFORE UPDATE
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rgn_cd != ' ' AND new.end_date_d is null)
SET new.rgn_cd = (
  SELECT p.rgn_cd FROM property p
  WHERE p.map_ref = new.map_ref)
 !!


CREATE TRIGGER D0017U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0017I02
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rgn_cd != ' ')
SET new.rgn_cd = (
  SELECT p.rgn_cd FROM property p
  WHERE p.map_ref = new.map_ref)
 !!


CREATE TRIGGER D0017I52
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0017I03
  NO CASCADE BEFORE INSERT
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ahb_tb_sts_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HERD_AHB_TB_STS_CD'
      AND c.cd = new.ahb_tb_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0017'
('D0017I03: invalid herd tb status code')
 !!


CREATE TRIGGER D0017U06
  NO CASCADE BEFORE UPDATE OF 
                    ahb_tb_sts_cd
  ON HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ahb_tb_sts_cd IS NOT NULL
 AND new.ahb_tb_sts_cd != VALUE(old.ahb_tb_sts_cd,'~')
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HERD_AHB_TB_STS_CD'
      AND c.cd = new.ahb_tb_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0017'
('D0017U06: invalid herd tb status code ')
 !!


CREATE TRIGGER D0017U04
  NO CASCADE BEFORE UPDATE
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_cd != 0
  AND new.end_date_d IS NULL
  AND new.end_date = 0
  AND EXISTS (
    SELECT 1 FROM herd_dtl hd1
                , herd_dtl hd2
                , herd h2
    WHERE hd1.map_ref = new.map_ref
      AND hd1.herd_num = new.herd_num
      AND hd1.sr_area_ssn >= YEAR(CURRENT DATE) - 1
      AND hd2.ownr_ptpt_cd = hd1.ownr_ptpt_cd
      AND hd2.sr_area_ssn = hd1.sr_area_ssn
      AND (hd2.map_ref != hd1.map_ref
       OR hd2.herd_num != hd1.herd_num)
      AND h2.map_ref = hd2.map_ref
      AND h2.herd_num = hd2.herd_num
      AND h2.herd_cd != 0
      AND h2.end_date_d IS NULL
      AND h2.end_date = 0) )
SIGNAL SQLSTATE 'Z0017'
('D0017U04: Other active herd exists for same owner in same season')
 !!


CREATE TRIGGER D0017U05
  AFTER UPDATE
  ON HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.herd_num = new.herd_num
  AND hd.sr_area_ssn = (
    SELECT MAX(sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = new.map_ref
      AND hd2.herd_num = new.herd_num)
  AND hd.sv_dtl_upd_date_d != CURRENT DATE
 !!


CREATE  TRIGGER tD_HERD AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM YLD_DEV_CGRP WHERE YLD_DEV_CGRP.MAP_REF = old.MAP_REF AND
                                               YLD_DEV_CGRP.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  YLD_DEV_CGRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008917", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="YLD_DEV_CGRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_051", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because YLD_DEV_CGRP exists.')
 !!

CREATE  TRIGGER tD_HERD2 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_WGH WHERE ANML_WGH.MAP_REF = old.MAP_REF AND
                                           ANML_WGH.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  ANML_WGH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cc7", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="ANML_WGH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_024", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because ANML_WGH exists.')
 !!

CREATE  TRIGGER tD_HERD3 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ANML WHERE HERD_ANML.MAP_REF = old.MAP_REF AND
                                            HERD_ANML.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008524", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_048", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_ANML exists.')
 !!

CREATE  TRIGGER tD_HERD4 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_VST WHERE HT_VST.MAP_REF = old.MAP_REF AND
                                         HT_VST.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HT_VST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000892c", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HT_VST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_037", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HT_VST exists.')
 !!

CREATE  TRIGGER tD_HERD5 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_RECALC_RQST WHERE HERD_RECALC_RQST.MAP_REF = old.MAP_REF AND
                                                   HERD_RECALC_RQST.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_RECALC_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009499", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_RECALC_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_031", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_RECALC_RQST exists.')
 !!

CREATE  TRIGGER tD_HERD6 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM XFER_CARD WHERE XFER_CARD.MAP_REF = old.MAP_REF AND
                                            XFER_CARD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  XFER_CARD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b40", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="XFER_CARD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_039", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because XFER_CARD exists.')
 !!

CREATE  TRIGGER tD_HERD7 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM OTD_HERD WHERE OTD_HERD.MAP_REF = old.MAP_REF AND
                                           OTD_HERD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  OTD_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008880", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="OTD_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_036", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because OTD_HERD exists.')
 !!

CREATE  TRIGGER tD_HERD8 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_TEST_SV WHERE HERD_TEST_SV.MAP_REF = old.MAP_REF AND
                                               HERD_TEST_SV.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_TEST_SV on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000929d", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_TEST_SV"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_012", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_TEST_SV exists.')
 !!

CREATE  TRIGGER tD_HERD9 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_MOVE WHERE HERD_MOVE.FROM_MAP_REF = old.MAP_REF AND
                                            HERD_MOVE.FROM_HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_MOVE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b1c", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_MOVE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_001", FK_COLUMNS="FROM_MAP_REF""FROM_HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_MOVE exists.')
 !!

CREATE  TRIGGER tD_HERD10 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_PLAN WHERE HERD_DT_PLAN.MAP_REF = old.MAP_REF AND
                                               HERD_DT_PLAN.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_DT_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e20", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_028", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_DT_PLAN exists.')
 !!

CREATE  TRIGGER tD_HERD11 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_CLNT_DWNLD WHERE GM_CLNT_DWNLD.MAP_REF = old.MAP_REF AND
                                                GM_CLNT_DWNLD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  GM_CLNT_DWNLD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dc1", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="GM_CLNT_DWNLD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_027", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because GM_CLNT_DWNLD exists.')
 !!

CREATE  TRIGGER tD_HERD12 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN WHERE AB_MTNG_PLAN.MAP_REF = old.MAP_REF AND
                                               AB_MTNG_PLAN.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  AB_MTNG_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c67", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_003", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because AB_MTNG_PLAN exists.')
 !!

CREATE  TRIGGER tD_HERD13 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.MAP_REF = old.MAP_REF AND
                                          GM_SUBM.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cfd", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_008", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because GM_SUBM exists.')
 !!

CREATE  TRIGGER tD_HERD14 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_TDM_RSLT WHERE HT_TDM_RSLT.MAP_REF = old.MAP_REF AND
                                              HT_TDM_RSLT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HT_TDM_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009142", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HT_TDM_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_046", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HT_TDM_RSLT exists.')
 !!

CREATE  TRIGGER tD_HERD15 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ANML_NUM WHERE HERD_ANML_NUM.MAP_REF = old.MAP_REF AND
                                                HERD_ANML_NUM.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_ANML_NUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008963", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_ANML_NUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_049", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_ANML_NUM exists.')
 !!

CREATE  TRIGGER tD_HERD16 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_TDM_VST WHERE HT_TDM_VST.MAP_REF = old.MAP_REF AND
                                             HT_TDM_VST.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HT_TDM_VST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086e1", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HT_TDM_VST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_046", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HT_TDM_VST exists.')
 !!

CREATE  TRIGGER tD_HERD17 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DMATE_HERD WHERE DMATE_HERD.MAP_REF = old.MAP_REF AND
                                             DMATE_HERD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  DMATE_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008822", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="DMATE_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_007", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because DMATE_HERD exists.')
 !!

CREATE  TRIGGER tD_HERD18 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_TEST WHERE TRACE_ELEMENT_TEST.MAP_REF = old.MAP_REF AND
                                                     TRACE_ELEMENT_TEST.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  TRACE_ELEMENT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a3a", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_041", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because TRACE_ELEMENT_TEST exists.')
 !!

CREATE  TRIGGER tD_HERD19 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REG_ANML_MVMT WHERE REG_ANML_MVMT.MAP_REF = old.MAP_REF AND
                                                REG_ANML_MVMT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  REG_ANML_MVMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008832", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="REG_ANML_MVMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_042", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because REG_ANML_MVMT exists.')
 !!

CREATE  TRIGGER tD_HERD20 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DTL WHERE HERD_DTL.MAP_REF = old.MAP_REF AND
                                           HERD_DTL.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000088b6", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_009", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_DTL exists.')
 !!

CREATE  TRIGGER tD_HERD21 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_PARTY_ASSOC WHERE HERD_PARTY_ASSOC.MAP_REF = old.MAP_REF AND
                                                   HERD_PARTY_ASSOC.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_PARTY_ASSOC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b83", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_PARTY_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_044", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_PARTY_ASSOC exists.')
 !!

CREATE  TRIGGER tD_HERD22 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_XFER WHERE ANML_XFER.MAP_REF = old.MAP_REF AND
                                            ANML_XFER.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  ANML_XFER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008811", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="ANML_XFER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_025", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because ANML_XFER exists.')
 !!

CREATE  TRIGGER tD_HERD23 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM VACANT_INSEM_PD WHERE VACANT_INSEM_PD.MAP_REF = old.MAP_REF AND
                                                  VACANT_INSEM_PD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  VACANT_INSEM_PD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f90", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="VACANT_INSEM_PD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_022", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because VACANT_INSEM_PD exists.')
 !!

CREATE  TRIGGER tD_HERD24 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM UNID_ANML_DT_TAG WHERE UNID_ANML_DT_TAG.MAP_REF = old.MAP_REF AND
                                                   UNID_ANML_DT_TAG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  UNID_ANML_DT_TAG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000090b3", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="UNID_ANML_DT_TAG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_038", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because UNID_ANML_DT_TAG exists.')
 !!

CREATE  TRIGGER tD_HERD25 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_VST_CNSTR WHERE TECH_VST_CNSTR.MAP_REF = old.MAP_REF AND
                                                 TECH_VST_CNSTR.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  TECH_VST_CNSTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a8f", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="TECH_VST_CNSTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_020", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because TECH_VST_CNSTR exists.')
 !!

CREATE  TRIGGER tD_HERD26 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_DIY_SMN_DLVRY WHERE TECH_DIY_SMN_DLVRY.MAP_REF = old.MAP_REF AND
                                                     TECH_DIY_SMN_DLVRY.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  TECH_DIY_SMN_DLVRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c15", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="TECH_DIY_SMN_DLVRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_019", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because TECH_DIY_SMN_DLVRY exists.')
 !!

CREATE  TRIGGER tD_HERD27 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MTNG WHERE SPS_MTNG.MAP_REF = old.MAP_REF AND
                                           SPS_MTNG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  SPS_MTNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c77", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="SPS_MTNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_018", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because SPS_MTNG exists.')
 !!

CREATE  TRIGGER tD_HERD28 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_HT_RND WHERE HERD_HT_RND.MAP_REF = old.MAP_REF AND
                                              HERD_HT_RND.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_HT_RND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fbf", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_HT_RND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_010", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_HT_RND exists.')
 !!

CREATE  TRIGGER tD_HERD29 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_QLTY WHERE MINDA_QLTY.MAP_REF = old.MAP_REF AND
                                             MINDA_QLTY.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MINDA_QLTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000910a", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MINDA_QLTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_035", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MINDA_QLTY exists.')
 !!

CREATE  TRIGGER tD_HERD30 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_HERD WHERE MINDA_HERD.MAP_REF = old.MAP_REF AND
                                             MINDA_HERD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MINDA_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008799", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MINDA_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_034", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MINDA_HERD exists.')
 !!

CREATE  TRIGGER tD_HERD31 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_CHRG WHERE MINDA_CHRG.MAP_REF = old.MAP_REF AND
                                             MINDA_CHRG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MINDA_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008375", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MINDA_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_033", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MINDA_CHRG exists.')
 !!

CREATE  TRIGGER tD_HERD32 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_DTR_CMPL_RPRT WHERE MILK_DTR_CMPL_RPRT.MAP_REF = old.MAP_REF AND
                                                     MILK_DTR_CMPL_RPRT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MILK_DTR_CMPL_RPRT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095b2", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MILK_DTR_CMPL_RPRT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_015", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MILK_DTR_CMPL_RPRT exists.')
 !!

CREATE  TRIGGER tD_HERD33 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_COLOUR_RSLT WHERE MILK_COLOUR_RSLT.MAP_REF = old.MAP_REF AND
                                                   MILK_COLOUR_RSLT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MILK_COLOUR_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091e0", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MILK_COLOUR_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_032", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MILK_COLOUR_RSLT exists.')
 !!

CREATE  TRIGGER tD_HERD34 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_CHRG WHERE MDC_CHRG.MAP_REF = old.MAP_REF AND
                                           MDC_CHRG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  MDC_CHRG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086db", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="MDC_CHRG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_014", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because MDC_CHRG exists.')
 !!

CREATE  TRIGGER tD_HERD35 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ANML_LOG WHERE HERD_ANML_LOG.MAP_REF = old.MAP_REF AND
                                                HERD_ANML_LOG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_ANML_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000910d", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_ANML_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_050", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_ANML_LOG exists.')
 !!

CREATE  TRIGGER tD_HERD36 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_LEPTO_STS WHERE HERD_LEPTO_STS.MAP_REF = old.MAP_REF AND
                                                 HERD_LEPTO_STS.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_LEPTO_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b65", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_LEPTO_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_011", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_LEPTO_STS exists.')
 !!

CREATE  TRIGGER tD_HERD37 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ERR_STS_LOG WHERE HERD_ERR_STS_LOG.MAP_REF = old.MAP_REF AND
                                                   HERD_ERR_STS_LOG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_ERR_STS_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008858", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_ERR_STS_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_030", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_ERR_STS_LOG exists.')
 !!

CREATE  TRIGGER tD_HERD38 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ERR_STS WHERE HERD_ERR_STS.MAP_REF = old.MAP_REF AND
                                               HERD_ERR_STS.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_ERR_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091af", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_ERR_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_029", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_ERR_STS exists.')
 !!

CREATE  TRIGGER tD_HERD39 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_UPD WHERE HERD_UPD.MAP_REF = old.MAP_REF AND
                                           HERD_UPD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  HERD_UPD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f2b", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="HERD_UPD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_044", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because HERD_UPD exists.')
 !!

CREATE  TRIGGER tD_HERD40 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INET_LOG WHERE INET_LOG.MAP_REF = old.MAP_REF AND
                                           INET_LOG.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  INET_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089c3", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="INET_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_013", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because INET_LOG exists.')
 !!

CREATE  TRIGGER tD_HERD41 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PREV_ANML_LOCN WHERE PREV_ANML_LOCN.MAP_REF = old.MAP_REF AND
                                                 PREV_ANML_LOCN.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  PREV_ANML_LOCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000939c", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="PREV_ANML_LOCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_016", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because PREV_ANML_LOCN exists.')
 !!

CREATE  TRIGGER tD_HERD42 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT_RPRT WHERE CALF_DEFECT_RPRT.MAP_REF = old.MAP_REF AND
                                                   CALF_DEFECT_RPRT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  CALF_DEFECT_RPRT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092df", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT_RPRT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_005", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because CALF_DEFECT_RPRT exists.')
 !!

CREATE  TRIGGER tD_HERD43 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOP_INSP WHERE TOP_INSP.MAP_REF = old.MAP_REF AND
                                           TOP_INSP.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  TOP_INSP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c0e", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="TOP_INSP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_021", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because TOP_INSP exists.')
 !!

CREATE  TRIGGER tD_HERD44 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AD_HOC_RPRT_CTRL WHERE AD_HOC_RPRT_CTRL.MAP_REF = old.MAP_REF AND
                                                   AD_HOC_RPRT_CTRL.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  AD_HOC_RPRT_CTRL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009142", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="AD_HOC_RPRT_CTRL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_023", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because AD_HOC_RPRT_CTRL exists.')
 !!

CREATE  TRIGGER tD_HERD45 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_HERD WHERE AB_TECH_HERD.MAP_REF = old.MAP_REF AND
                                               AB_TECH_HERD.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  AB_TECH_HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fe6", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_004", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because AB_TECH_HERD exists.')
 !!

CREATE  TRIGGER tD_HERD46 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MNGT_RPT WHERE AB_MNGT_RPT.MAP_REF = old.MAP_REF AND
                                              AB_MNGT_RPT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  AB_MNGT_RPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009171", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="AB_MNGT_RPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_002", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because AB_MNGT_RPT exists.')
 !!

CREATE  TRIGGER tD_HERD47 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SOF_AB_MTNG_PLAN_CHANGE WHERE SOF_AB_MTNG_PLAN_CHANGE.MAP_REF = old.MAP_REF AND
                                                          SOF_AB_MTNG_PLAN_CHANGE.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  SOF_AB_MTNG_PLAN_CHANGE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009724", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="SOF_AB_MTNG_PLAN_CHANGE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_052", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because SOF_AB_MTNG_PLAN_CHANGE exists.')
 !!

CREATE  TRIGGER tD_HERD48 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CURR_ANML_LOCN WHERE CURR_ANML_LOCN.MAP_REF = old.MAP_REF AND
                                                 CURR_ANML_LOCN.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  CURR_ANML_LOCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000090d1", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="CURR_ANML_LOCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_006", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because CURR_ANML_LOCN exists.')
 !!

CREATE  TRIGGER tD_HERD49 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIVESTOCK_EXPORT_RPRT_AUDIT WHERE LIVESTOCK_EXPORT_RPRT_AUDIT.MAP_REF = old.MAP_REF AND
                                                              LIVESTOCK_EXPORT_RPRT_AUDIT.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  LIVESTOCK_EXPORT_RPRT_AUDIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c0e", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="LIVESTOCK_EXPORT_RPRT_AUDIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_043", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because LIVESTOCK_EXPORT_RPRT_AUDIT exists.')
 !!

CREATE  TRIGGER tD_HERD50 AFTER DELETE ON HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ANML WHERE GM_ANML.MAP_REF = old.MAP_REF AND
                                          GM_ANML.HERD_NUM = old.HERD_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD  GM_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000083ca", PARENT_OWNER="", PARENT_TABLE="HERD"
    CHILD_OWNER="", CHILD_TABLE="GM_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0017_040", FK_COLUMNS="MAP_REF""HERD_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD because GM_ANML exists.')
 !!


CREATE TRIGGER D0038D01
  AFTER DELETE
  ON HERD_ANML
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_herd_anml (
  anml_key
, map_ref
, herd_num)
VALUES (
  old.anml_key
, old.map_ref
, old.herd_num)
 !!


CREATE TRIGGER D0038I01
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM herd_anml ha
     WHERE ha.anml_key = new.anml_key
       AND ha.xfer_in_time != new.xfer_in_time
       AND DATE(new.xfer_in_time) <= DATE (VALUE (ha.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')))
       AND DATE (VALUE (new.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (ha.xfer_in_time)))
SIGNAL SQLSTATE 'Z0038'
('D0038I01: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0038I02
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.xfer_in_time) != '00:00:00')
SIGNAL SQLSTATE 'Z0038'
('D0038I02: xfer in time must be ''00:00:00''')
 !!


CREATE TRIGGER D0038U07
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_time
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')) != VALUE(new.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))
  AND new.xfer_out_time IS NOT NULL
  AND EXISTS (
      SELECT 1 FROM herd_anml_num han
      WHERE han.anml_key = new.anml_key
        AND han.xfer_in_time = new.xfer_in_time
        AND han.num_st_time > new.xfer_out_time))
SIGNAL SQLSTATE 'Z0038'
('D0038U07: transfer out is before an animal number start ')
 !!


CREATE TRIGGER D0038U08
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_time
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')) != VALUE(new.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))
  AND new.xfer_out_time IS NOT NULL
  AND EXISTS (
    SELECT 1 FROM herd_anml_num han
    WHERE han.anml_key = new.anml_key
      AND han.xfer_in_time = new.xfer_in_time
      AND VALUE(han.num_end_time, TIMESTAMP('9999-12-31 23:59:59')) > new.xfer_out_time))
SIGNAL SQLSTATE 'Z0038'
('D0038U08: transfer out is before an animal number end ')
 !!


CREATE TRIGGER D0038U09
  AFTER UPDATE
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num)
INSERT INTO del_herd_anml (
  anml_key
, map_ref
, herd_num)
VALUES (
  old.anml_key
, old.map_ref
, old.herd_num)
 !!


CREATE TRIGGER D0038U10
  AFTER UPDATE
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num)
UPDATE herd_anml_num han SET 
  han.map_ref = new.map_ref
, han.herd_num = new.herd_num
WHERE han.anml_key = old.anml_key
  AND han.map_ref = old.map_ref
  AND han.herd_num = old.herd_num
  AND han.xfer_in_time = old.xfer_in_time
 !!


CREATE TRIGGER D0038I06
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.fate_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MVMT_ANML_FATE_CD'
      AND c.cd = new.fate_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0038'
('D0038I06: invalid fate code')
 !!


CREATE TRIGGER D0038U11
  NO CASCADE BEFORE UPDATE OF 
                    fate_cd
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.fate_cd IS NOT NULL
  AND VALUE(new.fate_cd,'~') != VALUE(old.fate_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MVMT_ANML_FATE_CD'
      AND c.cd = new.fate_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0038'
('D0038U11: invalid fate code')
 !!


CREATE TRIGGER D0038I03
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.xfer_in_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0038'
('D0038I03: xfer in time must not be in the future')
 !!


CREATE TRIGGER D0038I04
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.xfer_out_time) != '23:59:59')
SIGNAL SQLSTATE 'Z0038'
('D0038I04: xfer out time must be ''23:59:59''')
 !!


CREATE TRIGGER D0038I05
  NO CASCADE BEFORE INSERT
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.xfer_out_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0038'
('D0038I05: transfer out time must not be in the future')
 !!


CREATE TRIGGER D0038U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0038U02
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_time,
                    xfer_out_time
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.xfer_in_time != new.xfer_in_time 
   OR VALUE(old.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')) != VALUE(new.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')))
  AND EXISTS (
    SELECT 1 FROM herd_anml ha
     WHERE ha.anml_key = new.anml_key
       AND ha.xfer_in_time != old.xfer_in_time
       AND DATE(new.xfer_in_time) <= DATE (VALUE (ha.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59')))
       AND DATE (VALUE (new.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (ha.xfer_in_time)))
SIGNAL SQLSTATE 'Z0038'
('D0038U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0038U03
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_time
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.xfer_in_time) != '00:00:00')
SIGNAL SQLSTATE 'Z0038'
('D0038U03: xfer in time must be ''00:00:00''')
 !!


CREATE TRIGGER D0038U04
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_time
  ON HERD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.xfer_out_time) != '23:59:59')
SIGNAL SQLSTATE 'Z0038'
('D0038U04: xfer out time must be ''23:59:59''')
 !!


CREATE TRIGGER D0038U05
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_time
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.xfer_in_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0038'
('D0038U05: transfer in time must not be in the future')
 !!


CREATE TRIGGER D0038U06
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_time
  ON HERD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.xfer_out_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0038'
('D0038U06: transfer out time must not be in the future')
 !!


CREATE TRIGGER D0023U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ANML_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0039D01
  AFTER DELETE
  ON HERD_ANML_NUM
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_herd_anml_num (
  anml_key
, map_ref
, herd_num)
VALUES (
  old.anml_key
, old.map_ref
, old.herd_num)
 !!


CREATE TRIGGER D0039I02
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM herd_anml_num han
     WHERE han.anml_key = new.anml_key
       AND han.xfer_in_time = new.xfer_in_time
       AND DATE(new.num_st_time) <= DATE (VALUE (han.num_end_time, TIMESTAMP('9999-12-31 23:59:59')))
       AND DATE (VALUE (new.num_end_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (han.num_st_time)))
SIGNAL SQLSTATE 'Z0039'
('D0039I02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0039I03
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.num_st_time) != '00:00:00')
SIGNAL SQLSTATE 'Z0039'
('D0039I03: number start time must be ''00:00:00''')
 !!


CREATE TRIGGER D0039I01
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET (new.map_ref, new.herd_num) = (
SELECT
  ha.map_ref
, ha.herd_num
FROM herd_anml ha
WHERE ha.anml_key = new.anml_key
  AND ha.xfer_in_time = new.xfer_in_time
)
 !!


CREATE TRIGGER D0039I08
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.num_end_time IS NULL 
  AND EXISTS (
    SELECT 1 FROM herd_anml ha
    WHERE ha.anml_key = new.anml_key
      AND ha.xfer_in_time = new.xfer_in_time
      AND ha.xfer_out_time IS NOT NULL))
SIGNAL SQLSTATE 'Z0039'
('D0039I08: number end time must be supplied')
 !!


CREATE TRIGGER D0039I09
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.num_end_time IS NOT NULL 
  AND EXISTS (
    SELECT 1 FROM herd_anml ha
    WHERE ha.anml_key = new.anml_key
      AND ha.xfer_in_time = new.xfer_in_time
      AND new.num_end_time > VALUE(ha.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))))
SIGNAL SQLSTATE 'Z0039'
('D0039I09: number end time is after xfer out time')
 !!


CREATE TRIGGER D0039U02
  NO CASCADE BEFORE UPDATE
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET (new.map_ref, new.herd_num) = (
SELECT ha.map_ref, ha.herd_num
FROM herd_anml ha
WHERE ha.anml_key = new.anml_key
  AND ha.xfer_in_time = new.xfer_in_time)
 !!


CREATE TRIGGER D0039U10
  NO CASCADE BEFORE UPDATE OF 
                    num_end_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.num_end_time IS NULL 
  AND EXISTS (
    SELECT 1 FROM herd_anml ha
    WHERE ha.anml_key = new.anml_key
      AND ha.xfer_in_time = new.xfer_in_time
      AND ha.xfer_out_time IS NOT NULL))
SIGNAL SQLSTATE 'Z0039'
('D0039U10: number end time must be supplied')
 !!


CREATE TRIGGER D0039U11
  NO CASCADE BEFORE UPDATE OF 
                    num_end_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.num_end_time IS NOT NULL 
  AND EXISTS (
    SELECT 1 FROM herd_anml ha
    WHERE ha.anml_key = new.anml_key
      AND ha.xfer_in_time = new.xfer_in_time
      AND new.num_end_time > VALUE(ha.xfer_out_time, TIMESTAMP('9999-12-31 23:59:59'))))
SIGNAL SQLSTATE 'Z0039'
('D0039U11: number end time is after xfer out time')
 !!


CREATE TRIGGER D0039I04
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.num_st_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0039'
('D0039I04: number start time must not be in the future')
 !!


CREATE TRIGGER D0039I05
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.num_end_time) != '23:59:59')
SIGNAL SQLSTATE 'Z0039'
('D0039U05: number end time must be ''23:59:59''')
 !!


CREATE TRIGGER D0039I06
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.num_end_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0039'
('D0039U06: number end time must not be in the future')
 !!


CREATE TRIGGER D0039I07
  NO CASCADE BEFORE INSERT
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM herd_anml_num han
    WHERE han.map_ref = new.map_ref
      AND han.herd_num = new.herd_num
      AND han.anml_num = new.anml_num
      AND DATE(new.num_st_time) <= DATE (VALUE (han.num_end_time, TIMESTAMP('9999-12-31 23:59:59')))
      AND DATE (VALUE (new.num_end_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (han.num_st_time)))
SIGNAL SQLSTATE 'Z0039'
('D0039I07: the period overlaps with an existing period (same anml num)')
 !!


CREATE TRIGGER D0039U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0039U03
  AFTER UPDATE
  ON HERD_ANML_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num)
INSERT INTO del_herd_anml_num (
  anml_key
, map_ref
, herd_num)
VALUES (
  old.anml_key
, old.map_ref
, old.herd_num)
 !!


CREATE TRIGGER D0039U04
  NO CASCADE BEFORE UPDATE OF 
                    num_end_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.num_end_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0039'
('D0039U04: number end time must not be in the future')
 !!


CREATE TRIGGER D0039U05
  NO CASCADE BEFORE UPDATE OF 
                    num_st_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (DATE(new.num_st_time) > CURRENT DATE)
SIGNAL SQLSTATE 'Z0039'
('D0039U05: number start time must not be in the future')
 !!


CREATE TRIGGER D0039U06
  NO CASCADE BEFORE UPDATE OF 
                    num_end_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.num_end_time) != '23:59:59')
SIGNAL SQLSTATE 'Z0039'
('D0039U06: number end time must be ''23:59:59''')
 !!


CREATE TRIGGER D0039U07
  NO CASCADE BEFORE UPDATE OF 
                    num_st_time
  ON HERD_ANML_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (TIME(new.num_st_time) != '00:00:00')
SIGNAL SQLSTATE 'Z0039'
('D0039U07 number start time must be ''00:00:00''')
 !!


CREATE TRIGGER D0039U08
  NO CASCADE BEFORE UPDATE OF 
                    num_st_time,
                    num_end_time
  ON HERD_ANML_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.num_st_time != new.num_st_time
   OR VALUE (old.num_end_time, TIMESTAMP('9999-12-31 23:59:59')) != VALUE (new.num_end_time, TIMESTAMP('9999-12-31 23:59:59')))
  AND EXISTS (
    SELECT 1 FROM herd_anml_num han
     WHERE han.anml_key = new.anml_key
       AND han.xfer_in_time = new.xfer_in_time
       AND han.num_st_time != old.num_st_time
       AND DATE (new.num_st_time) <= DATE (VALUE (han.num_end_time, TIMESTAMP('9999-12-31 23:59:59')))
       AND DATE (VALUE (new.num_end_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (han.num_st_time)))
SIGNAL SQLSTATE 'Z0039'
('D0039U08: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0039U09
  NO CASCADE BEFORE UPDATE
  ON HERD_ANML_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM herd_anml_num han
     WHERE han.map_ref = new.map_ref
       AND han.herd_num = new.herd_num
       AND han.anml_num = new.anml_num
       AND (han.anml_key != old.anml_key
        OR han.xfer_in_time != old.xfer_in_time
        OR han.num_st_time != old.num_st_time)
       AND DATE (new.num_st_time) <= DATE (VALUE (han.num_end_time, TIMESTAMP('9999-12-31 23:59:59')))
       AND DATE (VALUE (new.num_end_time, TIMESTAMP('9999-12-31 23:59:59'))) >= DATE (han.num_st_time)))
SIGNAL SQLSTATE 'Z0039'
('D0039U09: the period overlaps with an existing period (same anml num)')
 !!


CREATE TRIGGER D0847U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ASSOC_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_ASSOC_REF AFTER DELETE ON HERD_ASSOC_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_PARTY_ASSOC WHERE HERD_PARTY_ASSOC.HERD_ASSOC_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_ASSOC_REF  HERD_PARTY_ASSOC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ea0", PARENT_OWNER="", PARENT_TABLE="HERD_ASSOC_REF"
    CHILD_OWNER="", CHILD_TABLE="HERD_PARTY_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0847_001", FK_COLUMNS="HERD_ASSOC_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_ASSOC_REF because HERD_PARTY_ASSOC exists.')
 !!


CREATE TRIGGER D0520I51
  NO CASCADE BEFORE INSERT
  ON HERD_BARCD_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date_d IS NULL 
  AND new.run_date IS NOT NULL
   OR CHAR(new.run_date_d,ISO) = '0001-01-01'
  AND new.run_date IS NOT NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0520I52
  NO CASCADE BEFORE INSERT
  ON HERD_BARCD_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date IS NULL 
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01'
   OR new.run_date = 0
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01')
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0520U01
  NO CASCADE BEFORE UPDATE
  ON HERD_BARCD_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0520U51
  NO CASCADE BEFORE UPDATE OF 
                    run_date
  ON HERD_BARCD_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date != new.run_date
   OR old.run_date IS NULL AND new.run_date IS NOT NULL
   OR old.run_date IS NOT NULL AND new.run_date IS NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 OR new.run_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0520U52
  NO CASCADE BEFORE UPDATE OF 
                    run_date_d
  ON HERD_BARCD_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date_d != new.run_date_d
   OR old.run_date_d IS NULL and new.run_date_d IS NOT NULL
   OR old.run_date_d IS NOT NULL and new.run_date_d IS NULL)
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL OR new.run_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0504I51
  NO CASCADE BEFORE INSERT
  ON HERD_DT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0504I52
  NO CASCADE BEFORE INSERT
  ON HERD_DT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0504I53
  NO CASCADE BEFORE INSERT
  ON HERD_DT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date_d IS NULL 
  AND new.proc_date IS NOT NULL
   OR CHAR(new.proc_date_d,ISO) = '0001-01-01'
  AND new.proc_date IS NOT NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0504I54
  NO CASCADE BEFORE INSERT
  ON HERD_DT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date IS NULL 
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01'
   OR new.proc_date = 0
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01')
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0504U01
  NO CASCADE BEFORE UPDATE
  ON HERD_DT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0504U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HERD_DT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0504U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HERD_DT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0504U53
  NO CASCADE BEFORE UPDATE OF 
                    proc_date
  ON HERD_DT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date != new.proc_date
   OR old.proc_date IS NULL AND new.proc_date IS NOT NULL
   OR old.proc_date IS NOT NULL AND new.proc_date IS NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 OR new.proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0504U54
  NO CASCADE BEFORE UPDATE OF 
                    proc_date_d
  ON HERD_DT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date_d != new.proc_date_d
   OR old.proc_date_d IS NULL and new.proc_date_d IS NOT NULL
   OR old.proc_date_d IS NOT NULL and new.proc_date_d IS NULL)
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL OR new.proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_HERD_DT AFTER DELETE ON HERD_DT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM UNID_ANML_DT_RSLT WHERE UNID_ANML_DT_RSLT.MAP_REF = old.MAP_REF AND
                                                    UNID_ANML_DT_RSLT.HERD_NUM = old.HERD_NUM AND
                                                    UNID_ANML_DT_RSLT.DT_CD = old.DT_CD AND
                                                    UNID_ANML_DT_RSLT.TEST_DATE = old.DATE) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT  UNID_ANML_DT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009df7", PARENT_OWNER="", PARENT_TABLE="HERD_DT"
    CHILD_OWNER="", CHILD_TABLE="UNID_ANML_DT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0504_003", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD""TEST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT because UNID_ANML_DT_RSLT exists.')
 !!

CREATE  TRIGGER tD_HERD_DT2 AFTER DELETE ON HERD_DT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POOL_DT_RSLT WHERE POOL_DT_RSLT.MAP_REF = old.MAP_REF AND
                                               POOL_DT_RSLT.HERD_NUM = old.HERD_NUM AND
                                               POOL_DT_RSLT.DT_CD = old.DT_CD AND
                                               POOL_DT_RSLT.TEST_DATE = old.DATE) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT  POOL_DT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009634", PARENT_OWNER="", PARENT_TABLE="HERD_DT"
    CHILD_OWNER="", CHILD_TABLE="POOL_DT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0504_001", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD""TEST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT because POOL_DT_RSLT exists.')
 !!

CREATE  TRIGGER tD_HERD_DT3 AFTER DELETE ON HERD_DT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_DT_RSLT WHERE ANML_DT_RSLT.MAP_REF = old.MAP_REF AND
                                               ANML_DT_RSLT.HERD_NUM = old.HERD_NUM AND
                                               ANML_DT_RSLT.DT_CD = old.DT_CD AND
                                               ANML_DT_RSLT.TEST_DATE = old.DATE) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT  ANML_DT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009b74", PARENT_OWNER="", PARENT_TABLE="HERD_DT"
    CHILD_OWNER="", CHILD_TABLE="ANML_DT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0504_002", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD""TEST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT because ANML_DT_RSLT exists.')
 !!

CREATE  TRIGGER tD_HERD_DT4 AFTER DELETE ON HERD_DT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_DT_HOLD WHERE ANML_DT_HOLD.MAP_REF = old.MAP_REF AND
                                               ANML_DT_HOLD.HERD_NUM = old.HERD_NUM AND
                                               ANML_DT_HOLD.DT_CD = old.DT_CD AND
                                               ANML_DT_HOLD.TEST_DATE = old.DATE) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT  ANML_DT_HOLD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f2a", PARENT_OWNER="", PARENT_TABLE="HERD_DT"
    CHILD_OWNER="", CHILD_TABLE="ANML_DT_HOLD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0504_004", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD""TEST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT because ANML_DT_HOLD exists.')
 !!


CREATE TRIGGER D0511I54
  NO CASCADE BEFORE INSERT
  ON HERD_DT_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0511U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HERD_DT_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0511I52
  NO CASCADE BEFORE INSERT
  ON HERD_DT_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0511I51
  NO CASCADE BEFORE INSERT
  ON HERD_DT_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0511U53
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON HERD_DT_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0511I53
  NO CASCADE BEFORE INSERT
  ON HERD_DT_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0511U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HERD_DT_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0511U01
  NO CASCADE BEFORE UPDATE
  ON HERD_DT_AUDIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0511U54
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON HERD_DT_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0508I52
  NO CASCADE BEFORE INSERT
  ON HERD_DT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0508U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON HERD_DT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0508U01
  NO CASCADE BEFORE UPDATE
  ON HERD_DT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0508U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON HERD_DT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0508I51
  NO CASCADE BEFORE INSERT
  ON HERD_DT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503U52
  NO CASCADE BEFORE UPDATE OF 
                    clv_six_mth_date_d
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clv_six_mth_date_d != new.clv_six_mth_date_d
   OR old.clv_six_mth_date_d IS NULL and new.clv_six_mth_date_d IS NOT NULL
   OR old.clv_six_mth_date_d IS NOT NULL and new.clv_six_mth_date_d IS NULL)
SET new.clv_six_mth_date =
  CASE WHEN new.clv_six_mth_date_d IS NULL OR new.clv_six_mth_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503I52
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clv_six_mth_date IS NULL 
  AND new.clv_six_mth_date_d IS NOT NULL
  AND CHAR(new.clv_six_mth_date_d,ISO) != '0001-01-01'
   OR new.clv_six_mth_date = 0
  AND new.clv_six_mth_date_d IS NOT NULL
  AND CHAR(new.clv_six_mth_date_d,ISO) != '0001-01-01')
SET new.clv_six_mth_date =
  CASE WHEN new.clv_six_mth_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.clv_six_mth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503I53
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503U53
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503I51
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clv_six_mth_date_d IS NULL 
  AND new.clv_six_mth_date IS NOT NULL
   OR CHAR(new.clv_six_mth_date_d,ISO) = '0001-01-01'
  AND new.clv_six_mth_date IS NOT NULL)
SET new.clv_six_mth_date_d =
  CASE WHEN new.clv_six_mth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clv_six_mth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503I54
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503I55
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.next_test_date_d IS NULL 
  AND new.next_test_date IS NOT NULL
   OR CHAR(new.next_test_date_d,ISO) = '0001-01-01'
  AND new.next_test_date IS NOT NULL)
SET new.next_test_date_d =
  CASE WHEN new.next_test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.next_test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503U56
  NO CASCADE BEFORE UPDATE OF 
                    next_test_date_d
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.next_test_date_d != new.next_test_date_d
   OR old.next_test_date_d IS NULL and new.next_test_date_d IS NOT NULL
   OR old.next_test_date_d IS NOT NULL and new.next_test_date_d IS NULL)
SET new.next_test_date =
  CASE WHEN new.next_test_date_d IS NULL OR new.next_test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.next_test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.next_test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.next_test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503U01
  NO CASCADE BEFORE UPDATE
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0503I56
  NO CASCADE BEFORE INSERT
  ON HERD_DT_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.next_test_date IS NULL 
  AND new.next_test_date_d IS NOT NULL
  AND CHAR(new.next_test_date_d,ISO) != '0001-01-01'
   OR new.next_test_date = 0
  AND new.next_test_date_d IS NOT NULL
  AND CHAR(new.next_test_date_d,ISO) != '0001-01-01')
SET new.next_test_date =
  CASE WHEN new.next_test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.next_test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.next_test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.next_test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503U55
  NO CASCADE BEFORE UPDATE OF 
                    next_test_date
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.next_test_date != new.next_test_date
   OR old.next_test_date IS NULL AND new.next_test_date IS NOT NULL
   OR old.next_test_date IS NOT NULL AND new.next_test_date IS NULL)
SET new.next_test_date_d =
  CASE WHEN new.next_test_date = 0 OR new.next_test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.next_test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0503U54
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0503U51
  NO CASCADE BEFORE UPDATE OF 
                    clv_six_mth_date
  ON HERD_DT_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clv_six_mth_date != new.clv_six_mth_date
   OR old.clv_six_mth_date IS NULL AND new.clv_six_mth_date IS NOT NULL
   OR old.clv_six_mth_date IS NOT NULL AND new.clv_six_mth_date IS NULL)
SET new.clv_six_mth_date_d =
  CASE WHEN new.clv_six_mth_date = 0 OR new.clv_six_mth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clv_six_mth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE  TRIGGER tD_HERD_DT_PLAN AFTER DELETE ON HERD_DT_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_AUDIT WHERE HERD_DT_AUDIT.MAP_REF = old.MAP_REF AND
                                                HERD_DT_AUDIT.HERD_NUM = old.HERD_NUM AND
                                                HERD_DT_AUDIT.DT_CD = old.DT_CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT_PLAN  HERD_DT_AUDIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000937e", PARENT_OWNER="", PARENT_TABLE="HERD_DT_PLAN"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_AUDIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0503_002", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT_PLAN because HERD_DT_AUDIT exists.')
 !!

CREATE  TRIGGER tD_HERD_DT_PLAN2 AFTER DELETE ON HERD_DT_PLAN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT WHERE HERD_DT.MAP_REF = old.MAP_REF AND
                                          HERD_DT.HERD_NUM = old.HERD_NUM AND
                                          HERD_DT.DT_CD = old.DT_CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT_PLAN  HERD_DT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f1e", PARENT_OWNER="", PARENT_TABLE="HERD_DT_PLAN"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0503_001", FK_COLUMNS="MAP_REF""HERD_NUM""DT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT_PLAN because HERD_DT exists.')
 !!


CREATE TRIGGER D0514U01
  NO CASCADE BEFORE UPDATE
  ON HERD_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_DT_RSLT AFTER DELETE ON HERD_DT_RSLT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_PLAN WHERE HERD_DT_PLAN.HERD_DT_RSLT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT_RSLT  HERD_DT_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dab", PARENT_OWNER="", PARENT_TABLE="HERD_DT_RSLT"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0514_001", FK_COLUMNS="HERD_DT_RSLT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT_RSLT because HERD_DT_PLAN exists.')
 !!

CREATE  TRIGGER tD_HERD_DT_RSLT2 AFTER DELETE ON HERD_DT_RSLT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_AUDIT WHERE HERD_DT_AUDIT.DT_RSLT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT_RSLT  HERD_DT_AUDIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000954c", PARENT_OWNER="", PARENT_TABLE="HERD_DT_RSLT"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_AUDIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0514_003", FK_COLUMNS="DT_RSLT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT_RSLT because HERD_DT_AUDIT exists.')
 !!

CREATE  TRIGGER tD_HERD_DT_RSLT3 AFTER DELETE ON HERD_DT_RSLT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_AUDIT WHERE HERD_DT_AUDIT.PREV_DT_RSLT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_DT_RSLT  HERD_DT_AUDIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000909d", PARENT_OWNER="", PARENT_TABLE="HERD_DT_RSLT"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_AUDIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0514_002", FK_COLUMNS="PREV_DT_RSLT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_DT_RSLT because HERD_DT_AUDIT exists.')
 !!


CREATE TRIGGER D0016I54
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_rcd_date IS NULL 
  AND new.ab_rcd_date_d IS NOT NULL
  AND CHAR(new.ab_rcd_date_d,ISO) != '0001-01-01'
   OR new.ab_rcd_date = 0
  AND new.ab_rcd_date_d IS NOT NULL
  AND CHAR(new.ab_rcd_date_d,ISO) != '0001-01-01')
SET new.ab_rcd_date =
  CASE WHEN new.ab_rcd_date_d IS NULL THEN 0 ELSE
  INT(new.ab_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U07
  NO CASCADE BEFORE UPDATE
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((new.map_ref != old.map_ref
    OR new.herd_num != old.herd_num
    OR new.ownr_ptpt_cd != old.ownr_ptpt_cd
    OR new.sr_area_ssn != old.sr_area_ssn)
  AND  EXISTS (
    SELECT 1 FROM herd h1
                , herd_dtl hd2
                , herd h2
    WHERE h1.map_ref = new.map_ref
      AND h1.herd_num = new.herd_num
      AND h1.herd_cd != 0
      AND h1.end_date_d IS NULL
      AND h1.end_date = 0
      AND hd2.ownr_ptpt_cd = new.ownr_ptpt_cd
      AND hd2.sr_area_ssn = new.sr_area_ssn
      AND (hd2.map_ref != new.map_ref
       OR hd2.herd_num != new.herd_num)
      AND h2.map_ref = hd2.map_ref
      AND h2.herd_num = hd2.herd_num
      AND h2.herd_cd != 0
      AND h2.end_date_d IS NULL
      AND h2.end_date = 0) )
SIGNAL SQLSTATE 'Z0016'
('D0016U07: Other active herd for ' || new.ownr_ptpt_cd || ' in ' || LTRIM(RTRIM(CHAR(new.sr_area_ssn))))
 !!


CREATE TRIGGER D0016U70
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_d != new.mtng_st_date_d
   OR old.mtng_st_date_d IS NULL and new.mtng_st_date_d IS NOT NULL
   OR old.mtng_st_date_d IS NOT NULL and new.mtng_st_date_d IS NULL)
SET new.mtng_st_date =
  CASE WHEN new.mtng_st_date_d IS NULL OR new.mtng_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.mtng_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U64
  NO CASCADE BEFORE UPDATE OF 
                    ht_can_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ht_can_date_d != new.ht_can_date_d
   OR old.ht_can_date_d IS NULL and new.ht_can_date_d IS NOT NULL
   OR old.ht_can_date_d IS NOT NULL and new.ht_can_date_d IS NULL)
SET new.ht_can_date =
  CASE WHEN new.ht_can_date_d IS NULL OR new.ht_can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ht_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I05
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from sr_area sa
    WHERE sa.rm_area_rgn_cd = new.rm_area_rgn_cd
      AND sa.dm_area_cd = new.dm_area_cd
      AND sa.cd = new.sr_area_cd
      AND sa.ssn = new.sr_area_ssn) )
SIGNAL SQLSTATE 'Z0016'
('D0016I05: sales rep does not exist on sr_area')
 !!


CREATE TRIGGER D0016I52
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_can_date IS NULL 
  AND new.ab_can_date_d IS NOT NULL
  AND CHAR(new.ab_can_date_d,ISO) != '0001-01-01'
   OR new.ab_can_date = 0
  AND new.ab_can_date_d IS NOT NULL
  AND CHAR(new.ab_can_date_d,ISO) != '0001-01-01')
SET new.ab_can_date =
  CASE WHEN new.ab_can_date_d IS NULL THEN 0 ELSE
  INT(new.ab_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U72
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I02
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ownr_ptpt_cd != ' ')
SET new.ownr_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd)
 !!


CREATE TRIGGER D0016I51
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_can_date_d IS NULL 
  AND new.ab_can_date IS NOT NULL
   OR CHAR(new.ab_can_date_d,ISO) = '0001-01-01'
  AND new.ab_can_date IS NOT NULL)
SET new.ab_can_date_d =
  CASE WHEN new.ab_can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U66
  NO CASCADE BEFORE UPDATE OF 
                    ht_rcd_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ht_rcd_date_d != new.ht_rcd_date_d
   OR old.ht_rcd_date_d IS NULL and new.ht_rcd_date_d IS NOT NULL
   OR old.ht_rcd_date_d IS NOT NULL and new.ht_rcd_date_d IS NULL)
SET new.ht_rcd_date =
  CASE WHEN new.ht_rcd_date_d IS NULL OR new.ht_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ht_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U56
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_2_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_2_d != new.clvg_st_date_2_d
   OR old.clvg_st_date_2_d IS NULL and new.clvg_st_date_2_d IS NOT NULL
   OR old.clvg_st_date_2_d IS NOT NULL and new.clvg_st_date_2_d IS NULL)
SET new.clvg_st_date_2 =
  CASE WHEN new.clvg_st_date_2_d IS NULL OR new.clvg_st_date_2_d = '0001-01-01' THEN 0 ELSE
  INT(new.clvg_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0016I63
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_can_date_d IS NULL 
  AND new.ht_can_date IS NOT NULL
   OR CHAR(new.ht_can_date_d,ISO) = '0001-01-01'
  AND new.ht_can_date IS NOT NULL)
SET new.ht_can_date_d =
  CASE WHEN new.ht_can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ht_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I64
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_can_date IS NULL 
  AND new.ht_can_date_d IS NOT NULL
  AND CHAR(new.ht_can_date_d,ISO) != '0001-01-01'
   OR new.ht_can_date = 0
  AND new.ht_can_date_d IS NOT NULL
  AND CHAR(new.ht_can_date_d,ISO) != '0001-01-01')
SET new.ht_can_date =
  CASE WHEN new.ht_can_date_d IS NULL THEN 0 ELSE
  INT(new.ht_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U60
  NO CASCADE BEFORE UPDATE OF 
                    hr_can_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hr_can_date_d != new.hr_can_date_d
   OR old.hr_can_date_d IS NULL and new.hr_can_date_d IS NOT NULL
   OR old.hr_can_date_d IS NOT NULL and new.hr_can_date_d IS NULL)
SET new.hr_can_date =
  CASE WHEN new.hr_can_date_d IS NULL OR new.hr_can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.hr_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I71
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U05
  NO CASCADE BEFORE UPDATE OF 
                    rprt_rcpnt_ptpt_cd
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_rcpnt_ptpt_cd != old.rprt_rcpnt_ptpt_cd)
SET new.rprt_party_id = (
  CASE WHEN new.rprt_rcpnt_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rprt_rcpnt_ptpt_cd)
  END
 !!


CREATE TRIGGER D0016U58
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_d != new.clvg_st_date_d
   OR old.clvg_st_date_d IS NULL and new.clvg_st_date_d IS NOT NULL
   OR old.clvg_st_date_d IS NOT NULL and new.clvg_st_date_d IS NULL)
SET new.clvg_st_date =
  CASE WHEN new.clvg_st_date_d IS NULL OR new.clvg_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.clvg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U08
  AFTER UPDATE
  ON HERD_DTL
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_dtl_hist(
  map_ref
, herd_num
, upd_date
, upd_time
, rcd_date
, ownr_ptpt_cd
, sr_area_ssn
, lic_sts_cd
, ab_sts_cd
, ht_sts_cd
, ctct_ptpt_cd
, sply_dco_cd
, sply_dco_num
, pymt_dco_cd
, pymt_dco_num
, frst_minda_ind
, um_opt_cd
, pymt_dco_num_sfx
, est_cow_cnt
, est_yrlg_cnt
, high_tag_num
, clvg_st_date
, hr_st_date
, ht_st_date
, ab_st_date
, um_st_date
, ht_can_date
, ab_can_date
, hr_can_date
, um_can_date
, fee_pymt_mthd_cd
, acct_xmit_ind
, sv_dtl_upd_date
, pymt_spread_cd
, sv_rgn_cd
, rm_area_rgn_cd
, dm_area_cd
, sr_area_cd
, rprt_rcpnt_ptpt_cd
, clvg_st_date_2
, mtng_st_date_1
, mtng_st_date_2
, co_vst_ind
, yrlg_chrg_cd
, est_calf_cnt
, repl_hfr_cnt
, anoestrum_ind
, investamate_ind
, minda_opt_cd
, leased_cow_cnt
, cmt
, evng_ab_ind
, brd_step_sts_cd
, minda_med_cd
, pymt_dco_party
, cow_lepto_ind
, yrlg_lepto_ind
, ownr_party_id
, ctct_party_id
, rprt_party_id
, rcd_date_d
, hr_st_date_d
, hr_can_date_d
, ht_st_date_d
, ht_can_date_d
, ab_st_date_d
, ab_can_date_d
, clvg_st_date_d
, clvg_st_date_2_d
, mtng_st_date_1_d
, mtng_st_date_2_d
, sv_dtl_upd_date_d
, upd_date_d
, sales_rltnshp_cd
, sof_print_ind
, sof_print_date
, phone_ctct_name
, tdm_sps_herd_ind
, est_2yr_olds
, mindapro_6pk_disc_ind
, upd_timestamp
, shareholder_elig_ind
, link_addr_ind
, shareholder_elig_end_date)
VALUES (
  old.map_ref
, old.herd_num
, INT(CURRENT DATE) - 19000000
, INT(CURRENT TIME)
, old.rcd_date
, old.ownr_ptpt_cd
, old.sr_area_ssn
, old.lic_sts_cd
, old.ab_sts_cd
, old.ht_sts_cd
, old.ctct_ptpt_cd
, old.sply_dco_cd
, old.sply_dco_num
, old.pymt_dco_cd
, old.pymt_dco_num
, old.frst_minda_ind
, old.um_opt_cd
, old.pymt_dco_num_sfx
, old.est_cow_cnt
, old.est_yrlg_cnt
, old.high_tag_num
, old.clvg_st_date
, old.hr_rcd_date
, old.ht_rcd_date
, old.ab_rcd_date
, old.um_rcd_date
, old.ht_can_date
, old.ab_can_date
, old.hr_can_date
, old.um_can_date
, old.fee_pymt_mthd_cd
, old.acct_xmit_ind
, old.sv_dtl_upd_date
, old.invc_calc_mthd_cd
, old.sv_rgn_cd
, old.rm_area_rgn_cd
, old.dm_area_cd
, old.sr_area_cd
, old.rprt_rcpnt_ptpt_cd
, old.clvg_st_date_2
, old.mtng_st_date
, old.mtng_st_date_2
, old.co_vst_ind
, old.yrlg_chrg_cd
, old.est_calf_cnt
, old.repl_hfr_cnt
, old.anoestrum_ind
, old.investamate_ind
, old.minda_opt_cd
, old.leased_cow_cnt
, old.cmt
, old.evng_ab_ind
, old.brd_step_sts_cd
, old.minda_med_cd
, old.pymt_dco_party
, old.cow_lepto_ind
, old.yrlg_lepto_ind
, old.ownr_party_id
, old.ctct_party_id
, old.rprt_party_id
, old.rcd_date_d
, old.hr_rcd_date_d
, old.hr_can_date_d
, old.ht_rcd_date_d
, old.ht_can_date_d
, old.ab_rcd_date_d
, old.ab_can_date_d
, old.clvg_st_date_d
, old.clvg_st_date_2_d
, old.mtng_st_date_d
, old.mtng_st_date_2_d
, old.sv_dtl_upd_date_d
, CURRENT DATE
, old.sales_rltnshp_cd
, old.sof_print_ind
, old.sof_print_date
, old.phone_ctct_name
, old.tdm_sps_herd_ind
, old.est_2yr_olds
, old.mindapro_6pk_disc_ind
, old.upd_time
, old.shareholder_elig_ind
, old.link_addr_ind
, old.shareholder_elig_end_date)
 !!


CREATE TRIGGER D0016I68
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_2 IS NULL 
  AND new.mtng_st_date_2_d IS NOT NULL
  AND CHAR(new.mtng_st_date_2_d,ISO) != '0001-01-01'
   OR new.mtng_st_date_2 = 0
  AND new.mtng_st_date_2_d IS NOT NULL
  AND CHAR(new.mtng_st_date_2_d,ISO) != '0001-01-01')
SET new.mtng_st_date_2 =
  CASE WHEN new.mtng_st_date_2_d IS NULL THEN 0 ELSE
  INT(new.mtng_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0016I53
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_rcd_date_d IS NULL 
  AND new.ab_rcd_date IS NOT NULL
   OR CHAR(new.ab_rcd_date_d,ISO) = '0001-01-01'
  AND new.ab_rcd_date IS NOT NULL)
SET new.ab_rcd_date_d =
  CASE WHEN new.ab_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I73
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sv_dtl_upd_date_d IS NULL 
  AND new.sv_dtl_upd_date IS NOT NULL
   OR CHAR(new.sv_dtl_upd_date_d,ISO) = '0001-01-01'
  AND new.sv_dtl_upd_date IS NOT NULL)
SET new.sv_dtl_upd_date_d =
  CASE WHEN new.sv_dtl_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sv_dtl_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I56
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_2 IS NULL 
  AND new.clvg_st_date_2_d IS NOT NULL
  AND CHAR(new.clvg_st_date_2_d,ISO) != '0001-01-01'
   OR new.clvg_st_date_2 = 0
  AND new.clvg_st_date_2_d IS NOT NULL
  AND CHAR(new.clvg_st_date_2_d,ISO) != '0001-01-01')
SET new.clvg_st_date_2 =
  CASE WHEN new.clvg_st_date_2_d IS NULL THEN 0 ELSE
  INT(new.clvg_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0016U59
  NO CASCADE BEFORE UPDATE OF 
                    hr_can_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hr_can_date != new.hr_can_date
   OR old.hr_can_date IS NULL AND new.hr_can_date IS NOT NULL
   OR old.hr_can_date IS NOT NULL AND new.hr_can_date IS NULL)
SET new.hr_can_date_d =
  CASE WHEN new.hr_can_date = 0 OR new.hr_can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hr_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U62
  NO CASCADE BEFORE UPDATE OF 
                    hr_rcd_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hr_rcd_date_d != new.hr_rcd_date_d
   OR old.hr_rcd_date_d IS NULL and new.hr_rcd_date_d IS NOT NULL
   OR old.hr_rcd_date_d IS NOT NULL and new.hr_rcd_date_d IS NULL)
SET new.hr_rcd_date =
  CASE WHEN new.hr_rcd_date_d IS NULL OR new.hr_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.hr_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U73
  NO CASCADE BEFORE UPDATE OF 
                    sv_dtl_upd_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sv_dtl_upd_date != new.sv_dtl_upd_date
   OR old.sv_dtl_upd_date IS NULL AND new.sv_dtl_upd_date IS NOT NULL
   OR old.sv_dtl_upd_date IS NOT NULL AND new.sv_dtl_upd_date IS NULL)
SET new.sv_dtl_upd_date_d =
  CASE WHEN new.sv_dtl_upd_date = 0 OR new.sv_dtl_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sv_dtl_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I61
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hr_rcd_date_d IS NULL 
  AND new.hr_rcd_date IS NOT NULL
   OR CHAR(new.hr_rcd_date_d,ISO) = '0001-01-01'
  AND new.hr_rcd_date IS NOT NULL)
SET new.hr_rcd_date_d =
  CASE WHEN new.hr_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hr_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U01
  NO CASCADE BEFORE UPDATE OF 
                    ownr_ptpt_cd
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0016'
('D0016U01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0016I74
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sv_dtl_upd_date IS NULL 
  AND new.sv_dtl_upd_date_d IS NOT NULL
  AND CHAR(new.sv_dtl_upd_date_d,ISO) != '0001-01-01'
   OR new.sv_dtl_upd_date = 0
  AND new.sv_dtl_upd_date_d IS NOT NULL
  AND CHAR(new.sv_dtl_upd_date_d,ISO) != '0001-01-01')
SET new.sv_dtl_upd_date =
  CASE WHEN new.sv_dtl_upd_date_d IS NULL THEN 0 ELSE
  INT(new.sv_dtl_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I57
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_d IS NULL 
  AND new.clvg_st_date IS NOT NULL
   OR CHAR(new.clvg_st_date_d,ISO) = '0001-01-01'
  AND new.clvg_st_date IS NOT NULL)
SET new.clvg_st_date_d =
  CASE WHEN new.clvg_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U03
  NO CASCADE BEFORE UPDATE OF 
                    ownr_ptpt_cd
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ownr_ptpt_cd != old.ownr_ptpt_cd)
SET new.ownr_party_id = (
  CASE WHEN new.ownr_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd)
  END
 !!


CREATE TRIGGER D0016U52
  NO CASCADE BEFORE UPDATE OF 
                    ab_can_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_can_date_d != new.ab_can_date_d
   OR old.ab_can_date_d IS NULL and new.ab_can_date_d IS NOT NULL
   OR old.ab_can_date_d IS NOT NULL and new.ab_can_date_d IS NULL)
SET new.ab_can_date =
  CASE WHEN new.ab_can_date_d IS NULL OR new.ab_can_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ab_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U04
  NO CASCADE BEFORE UPDATE OF 
                    ctct_ptpt_cd
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ctct_ptpt_cd != old.ctct_ptpt_cd)
SET new.ctct_party_id = (
  CASE WHEN new.ctct_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ctct_ptpt_cd)
  END
 !!


CREATE TRIGGER D0016I62
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hr_rcd_date IS NULL 
  AND new.hr_rcd_date_d IS NOT NULL
  AND CHAR(new.hr_rcd_date_d,ISO) != '0001-01-01'
   OR new.hr_rcd_date = 0
  AND new.hr_rcd_date_d IS NOT NULL
  AND CHAR(new.hr_rcd_date_d,ISO) != '0001-01-01')
SET new.hr_rcd_date =
  CASE WHEN new.hr_rcd_date_d IS NULL THEN 0 ELSE
  INT(new.hr_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I58
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date IS NULL 
  AND new.clvg_st_date_d IS NOT NULL
  AND CHAR(new.clvg_st_date_d,ISO) != '0001-01-01'
   OR new.clvg_st_date = 0
  AND new.clvg_st_date_d IS NOT NULL
  AND CHAR(new.clvg_st_date_d,ISO) != '0001-01-01')
SET new.clvg_st_date =
  CASE WHEN new.clvg_st_date_d IS NULL THEN 0 ELSE
  INT(new.clvg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I66
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_rcd_date IS NULL 
  AND new.ht_rcd_date_d IS NOT NULL
  AND CHAR(new.ht_rcd_date_d,ISO) != '0001-01-01'
   OR new.ht_rcd_date = 0
  AND new.ht_rcd_date_d IS NOT NULL
  AND CHAR(new.ht_rcd_date_d,ISO) != '0001-01-01')
SET new.ht_rcd_date =
  CASE WHEN new.ht_rcd_date_d IS NULL THEN 0 ELSE
  INT(new.ht_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I01
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0016'
('D0016I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0016U54
  NO CASCADE BEFORE UPDATE OF 
                    ab_rcd_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_rcd_date_d != new.ab_rcd_date_d
   OR old.ab_rcd_date_d IS NULL and new.ab_rcd_date_d IS NOT NULL
   OR old.ab_rcd_date_d IS NOT NULL and new.ab_rcd_date_d IS NULL)
SET new.ab_rcd_date =
  CASE WHEN new.ab_rcd_date_d IS NULL OR new.ab_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ab_rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U57
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date != new.clvg_st_date
   OR old.clvg_st_date IS NULL AND new.clvg_st_date IS NOT NULL
   OR old.clvg_st_date IS NOT NULL AND new.clvg_st_date IS NULL)
SET new.clvg_st_date_d =
  CASE WHEN new.clvg_st_date = 0 OR new.clvg_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I06
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM herd h1
                , herd_dtl hd2
                , herd h2
    WHERE h1.map_ref = new.map_ref
      AND h1.herd_num = new.herd_num
      AND h1.herd_cd != 0
      AND h1.end_date_d IS NULL
      AND h1.end_date = 0
      AND hd2.ownr_ptpt_cd = new.ownr_ptpt_cd
      AND hd2.sr_area_ssn = new.sr_area_ssn
      AND (hd2.map_ref != new.map_ref
       OR hd2.herd_num != new.herd_num)
      AND h2.map_ref = hd2.map_ref
      AND h2.herd_num = hd2.herd_num
      AND h2.herd_cd != 0
      AND h2.end_date_d IS NULL
      AND h2.end_date = 0) )
SIGNAL SQLSTATE 'Z0016'
('D0016I06: Other active herd for ' || new.ownr_ptpt_cd || ' in ' || LTRIM(RTRIM(CHAR(new.sr_area_ssn))))
 !!


CREATE TRIGGER D0016D01
  AFTER DELETE
  ON HERD_DTL
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_dtl_hist(
  map_ref
, herd_num
, upd_date
, upd_time
, rcd_date
, ownr_ptpt_cd
, sr_area_ssn
, lic_sts_cd
, ab_sts_cd
, ht_sts_cd
, ctct_ptpt_cd
, sply_dco_cd
, sply_dco_num
, pymt_dco_cd
, pymt_dco_num
, frst_minda_ind
, um_opt_cd
, pymt_dco_num_sfx
, est_cow_cnt
, est_yrlg_cnt
, high_tag_num
, clvg_st_date
, hr_st_date
, ht_st_date
, ab_st_date
, um_st_date
, ht_can_date
, ab_can_date
, hr_can_date
, um_can_date
, fee_pymt_mthd_cd
, acct_xmit_ind
, sv_dtl_upd_date
, pymt_spread_cd
, sv_rgn_cd
, rm_area_rgn_cd
, dm_area_cd
, sr_area_cd
, rprt_rcpnt_ptpt_cd
, clvg_st_date_2
, mtng_st_date_1
, mtng_st_date_2
, co_vst_ind
, yrlg_chrg_cd
, est_calf_cnt
, repl_hfr_cnt
, anoestrum_ind
, investamate_ind
, minda_opt_cd
, leased_cow_cnt
, cmt
, evng_ab_ind
, brd_step_sts_cd
, minda_med_cd
, pymt_dco_party
, cow_lepto_ind
, yrlg_lepto_ind
, ownr_party_id
, ctct_party_id
, rprt_party_id
, rcd_date_d
, hr_st_date_d
, hr_can_date_d
, ht_st_date_d
, ht_can_date_d
, ab_st_date_d
, ab_can_date_d
, clvg_st_date_d
, clvg_st_date_2_d
, mtng_st_date_1_d
, mtng_st_date_2_d
, sv_dtl_upd_date_d
, upd_date_d
, sales_rltnshp_cd
, sof_print_ind
, sof_print_date
, phone_ctct_name
, tdm_sps_herd_ind
, est_2yr_olds
, mindapro_6pk_disc_ind
, upd_timestamp
, shareholder_elig_ind
, link_addr_ind
, shareholder_elig_end_date)
VALUES (
  old.map_ref
, old.herd_num
, INT(CURRENT DATE) - 19000000
, INT(CURRENT TIME)
, old.rcd_date
, old.ownr_ptpt_cd
, old.sr_area_ssn
, old.lic_sts_cd
, old.ab_sts_cd
, old.ht_sts_cd
, old.ctct_ptpt_cd
, old.sply_dco_cd
, old.sply_dco_num
, old.pymt_dco_cd
, old.pymt_dco_num
, old.frst_minda_ind
, old.um_opt_cd
, old.pymt_dco_num_sfx
, old.est_cow_cnt
, old.est_yrlg_cnt
, old.high_tag_num
, old.clvg_st_date
, old.hr_rcd_date
, old.ht_rcd_date
, old.ab_rcd_date
, old.um_rcd_date
, old.ht_can_date
, old.ab_can_date
, old.hr_can_date
, old.um_can_date
, old.fee_pymt_mthd_cd
, old.acct_xmit_ind
, old.sv_dtl_upd_date
, old.invc_calc_mthd_cd
, old.sv_rgn_cd
, old.rm_area_rgn_cd
, old.dm_area_cd
, old.sr_area_cd
, old.rprt_rcpnt_ptpt_cd
, old.clvg_st_date_2
, old.mtng_st_date
, old.mtng_st_date_2
, old.co_vst_ind
, old.yrlg_chrg_cd
, old.est_calf_cnt
, old.repl_hfr_cnt
, old.anoestrum_ind
, old.investamate_ind
, old.minda_opt_cd
, old.leased_cow_cnt
, old.cmt
, old.evng_ab_ind
, old.brd_step_sts_cd
, old.minda_med_cd
, old.pymt_dco_party
, old.cow_lepto_ind
, old.yrlg_lepto_ind
, old.ownr_party_id
, old.ctct_party_id
, old.rprt_party_id
, old.rcd_date_d
, old.hr_rcd_date_d
, old.hr_can_date_d
, old.ht_rcd_date_d
, old.ht_can_date_d
, old.ab_rcd_date_d
, old.ab_can_date_d
, old.clvg_st_date_d
, old.clvg_st_date_2_d
, old.mtng_st_date_d
, old.mtng_st_date_2_d
, old.sv_dtl_upd_date_d
, CURRENT DATE
, old.sales_rltnshp_cd
, old.sof_print_ind
, old.sof_print_date
, old.phone_ctct_name
, old.tdm_sps_herd_ind
, old.est_2yr_olds
, old.mindapro_6pk_disc_ind
, old.upd_time
, old.shareholder_elig_ind
, old.link_addr_ind
, old.shareholder_elig_end_date)
 !!


CREATE TRIGGER D0016U06
  NO CASCADE BEFORE UPDATE
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((new.rm_area_rgn_cd != old.rm_area_rgn_cd
    OR new.dm_area_cd != old.dm_area_cd
    OR new.sr_area_cd != old.sr_area_cd
    OR new.sr_area_ssn != old.sr_area_ssn)
AND NOT EXISTS
  (SELECT 1 from sr_area sa
    WHERE sa.rm_area_rgn_cd = new.rm_area_rgn_cd
      AND sa.dm_area_cd = new.dm_area_cd
      AND sa.cd = new.sr_area_cd
      AND sa.ssn = new.sr_area_ssn) )
SIGNAL SQLSTATE 'Z0016'
('D0016U06: sales rep does not exist on sr_area')
 !!


CREATE TRIGGER D0016I69
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_d IS NULL 
  AND new.mtng_st_date IS NOT NULL
   OR CHAR(new.mtng_st_date_d,ISO) = '0001-01-01'
  AND new.mtng_st_date IS NOT NULL)
SET new.mtng_st_date_d =
  CASE WHEN new.mtng_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I65
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_rcd_date_d IS NULL 
  AND new.ht_rcd_date IS NOT NULL
   OR CHAR(new.ht_rcd_date_d,ISO) = '0001-01-01'
  AND new.ht_rcd_date IS NOT NULL)
SET new.ht_rcd_date_d =
  CASE WHEN new.ht_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ht_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U67
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_2
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_2 != new.mtng_st_date_2
   OR old.mtng_st_date_2 IS NULL AND new.mtng_st_date_2 IS NOT NULL
   OR old.mtng_st_date_2 IS NOT NULL AND new.mtng_st_date_2 IS NULL)
SET new.mtng_st_date_2_d =
  CASE WHEN new.mtng_st_date_2 = 0 OR new.mtng_st_date_2 IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U02
  NO CASCADE BEFORE UPDATE
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0016U53
  NO CASCADE BEFORE UPDATE OF 
                    ab_rcd_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_rcd_date != new.ab_rcd_date
   OR old.ab_rcd_date IS NULL AND new.ab_rcd_date IS NOT NULL
   OR old.ab_rcd_date IS NOT NULL AND new.ab_rcd_date IS NULL)
SET new.ab_rcd_date_d =
  CASE WHEN new.ab_rcd_date = 0 OR new.ab_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I03
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ctct_ptpt_cd != ' ')
SET new.ctct_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ctct_ptpt_cd)
 !!


CREATE TRIGGER D0016I67
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_2_d IS NULL 
  AND new.mtng_st_date_2 IS NOT NULL
   OR CHAR(new.mtng_st_date_2_d,ISO) = '0001-01-01'
  AND new.mtng_st_date_2 IS NOT NULL)
SET new.mtng_st_date_2_d =
  CASE WHEN new.mtng_st_date_2 = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U65
  NO CASCADE BEFORE UPDATE OF 
                    ht_rcd_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ht_rcd_date != new.ht_rcd_date
   OR old.ht_rcd_date IS NULL AND new.ht_rcd_date IS NOT NULL
   OR old.ht_rcd_date IS NOT NULL AND new.ht_rcd_date IS NULL)
SET new.ht_rcd_date_d =
  CASE WHEN new.ht_rcd_date = 0 OR new.ht_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ht_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I59
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hr_can_date_d IS NULL 
  AND new.hr_can_date IS NOT NULL
   OR CHAR(new.hr_can_date_d,ISO) = '0001-01-01'
  AND new.hr_can_date IS NOT NULL)
SET new.hr_can_date_d =
  CASE WHEN new.hr_can_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hr_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U74
  NO CASCADE BEFORE UPDATE OF 
                    sv_dtl_upd_date_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sv_dtl_upd_date_d != new.sv_dtl_upd_date_d
   OR old.sv_dtl_upd_date_d IS NULL and new.sv_dtl_upd_date_d IS NOT NULL
   OR old.sv_dtl_upd_date_d IS NOT NULL and new.sv_dtl_upd_date_d IS NULL)
SET new.sv_dtl_upd_date =
  CASE WHEN new.sv_dtl_upd_date_d IS NULL OR new.sv_dtl_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.sv_dtl_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U51
  NO CASCADE BEFORE UPDATE OF 
                    ab_can_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_can_date != new.ab_can_date
   OR old.ab_can_date IS NULL AND new.ab_can_date IS NOT NULL
   OR old.ab_can_date IS NOT NULL AND new.ab_can_date IS NULL)
SET new.ab_can_date_d =
  CASE WHEN new.ab_can_date = 0 OR new.ab_can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U68
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_2_d
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_2_d != new.mtng_st_date_2_d
   OR old.mtng_st_date_2_d IS NULL and new.mtng_st_date_2_d IS NOT NULL
   OR old.mtng_st_date_2_d IS NOT NULL and new.mtng_st_date_2_d IS NULL)
SET new.mtng_st_date_2 =
  CASE WHEN new.mtng_st_date_2_d IS NULL OR new.mtng_st_date_2_d = '0001-01-01' THEN 0 ELSE
  INT(new.mtng_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0016I72
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(new.rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U69
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date != new.mtng_st_date
   OR old.mtng_st_date IS NULL AND new.mtng_st_date IS NOT NULL
   OR old.mtng_st_date IS NOT NULL AND new.mtng_st_date IS NULL)
SET new.mtng_st_date_d =
  CASE WHEN new.mtng_st_date = 0 OR new.mtng_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U61
  NO CASCADE BEFORE UPDATE OF 
                    hr_rcd_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hr_rcd_date != new.hr_rcd_date
   OR old.hr_rcd_date IS NULL AND new.hr_rcd_date IS NOT NULL
   OR old.hr_rcd_date IS NOT NULL AND new.hr_rcd_date IS NULL)
SET new.hr_rcd_date_d =
  CASE WHEN new.hr_rcd_date = 0 OR new.hr_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hr_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I04
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_rcpnt_ptpt_cd != ' ')
SET new.rprt_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.rprt_rcpnt_ptpt_cd)
 !!


CREATE TRIGGER D0016I55
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_2_d IS NULL 
  AND new.clvg_st_date_2 IS NOT NULL
   OR CHAR(new.clvg_st_date_2_d,ISO) = '0001-01-01'
  AND new.clvg_st_date_2 IS NOT NULL)
SET new.clvg_st_date_2_d =
  CASE WHEN new.clvg_st_date_2 = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I60
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hr_can_date IS NULL 
  AND new.hr_can_date_d IS NOT NULL
  AND CHAR(new.hr_can_date_d,ISO) != '0001-01-01'
   OR new.hr_can_date = 0
  AND new.hr_can_date_d IS NOT NULL
  AND CHAR(new.hr_can_date_d,ISO) != '0001-01-01')
SET new.hr_can_date =
  CASE WHEN new.hr_can_date_d IS NULL THEN 0 ELSE
  INT(new.hr_can_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016U63
  NO CASCADE BEFORE UPDATE OF 
                    ht_can_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ht_can_date != new.ht_can_date
   OR old.ht_can_date IS NULL AND new.ht_can_date IS NOT NULL
   OR old.ht_can_date IS NOT NULL AND new.ht_can_date IS NULL)
SET new.ht_can_date_d =
  CASE WHEN new.ht_can_date = 0 OR new.ht_can_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ht_can_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U71
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016U55
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_2
  ON HERD_DTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_2 != new.clvg_st_date_2
   OR old.clvg_st_date_2 IS NULL AND new.clvg_st_date_2 IS NOT NULL
   OR old.clvg_st_date_2 IS NOT NULL AND new.clvg_st_date_2 IS NULL)
SET new.clvg_st_date_2_d =
  CASE WHEN new.clvg_st_date_2 = 0 OR new.clvg_st_date_2 IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0016I70
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date IS NULL 
  AND new.mtng_st_date_d IS NOT NULL
  AND CHAR(new.mtng_st_date_d,ISO) != '0001-01-01'
   OR new.mtng_st_date = 0
  AND new.mtng_st_date_d IS NOT NULL
  AND CHAR(new.mtng_st_date_d,ISO) != '0001-01-01')
SET new.mtng_st_date =
  CASE WHEN new.mtng_st_date_d IS NULL THEN 0 ELSE
  INT(new.mtng_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0016I07
  AFTER INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ownr_ptpt_cd != ' ')
  UPDATE herd h SET h.name = (
    SELECT p.name
    FROM party p
       , curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd
      AND p.id = pu.party_id)
  WHERE h.map_ref = new.map_ref
    AND h.herd_num = new.herd_num
    AND h.name IS NULL
 !!


CREATE TRIGGER D0016I08
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.phone_ctct_name IS NULL) 
SET new.phone_ctct_name = (
  SELECT p.phone_ctct_name
  FROM party p, curr_pfx_user cpu
  WHERE cpu.anml_id_pfx_cd = new.ownr_ptpt_cd
    AND p.id = cpu.party_id)
 !!


CREATE TRIGGER D0016I09
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.link_addr_ind IS NULL) 
SET new.link_addr_ind = (
  SELECT p.link_addr_ind
  FROM party p, curr_pfx_user cpu
  WHERE cpu.anml_id_pfx_cd = new.ownr_ptpt_cd
    AND p.id = cpu.party_id)
 !!


CREATE TRIGGER D0016I10
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shareholder_elig_end_date IS NULL) 
SET new.shareholder_elig_end_date = (
  SELECT p.shareholder_elig_end_date
  FROM party p, curr_pfx_user cpu
  WHERE cpu.anml_id_pfx_cd = new.ownr_ptpt_cd
    AND p.id = cpu.party_id)
 !!


CREATE TRIGGER D0016I11
  NO CASCADE BEFORE INSERT
  ON HERD_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shareholder_elig_ind IS NULL) 
SET new.shareholder_elig_ind = (
  SELECT p.shareholder_elig_ind
  FROM party p, curr_pfx_user cpu
  WHERE cpu.anml_id_pfx_cd = new.ownr_ptpt_cd
    AND p.id = cpu.party_id)
 !!


CREATE TRIGGER D0355I51
  NO CASCADE BEFORE INSERT
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frozen_upd_date_d IS NULL 
  AND new.frozen_upd_date IS NOT NULL
   OR CHAR(new.frozen_upd_date_d,ISO) = '0001-01-01'
  AND new.frozen_upd_date IS NOT NULL)
SET new.frozen_upd_date_d =
  CASE WHEN new.frozen_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frozen_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0355I52
  NO CASCADE BEFORE INSERT
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frozen_upd_date IS NULL 
  AND new.frozen_upd_date_d IS NOT NULL
  AND CHAR(new.frozen_upd_date_d,ISO) != '0001-01-01'
   OR new.frozen_upd_date = 0
  AND new.frozen_upd_date_d IS NOT NULL
  AND CHAR(new.frozen_upd_date_d,ISO) != '0001-01-01')
SET new.frozen_upd_date =
  CASE WHEN new.frozen_upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.frozen_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.frozen_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.frozen_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0355I53
  NO CASCADE BEFORE INSERT
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.halt_upd_date_d IS NULL 
  AND new.halt_upd_date IS NOT NULL
   OR CHAR(new.halt_upd_date_d,ISO) = '0001-01-01'
  AND new.halt_upd_date IS NOT NULL)
SET new.halt_upd_date_d =
  CASE WHEN new.halt_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.halt_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0355I54
  NO CASCADE BEFORE INSERT
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.halt_upd_date IS NULL 
  AND new.halt_upd_date_d IS NOT NULL
  AND CHAR(new.halt_upd_date_d,ISO) != '0001-01-01'
   OR new.halt_upd_date = 0
  AND new.halt_upd_date_d IS NOT NULL
  AND CHAR(new.halt_upd_date_d,ISO) != '0001-01-01')
SET new.halt_upd_date =
  CASE WHEN new.halt_upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.halt_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.halt_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.halt_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0355U02
  NO CASCADE BEFORE UPDATE
  ON HERD_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0355U51
  NO CASCADE BEFORE UPDATE OF 
                    frozen_upd_date
  ON HERD_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frozen_upd_date != new.frozen_upd_date
   OR old.frozen_upd_date IS NULL AND new.frozen_upd_date IS NOT NULL
   OR old.frozen_upd_date IS NOT NULL AND new.frozen_upd_date IS NULL)
SET new.frozen_upd_date_d =
  CASE WHEN new.frozen_upd_date = 0 OR new.frozen_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frozen_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0355U52
  NO CASCADE BEFORE UPDATE OF 
                    frozen_upd_date_d
  ON HERD_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frozen_upd_date_d != new.frozen_upd_date_d
   OR old.frozen_upd_date_d IS NULL and new.frozen_upd_date_d IS NOT NULL
   OR old.frozen_upd_date_d IS NOT NULL and new.frozen_upd_date_d IS NULL)
SET new.frozen_upd_date =
  CASE WHEN new.frozen_upd_date_d IS NULL OR new.frozen_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.frozen_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.frozen_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.frozen_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0355U53
  NO CASCADE BEFORE UPDATE OF 
                    halt_upd_date
  ON HERD_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.halt_upd_date != new.halt_upd_date
   OR old.halt_upd_date IS NULL AND new.halt_upd_date IS NOT NULL
   OR old.halt_upd_date IS NOT NULL AND new.halt_upd_date IS NULL)
SET new.halt_upd_date_d =
  CASE WHEN new.halt_upd_date = 0 OR new.halt_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.halt_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0355U54
  NO CASCADE BEFORE UPDATE OF 
                    halt_upd_date_d
  ON HERD_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.halt_upd_date_d != new.halt_upd_date_d
   OR old.halt_upd_date_d IS NULL and new.halt_upd_date_d IS NOT NULL
   OR old.halt_upd_date_d IS NOT NULL and new.halt_upd_date_d IS NULL)
SET new.halt_upd_date =
  CASE WHEN new.halt_upd_date_d IS NULL OR new.halt_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.halt_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.halt_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.halt_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0355I01
  AFTER INSERT
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO herd_err_sts_log (
  map_ref,
  herd_num,
  upd_time,
  frozen_ind,
  frozen_upd_date,
  frozen_upd_user_id,
  halt_ind,
  halt_upd_date,
  halt_upd_user_id,
  t2_pct,
  t2_pct_date,
  t2_pct_ind,
  t2_pct_ind_date,
  clvg_cnt,
  clvg_cnt_date,
  t2_pct_ind_user_id,
  t2_pct_ind_cmt,
  frozen_srce_cd,
  frozen_rsn_cd,
  frozen_cmt,
  halt_cmt,
  t2_pct_excl_ssn)
VALUES (
  new.map_ref,
  new.herd_num,
  current timestamp,
  new.frozen_ind,
  new.frozen_upd_date_d,
  new.frozen_upd_user_id,
  new.halt_ind,
  new.halt_upd_date_d,
  new.halt_upd_user_id,
  new.t2_pct,
  new.t2_pct_date,
  new.t2_pct_ind,
  new.t2_pct_ind_date,
  new.clvg_cnt,
  new.clvg_cnt_date,
  new.t2_pct_ind_user_id,
  new.t2_pct_ind_cmt,
  new.frozen_srce_cd,
  new.frozen_rsn_cd,
  new.frozen_cmt,
  new.halt_cmt,
  new.t2_pct_excl_ssn)
 !!


CREATE TRIGGER D0355U01
  AFTER UPDATE
  ON HERD_ERR_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO herd_err_sts_log (
  map_ref,
  herd_num,
  upd_time,
  frozen_ind,
  frozen_upd_date,
  frozen_upd_user_id,
  halt_ind,
  halt_upd_date,
  halt_upd_user_id,
  t2_pct,
  t2_pct_date,
  t2_pct_ind,
  t2_pct_ind_date,
  clvg_cnt,
  clvg_cnt_date,
  t2_pct_ind_user_id,
  t2_pct_ind_cmt,
  frozen_srce_cd,
  frozen_rsn_cd,
  frozen_cmt,
  halt_cmt,
  t2_pct_excl_ssn)
VALUES (
  new.map_ref,
  new.herd_num,
  current timestamp,
  new.frozen_ind,
  new.frozen_upd_date_d,
  new.frozen_upd_user_id,
  new.halt_ind,
  new.halt_upd_date_d,
  new.halt_upd_user_id,
  new.t2_pct,
  new.t2_pct_date,
  new.t2_pct_ind,
  new.t2_pct_ind_date,
  new.clvg_cnt,
  new.clvg_cnt_date,
  new.t2_pct_ind_user_id,
  new.t2_pct_ind_cmt,
  new.frozen_srce_cd,
  new.frozen_rsn_cd,
  new.frozen_cmt,
  new.halt_cmt,
  new.t2_pct_excl_ssn)
 !!


CREATE TRIGGER D0090U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ERR_UPD_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_ERR_UPD_RS AFTER DELETE ON HERD_ERR_UPD_RSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ERR_STS WHERE HERD_ERR_STS.FROZEN_RSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_ERR_UPD_RSN  HERD_ERR_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095af", PARENT_OWNER="", PARENT_TABLE="HERD_ERR_UPD_RSN"
    CHILD_OWNER="", CHILD_TABLE="HERD_ERR_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0090_001", FK_COLUMNS="FROZEN_RSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_ERR_UPD_RSN because HERD_ERR_STS exists.')
 !!


CREATE TRIGGER D0091U01
  NO CASCADE BEFORE UPDATE
  ON HERD_ERR_UPD_SRCE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_ERR_UPD_SR AFTER DELETE ON HERD_ERR_UPD_SRCE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_ERR_STS WHERE HERD_ERR_STS.FROZEN_SRCE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_ERR_UPD_SRCE  HERD_ERR_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009187", PARENT_OWNER="", PARENT_TABLE="HERD_ERR_UPD_SRCE"
    CHILD_OWNER="", CHILD_TABLE="HERD_ERR_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0091_001", FK_COLUMNS="FROZEN_SRCE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_ERR_UPD_SRCE because HERD_ERR_STS exists.')
 !!


CREATE TRIGGER D0260U02
  AFTER UPDATE OF 
        map_ref,
        rnd_num,
        rqst_date_d
  ON HERD_HT_RND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num
   OR old.rnd_num != new.rnd_num
   OR old.rqst_date_d != new.rqst_date_d)
INSERT INTO del_herd_ht_rnd (
  map_ref
, herd_num
, rnd_num
, upd_time
, vst_num
, herd_role_cd
, rgn_cd
, rqst_date_d
) VALUES (
  old.map_ref
, old.herd_num
, old.rnd_num
, old.upd_time
, old.vst_num
, old.herd_role_cd
, old.rgn_cd
, old.rqst_date_d
)
 !!


CREATE TRIGGER D0260I52
  NO CASCADE BEFORE INSERT
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0260U01
  NO CASCADE BEFORE UPDATE
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0260U52
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON HERD_HT_RND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0260U51
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON HERD_HT_RND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0260D01
  AFTER DELETE
  ON HERD_HT_RND
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_herd_ht_rnd (
  map_ref
, herd_num
, rnd_num
, upd_time
, vst_num
, herd_role_cd
, rgn_cd
, rqst_date_d
) VALUES (
  old.map_ref
, old.herd_num
, old.rnd_num
, old.upd_time
, old.vst_num
, old.herd_role_cd
, old.rgn_cd
, old.rqst_date_d
)
 !!


CREATE TRIGGER D0260I51
  NO CASCADE BEFORE INSERT
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0260I01
  NO CASCADE BEFORE INSERT
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ssn >= 2007
 AND NOT EXISTS
  (SELECT 1 from ht_sched hs
    WHERE hs.map_ref = new.map_ref
      AND hs.herd_num = new.herd_num
      AND hs.ssn = new.ssn) )
SIGNAL SQLSTATE 'Z0260'
('D0260I01: no herd test schedule for this herd for ' || LTRIM(RTRIM(CHAR(new.ssn))))
 !!


CREATE TRIGGER D0260U04
  NO CASCADE BEFORE UPDATE
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ssn >= 2007
 AND NOT EXISTS
  (SELECT 1 from ht_sched hs
    WHERE hs.map_ref = new.map_ref
      AND hs.herd_num = new.herd_num
      AND hs.ssn = new.ssn) )
SIGNAL SQLSTATE 'Z0260'
('D0260U04: no herd test schedule for this herd for ' || LTRIM(RTRIM(CHAR(new.ssn))))
 !!


CREATE TRIGGER D0260U03
  AFTER UPDATE
  ON HERD_HT_RND
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.herd_num = new.herd_num
  AND hd.sr_area_ssn = (
    SELECT MAX(sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = new.map_ref
      AND hd2.herd_num = new.herd_num)
 !!


CREATE TRIGGER D0077I01
  NO CASCADE BEFORE INSERT
  ON HERD_LEPTO_STS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.vet_clinic_ptpt_cd) )
SIGNAL SQLSTATE 'Z0077'
('D0077I01: vet_clinic_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0077U01
  NO CASCADE BEFORE UPDATE OF 
                    vet_clinic_ptpt_cd
  ON HERD_LEPTO_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.vet_clinic_ptpt_cd) )
SIGNAL SQLSTATE 'Z0077'
('D0077I01: vet_clinic_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0077U02
  NO CASCADE BEFORE UPDATE
  ON HERD_LEPTO_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0294U01
  NO CASCADE BEFORE UPDATE
  ON HERD_MDC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0352I51
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352U01
  NO CASCADE BEFORE UPDATE
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0352U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0352I56
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shift_date IS NULL 
  AND new.shift_date_d IS NOT NULL
  AND CHAR(new.shift_date_d,ISO) != '0001-01-01'
   OR new.shift_date = 0
  AND new.shift_date_d IS NOT NULL
  AND CHAR(new.shift_date_d,ISO) != '0001-01-01')
SET new.shift_date =
  CASE WHEN new.shift_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.shift_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0352U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352I01
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.new_ownr_ptpt_cd != ' ')
SET new.new_ownr_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.new_ownr_ptpt_cd)
 !!


CREATE TRIGGER D0352I53
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352U55
  NO CASCADE BEFORE UPDATE OF 
                    shift_date
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.shift_date != new.shift_date
   OR old.shift_date IS NULL AND new.shift_date IS NOT NULL
   OR old.shift_date IS NOT NULL AND new.shift_date IS NULL)
SET new.shift_date_d =
  CASE WHEN new.shift_date = 0 OR new.shift_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.shift_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0352I55
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.shift_date_d IS NULL 
  AND new.shift_date IS NOT NULL
   OR CHAR(new.shift_date_d,ISO) = '0001-01-01'
  AND new.shift_date IS NOT NULL)
SET new.shift_date_d =
  CASE WHEN new.shift_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.shift_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0352U02
  NO CASCADE BEFORE UPDATE OF 
                    new_ownr_ptpt_cd
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.new_ownr_ptpt_cd != old.new_ownr_ptpt_cd)
SET new.new_ownr_party_id = (
  CASE WHEN new.new_ownr_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.new_ownr_ptpt_cd)
  END
 !!


CREATE TRIGGER D0352I52
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0352U56
  NO CASCADE BEFORE UPDATE OF 
                    shift_date_d
  ON HERD_MOVE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.shift_date_d != new.shift_date_d
   OR old.shift_date_d IS NULL and new.shift_date_d IS NOT NULL
   OR old.shift_date_d IS NOT NULL and new.shift_date_d IS NULL)
SET new.shift_date =
  CASE WHEN new.shift_date_d IS NULL OR new.shift_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.shift_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.shift_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0352I54
  NO CASCADE BEFORE INSERT
  ON HERD_MOVE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0848I01
  NO CASCADE BEFORE INSERT
  ON HERD_PARTY_ASSOC
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM herd_party_assoc cur
  WHERE cur.map_ref = new.map_ref
    AND cur.herd_num = new.herd_num
    AND cur.herd_assoc_cd = new.herd_assoc_cd
    AND VALUE(cur.herd_sub_assoc_cd,'~~~~') = VALUE(new.herd_sub_assoc_cd,'~~~~')
    AND cur.st_date != new.st_date
    AND new.st_date <= VALUE(cur.end_date, DATE('9999-12-31') )    
    AND VALUE (new.end_date, DATE('9999-12-31') ) >= cur.st_date) )
SIGNAL SQLSTATE 'Z0848'
('D0848I01: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0848U02
  NO CASCADE BEFORE UPDATE
  ON HERD_PARTY_ASSOC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM herd_party_assoc cur
  WHERE cur.map_ref = new.map_ref
    AND cur.herd_num = new.herd_num
    AND cur.herd_assoc_cd = new.herd_assoc_cd
    AND VALUE(cur.herd_sub_assoc_cd,'~~~~') = VALUE(new.herd_sub_assoc_cd,'~~~~')
    AND cur.st_date != new.st_date
    AND (cur.map_ref != new.map_ref
     OR cur.herd_num != new.herd_num
     OR cur.herd_assoc_cd != new.herd_assoc_cd
     OR VALUE(cur.herd_sub_assoc_cd,'~~~~') != VALUE(new.herd_sub_assoc_cd,'~~~~')
     OR cur.st_date != new.st_date
     OR VALUE(cur.end_date, DATE('9999-12-31')) <> VALUE(old.end_date, DATE('9999-12-31')))
    AND new.st_date <= VALUE(cur.end_date, DATE('9999-12-31') )    
    AND VALUE (new.end_date, DATE('9999-12-31') ) >= cur.st_date) )
SIGNAL SQLSTATE 'Z0848'
('D0848U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0848U01
  NO CASCADE BEFORE UPDATE
  ON HERD_PARTY_ASSOC
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0526I52
  NO CASCADE BEFORE INSERT
  ON HERD_RECALC_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0526U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HERD_RECALC_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0526U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HERD_RECALC_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0526U01
  NO CASCADE BEFORE UPDATE
  ON HERD_RECALC_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0526I51
  NO CASCADE BEFORE INSERT
  ON HERD_RECALC_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0526D01
  AFTER DELETE
  ON HERD_RECALC_RQST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_recalc_rqst_hist (
  map_ref
, herd_num
, recalc_data_cd
, parm
, upd_time
, date_d
) VALUES (
  old.map_ref
, old.herd_num
, old.recalc_data_cd
, old.parm
, old.upd_time
, old.date_d
)
 !!


CREATE TRIGGER D0526U02
  AFTER UPDATE
  ON HERD_RECALC_RQST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_recalc_rqst_hist (
  map_ref
, herd_num
, recalc_data_cd
, parm
, upd_time
, date_d
) VALUES (
  old.map_ref
, old.herd_num
, old.recalc_data_cd
, old.parm
, old.upd_time
, old.date_d
)
 !!


CREATE TRIGGER D0849U01
  NO CASCADE BEFORE UPDATE
  ON HERD_SUB_ASSOC_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_SUB_ASSOC_ AFTER DELETE ON HERD_SUB_ASSOC_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_PARTY_ASSOC WHERE HERD_PARTY_ASSOC.HERD_SUB_ASSOC_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HERD_SUB_ASSOC_REF  HERD_PARTY_ASSOC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095b1", PARENT_OWNER="", PARENT_TABLE="HERD_SUB_ASSOC_REF"
    CHILD_OWNER="", CHILD_TABLE="HERD_PARTY_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0849_001", FK_COLUMNS="HERD_SUB_ASSOC_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_SUB_ASSOC_REF because HERD_PARTY_ASSOC exists.')
 !!


CREATE TRIGGER D0623U01
  NO CASCADE BEFORE UPDATE
  ON HERD_TEST_FLASK_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0621U01
  NO CASCADE BEFORE UPDATE
  ON HERD_TEST_METER_NOZZLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HERD_TEST_METER AFTER DELETE ON HERD_TEST_METER_NOZZLE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_FARM_VISIT WHERE EZ_LINK_FARM_VISIT.NOZZLE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HERD_TEST_METER_NOZZLE  EZ_LINK_FARM_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009cfa", PARENT_OWNER="", PARENT_TABLE="HERD_TEST_METER_NOZZLE"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_FARM_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0621_001", FK_COLUMNS="NOZZLE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_TEST_METER_NOZZLE because EZ_LINK_FARM_VISIT exists.')
 !!


CREATE TRIGGER D0046I53
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_dtl_rcd_date_d IS NULL 
  AND new.herd_dtl_rcd_date IS NOT NULL
   OR CHAR(new.herd_dtl_rcd_date_d,ISO) = '0001-01-01'
  AND new.herd_dtl_rcd_date IS NOT NULL)
SET new.herd_dtl_rcd_date_d =
  CASE WHEN new.herd_dtl_rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.herd_dtl_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046U56
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046U55
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046U54
  NO CASCADE BEFORE UPDATE OF 
                    herd_dtl_rcd_date_d
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.herd_dtl_rcd_date_d != new.herd_dtl_rcd_date_d
   OR old.herd_dtl_rcd_date_d IS NULL and new.herd_dtl_rcd_date_d IS NOT NULL
   OR old.herd_dtl_rcd_date_d IS NOT NULL and new.herd_dtl_rcd_date_d IS NULL)
SET new.herd_dtl_rcd_date =
  CASE WHEN new.herd_dtl_rcd_date_d IS NULL OR new.herd_dtl_rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046U01
  NO CASCADE BEFORE UPDATE
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0046U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046I52
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046I55
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046U53
  NO CASCADE BEFORE UPDATE OF 
                    herd_dtl_rcd_date
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.herd_dtl_rcd_date != new.herd_dtl_rcd_date
   OR old.herd_dtl_rcd_date IS NULL AND new.herd_dtl_rcd_date IS NOT NULL
   OR old.herd_dtl_rcd_date IS NOT NULL AND new.herd_dtl_rcd_date IS NULL)
SET new.herd_dtl_rcd_date_d =
  CASE WHEN new.herd_dtl_rcd_date = 0 OR new.herd_dtl_rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.herd_dtl_rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046D01
  AFTER DELETE
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_herd_test_sv (
  map_ref
, herd_num
, upd_date
, upd_time
, sv_tp_cd
, herd_dtl_rcd_date
, pref_frst_date
, end_date
, ssn
, rgn_cd
, ht_freq_cd
, scc_freq_cd
, milk_smpl_mthd_cd
, rqrd_offcr_cnt
, pd_1
, pd_1_day
, pd_2
, pd_2_day
, pd_3
, pd_3_day
, pd_4
, pd_4_day
, pd_5
, pd_5_day
, pd_6
, pd_6_day
, pd_7
, pd_7_day
, pd_8
, pd_8_day
, pd_9
, pd_9_day
, pd_10
, pd_10_day
, pd_11
, pd_11_day
, pd_12
, pd_12_day
, alt_date_1_ind
, alt_date_2_ind
, alt_date_3_ind
, alt_date_4_ind
, alt_date_5_ind
, alt_date_6_ind
, alt_date_7_ind
, alt_date_8_ind
, alt_date_9_ind
, alt_date_10_ind
, alt_date_11_ind
, alt_date_12_ind
, scc_rqrd_1_ind
, scc_rqrd_2_ind
, scc_rqrd_3_ind
, scc_rqrd_4_ind
, scc_rqrd_5_ind
, scc_rqrd_6_ind
, scc_rqrd_7_ind
, scc_rqrd_8_ind
, scc_rqrd_9_ind
, scc_rqrd_10_ind
, scc_rqrd_11_ind
, scc_rqrd_12_ind
, frst_self_smpl_ind
, vst_opt_cd
, rqrd_vst_cnt
, user_id
, descr
, upd_date_d
, herd_dtl_rcd_date_d
, end_date_d
, once_day_milk_cd
, data_colln_method_cd_1
, data_colln_method_cd_2
, data_colln_method_cd_3
, data_colln_method_cd_4
, data_colln_method_cd_5
, data_colln_method_cd_6
, data_colln_method_cd_7
, data_colln_method_cd_8
, data_colln_method_cd_9
, data_colln_method_cd_10
, data_colln_method_cd_11
, data_colln_method_cd_12
, used_ezlink_ind
) VALUES (
  old.map_ref
, old.herd_num
, old.upd_date
, old.upd_time
, old.sv_tp_cd
, old.herd_dtl_rcd_date
, old.pref_frst_date
, old.end_date
, old.ssn
, old.rgn_cd
, old.ht_freq_cd
, old.scc_freq_cd
, old.milk_smpl_mthd_cd
, old.rqrd_offcr_cnt
, old.pd_1
, old.pd_1_day
, old.pd_2
, old.pd_2_day
, old.pd_3
, old.pd_3_day
, old.pd_4
, old.pd_4_day
, old.pd_5
, old.pd_5_day
, old.pd_6
, old.pd_6_day
, old.pd_7
, old.pd_7_day
, old.pd_8
, old.pd_8_day
, old.pd_9
, old.pd_9_day
, old.pd_10
, old.pd_10_day
, old.pd_11
, old.pd_11_day
, old.pd_12
, old.pd_12_day
, old.alt_date_1_ind
, old.alt_date_2_ind
, old.alt_date_3_ind
, old.alt_date_4_ind
, old.alt_date_5_ind
, old.alt_date_6_ind
, old.alt_date_7_ind
, old.alt_date_8_ind
, old.alt_date_9_ind
, old.alt_date_10_ind
, old.alt_date_11_ind
, old.alt_date_12_ind
, old.scc_rqrd_1_ind
, old.scc_rqrd_2_ind
, old.scc_rqrd_3_ind
, old.scc_rqrd_4_ind
, old.scc_rqrd_5_ind
, old.scc_rqrd_6_ind
, old.scc_rqrd_7_ind
, old.scc_rqrd_8_ind
, old.scc_rqrd_9_ind
, old.scc_rqrd_10_ind
, old.scc_rqrd_11_ind
, old.scc_rqrd_12_ind
, old.frst_self_smpl_ind
, old.vst_opt_cd
, old.rqrd_vst_cnt
, old.user_id
, old.descr
, old.upd_date_d
, old.herd_dtl_rcd_date_d
, old.end_date_d
, old.once_day_milk_cd
, old.data_colln_method_cd_1
, old.data_colln_method_cd_2
, old.data_colln_method_cd_3
, old.data_colln_method_cd_4
, old.data_colln_method_cd_5
, old.data_colln_method_cd_6
, old.data_colln_method_cd_7
, old.data_colln_method_cd_8
, old.data_colln_method_cd_9
, old.data_colln_method_cd_10
, old.data_colln_method_cd_11
, old.data_colln_method_cd_12
, old.used_ezlink_ind
)
 !!


CREATE TRIGGER D0046U03
  AFTER UPDATE OF 
        map_ref,
        herd_num,
        ssn
  ON HERD_TEST_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref OR
      old.herd_num != new.herd_num OR
      old.ssn != new.ssn)
INSERT INTO del_herd_test_sv (
  map_ref
, herd_num
, upd_date
, upd_time
, sv_tp_cd
, herd_dtl_rcd_date
, pref_frst_date
, end_date
, ssn
, rgn_cd
, ht_freq_cd
, scc_freq_cd
, milk_smpl_mthd_cd
, rqrd_offcr_cnt
, pd_1
, pd_1_day
, pd_2
, pd_2_day
, pd_3
, pd_3_day
, pd_4
, pd_4_day
, pd_5
, pd_5_day
, pd_6
, pd_6_day
, pd_7
, pd_7_day
, pd_8
, pd_8_day
, pd_9
, pd_9_day
, pd_10
, pd_10_day
, pd_11
, pd_11_day
, pd_12
, pd_12_day
, alt_date_1_ind
, alt_date_2_ind
, alt_date_3_ind
, alt_date_4_ind
, alt_date_5_ind
, alt_date_6_ind
, alt_date_7_ind
, alt_date_8_ind
, alt_date_9_ind
, alt_date_10_ind
, alt_date_11_ind
, alt_date_12_ind
, scc_rqrd_1_ind
, scc_rqrd_2_ind
, scc_rqrd_3_ind
, scc_rqrd_4_ind
, scc_rqrd_5_ind
, scc_rqrd_6_ind
, scc_rqrd_7_ind
, scc_rqrd_8_ind
, scc_rqrd_9_ind
, scc_rqrd_10_ind
, scc_rqrd_11_ind
, scc_rqrd_12_ind
, frst_self_smpl_ind
, vst_opt_cd
, rqrd_vst_cnt
, user_id
, descr
, upd_date_d
, herd_dtl_rcd_date_d
, end_date_d
, once_day_milk_cd
, data_colln_method_cd_1
, data_colln_method_cd_2
, data_colln_method_cd_3
, data_colln_method_cd_4
, data_colln_method_cd_5
, data_colln_method_cd_6
, data_colln_method_cd_7
, data_colln_method_cd_8
, data_colln_method_cd_9
, data_colln_method_cd_10
, data_colln_method_cd_11
, data_colln_method_cd_12
, used_ezlink_ind
) VALUES (
  old.map_ref
, old.herd_num
, old.upd_date
, old.upd_time
, old.sv_tp_cd
, old.herd_dtl_rcd_date
, old.pref_frst_date
, old.end_date
, old.ssn
, old.rgn_cd
, old.ht_freq_cd
, old.scc_freq_cd
, old.milk_smpl_mthd_cd
, old.rqrd_offcr_cnt
, old.pd_1
, old.pd_1_day
, old.pd_2
, old.pd_2_day
, old.pd_3
, old.pd_3_day
, old.pd_4
, old.pd_4_day
, old.pd_5
, old.pd_5_day
, old.pd_6
, old.pd_6_day
, old.pd_7
, old.pd_7_day
, old.pd_8
, old.pd_8_day
, old.pd_9
, old.pd_9_day
, old.pd_10
, old.pd_10_day
, old.pd_11
, old.pd_11_day
, old.pd_12
, old.pd_12_day
, old.alt_date_1_ind
, old.alt_date_2_ind
, old.alt_date_3_ind
, old.alt_date_4_ind
, old.alt_date_5_ind
, old.alt_date_6_ind
, old.alt_date_7_ind
, old.alt_date_8_ind
, old.alt_date_9_ind
, old.alt_date_10_ind
, old.alt_date_11_ind
, old.alt_date_12_ind
, old.scc_rqrd_1_ind
, old.scc_rqrd_2_ind
, old.scc_rqrd_3_ind
, old.scc_rqrd_4_ind
, old.scc_rqrd_5_ind
, old.scc_rqrd_6_ind
, old.scc_rqrd_7_ind
, old.scc_rqrd_8_ind
, old.scc_rqrd_9_ind
, old.scc_rqrd_10_ind
, old.scc_rqrd_11_ind
, old.scc_rqrd_12_ind
, old.frst_self_smpl_ind
, old.vst_opt_cd
, old.rqrd_vst_cnt
, old.user_id
, old.descr
, old.upd_date_d
, old.herd_dtl_rcd_date_d
, old.end_date_d
, old.once_day_milk_cd
, old.data_colln_method_cd_1
, old.data_colln_method_cd_2
, old.data_colln_method_cd_3
, old.data_colln_method_cd_4
, old.data_colln_method_cd_5
, old.data_colln_method_cd_6
, old.data_colln_method_cd_7
, old.data_colln_method_cd_8
, old.data_colln_method_cd_9
, old.data_colln_method_cd_10
, old.data_colln_method_cd_11
, old.data_colln_method_cd_12
, old.used_ezlink_ind
)
 !!


CREATE TRIGGER D0046I54
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.herd_dtl_rcd_date IS NULL 
  AND new.herd_dtl_rcd_date_d IS NOT NULL
  AND CHAR(new.herd_dtl_rcd_date_d,ISO) != '0001-01-01'
   OR new.herd_dtl_rcd_date = 0
  AND new.herd_dtl_rcd_date_d IS NOT NULL
  AND CHAR(new.herd_dtl_rcd_date_d,ISO) != '0001-01-01')
SET new.herd_dtl_rcd_date =
  CASE WHEN new.herd_dtl_rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.herd_dtl_rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046I51
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0046I56
  NO CASCADE BEFORE INSERT
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0046U02
  AFTER UPDATE
  ON HERD_TEST_SV
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.herd_num = new.herd_num
  AND hd.sr_area_ssn = new.ssn
 !!


CREATE TRIGGER D0211U01
  NO CASCADE BEFORE UPDATE OF 
                    ownr_ptpt_cd
  ON HERD_UPD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0211'
('D0211I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0211U52
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON HERD_UPD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0211I52
  NO CASCADE BEFORE INSERT
  ON HERD_UPD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0211I01
  NO CASCADE BEFORE INSERT
  ON HERD_UPD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ownr_ptpt_cd) )
SIGNAL SQLSTATE 'Z0211'
('D0211I01: ownr_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0211U02
  AFTER UPDATE
  ON HERD_UPD
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_upd_log (
    ownr_ptpt_cd,
    map_ref,
    herd_num,
    user_id,
    herd_upd_sts_cd,
    upd_date,
    proc_ind,
    dflt_doc_route,
    dist_team_cd,
    upd_user_id,
    upd_prog_id,
    upd_time,
    minda_chk_ind)
VALUES (
    old.ownr_ptpt_cd,
    old.map_ref,
    old.herd_num,
    old.user_id,
    old.herd_upd_sts_cd,
    old.upd_date,
    old.proc_ind,
    old.dflt_doc_route,
    old.dist_team_cd,
    old.upd_user_id,
    old.upd_prog_id,
    old.upd_time,
    old.minda_chk_ind)
 !!


CREATE TRIGGER D0211I51
  NO CASCADE BEFORE INSERT
  ON HERD_UPD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0211U51
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON HERD_UPD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0211D01
  AFTER DELETE
  ON HERD_UPD
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO herd_upd_log (
    ownr_ptpt_cd,
    map_ref,
    herd_num,
    user_id,
    herd_upd_sts_cd,
    upd_date,
    proc_ind,
    dflt_doc_route,
    dist_team_cd,
    upd_user_id,
    upd_prog_id,
    upd_time,
    minda_chk_ind)
VALUES (
    old.ownr_ptpt_cd,
    old.map_ref,
    old.herd_num,
    old.user_id,
    old.herd_upd_sts_cd,
    old.upd_date,
    old.proc_ind,
    old.dflt_doc_route,
    old.dist_team_cd,
    old.upd_user_id,
    old.upd_prog_id,
    old.upd_time,
    old.minda_chk_ind)
 !!


CREATE TRIGGER D0211U03
  NO CASCADE BEFORE UPDATE
  ON HERD_UPD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0226U01
  NO CASCADE BEFORE UPDATE
  ON HERD_UPD_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0212I51
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0212I52
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0212U01
  NO CASCADE BEFORE UPDATE
  ON HERD_UPD_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0212U51
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON HERD_UPD_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0212U52
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON HERD_UPD_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.create_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.create_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.create_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0212D01
  AFTER DELETE
  ON HERD_UPD_ERR
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_herd_upd_err (
  ownr_ptpt_cd
, map_ref
, herd_num
, ref_num
, upd_time
, anml_key
, batch_upd_err_cd
, err_lvl_cd
, oth_ref_num
, doc_num
, data
, descr
, create_date_d
) VALUES (
  old.ownr_ptpt_cd
, old.map_ref
, old.herd_num
, old.ref_num
, old.upd_time
, old.anml_key
, old.batch_upd_err_cd
, old.err_lvl_cd
, old.oth_ref_num
, old.doc_num
, old.data
, old.descr
, old.create_date_d
)
 !!


CREATE TRIGGER D0212U02
  AFTER UPDATE OF 
        ownr_ptpt_cd,
        map_ref,
        herd_num,
        ref_num
  ON HERD_UPD_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ownr_ptpt_cd != new.ownr_ptpt_cd
   OR old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num
   OR old.ref_num != new.ref_num)
INSERT INTO del_herd_upd_err (
  ownr_ptpt_cd
, map_ref
, herd_num
, ref_num
, upd_time
, anml_key
, batch_upd_err_cd
, err_lvl_cd
, oth_ref_num
, doc_num
, data
, descr
, create_date_d
) VALUES (
  old.ownr_ptpt_cd
, old.map_ref
, old.herd_num
, old.ref_num
, old.upd_time
, old.anml_key
, old.batch_upd_err_cd
, old.err_lvl_cd
, old.oth_ref_num
, old.doc_num
, old.data
, old.descr
, old.create_date_d
)
 !!


CREATE TRIGGER D0171I51
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0171I52
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0171U51
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON HERD_UPD_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0171U52
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON HERD_UPD_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0213U51
  NO CASCADE BEFORE UPDATE OF 
                    create_date
  ON HERD_UPD_RSLV_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date != new.create_date
   OR old.create_date IS NULL AND new.create_date IS NOT NULL
   OR old.create_date IS NOT NULL AND new.create_date IS NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 OR new.create_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0213U52
  NO CASCADE BEFORE UPDATE OF 
                    create_date_d
  ON HERD_UPD_RSLV_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.create_date_d != new.create_date_d
   OR old.create_date_d IS NULL and new.create_date_d IS NOT NULL
   OR old.create_date_d IS NOT NULL and new.create_date_d IS NULL)
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL OR new.create_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.create_date_d) - 19000000 END
 !!


CREATE TRIGGER D0213U01
  NO CASCADE BEFORE UPDATE
  ON HERD_UPD_RSLV_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0213I51
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_RSLV_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date_d IS NULL 
  AND new.create_date IS NOT NULL
   OR CHAR(new.create_date_d,ISO) = '0001-01-01'
  AND new.create_date IS NOT NULL)
SET new.create_date_d =
  CASE WHEN new.create_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0213I01
  AFTER INSERT
  ON HERD_UPD_RSLV_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.batch_upd_err_cd IN (3426, 4626)
  AND new.rslv_mthd_cd NOT IN ('A', 'K'))
INSERT INTO chrg_rslv_err
  (ownr_ptpt_cd, map_ref, herd_num, ref_num, err_create_date)
VALUES
  (new.ownr_ptpt_cd, new.map_ref, new.herd_num, new.ref_num,
  CHAR(DATE(INSERT(INSERT(CHAR(new.create_date+19000000),7,0,'-'),5,0,'-') ) )
)
 !!


CREATE TRIGGER D0213I52
  NO CASCADE BEFORE INSERT
  ON HERD_UPD_RSLV_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.create_date IS NULL 
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01'
   OR new.create_date = 0
  AND new.create_date_d IS NOT NULL
  AND CHAR(new.create_date_d,ISO) != '0001-01-01')
SET new.create_date =
  CASE WHEN new.create_date_d IS NULL THEN 0 ELSE
  INT(new.create_date_d) - 19000000 END
 !!


CREATE  TRIGGER tD_HERD_UPD_RSLV_E AFTER DELETE ON HERD_UPD_RSLV_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CHRG_RSLV_ERR WHERE CHRG_RSLV_ERR.OWNR_PTPT_CD = old.OWNR_PTPT_CD AND
                                                CHRG_RSLV_ERR.MAP_REF = old.MAP_REF AND
                                                CHRG_RSLV_ERR.HERD_NUM = old.HERD_NUM AND
                                                CHRG_RSLV_ERR.REF_NUM = old.REF_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HERD_UPD_RSLV_ERR  CHRG_RSLV_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a1b2", PARENT_OWNER="", PARENT_TABLE="HERD_UPD_RSLV_ERR"
    CHILD_OWNER="", CHILD_TABLE="CHRG_RSLV_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0213_001", FK_COLUMNS="OWNR_PTPT_CD""MAP_REF""HERD_NUM""REF_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HERD_UPD_RSLV_ERR because CHRG_RSLV_ERR exists.')
 !!


CREATE TRIGGER D0557U01
  NO CASCADE BEFORE UPDATE
  ON HETEROSIS_EST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0594U01
  NO CASCADE BEFORE UPDATE
  ON HHU_ALCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HHU_ALCN AFTER DELETE ON HHU_ALCN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOP_INSP WHERE TOP_INSP.SERIAL_NUM = old.SERIAL_NUM AND
                                           TOP_INSP.HHU_ALCN_ST_DATE = old.ST_DATE) > 0)
    /* erwin Builtin Trigger */
    /* HHU_ALCN  TOP_INSP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f68", PARENT_OWNER="", PARENT_TABLE="HHU_ALCN"
    CHILD_OWNER="", CHILD_TABLE="TOP_INSP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0594_001", FK_COLUMNS="SERIAL_NUM""HHU_ALCN_ST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HHU_ALCN because TOP_INSP exists.')
 !!


CREATE TRIGGER D0232U01
  NO CASCADE BEFORE UPDATE
  ON HHU_APPLN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HHU_APPLN AFTER DELETE ON HHU_APPLN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HAND_HELD_UNIT WHERE HAND_HELD_UNIT.APPLN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HHU_APPLN  HAND_HELD_UNIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e06", PARENT_OWNER="", PARENT_TABLE="HHU_APPLN"
    CHILD_OWNER="", CHILD_TABLE="HAND_HELD_UNIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0232_001", FK_COLUMNS="APPLN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HHU_APPLN because HAND_HELD_UNIT exists.')
 !!


CREATE TRIGGER D0904U01
  NO CASCADE BEFORE UPDATE
  ON HIGH_INPUT_BW_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0978U01
  NO CASCADE BEFORE UPDATE
  ON HIGH_INPUT_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HIGH_INPUT_RUN AFTER DELETE ON HIGH_INPUT_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HIGH_INPUT_RUN_AE_BRD WHERE HIGH_INPUT_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE) > 0)
    /* erwin Builtin Trigger */
    /* HIGH_INPUT_RUN  HIGH_INPUT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097d9", PARENT_OWNER="", PARENT_TABLE="HIGH_INPUT_RUN"
    CHILD_OWNER="", CHILD_TABLE="HIGH_INPUT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0978_001", FK_COLUMNS="EXTR_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HIGH_INPUT_RUN because HIGH_INPUT_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0979U01
  NO CASCADE BEFORE UPDATE
  ON HIGH_INPUT_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0559U01
  NO CASCADE BEFORE UPDATE
  ON HLTH_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HLTH_CAT AFTER DELETE ON HLTH_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HLTH_COND WHERE HLTH_COND.HLTH_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_CAT  HLTH_COND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008543", PARENT_OWNER="", PARENT_TABLE="HLTH_CAT"
    CHILD_OWNER="", CHILD_TABLE="HLTH_COND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0559_001", FK_COLUMNS="HLTH_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_CAT because HLTH_COND exists.')
 !!

CREATE  TRIGGER tD_HLTH_CAT2 AFTER DELETE ON HLTH_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_CAT WHERE MINDA_OPT_HLTH_CAT.HLTH_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_CAT  MINDA_OPT_HLTH_CAT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000098dc", PARENT_OWNER="", PARENT_TABLE="HLTH_CAT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0559_002", FK_COLUMNS="HLTH_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_CAT because MINDA_OPT_HLTH_CAT exists.')
 !!


CREATE TRIGGER D0564U01
  NO CASCADE BEFORE UPDATE
  ON HLTH_COND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HLTH_COND AFTER DELETE ON HLTH_COND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_MEDICAL_TREATMENT WHERE ANML_MEDICAL_TREATMENT.HLTH_COND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_COND  ANML_MEDICAL_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000935e", PARENT_OWNER="", PARENT_TABLE="HLTH_COND"
    CHILD_OWNER="", CHILD_TABLE="ANML_MEDICAL_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0564_002", FK_COLUMNS="HLTH_COND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_COND because ANML_MEDICAL_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_HLTH_COND2 AFTER DELETE ON HLTH_COND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_COND WHERE MINDA_OPT_HLTH_COND.HLTH_COND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_COND  MINDA_OPT_HLTH_COND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009460", PARENT_OWNER="", PARENT_TABLE="HLTH_COND"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_COND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0564_003", FK_COLUMNS="HLTH_COND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_COND because MINDA_OPT_HLTH_COND exists.')
 !!


CREATE TRIGGER D0085U01
  NO CASCADE BEFORE UPDATE
  ON HLTH_COND_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0568I02
  NO CASCADE BEFORE INSERT
  ON HLTH_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.treatment_method_cd IS NOT NULL 
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HLTH_PROD_TREATMENT_METHOD_CD'
      AND c.cd = new.treatment_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0568'
('D0568I02: invalid treatment method code')
 !!


CREATE TRIGGER D0568U03
  NO CASCADE BEFORE UPDATE
  ON HLTH_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.treatment_method_cd IS NOT NULL
  AND VALUE(new.treatment_method_cd,'~~') != VALUE(old.treatment_method_cd,'~~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HLTH_PROD_TREATMENT_METHOD_CD'
      AND c.cd = new.treatment_method_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0568'
('D0568U03: invalid treatment method code')
 !!


CREATE TRIGGER D0568I01
  NO CASCADE BEFORE INSERT
  ON HLTH_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.iss_ptpt_cd) )
SIGNAL SQLSTATE 'Z0568'
('D0568I01: iss_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0568U01
  NO CASCADE BEFORE UPDATE OF 
                    iss_ptpt_cd
  ON HLTH_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.iss_ptpt_cd) )
SIGNAL SQLSTATE 'Z0568'
('D0568I01: iss_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0568U02
  NO CASCADE BEFORE UPDATE
  ON HLTH_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HLTH_PROD AFTER DELETE ON HLTH_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPCS_HLTH_PROD WHERE SPCS_HLTH_PROD.HLTH_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD  SPCS_HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008aef", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD"
    CHILD_OWNER="", CHILD_TABLE="SPCS_HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0568_002", FK_COLUMNS="HLTH_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD because SPCS_HLTH_PROD exists.')
 !!

CREATE  TRIGGER tD_HLTH_PROD2 AFTER DELETE ON HLTH_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_MEDICAL_TREATMENT WHERE ANML_MEDICAL_TREATMENT.HLTH_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD  ANML_MEDICAL_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000957f", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD"
    CHILD_OWNER="", CHILD_TABLE="ANML_MEDICAL_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0568_003", FK_COLUMNS="HLTH_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD because ANML_MEDICAL_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_HLTH_PROD3 AFTER DELETE ON HLTH_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_HLTH_TREATMENT WHERE TRACE_HLTH_TREATMENT.HLTH_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD  TRACE_HLTH_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000910e", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD"
    CHILD_OWNER="", CHILD_TABLE="TRACE_HLTH_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0568_004", FK_COLUMNS="HLTH_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD because TRACE_HLTH_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_HLTH_PROD4 AFTER DELETE ON HLTH_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_HLTH_FAVOURITE WHERE PARTY_HLTH_FAVOURITE.HLTH_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD  PARTY_HLTH_FAVOURITE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bd5", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD"
    CHILD_OWNER="", CHILD_TABLE="PARTY_HLTH_FAVOURITE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0568_005", FK_COLUMNS="HLTH_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD because PARTY_HLTH_FAVOURITE exists.')
 !!

CREATE  TRIGGER tD_HLTH_PROD5 AFTER DELETE ON HLTH_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_PROD WHERE MINDA_OPT_HLTH_PROD.HLTH_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD  MINDA_OPT_HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c52", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0568_006", FK_COLUMNS="HLTH_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD because MINDA_OPT_HLTH_PROD exists.')
 !!


CREATE TRIGGER D0086U01
  NO CASCADE BEFORE UPDATE
  ON HLTH_PROD_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0561U01
  NO CASCADE BEFORE UPDATE
  ON HLTH_PROD_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HLTH_PROD_CAT AFTER DELETE ON HLTH_PROD_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_PROD_CAT WHERE MINDA_OPT_HLTH_PROD_CAT.HLTH_PROD_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD_CAT  MINDA_OPT_HLTH_PROD_CAT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009034", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD_CAT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_PROD_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0561_002", FK_COLUMNS="HLTH_PROD_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD_CAT because MINDA_OPT_HLTH_PROD_CAT exists.')
 !!

CREATE  TRIGGER tD_HLTH_PROD_CAT2 AFTER DELETE ON HLTH_PROD_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HLTH_PROD WHERE HLTH_PROD.HLTH_PROD_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* HLTH_PROD_CAT  HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fbc", PARENT_OWNER="", PARENT_TABLE="HLTH_PROD_CAT"
    CHILD_OWNER="", CHILD_TABLE="HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0561_001", FK_COLUMNS="HLTH_PROD_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HLTH_PROD_CAT because HLTH_PROD exists.')
 !!


CREATE TRIGGER D0312U01
  NO CASCADE BEFORE UPDATE
  ON HRD_MTNG_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HRD_MTNG_GRP AFTER DELETE ON HRD_MTNG_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.HRD_MTNG_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* HRD_MTNG_GRP  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009371", PARENT_OWNER="", PARENT_TABLE="HRD_MTNG_GRP"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0312_001", FK_COLUMNS="HRD_MTNG_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HRD_MTNG_GRP because PRDCT_DTR_PROB exists.')
 !!


CREATE TRIGGER D0879I01
  NO CASCADE BEFORE INSERT
  ON HT_ASSIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS    (SELECT 1 from ht_vst hv      WHERE hv.map_ref = new.map_ref        AND hv.herd_num = new.herd_num        AND hv.test_date_d = new.test_date) )  SIGNAL SQLSTATE 'Z0879'  ('D0879I01: no matching row on ht_vst')
 !!


CREATE TRIGGER D0879U02
  NO CASCADE BEFORE UPDATE OF 
                    map_ref,
                    herd_num,
                    test_date
  ON HT_ASSIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.map_ref != new.map_ref      OR old.herd_num != new.herd_num      OR old.test_date != new.test_date)     AND NOT EXISTS    (SELECT 1 from ht_vst hv      WHERE hv.map_ref = new.map_ref        AND hv.herd_num = new.herd_num        AND hv.test_date_d = new.test_date) )  SIGNAL SQLSTATE 'Z0879'  ('D0879U02: no matching row on ht_vst')
 !!


CREATE TRIGGER D0879U01
  NO CASCADE BEFORE UPDATE
  ON HT_ASSIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0358I51
  NO CASCADE BEFORE INSERT
  ON HT_CLNDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0358I52
  NO CASCADE BEFORE INSERT
  ON HT_CLNDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0358U01
  NO CASCADE BEFORE UPDATE
  ON HT_CLNDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0358U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HT_CLNDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0358U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HT_CLNDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0172U01
  NO CASCADE BEFORE UPDATE
  ON HT_RND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HT_RND AFTER DELETE ON HT_RND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_SCHED WHERE HT_SCHED.RGN_CD = old.RGN_CD AND
                                           HT_SCHED.MAJOR_RND_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* HT_RND  HT_SCHED on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087a4", PARENT_OWNER="", PARENT_TABLE="HT_RND"
    CHILD_OWNER="", CHILD_TABLE="HT_SCHED"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0172_004", FK_COLUMNS="RGN_CD""MAJOR_RND_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HT_RND because HT_SCHED exists.')
 !!

CREATE  TRIGGER tD_HT_RND2 AFTER DELETE ON HT_RND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_RND_VISIT WHERE HT_RND_VISIT.RGN_CD = old.RGN_CD AND
                                               HT_RND_VISIT.RND_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* HT_RND  HT_RND_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085a5", PARENT_OWNER="", PARENT_TABLE="HT_RND"
    CHILD_OWNER="", CHILD_TABLE="HT_RND_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0172_003", FK_COLUMNS="RGN_CD""RND_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HT_RND because HT_RND_VISIT exists.')
 !!

CREATE  TRIGGER tD_HT_RND3 AFTER DELETE ON HT_RND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_RND_OFFCR WHERE HT_RND_OFFCR.RGN_CD = old.RGN_CD AND
                                               HT_RND_OFFCR.RND_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* HT_RND  HT_RND_OFFCR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000864e", PARENT_OWNER="", PARENT_TABLE="HT_RND"
    CHILD_OWNER="", CHILD_TABLE="HT_RND_OFFCR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0172_002", FK_COLUMNS="RGN_CD""RND_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HT_RND because HT_RND_OFFCR exists.')
 !!

CREATE  TRIGGER tD_HT_RND4 AFTER DELETE ON HT_RND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_HT_RND WHERE HERD_HT_RND.RGN_CD = old.RGN_CD AND
                                              HERD_HT_RND.RND_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* HT_RND  HERD_HT_RND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007f52", PARENT_OWNER="", PARENT_TABLE="HT_RND"
    CHILD_OWNER="", CHILD_TABLE="HERD_HT_RND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0172_001", FK_COLUMNS="RGN_CD""RND_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HT_RND because HERD_HT_RND exists.')
 !!


CREATE TRIGGER D0082I01
  NO CASCADE BEFORE INSERT
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM ht_rnd_offcr hro
    WHERE hro.rgn_cd = new.rgn_cd
      AND hro.rnd_num = new.rnd_num
      AND new.st_date_d <= VALUE(hro.end_date_d,'9999-12-31')
      AND VALUE(new.end_date_d,'9999-12-31') >= hro.st_date_d))
SIGNAL SQLSTATE 'Z0082'
('D0082I01: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0082U02
  NO CASCADE BEFORE UPDATE
  ON HT_RND_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM ht_rnd_offcr hro
     WHERE hro.rgn_cd = new.rgn_cd
       AND hro.rnd_num = new.rnd_num
       AND hro.st_date_d != old.st_date_d
       AND new.st_date_d <= VALUE(hro.end_date_d,'9999-12-31')
       AND VALUE(new.end_date_d,'9999-12-31') >= hro.st_date_d))
SIGNAL SQLSTATE 'Z0082'
('D0082U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0082I51
  NO CASCADE BEFORE INSERT
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0082I52
  NO CASCADE BEFORE INSERT
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0082I53
  NO CASCADE BEFORE INSERT
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0082I54
  NO CASCADE BEFORE INSERT
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0082U01
  NO CASCADE BEFORE UPDATE
  ON HT_RND_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0082U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON HT_RND_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0082U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON HT_RND_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0082U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON HT_RND_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0082U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON HT_RND_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0655U01
  NO CASCADE BEFORE UPDATE
  ON HT_RND_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0262U01
  NO CASCADE BEFORE UPDATE
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0262I53
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0262I52
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(new.date_d) - 19000000 END
 !!


CREATE TRIGGER D0262I54
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0262U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(new.date_d) - 19000000 END
 !!


CREATE TRIGGER D0262D01
  AFTER DELETE
  ON HT_RSLT
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_ht_rslt (
  anml_key
, upd_time
, map_ref
, herd_num
, ssn
, no_insp_rsn_cd
, milk_abnm_cd
, non_use_rsn_cd
, test_assess_sts_cd
, am_vol
, pm_vol
, third_vol
, fat_pct
, prot_pct
, lcts_pct
, scc
, pe
, valid_ind
, date_d
, upd_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.ssn
, old.no_insp_rsn_cd
, old.milk_abnm_cd
, old.non_use_rsn_cd
, old.test_assess_sts_cd
, old.am_vol
, old.pm_vol
, old.third_vol
, old.fat_pct
, old.prot_pct
, old.lcts_pct
, old.scc
, old.pe
, old.valid_ind
, old.date_d
, old.upd_date_d
)
 !!


CREATE TRIGGER D0262I51
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0262U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0262U54
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0262U53
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0262U02
  AFTER UPDATE OF 
        anml_key,
        date_d
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.date_d != new.date_d)
INSERT INTO del_ht_rslt (
  anml_key
, upd_time
, map_ref
, herd_num
, ssn
, no_insp_rsn_cd
, milk_abnm_cd
, non_use_rsn_cd
, test_assess_sts_cd
, am_vol
, pm_vol
, third_vol
, fat_pct
, prot_pct
, lcts_pct
, scc
, pe
, valid_ind
, date_d
, upd_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.ssn
, old.no_insp_rsn_cd
, old.milk_abnm_cd
, old.non_use_rsn_cd
, old.test_assess_sts_cd
, old.am_vol
, old.pm_vol
, old.third_vol
, old.fat_pct
, old.prot_pct
, old.lcts_pct
, old.scc
, old.pe
, old.valid_ind
, old.date_d
, old.upd_date_d
)
 !!


CREATE TRIGGER D0262I02
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
    SELECT 1 FROM milk_abnm ma
    WHERE ma.cd = new.milk_abnm_cd
      AND VALUE(ma.expiry_date,'2999-12-31') > CURRENT DATE))
SIGNAL SQLSTATE 'Z0262'
('D0262I02: invalid or expired milk abnormal code')
 !!


CREATE TRIGGER D0262U04
  NO CASCADE BEFORE UPDATE OF 
                    milk_abnm_cd
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.milk_abnm_cd != old.milk_abnm_cd
  AND NOT EXISTS (
    SELECT 1 FROM milk_abnm ma
    WHERE ma.cd = new.milk_abnm_cd
      AND VALUE(ma.expiry_date,'2999-12-31') > CURRENT DATE))
SIGNAL SQLSTATE 'Z0262'
('D0262U04: invalid or expired milk abnormal code')
 !!


CREATE TRIGGER D0262I01
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sample_regime_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0262'
('D0262I01: invalid sample regime code')
 !!


CREATE TRIGGER D0262I03
  NO CASCADE BEFORE INSERT
  ON HT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET avg_num_milkings = VALUE(avg_num_milkings, 2)
  , actual_am_vol = VALUE(actual_am_vol, am_vol)
  , am_vol_derived_ind = VALUE(am_vol_derived_ind, 'N')
  , actual_pm_vol = VALUE(actual_pm_vol, pm_vol)
  , pm_vol_derived_ind = VALUE(pm_vol_derived_ind, 'N')
  , actual_fat_pct = VALUE(actual_fat_pct, fat_pct)
  , fat_pct_derived_ind = VALUE(fat_pct_derived_ind, 'N')
  , actual_prot_pct = VALUE(actual_prot_pct, prot_pct)
  , prot_pct_derived_ind = VALUE(prot_pct_derived_ind, 'N')
  , actual_scc = VALUE(actual_scc, scc)
  , scc_derived_ind = VALUE(scc_derived_ind, 'N')
 !!


CREATE TRIGGER D0262U03
  NO CASCADE BEFORE UPDATE OF 
                    sample_regime_cd
  ON HT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.sample_regime_cd IS NOT NULL
  AND VALUE(old.sample_regime_cd,-1) != new.sample_regime_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0262'
('D0262U03: invalid sample regime code')
 !!


CREATE TRIGGER D0595D02
  AFTER DELETE
  ON HT_SCHED
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_ht_sched (
  map_ref
, herd_num
, ssn
, upd_time
, pref_first_date
, end_date
, rgn_cd
, service_tp_cd
, test_interval
, first_self_sample_ind
, rqrd_visit_cnt
, user_id
, plan_cmt
, op_cmt
, used_ezlink_ind
, first_time_ht_ind
, milking_regime_cd
, sample_regime_cd
, milk_sample_method_cd
, service_lvl_cd
, ht_sms_notify_ind
, ht_sms_ctct_cd
, combined_herd_ind
, shared_dairy_ind
, sec_herd_ptpt_cd
, cups_2
, farm_dairy_design_cd_2
, mc_cluster_cd_2
, spec_tray_rqrmt_ind
, staff_cnt
, pm_milking_st_time
, am_milking_st_time
, add_bracket_cnt
, bracket_tp_cd
, dairy_upgrade_ind
, dairy_upgrade_date
, ht_service_rating_cd
, ht_service_rating_cmt
, bracket_delivery_ind
, ht_ctct_cd
, ht_ctct_name
, ht_ctct_phone_num
, ht_ctct_mobile_num
, pref_data_colln_method_cd
, ezlink_units
, paper_labstrip_ind
, major_rnd_num
) VALUES (
  old.map_ref
, old.herd_num
, old.ssn
, old.upd_time
, old.pref_first_date
, old.end_date
, old.rgn_cd
, old.service_tp_cd
, old.test_interval
, old.first_self_sample_ind
, old.rqrd_visit_cnt
, old.user_id
, old.plan_cmt
, old.op_cmt
, old.used_ezlink_ind
, old.first_time_ht_ind
, old.milking_regime_cd
, old.sample_regime_cd
, old.milk_sample_method_cd
, old.service_lvl_cd
, old.ht_sms_notify_ind
, old.ht_sms_ctct_cd
, old.combined_herd_ind
, old.shared_dairy_ind
, old.sec_herd_ptpt_cd
, old.cups_2
, old.farm_dairy_design_cd_2
, old.mc_cluster_cd_2
, old.spec_tray_rqrmt_ind
, old.staff_cnt
, old.pm_milking_st_time
, old.am_milking_st_time
, old.add_bracket_cnt
, old.bracket_tp_cd
, old.dairy_upgrade_ind
, old.dairy_upgrade_date
, old.ht_service_rating_cd
, old.ht_service_rating_cmt
, old.bracket_delivery_ind
, old.ht_ctct_cd
, old.ht_ctct_name
, old.ht_ctct_phone_num
, old.ht_ctct_mobile_num
, old.pref_data_colln_method_cd
, old.ezlink_units
, old.paper_labstrip_ind
, old.major_rnd_num)
 !!


CREATE TRIGGER D0595U15
  AFTER UPDATE OF 
        map_ref,
        herd_num,
        ssn
  ON HT_SCHED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num
   OR old.ssn != new.ssn)
INSERT INTO del_ht_sched (
  map_ref
, herd_num
, ssn
, upd_time
, pref_first_date
, end_date
, rgn_cd
, service_tp_cd
, test_interval
, first_self_sample_ind
, rqrd_visit_cnt
, user_id
, plan_cmt
, op_cmt
, used_ezlink_ind
, first_time_ht_ind
, milking_regime_cd
, sample_regime_cd
, milk_sample_method_cd
, service_lvl_cd
, ht_sms_notify_ind
, ht_sms_ctct_cd
, combined_herd_ind
, shared_dairy_ind
, sec_herd_ptpt_cd
, cups_2
, farm_dairy_design_cd_2
, mc_cluster_cd_2
, spec_tray_rqrmt_ind
, staff_cnt
, pm_milking_st_time
, am_milking_st_time
, add_bracket_cnt
, bracket_tp_cd
, dairy_upgrade_ind
, dairy_upgrade_date
, ht_service_rating_cd
, ht_service_rating_cmt
, bracket_delivery_ind
, ht_ctct_cd
, ht_ctct_name
, ht_ctct_phone_num
, ht_ctct_mobile_num
, pref_data_colln_method_cd
, ezlink_units
, paper_labstrip_ind
, major_rnd_num
) VALUES (
  old.map_ref
, old.herd_num
, old.ssn
, old.upd_time
, old.pref_first_date
, old.end_date
, old.rgn_cd
, old.service_tp_cd
, old.test_interval
, old.first_self_sample_ind
, old.rqrd_visit_cnt
, old.user_id
, old.plan_cmt
, old.op_cmt
, old.used_ezlink_ind
, old.first_time_ht_ind
, old.milking_regime_cd
, old.sample_regime_cd
, old.milk_sample_method_cd
, old.service_lvl_cd
, old.ht_sms_notify_ind
, old.ht_sms_ctct_cd
, old.combined_herd_ind
, old.shared_dairy_ind
, old.sec_herd_ptpt_cd
, old.cups_2
, old.farm_dairy_design_cd_2
, old.mc_cluster_cd_2
, old.spec_tray_rqrmt_ind
, old.staff_cnt
, old.pm_milking_st_time
, old.am_milking_st_time
, old.add_bracket_cnt
, old.bracket_tp_cd
, old.dairy_upgrade_ind
, old.dairy_upgrade_date
, old.ht_service_rating_cd
, old.ht_service_rating_cmt
, old.bracket_delivery_ind
, old.ht_ctct_cd
, old.ht_ctct_name
, old.ht_ctct_phone_num
, old.ht_ctct_mobile_num
, old.pref_data_colln_method_cd
, old.ezlink_units
, old.paper_labstrip_ind
, old.major_rnd_num)
 !!


CREATE TRIGGER D0595U01
  NO CASCADE BEFORE UPDATE
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0595I01
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILKING_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.milking_regime_cd))) )
SIGNAL SQLSTATE 'Z0595'
('D0595I01: invalid milking regime code')
 !!


CREATE TRIGGER D0595I02
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0595'
('D0595I02: invalid sample regime code')
 !!


CREATE TRIGGER D0595U03
  NO CASCADE BEFORE UPDATE OF 
                    milking_regime_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILKING_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.milking_regime_cd))) )
SIGNAL SQLSTATE 'Z0595'
('D0595U03: invalid milking regime code')
 !!


CREATE TRIGGER D0595U04
  NO CASCADE BEFORE UPDATE OF 
                    sample_regime_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0595'
('D0595U04: invalid sample regime code')
 !!


CREATE TRIGGER D0595I04
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = new.service_lvl_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I04: invalid service level code')
 !!


CREATE TRIGGER D0595U06
  NO CASCADE BEFORE UPDATE OF 
                    service_lvl_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = new.service_lvl_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U06: invalid service level code')
 !!


CREATE TRIGGER D0595I05
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sec_herd_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.sec_herd_ptpt_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I05: second herd participant cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0595U07
  NO CASCADE BEFORE UPDATE OF 
                    sec_herd_ptpt_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sec_herd_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.sec_herd_ptpt_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U07: second herd participant cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0595I06
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.farm_dairy_design_cd_2 IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FARM_DAIRY_DESIGN_CD'
      AND c.cd = new.farm_dairy_design_cd_2) )
SIGNAL SQLSTATE 'Z0595'
('D0595I06: invalid farm dairy design code 2')
 !!


CREATE TRIGGER D0595I07
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mc_cluster_cd_2 IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MC_CLUSTER_CD'
      AND c.cd = new.mc_cluster_cd_2) )
SIGNAL SQLSTATE 'Z0595'
('D0595I07: invalid machine cluster code 2')
 !!


CREATE TRIGGER D0595I08
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bracket_tp_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_METER_BRACKET_TP_CD'
      AND c.cd = new.bracket_tp_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I08: invalid bracket type code')
 !!


CREATE TRIGGER D0595I09
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_CTCT_CD'
      AND c.cd = new.ht_ctct_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I09: invalid herd test contact code')
 !!


CREATE TRIGGER D0595I10
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_SAMPLE_METHOD_CD'
      AND c.cd = LTRIM(CHAR(INT(new.milk_sample_method_cd)))) )
SIGNAL SQLSTATE 'Z0595'
('D0595I10: invalid milk sample method code')
 !!


CREATE TRIGGER D0595U08
  NO CASCADE BEFORE UPDATE OF 
                    farm_dairy_design_cd_2
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.farm_dairy_design_cd_2 IS NOT NULL 
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'FARM_DAIRY_DESIGN_CD'
      AND c.cd = new.farm_dairy_design_cd_2) )
SIGNAL SQLSTATE 'Z0595'
('D0595U08: invalid farm dairy design code 2')
 !!


CREATE TRIGGER D0595U09
  NO CASCADE BEFORE UPDATE OF 
                    mc_cluster_cd_2
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mc_cluster_cd_2 IS NOT NULL 
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MC_CLUSTER_CD'
      AND c.cd = new.mc_cluster_cd_2) )
SIGNAL SQLSTATE 'Z0595'
('D0595U09: invalid machine cluster code 2')
 !!


CREATE TRIGGER D0595U10
  NO CASCADE BEFORE UPDATE OF 
                    bracket_tp_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.bracket_tp_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_METER_BRACKET_TP_CD'
      AND c.cd = new.bracket_tp_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U10: invalid bracket type code')
 !!


CREATE TRIGGER D0595U11
  NO CASCADE BEFORE UPDATE OF 
                    ht_ctct_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_CTCT_CD'
      AND c.cd = new.ht_ctct_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U11: invalid herd test contact code')
 !!


CREATE TRIGGER D0595U12
  NO CASCADE BEFORE UPDATE OF 
                    milk_sample_method_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_SAMPLE_METHOD_CD'
      AND c.cd = LTRIM(CHAR(INT(new.milk_sample_method_cd)))) )
SIGNAL SQLSTATE 'Z0595'
('D0595U12: invalid milk sample method code')
 !!


CREATE TRIGGER D0595I11
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_service_rating_cd  IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_RATING_CD'
      AND c.cd = new.ht_service_rating_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I11: invalid herd test service rating code')
 !!


CREATE TRIGGER D0595U13
  NO CASCADE BEFORE UPDATE OF 
                    ht_service_rating_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ht_service_rating_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_RATING_CD'
      AND c.cd = new.ht_service_rating_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U13: invalid herd test service rating code')
 !!


CREATE TRIGGER D0595I03
  NO CASCADE BEFORE INSERT
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_data_colln_method_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_DATA_COLLN_METHOD_CD'
      AND c.cd = new.pref_data_colln_method_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595I03: invalid preferred data collection method code')
 !!


CREATE TRIGGER D0595U05
  NO CASCADE BEFORE UPDATE OF 
                    pref_data_colln_method_cd
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_data_colln_method_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_DATA_COLLN_METHOD_CD'
      AND c.cd = new.pref_data_colln_method_cd) )
SIGNAL SQLSTATE 'Z0595'
('D0595U05: invalid preferred data collection method code')
 !!


CREATE TRIGGER D0595D01
  NO CASCADE BEFORE DELETE
  ON HT_SCHED
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (EXISTS
  (SELECT 1 from herd_ht_rnd hhr
    WHERE hhr.map_ref = old.map_ref
      AND hhr.herd_num = old.herd_num
      AND hhr.ssn = old.ssn) )
SIGNAL SQLSTATE 'Z0595'
('D0595D01: herd test round exists for this herd')
 !!


CREATE TRIGGER D0595U14
  NO CASCADE BEFORE UPDATE OF 
                    map_ref,
                    herd_num,
                    ssn
  ON HT_SCHED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((new.map_ref != old.map_ref OR
       new.herd_num != old.herd_num OR
       new.ssn != old.ssn)
 AND EXISTS
  (SELECT 1 from herd_ht_rnd hhr
    WHERE hhr.map_ref = old.map_ref
      AND hhr.herd_num = old.herd_num
      AND hhr.ssn = old.ssn) )
SIGNAL SQLSTATE 'Z0595'
('D0595D01: herd test round exists for this herd')
 !!


CREATE TRIGGER D0595U02
  AFTER UPDATE
  ON HT_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.herd_num = new.herd_num
  AND hd.sr_area_ssn = new.ssn
 !!


CREATE TRIGGER D0398D01
  AFTER DELETE
  ON HT_SCHED_VISIT
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_ht_sched_visit (
  id
, upd_time
, map_ref
, herd_num
, ssn
, test_date
, service_lvl_cd
, milk_sample_method_cd
, staff_cnt
, sample_regime_cd
, user_id
, service_tp_cd
, milking_regime_cd
, pref_data_colln_method_cd
) VALUES (
  old.id
, old.upd_time
, old.map_ref
, old.herd_num
, old.ssn
, old.test_date
, old.service_lvl_cd
, old.milk_sample_method_cd
, old.staff_cnt
, old.sample_regime_cd
, old.user_id
, old.service_tp_cd
, old.milking_regime_cd
, old.pref_data_colln_method_cd)
 !!


CREATE TRIGGER D0398I01
  NO CASCADE BEFORE INSERT
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = new.service_lvl_cd) )
SIGNAL SQLSTATE 'Z0398'
('D0398I01: invalid service level code')
 !!


CREATE TRIGGER D0398I02
  NO CASCADE BEFORE INSERT
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_SAMPLE_METHOD_CD'
      AND c.cd = LTRIM(CHAR(INT(new.milk_sample_method_cd)))) )
SIGNAL SQLSTATE 'Z0398'
('D0398I02: invalid milk sample method code')
 !!


CREATE TRIGGER D0398I03
  NO CASCADE BEFORE INSERT
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0398'
('D0398I03: invalid sample regime code')
 !!


CREATE TRIGGER D0398I04
  NO CASCADE BEFORE INSERT
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILKING_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.milking_regime_cd))) )
SIGNAL SQLSTATE 'Z0398'
('D0398I04: invalid milking regime code')
 !!


CREATE TRIGGER D0398U06
  AFTER UPDATE OF 
        id
  ON HT_SCHED_VISIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.id != new.id)
INSERT INTO del_ht_sched_visit (
  id
, upd_time
, map_ref
, herd_num
, ssn
, test_date
, service_lvl_cd
, milk_sample_method_cd
, staff_cnt
, sample_regime_cd
, user_id
, service_tp_cd
, milking_regime_cd
, pref_data_colln_method_cd
) VALUES (
  old.id
, old.upd_time
, old.map_ref
, old.herd_num
, old.ssn
, old.test_date
, old.service_lvl_cd
, old.milk_sample_method_cd
, old.staff_cnt
, old.sample_regime_cd
, old.user_id
, old.service_tp_cd
, old.milking_regime_cd
, old.pref_data_colln_method_cd)
 !!


CREATE TRIGGER D0398I05
  NO CASCADE BEFORE INSERT
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_data_colln_method_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_DATA_COLLN_METHOD_CD'
      AND c.cd = new.pref_data_colln_method_cd) )
SIGNAL SQLSTATE 'Z0398'
('D0398I05 invalid preferred data collection method code')
 !!


CREATE TRIGGER D0398U07
  NO CASCADE BEFORE UPDATE
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_data_colln_method_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_DATA_COLLN_METHOD_CD'
      AND c.cd = new.pref_data_colln_method_cd) )
SIGNAL SQLSTATE 'Z0398'
('D0398U07 invalid preferred data collection method code')
 !!


CREATE TRIGGER D0398U01
  NO CASCADE BEFORE UPDATE
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0398U02
  NO CASCADE BEFORE UPDATE OF 
                    service_lvl_cd
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = new.service_lvl_cd) )
SIGNAL SQLSTATE 'Z0398'
('D0398U02: invalid service level code')
 !!


CREATE TRIGGER D0398U03
  NO CASCADE BEFORE UPDATE OF 
                    milk_sample_method_cd
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILK_SAMPLE_METHOD_CD'
      AND c.cd = LTRIM(CHAR(INT(new.milk_sample_method_cd)))) )
SIGNAL SQLSTATE 'Z0398'
('D0398U03: invalid milk sample method code')
 !!


CREATE TRIGGER D0398U04
  NO CASCADE BEFORE UPDATE OF 
                    sample_regime_cd
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0398'
('D0398I03: invalid sample regime code')
 !!


CREATE TRIGGER D0398U05
  NO CASCADE BEFORE UPDATE OF 
                    milking_regime_cd
  ON HT_SCHED_VISIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MILKING_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.milking_regime_cd))) )
SIGNAL SQLSTATE 'Z0398'
('D0398U05: invalid milking regime code')
 !!


CREATE TRIGGER D0886U01
  NO CASCADE BEFORE UPDATE
  ON HT_TDM_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0887U01
  NO CASCADE BEFORE UPDATE
  ON HT_TDM_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0892U01
  NO CASCADE BEFORE UPDATE
  ON HT_VEHICLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_HT_VEHICLE AFTER DELETE ON HT_VEHICLE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_SCHED_VISIT WHERE HT_SCHED_VISIT.DEPOT_PTPT_CD = old.DEPOT_PTPT_CD AND
                                                 HT_SCHED_VISIT.HT_VEHICLE_NUM = old.HT_VEHICLE_NUM) > 0)
    /* erwin Builtin Trigger */
    /* HT_VEHICLE  HT_SCHED_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094b3", PARENT_OWNER="", PARENT_TABLE="HT_VEHICLE"
    CHILD_OWNER="", CHILD_TABLE="HT_SCHED_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0892_001", FK_COLUMNS="DEPOT_PTPT_CD""HT_VEHICLE_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete HT_VEHICLE because HT_SCHED_VISIT exists.')
 !!


CREATE TRIGGER D0298I54
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298I56
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(new.test_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298U01
  NO CASCADE BEFORE UPDATE
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0298I53
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298U56
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.test_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298I55
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298U55
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298I52
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(new.rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298U02
  AFTER UPDATE OF 
        map_ref,
        herd_num,
        test_date_d
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num
   OR old.test_date_d != new.test_date_d)
INSERT INTO del_ht_vst (
  map_ref
, herd_num
, ssn
, ht_sv_tp_cd
, ht_lab_cd
, upd_ind
, lab_herd_id
, supr_mthd_cd
, staff_cnt
, rgn_cd
, pd
, org_ptpt_cd
, retest_ind
, scc_xmit_ind
, pm_vol
, am_vol
, upd_time
, third_vol
, fat
, prot
, lcts
, cow_cnt
, pm_cow_cnt
, am_cow_cnt
, third_cow_cnt
, ht_freq_cd
, chrg_ind
, chrg_cow_cnt
, cmt
, scc
, extr_date
, clvg_date_15_mth
, unrcd_clvg_date
, test_aft_dry_cnt
, unrcd_cow_cnt
, rslts_proc_time
, proc_ht_data_ind
, herd_clvg_pct
, ttl_smpl_cow_cnt
, test_date_d
, rqst_date_d
, rcd_date_d
, assist_milking_cnt
, equip_use_cd
) VALUES (
  old.map_ref
, old.herd_num
, old.ssn
, old.ht_sv_tp_cd
, old.ht_lab_cd
, old.upd_ind
, old.lab_herd_id
, old.supr_mthd_cd
, old.staff_cnt
, old.rgn_cd
, old.pd
, old.org_ptpt_cd
, old.retest_ind
, old.scc_xmit_ind
, old.pm_vol
, old.am_vol
, old.upd_time
, old.third_vol
, old.fat
, old.prot
, old.lcts
, old.cow_cnt
, old.pm_cow_cnt
, old.am_cow_cnt
, old.third_cow_cnt
, old.ht_freq_cd
, old.chrg_ind
, old.chrg_cow_cnt
, old.cmt
, old.scc
, old.extr_date
, old.clvg_date_15_mth
, old.unrcd_clvg_date
, old.test_aft_dry_cnt
, old.unrcd_cow_cnt
, old.rslts_proc_time
, old.proc_ht_data_ind
, old.herd_clvg_pct
, old.ttl_smpl_cow_cnt
, old.test_date_d
, old.rqst_date_d
, old.rcd_date_d
, old.assist_milking_cnt
, old.equip_use_cd
)
 !!


CREATE TRIGGER D0298U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rcd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0298I51
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298D02
  NO CASCADE BEFORE DELETE
  ON HT_VST
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM ht_assist hat
    WHERE old.map_ref = hat.map_ref
      AND old.herd_num = hat.herd_num
      AND old.test_date_d = hat.test_date))
SIGNAL SQLSTATE 'Z0298'
('D0298D02: row exists on ht_assist')
 !!


CREATE TRIGGER D0298U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0298U03
  NO CASCADE BEFORE UPDATE OF 
                    map_ref,
                    herd_num,
                    test_date_d
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.map_ref != new.map_ref
    OR old.herd_num != new.herd_num
    OR old.test_date_d != new.test_date_d)
    AND EXISTS (
    SELECT 1 FROM ht_assist hat
    WHERE old.map_ref = hat.map_ref
      AND old.herd_num = hat.herd_num
      AND old.test_date_d = hat.test_date))
SIGNAL SQLSTATE 'Z0298'
('D0298U03: row exists on ht_assist')
 !!


CREATE TRIGGER D0298I01
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sample_regime_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0298'
('D0298I01: invalid sample regime code')
 !!


CREATE TRIGGER D0298I03
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET sample_regime_cd = VALUE(sample_regime_cd, 1)
  , avg_num_milkings = VALUE(avg_num_milkings, 2)
  , service_lvl_cd = VALUE(service_lvl_cd, 'E')
 !!


CREATE TRIGGER D0298I04
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.service_lvl_cd IS NOT NULL 
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = LTRIM(CHAR(new.service_lvl_cd))) )
SIGNAL SQLSTATE 'Z0298'
('D0298I04: invalid service level code')
 !!


CREATE TRIGGER D0298U04
  NO CASCADE BEFORE UPDATE OF 
                    sample_regime_cd
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.sample_regime_cd,-1) != VALUE(new.sample_regime_cd,-1)
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0298'
('D0298U04: invalid sample regime code')
 !!


CREATE TRIGGER D0298D01
  AFTER DELETE
  ON HT_VST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_ht_vst (
  map_ref
, herd_num
, ssn
, ht_sv_tp_cd
, ht_lab_cd
, upd_ind
, lab_herd_id
, supr_mthd_cd
, staff_cnt
, rgn_cd
, pd
, org_ptpt_cd
, retest_ind
, scc_xmit_ind
, pm_vol
, am_vol
, upd_time
, third_vol
, fat
, prot
, lcts
, cow_cnt
, pm_cow_cnt
, am_cow_cnt
, third_cow_cnt
, ht_freq_cd
, chrg_ind
, chrg_cow_cnt
, cmt
, scc
, extr_date
, clvg_date_15_mth
, unrcd_clvg_date
, test_aft_dry_cnt
, unrcd_cow_cnt
, rslts_proc_time
, proc_ht_data_ind
, herd_clvg_pct
, ttl_smpl_cow_cnt
, test_date_d
, rqst_date_d
, rcd_date_d
) VALUES (
  old.map_ref
, old.herd_num
, old.ssn
, old.ht_sv_tp_cd
, old.ht_lab_cd
, old.upd_ind
, old.lab_herd_id
, old.supr_mthd_cd
, old.staff_cnt
, old.rgn_cd
, old.pd
, old.org_ptpt_cd
, old.retest_ind
, old.scc_xmit_ind
, old.pm_vol
, old.am_vol
, old.upd_time
, old.third_vol
, old.fat
, old.prot
, old.lcts
, old.cow_cnt
, old.pm_cow_cnt
, old.am_cow_cnt
, old.third_cow_cnt
, old.ht_freq_cd
, old.chrg_ind
, old.chrg_cow_cnt
, old.cmt
, old.scc
, old.extr_date
, old.clvg_date_15_mth
, old.unrcd_clvg_date
, old.test_aft_dry_cnt
, old.unrcd_cow_cnt
, old.rslts_proc_time
, old.proc_ht_data_ind
, old.herd_clvg_pct
, old.ttl_smpl_cow_cnt
, old.test_date_d
, old.rqst_date_d
, old.rcd_date_d
)
 !!


CREATE TRIGGER D0298U06
  NO CASCADE BEFORE UPDATE
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.equip_use_cd IS NOT NULL
  AND VALUE(new.equip_use_cd,'~') != VALUE(old.equip_use_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_EQUIP_USE_CD'
      AND c.cd = new.equip_use_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0298'
('D0298U06: invalid equipment use code')
 !!


CREATE TRIGGER D0298U05
  NO CASCADE BEFORE UPDATE OF 
                    service_lvl_cd
  ON HT_VST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.service_lvl_cd,'~') != VALUE(old.service_lvl_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_SERVICE_LVL_CD'
      AND c.cd = LTRIM(CHAR(new.service_lvl_cd))) )
SIGNAL SQLSTATE 'Z0298'
('D0298U05: invalid service level code')
 !!


CREATE TRIGGER D0298I02
  NO CASCADE BEFORE INSERT
  ON HT_VST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.equip_use_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'HT_EQUIP_USE_CD'
      AND c.cd = new.equip_use_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0298'
('D0298I02: invalid equipment use code')
 !!


CREATE TRIGGER D0299I51
  NO CASCADE BEFORE INSERT
  ON HT_VST_DEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0299I52
  NO CASCADE BEFORE INSERT
  ON HT_VST_DEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0299U01
  NO CASCADE BEFORE UPDATE
  ON HT_VST_DEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0299U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON HT_VST_DEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0299U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON HT_VST_DEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0299I01
  NO CASCADE BEFORE INSERT
  ON HT_VST_DEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', reason) > 0)
  SET new.reason = replace(reason,x'0D0A','  ')
 !!


CREATE TRIGGER D0299U02
  NO CASCADE BEFORE UPDATE OF 
                    reason
  ON HT_VST_DEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', reason) > 0)
  SET new.reason = replace(reason,x'0D0A','  ')
 !!


CREATE TRIGGER D0247I01
  NO CASCADE BEFORE INSERT
  ON INET_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.accs_year  = SUBSTR(CHAR(new.accs_time),1,4),
    new.accs_month = SUBSTR(CHAR(new.accs_time),6,2)
 !!


CREATE TRIGGER D0247I02
  NO CASCADE BEFORE INSERT
  ON INET_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.chrg_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.chrg_ptpt_cd) )
SIGNAL SQLSTATE 'Z0247'
('D0247I02: chrg_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0247I03
  NO CASCADE BEFORE INSERT
  ON INET_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.chrg_ptpt_cd != ' ')
SET new.chrg_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.chrg_ptpt_cd)
 !!


CREATE TRIGGER D0247I04
  NO CASCADE BEFORE INSERT
  ON INET_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcpnt_ptpt_cd != ' ')
SET new.rcpnt_party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.rcpnt_ptpt_cd)
 !!


CREATE TRIGGER D0247U04
  NO CASCADE BEFORE UPDATE OF 
                    rcpnt_ptpt_cd
  ON INET_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rcpnt_ptpt_cd != old.rcpnt_ptpt_cd)
SET new.rcpnt_party_id = (
  CASE WHEN new.rcpnt_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rcpnt_ptpt_cd)
  END
 !!


CREATE TRIGGER D0247U01
  NO CASCADE BEFORE UPDATE OF 
                    chrg_ptpt_cd
  ON INET_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.chrg_ptpt_cd IS NOT NULL
 AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.chrg_ptpt_cd) )
SIGNAL SQLSTATE 'Z0247'
('D0247I01: chrg_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0247U02
  NO CASCADE BEFORE UPDATE
  ON INET_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0247U03
  NO CASCADE BEFORE UPDATE OF 
                    chrg_ptpt_cd
  ON INET_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.chrg_ptpt_cd != old.chrg_ptpt_cd)
SET new.chrg_party_id = (
  CASE WHEN new.chrg_ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.chrg_ptpt_cd)
  END
 !!


CREATE TRIGGER D0613U01
  NO CASCADE BEFORE UPDATE
  ON INSEM_LLL_SEMEN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0613U02
  AFTER UPDATE
  ON INSEM_LLL_SEMEN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.man_adj_dose_cnt !=0
 AND new.man_adj_dose_cnt =0)
DELETE FROM man_lll_semen_adj lsma
WHERE lsma.demand_date = new.demand_date
  AND lsma.insem_grp_rgn_cd = new.insem_grp_rgn_cd
  AND lsma.insem_grp_num = new.insem_grp_num
  AND lsma.mktg_brd_cd = new.mktg_brd_cd
  AND lsma.core_prod_cd = new.core_prod_cd
 !!


CREATE  TRIGGER tD_INSEM_LLL_SEMEN AFTER DELETE ON INSEM_LLL_SEMEN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MAN_LLL_SEMEN_ADJ WHERE MAN_LLL_SEMEN_ADJ.DEMAND_DATE = old.DEMAND_DATE AND
                                                    MAN_LLL_SEMEN_ADJ.INSEM_GRP_RGN_CD = old.INSEM_GRP_RGN_CD AND
                                                    MAN_LLL_SEMEN_ADJ.INSEM_GRP_NUM = old.INSEM_GRP_NUM AND
                                                    MAN_LLL_SEMEN_ADJ.MKTG_BRD_CD = old.MKTG_BRD_CD AND
                                                    MAN_LLL_SEMEN_ADJ.CORE_PROD_CD = old.CORE_PROD_CD) > 0)
    /* erwin Builtin Trigger */
    /* INSEM_LLL_SEMEN  MAN_LLL_SEMEN_ADJ on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000b23f", PARENT_OWNER="", PARENT_TABLE="INSEM_LLL_SEMEN"
    CHILD_OWNER="", CHILD_TABLE="MAN_LLL_SEMEN_ADJ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0613_002", FK_COLUMNS="DEMAND_DATE""INSEM_GRP_RGN_CD""INSEM_GRP_NUM""MKTG_BRD_CD""
              CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INSEM_LLL_SEMEN because MAN_LLL_SEMEN_ADJ exists.')
 !!

CREATE  TRIGGER tD_INSEM_LLL_SEME2 AFTER DELETE ON INSEM_LLL_SEMEN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DESP_LLL_SEMEN WHERE DESP_LLL_SEMEN.DEMAND_DATE = old.DEMAND_DATE AND
                                                 DESP_LLL_SEMEN.INSEM_GRP_RGN_CD = old.INSEM_GRP_RGN_CD AND
                                                 DESP_LLL_SEMEN.INSEM_GRP_NUM = old.INSEM_GRP_NUM AND
                                                 DESP_LLL_SEMEN.MKTG_BRD_CD = old.MKTG_BRD_CD AND
                                                 DESP_LLL_SEMEN.CORE_PROD_CD = old.CORE_PROD_CD) > 0)
    /* erwin Builtin Trigger */
    /* INSEM_LLL_SEMEN  DESP_LLL_SEMEN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000b39a", PARENT_OWNER="", PARENT_TABLE="INSEM_LLL_SEMEN"
    CHILD_OWNER="", CHILD_TABLE="DESP_LLL_SEMEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0613_001", FK_COLUMNS="DEMAND_DATE""INSEM_GRP_RGN_CD""INSEM_GRP_NUM""MKTG_BRD_CD""
              CORE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INSEM_LLL_SEMEN because DESP_LLL_SEMEN exists.')
 !!


CREATE TRIGGER D0033U01
  NO CASCADE BEFORE UPDATE
  ON INSEM_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INSEM_TP AFTER DELETE ON INSEM_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM NC_SUBM_MODEL WHERE NC_SUBM_MODEL.INSEM_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* INSEM_TP  NC_SUBM_MODEL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e88", PARENT_OWNER="", PARENT_TABLE="INSEM_TP"
    CHILD_OWNER="", CHILD_TABLE="NC_SUBM_MODEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0033_001", FK_COLUMNS="INSEM_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INSEM_TP because NC_SUBM_MODEL exists.')
 !!


CREATE TRIGGER D0280U01
  NO CASCADE BEFORE UPDATE
  ON INTERBULL_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0282U01
  NO CASCADE BEFORE UPDATE
  ON INTERBULL_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0805U01
  NO CASCADE BEFORE UPDATE
  ON INTL_AI_TECH_VISIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_AI_TECH_VI AFTER DELETE ON INTL_AI_TECH_VISIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM WHERE INTL_INSEM.VISIT_ID = old.VISIT_ID AND
                                             INTL_INSEM.EMPL_PTPT_CD = old.EMPL_PTPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* INTL_AI_TECH_VISIT  INTL_INSEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009d3f", PARENT_OWNER="", PARENT_TABLE="INTL_AI_TECH_VISIT"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0805_001", FK_COLUMNS="VISIT_ID""EMPL_PTPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_AI_TECH_VISIT because INTL_INSEM exists.')
 !!


CREATE TRIGGER D0806U01
  NO CASCADE BEFORE UPDATE
  ON INTL_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_ANML AFTER DELETE ON INTL_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SIRE WHERE INTL_SIRE.ANML_KEY = old.ANML_KEY) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML  INTL_SIRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086aa", PARENT_OWNER="", PARENT_TABLE="INTL_ANML"
    CHILD_OWNER="", CHILD_TABLE="INTL_SIRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0806_002", FK_COLUMNS="ANML_KEY" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML because INTL_SIRE exists.')
 !!

CREATE  TRIGGER tD_INTL_ANML2 AFTER DELETE ON INTL_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_CROSS_BRD WHERE INTL_CROSS_BRD.ANML_KEY = old.ANML_KEY) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML  INTL_CROSS_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000084b1", PARENT_OWNER="", PARENT_TABLE="INTL_ANML"
    CHILD_OWNER="", CHILD_TABLE="INTL_CROSS_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0806_001", FK_COLUMNS="ANML_KEY" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML because INTL_CROSS_BRD exists.')
 !!

CREATE  TRIGGER tD_INTL_ANML3 AFTER DELETE ON INTL_ANML
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML_GRP_MEMB WHERE INTL_ANML_GRP_MEMB.ANML_KEY = old.ANML_KEY) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML  INTL_ANML_GRP_MEMB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f3d", PARENT_OWNER="", PARENT_TABLE="INTL_ANML"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML_GRP_MEMB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0806_003", FK_COLUMNS="ANML_KEY" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML because INTL_ANML_GRP_MEMB exists.')
 !!


CREATE TRIGGER D0807U01
  NO CASCADE BEFORE UPDATE
  ON INTL_ANML_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_ANML_GRP AFTER DELETE ON INTL_ANML_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML_GRP_MEMB WHERE INTL_ANML_GRP_MEMB.ANML_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML_GRP  INTL_ANML_GRP_MEMB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000979b", PARENT_OWNER="", PARENT_TABLE="INTL_ANML_GRP"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML_GRP_MEMB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0807_001", FK_COLUMNS="ANML_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML_GRP because INTL_ANML_GRP_MEMB exists.')
 !!


CREATE TRIGGER D0808U01
  NO CASCADE BEFORE UPDATE
  ON INTL_ANML_GRP_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_ANML_GRP_M AFTER DELETE ON INTL_ANML_GRP_MEMB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_VALID_INSEM WHERE INTL_VALID_INSEM.ANML_KEY = old.ANML_KEY AND
                                                   INTL_VALID_INSEM.ANML_GRP_ID = old.ANML_GRP_ID AND
                                                   INTL_VALID_INSEM.GRP_ANML_ID = old.GRP_ANML_ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML_GRP_MEMB  INTL_VALID_INSEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a872", PARENT_OWNER="", PARENT_TABLE="INTL_ANML_GRP_MEMB"
    CHILD_OWNER="", CHILD_TABLE="INTL_VALID_INSEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0808_001", FK_COLUMNS="ANML_KEY""ANML_GRP_ID""GRP_ANML_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML_GRP_MEMB because INTL_VALID_INSEM exists.')
 !!


CREATE TRIGGER D0809U01
  NO CASCADE BEFORE UPDATE
  ON INTL_ANML_REG_CENTRE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_ANML_REG_C AFTER DELETE ON INTL_ANML_REG_CENTRE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML_GRP WHERE INTL_ANML_GRP.REG_CENTRE_ID = old.REG_CENTRE_ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_ANML_REG_CENTRE  INTL_ANML_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009915", PARENT_OWNER="", PARENT_TABLE="INTL_ANML_REG_CENTRE"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0809_002", FK_COLUMNS="REG_CENTRE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_ANML_REG_CENTRE because INTL_ANML_GRP exists.')
 !!


CREATE TRIGGER D0810U01
  NO CASCADE BEFORE UPDATE
  ON INTL_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_BRD AFTER DELETE ON INTL_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_CROSS_BRD WHERE INTL_CROSS_BRD.BRD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_BRD  INTL_CROSS_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e32", PARENT_OWNER="", PARENT_TABLE="INTL_BRD"
    CHILD_OWNER="", CHILD_TABLE="INTL_CROSS_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0810_001", FK_COLUMNS="BRD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_BRD because INTL_CROSS_BRD exists.')
 !!


CREATE TRIGGER D0811U01
  NO CASCADE BEFORE UPDATE
  ON INTL_CROSS_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0812U01
  NO CASCADE BEFORE UPDATE
  ON INTL_DATA_RCD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0813U01
  NO CASCADE BEFORE UPDATE
  ON INTL_DATA_RCD_QRY_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_DATA_RCD_Q AFTER DELETE ON INTL_DATA_RCD_QRY_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SEMEN_QRY WHERE INTL_SEMEN_QRY.QRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* INTL_DATA_RCD_QRY_REF  INTL_SEMEN_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a8a", PARENT_OWNER="", PARENT_TABLE="INTL_DATA_RCD_QRY_REF"
    CHILD_OWNER="", CHILD_TABLE="INTL_SEMEN_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0813_002", FK_COLUMNS="QRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_DATA_RCD_QRY_REF because INTL_SEMEN_QRY exists.')
 !!

CREATE  TRIGGER tD_INTL_DATA_RCD_2 AFTER DELETE ON INTL_DATA_RCD_QRY_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM_VISIT_QRY WHERE INTL_INSEM_VISIT_QRY.QRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* INTL_DATA_RCD_QRY_REF  INTL_INSEM_VISIT_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009375", PARENT_OWNER="", PARENT_TABLE="INTL_DATA_RCD_QRY_REF"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM_VISIT_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0813_004", FK_COLUMNS="QRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_DATA_RCD_QRY_REF because INTL_INSEM_VISIT_QRY exists.')
 !!

CREATE  TRIGGER tD_INTL_DATA_RCD_3 AFTER DELETE ON INTL_DATA_RCD_QRY_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM_QRY WHERE INTL_INSEM_QRY.QRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* INTL_DATA_RCD_QRY_REF  INTL_INSEM_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009267", PARENT_OWNER="", PARENT_TABLE="INTL_DATA_RCD_QRY_REF"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0813_003", FK_COLUMNS="QRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_DATA_RCD_QRY_REF because INTL_INSEM_QRY exists.')
 !!


CREATE TRIGGER D0814U01
  NO CASCADE BEFORE UPDATE
  ON INTL_INSEM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_INSEM AFTER DELETE ON INTL_INSEM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_VALID_INSEM WHERE INTL_VALID_INSEM.VISIT_ID = old.VISIT_ID AND
                                                   INTL_VALID_INSEM.BATCH_NUM = old.BATCH_NUM AND
                                                   INTL_VALID_INSEM.INSEM_NUM = old.INSEM_NUM) > 0)
    /* erwin Builtin Trigger */
    /* INTL_INSEM  INTL_VALID_INSEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000997b", PARENT_OWNER="", PARENT_TABLE="INTL_INSEM"
    CHILD_OWNER="", CHILD_TABLE="INTL_VALID_INSEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0814_001", FK_COLUMNS="VISIT_ID""BATCH_NUM""INSEM_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_INSEM because INTL_VALID_INSEM exists.')
 !!

CREATE  TRIGGER tD_INTL_INSEM2 AFTER DELETE ON INTL_INSEM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM_QRY WHERE INTL_INSEM_QRY.VISIT_ID = old.VISIT_ID AND
                                                 INTL_INSEM_QRY.BATCH_NUM = old.BATCH_NUM AND
                                                 INTL_INSEM_QRY.INSEM_NUM = old.INSEM_NUM) > 0)
    /* erwin Builtin Trigger */
    /* INTL_INSEM  INTL_INSEM_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000940c", PARENT_OWNER="", PARENT_TABLE="INTL_INSEM"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0814_002", FK_COLUMNS="VISIT_ID""BATCH_NUM""INSEM_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_INSEM because INTL_INSEM_QRY exists.')
 !!


CREATE TRIGGER D0815U01
  NO CASCADE BEFORE UPDATE
  ON INTL_INSEM_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0816U01
  NO CASCADE BEFORE UPDATE
  ON INTL_INSEM_VISIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_INSEM_VISI AFTER DELETE ON INTL_INSEM_VISIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_VISIT_SEMEN_BATCH WHERE INTL_VISIT_SEMEN_BATCH.VISIT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_INSEM_VISIT  INTL_VISIT_SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094d9", PARENT_OWNER="", PARENT_TABLE="INTL_INSEM_VISIT"
    CHILD_OWNER="", CHILD_TABLE="INTL_VISIT_SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0816_002", FK_COLUMNS="VISIT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_INSEM_VISIT because INTL_VISIT_SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_INTL_INSEM_VIS2 AFTER DELETE ON INTL_INSEM_VISIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM_VISIT_QRY WHERE INTL_INSEM_VISIT_QRY.VISIT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_INSEM_VISIT  INTL_INSEM_VISIT_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009322", PARENT_OWNER="", PARENT_TABLE="INTL_INSEM_VISIT"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM_VISIT_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0816_003", FK_COLUMNS="VISIT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_INSEM_VISIT because INTL_INSEM_VISIT_QRY exists.')
 !!

CREATE  TRIGGER tD_INTL_INSEM_VIS3 AFTER DELETE ON INTL_INSEM_VISIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_AI_TECH_VISIT WHERE INTL_AI_TECH_VISIT.VISIT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_INSEM_VISIT  INTL_AI_TECH_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000942e", PARENT_OWNER="", PARENT_TABLE="INTL_INSEM_VISIT"
    CHILD_OWNER="", CHILD_TABLE="INTL_AI_TECH_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0816_001", FK_COLUMNS="VISIT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_INSEM_VISIT because INTL_AI_TECH_VISIT exists.')
 !!


CREATE TRIGGER D0817U01
  NO CASCADE BEFORE UPDATE
  ON INTL_INSEM_VISIT_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0818U01
  NO CASCADE BEFORE UPDATE
  ON INTL_MKTG_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_MKTG_BRD AFTER DELETE ON INTL_MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SUPPL_SIRE WHERE INTL_SUPPL_SIRE.MKTG_BRD_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_MKTG_BRD  INTL_SUPPL_SIRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fa2", PARENT_OWNER="", PARENT_TABLE="INTL_MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="INTL_SUPPL_SIRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0818_001", FK_COLUMNS="MKTG_BRD_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_MKTG_BRD because INTL_SUPPL_SIRE exists.')
 !!


CREATE TRIGGER D0819U01
  NO CASCADE BEFORE UPDATE
  ON INTL_PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_PARTY AFTER DELETE ON INTL_PARTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML_REG_CENTRE WHERE INTL_ANML_REG_CENTRE.REG_CENTRE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_PARTY  INTL_ANML_REG_CENTRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009528", PARENT_OWNER="", PARENT_TABLE="INTL_PARTY"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML_REG_CENTRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0819_002", FK_COLUMNS="REG_CENTRE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_PARTY because INTL_ANML_REG_CENTRE exists.')
 !!

CREATE  TRIGGER tD_INTL_PARTY2 AFTER DELETE ON INTL_PARTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_ANML_GRP WHERE INTL_ANML_GRP.GRP_OWNER_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* INTL_PARTY  INTL_ANML_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e4b", PARENT_OWNER="", PARENT_TABLE="INTL_PARTY"
    CHILD_OWNER="", CHILD_TABLE="INTL_ANML_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0819_001", FK_COLUMNS="GRP_OWNER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_PARTY because INTL_ANML_GRP exists.')
 !!


CREATE TRIGGER D0820U01
  NO CASCADE BEFORE UPDATE
  ON INTL_SEMEN_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0821U01
  NO CASCADE BEFORE UPDATE
  ON INTL_SIRE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_SIRE AFTER DELETE ON INTL_SIRE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SUPPL_SIRE WHERE INTL_SUPPL_SIRE.ANML_KEY = old.ANML_KEY) > 0)
    /* erwin Builtin Trigger */
    /* INTL_SIRE  INTL_SUPPL_SIRE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e55", PARENT_OWNER="", PARENT_TABLE="INTL_SIRE"
    CHILD_OWNER="", CHILD_TABLE="INTL_SUPPL_SIRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0821_002", FK_COLUMNS="ANML_KEY" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_SIRE because INTL_SUPPL_SIRE exists.')
 !!


CREATE TRIGGER D0822U01
  NO CASCADE BEFORE UPDATE
  ON INTL_SUPPL_SIRE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0823U01
  NO CASCADE BEFORE UPDATE
  ON INTL_VALID_INSEM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0824U01
  NO CASCADE BEFORE UPDATE
  ON INTL_VISIT_SEMEN_BATCH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_INTL_VISIT_SEME AFTER DELETE ON INTL_VISIT_SEMEN_BATCH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_SEMEN_QRY WHERE INTL_SEMEN_QRY.VISIT_ID = old.VISIT_ID AND
                                                 INTL_SEMEN_QRY.BATCH_NUM = old.BATCH_NUM) > 0)
    /* erwin Builtin Trigger */
    /* INTL_VISIT_SEMEN_BATCH  INTL_SEMEN_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009a28", PARENT_OWNER="", PARENT_TABLE="INTL_VISIT_SEMEN_BATCH"
    CHILD_OWNER="", CHILD_TABLE="INTL_SEMEN_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0824_001", FK_COLUMNS="VISIT_ID""BATCH_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_VISIT_SEMEN_BATCH because INTL_SEMEN_QRY exists.')
 !!

CREATE  TRIGGER tD_INTL_VISIT_SEM2 AFTER DELETE ON INTL_VISIT_SEMEN_BATCH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INTL_INSEM WHERE INTL_INSEM.VISIT_ID = old.VISIT_ID AND
                                             INTL_INSEM.BATCH_NUM = old.BATCH_NUM) > 0)
    /* erwin Builtin Trigger */
    /* INTL_VISIT_SEMEN_BATCH  INTL_INSEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094f2", PARENT_OWNER="", PARENT_TABLE="INTL_VISIT_SEMEN_BATCH"
    CHILD_OWNER="", CHILD_TABLE="INTL_INSEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0824_002", FK_COLUMNS="VISIT_ID""BATCH_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete INTL_VISIT_SEMEN_BATCH because INTL_INSEM exists.')
 !!


CREATE TRIGGER D0885U01
  NO CASCADE BEFORE UPDATE
  ON JOB_POSITION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_JOB_POSITION AFTER DELETE ON JOB_POSITION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_RND WHERE HT_RND.JOB_POSITION_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* JOB_POSITION  HT_RND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bd1", PARENT_OWNER="", PARENT_TABLE="JOB_POSITION"
    CHILD_OWNER="", CHILD_TABLE="HT_RND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0885_001", FK_COLUMNS="JOB_POSITION_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete JOB_POSITION because HT_RND exists.')
 !!


CREATE TRIGGER D0265U01
  NO CASCADE BEFORE UPDATE
  ON JR_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0320U01
  NO CASCADE BEFORE UPDATE
  ON JR_JNR_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0626U01
  NO CASCADE BEFORE UPDATE
  ON LAB_BATCH_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0627U01
  NO CASCADE BEFORE UPDATE
  ON LAB_BULL_ALIAS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0721U04
  AFTER UPDATE
  ON LAB_COLLN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0721D01
  AFTER DELETE
  ON LAB_COLLN
  REFERENCING OLD AS OLD
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0721I02
  AFTER INSERT
  ON LAB_COLLN
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0721I01
  NO CASCADE BEFORE INSERT
  ON LAB_COLLN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.batch_sts_cd = 'Pass'
 AND (new.proc_mthd_cd IS NULL OR
      new.mktg_brd_cd IS NULL OR
      new.marker_bull_ind IS NULL))
-- proc_mthd_cd, mktg_brd_cd and marker_bull_ind must be filled in
-- when the batch status is 'Pass'
SIGNAL SQLSTATE 'Z0721'
('D0721I01:must supply proc_mthd_cd, mktg_brd_cd and marker_bull_ind')
 !!


CREATE TRIGGER D0721U03
  NO CASCADE BEFORE UPDATE
  ON LAB_COLLN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0721U01
  NO CASCADE BEFORE UPDATE OF 
                    batch_sts_cd,
                    proc_mthd_cd,
                    mktg_brd_cd,
                    marker_bull_ind
  ON LAB_COLLN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.batch_sts_cd = 'Pass'
 AND (new.proc_mthd_cd IS NULL OR
      new.mktg_brd_cd IS NULL OR
      new.marker_bull_ind IS NULL))
-- proc_mthd_cd, mktg_brd_cd and marker_bull_ind must be filled in
-- when the batch status is 'Pass'
SIGNAL SQLSTATE 'Z0721'
('D0721U01:must supply proc_mthd_cd, mktg_brd_cd and marker_bull_ind')
 !!


CREATE TRIGGER D0628U01
  NO CASCADE BEFORE UPDATE
  ON LAB_DSR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LAB_DSR AFTER DELETE ON LAB_DSR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.DSR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_DSR  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000805a", PARENT_OWNER="", PARENT_TABLE="LAB_DSR"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0628_001", FK_COLUMNS="DSR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_DSR because LAB_COLLN exists.')
 !!


CREATE TRIGGER D0629U01
  NO CASCADE BEFORE UPDATE
  ON LAB_MKT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LAB_MKT AFTER DELETE ON LAB_MKT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH_MKT WHERE SEMEN_BATCH_MKT.MKT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_MKT  SEMEN_BATCH_MKT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085f7", PARENT_OWNER="", PARENT_TABLE="LAB_MKT"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH_MKT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0629_004", FK_COLUMNS="MKT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_MKT because SEMEN_BATCH_MKT exists.')
 !!

CREATE  TRIGGER tD_LAB_MKT2 AFTER DELETE ON LAB_MKT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_STOCK_PROD_CD_CONV WHERE SEMEN_STOCK_PROD_CD_CONV.LAB_MARKET_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_MKT  SEMEN_STOCK_PROD_CD_CONV on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c6", PARENT_OWNER="", PARENT_TABLE="LAB_MKT"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_STOCK_PROD_CD_CONV"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0629_005", FK_COLUMNS="LAB_MARKET_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_MKT because SEMEN_STOCK_PROD_CD_CONV exists.')
 !!

CREATE  TRIGGER tD_LAB_MKT3 AFTER DELETE ON LAB_MKT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DF_PRODN_DTL WHERE DF_PRODN_DTL.MKT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_MKT  DF_PRODN_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086fc", PARENT_OWNER="", PARENT_TABLE="LAB_MKT"
    CHILD_OWNER="", CHILD_TABLE="DF_PRODN_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0629_003", FK_COLUMNS="MKT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_MKT because DF_PRODN_DTL exists.')
 !!

CREATE  TRIGGER tD_LAB_MKT4 AFTER DELETE ON LAB_MKT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_BULL_ALIAS WHERE LAB_BULL_ALIAS.MKT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_MKT  LAB_BULL_ALIAS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bee", PARENT_OWNER="", PARENT_TABLE="LAB_MKT"
    CHILD_OWNER="", CHILD_TABLE="LAB_BULL_ALIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0629_001", FK_COLUMNS="MKT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_MKT because LAB_BULL_ALIAS exists.')
 !!

CREATE  TRIGGER tD_LAB_MKT5 AFTER DELETE ON LAB_MKT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.MKT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_MKT  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007fd6", PARENT_OWNER="", PARENT_TABLE="LAB_MKT"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0629_002", FK_COLUMNS="MKT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_MKT because LAB_COLLN exists.')
 !!


CREATE TRIGGER D0720U01
  NO CASCADE BEFORE UPDATE
  ON LAB_PROC_MTHD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LAB_PROC_MTHD AFTER DELETE ON LAB_PROC_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH WHERE SEMEN_BATCH.PROC_METHOD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_PROC_MTHD  SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008770", PARENT_OWNER="", PARENT_TABLE="LAB_PROC_MTHD"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0720_001", FK_COLUMNS="PROC_METHOD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_PROC_MTHD because SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_LAB_PROC_MTHD2 AFTER DELETE ON LAB_PROC_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.PROC_MTHD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LAB_PROC_MTHD  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008950", PARENT_OWNER="", PARENT_TABLE="LAB_PROC_MTHD"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0720_002", FK_COLUMNS="PROC_MTHD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_PROC_MTHD because LAB_COLLN exists.')
 !!


CREATE TRIGGER D0653U01
  NO CASCADE BEFORE UPDATE
  ON LAB_REFRESH_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0630U01
  NO CASCADE BEFORE UPDATE
  ON LAB_STAFF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LAB_STAFF AFTER DELETE ON LAB_STAFF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_DSR WHERE LAB_DSR.SAMPLE_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_STAFF  LAB_DSR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008941", PARENT_OWNER="", PARENT_TABLE="LAB_STAFF"
    CHILD_OWNER="", CHILD_TABLE="LAB_DSR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0630_005", FK_COLUMNS="SAMPLE_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_STAFF because LAB_DSR exists.')
 !!

CREATE  TRIGGER tD_LAB_STAFF2 AFTER DELETE ON LAB_STAFF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_DSR WHERE LAB_DSR.PRINT_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_STAFF  LAB_DSR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b04", PARENT_OWNER="", PARENT_TABLE="LAB_STAFF"
    CHILD_OWNER="", CHILD_TABLE="LAB_DSR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0630_004", FK_COLUMNS="PRINT_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_STAFF because LAB_DSR exists.')
 !!

CREATE  TRIGGER tD_LAB_STAFF3 AFTER DELETE ON LAB_STAFF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_DSR WHERE LAB_DSR.INITIATOR_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_STAFF  LAB_DSR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a30", PARENT_OWNER="", PARENT_TABLE="LAB_STAFF"
    CHILD_OWNER="", CHILD_TABLE="LAB_DSR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0630_003", FK_COLUMNS="INITIATOR_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_STAFF because LAB_DSR exists.')
 !!

CREATE  TRIGGER tD_LAB_STAFF4 AFTER DELETE ON LAB_STAFF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_DSR WHERE LAB_DSR.FREEZE_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_STAFF  LAB_DSR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008930", PARENT_OWNER="", PARENT_TABLE="LAB_STAFF"
    CHILD_OWNER="", CHILD_TABLE="LAB_DSR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0630_002", FK_COLUMNS="FREEZE_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_STAFF because LAB_DSR exists.')
 !!

CREATE  TRIGGER tD_LAB_STAFF5 AFTER DELETE ON LAB_STAFF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_DSR WHERE LAB_DSR.FILL_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_STAFF  LAB_DSR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f5a", PARENT_OWNER="", PARENT_TABLE="LAB_STAFF"
    CHILD_OWNER="", CHILD_TABLE="LAB_DSR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0630_001", FK_COLUMNS="FILL_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_STAFF because LAB_DSR exists.')
 !!


CREATE TRIGGER D0631U01
  NO CASCADE BEFORE UPDATE
  ON LAB_SV_SPEED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LAB_SV_SPEED AFTER DELETE ON LAB_SV_SPEED
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.SV_SPEED_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* LAB_SV_SPEED  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089b3", PARENT_OWNER="", PARENT_TABLE="LAB_SV_SPEED"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0631_001", FK_COLUMNS="SV_SPEED_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LAB_SV_SPEED because LAB_COLLN exists.')
 !!


CREATE TRIGGER D0360U01
  NO CASCADE BEFORE UPDATE
  ON LAB_WSTG_CONST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0026U51
  NO CASCADE BEFORE UPDATE OF 
                    partn_date
  ON LACTATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.partn_date != new.partn_date
   OR old.partn_date IS NULL AND new.partn_date IS NOT NULL
   OR old.partn_date IS NOT NULL AND new.partn_date IS NULL)
SET new.partn_date_d =
  CASE WHEN new.partn_date = 0 OR new.partn_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.partn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0026I51
  NO CASCADE BEFORE INSERT
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.partn_date_d IS NULL 
  AND new.partn_date IS NOT NULL
   OR CHAR(new.partn_date_d,ISO) = '0001-01-01'
  AND new.partn_date IS NOT NULL)
SET new.partn_date_d =
  CASE WHEN new.partn_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.partn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0026I52
  NO CASCADE BEFORE INSERT
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.partn_date IS NULL 
  AND new.partn_date_d IS NOT NULL
  AND CHAR(new.partn_date_d,ISO) != '0001-01-01'
   OR new.partn_date = 0
  AND new.partn_date_d IS NOT NULL
  AND CHAR(new.partn_date_d,ISO) != '0001-01-01')
SET new.partn_date =
  CASE WHEN new.partn_date_d IS NULL THEN 0 ELSE
  INT(new.partn_date_d) - 19000000 END
 !!


CREATE TRIGGER D0026U01
  NO CASCADE BEFORE UPDATE
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0026I53
  NO CASCADE BEFORE INSERT
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0026I54
  NO CASCADE BEFORE INSERT
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0026U54
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON LACTATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0026U53
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON LACTATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0026I01
  NO CASCADE BEFORE INSERT
  ON LACTATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET derived_ind = VALUE(derived_ind, 'N')
 !!


CREATE TRIGGER D0026U52
  NO CASCADE BEFORE UPDATE OF 
                    partn_date_d
  ON LACTATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.partn_date_d != new.partn_date_d
   OR old.partn_date_d IS NULL and new.partn_date_d IS NOT NULL
   OR old.partn_date_d IS NOT NULL and new.partn_date_d IS NULL)
SET new.partn_date =
  CASE WHEN new.partn_date_d IS NULL OR new.partn_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.partn_date_d) - 19000000 END
 !!


CREATE TRIGGER D0563U01
  NO CASCADE BEFORE UPDATE
  ON LEAST_SQUARES_EST_MATRIX
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0563I01
  NO CASCADE BEFORE INSERT
  ON LEAST_SQUARES_EST_MATRIX
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0563'
('D0563I01: invalid sample regime code')
 !!


CREATE TRIGGER D0563U02
  NO CASCADE BEFORE UPDATE
  ON LEAST_SQUARES_EST_MATRIX
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0563'
('D0563U02: invalid sample regime code')
 !!


CREATE TRIGGER D0563I02
  NO CASCADE BEFORE INSERT
  ON LEAST_SQUARES_EST_MATRIX
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0563'
('D0563I02: invalid age group code')
 !!


CREATE TRIGGER D0563U03
  NO CASCADE BEFORE UPDATE
  ON LEAST_SQUARES_EST_MATRIX
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0563'
('D0563U03: invalid age group code')
 !!


CREATE TRIGGER D0189U52
  NO CASCADE BEFORE UPDATE OF 
                    conv_date_d
  ON LIA_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date_d != new.conv_date_d
   OR old.conv_date_d IS NULL and new.conv_date_d IS NOT NULL
   OR old.conv_date_d IS NOT NULL and new.conv_date_d IS NULL)
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL OR new.conv_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.conv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0189I52
  NO CASCADE BEFORE INSERT
  ON LIA_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date IS NULL 
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01'
   OR new.conv_date = 0
  AND new.conv_date_d IS NOT NULL
  AND CHAR(new.conv_date_d,ISO) != '0001-01-01')
SET new.conv_date =
  CASE WHEN new.conv_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.conv_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.conv_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0189U01
  NO CASCADE BEFORE UPDATE
  ON LIA_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0189I51
  NO CASCADE BEFORE INSERT
  ON LIA_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.conv_date_d IS NULL 
  AND new.conv_date IS NOT NULL
   OR CHAR(new.conv_date_d,ISO) = '0001-01-01'
  AND new.conv_date IS NOT NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0189U51
  NO CASCADE BEFORE UPDATE OF 
                    conv_date
  ON LIA_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.conv_date != new.conv_date
   OR old.conv_date IS NULL AND new.conv_date IS NOT NULL
   OR old.conv_date IS NOT NULL AND new.conv_date IS NULL)
SET new.conv_date_d =
  CASE WHEN new.conv_date = 0 OR new.conv_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.conv_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0034U01
  NO CASCADE BEFORE UPDATE
  ON LIC_BULL_RANK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0622I01
  NO CASCADE BEFORE INSERT
  ON LIC_FACILITY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.facility_tp_cd IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'LIC_FACILITY_TP_CD'
      AND c.cd = new.facility_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0622' 
('D0622I01: invalid facility type code')
 !!


CREATE TRIGGER D0622U01
  NO CASCADE BEFORE UPDATE
  ON LIC_FACILITY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0622U02
  NO CASCADE BEFORE UPDATE OF 
                    facility_tp_cd
  ON LIC_FACILITY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.facility_tp_cd IS NOT NULL
  AND VALUE(old.facility_tp_cd,'~~~~') != new.facility_tp_cd
  AND NOT EXISTS (
    SELECT 1 from cd_ref c
    WHERE c.col_name = 'LIC_FACILITY_TP_CD'
      AND c.cd = new.facility_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0622' 
('D0622U02: invalid facility type code')
 !!


CREATE  TRIGGER tD_LIC_FACILITY AFTER DELETE ON LIC_FACILITY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_FARM_VISIT WHERE EZ_LINK_FARM_VISIT.HT_DEPOT_ID = old.FACILITY_ID) > 0)
    /* erwin Builtin Trigger */
    /* LIC_FACILITY  EZ_LINK_FARM_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094e6", PARENT_OWNER="", PARENT_TABLE="LIC_FACILITY"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_FARM_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0622_002", FK_COLUMNS="HT_DEPOT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LIC_FACILITY because EZ_LINK_FARM_VISIT exists.')
 !!

CREATE  TRIGGER tD_LIC_FACILITY2 AFTER DELETE ON LIC_FACILITY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_FARM_VISIT WHERE EZ_LINK_FARM_VISIT.WEIGH_STATION_ID = old.FACILITY_ID) > 0)
    /* erwin Builtin Trigger */
    /* LIC_FACILITY  EZ_LINK_FARM_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000962a", PARENT_OWNER="", PARENT_TABLE="LIC_FACILITY"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_FARM_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0622_001", FK_COLUMNS="WEIGH_STATION_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LIC_FACILITY because EZ_LINK_FARM_VISIT exists.')
 !!


CREATE TRIGGER D0952U01
  NO CASCADE BEFORE UPDATE
  ON LIC_SAP_AB_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0918U01
  NO CASCADE BEFORE UPDATE
  ON LIC_SEASON
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0093U01
  NO CASCADE BEFORE UPDATE
  ON LIST_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0093U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON LIST_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0093I53
  NO CASCADE BEFORE INSERT
  ON LIST_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0093U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON LIST_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0093U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON LIST_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0093I51
  NO CASCADE BEFORE INSERT
  ON LIST_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0093I52
  NO CASCADE BEFORE INSERT
  ON LIST_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0093I54
  NO CASCADE BEFORE INSERT
  ON LIST_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0093U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON LIST_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0843U01
  NO CASCADE BEFORE UPDATE
  ON LIVESTOCK_EXPORT_RPRT_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0036D01
  AFTER DELETE
  ON LLL_DESP_CLNDR_RGN
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'LLL_DESP_CLNDR_RGN',
  LTRIM(RTRIM(CHAR(old.smn_alcn_rgn_id))) || '|' ||
  LTRIM(RTRIM(CHAR(old.desp_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.insem_days))) || '|')
 !!


CREATE TRIGGER D0036I01
  NO CASCADE BEFORE INSERT
  ON LLL_DESP_CLNDR_RGN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.smn_alcn_rgn_id
        AND ga.geo_area_tp_cd = 'SAR ')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0036'
('D0036I01: geographic area type must be a semen allocation region')
 !!


CREATE TRIGGER D0036I02
  AFTER INSERT
  ON LLL_DESP_CLNDR_RGN
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'LLL_DESP_CLNDR_RGN', 
  LTRIM(RTRIM(CHAR(new.smn_alcn_rgn_id))) || '|' || 
  LTRIM(RTRIM(CHAR(new.desp_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.insem_days))) || '|')
 !!


CREATE TRIGGER D0036U01
  NO CASCADE BEFORE UPDATE OF 
                    smn_alcn_rgn_id
  ON LLL_DESP_CLNDR_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.smn_alcn_rgn_id
        AND ga.geo_area_tp_cd = 'SAR ')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0036'
('D0036U01: geographic area type must be a semen allocation region')
 !!


CREATE TRIGGER D0036U02
  AFTER UPDATE
  ON LLL_DESP_CLNDR_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'LLL_DESP_CLNDR_RGN', 
  LTRIM(RTRIM(CHAR(new.smn_alcn_rgn_id))) || '|' || 
  LTRIM(RTRIM(CHAR(old.desp_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.insem_days))) || '|' || 
  LTRIM(RTRIM(CHAR(new.desp_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.insem_days))) || '|')
 !!


CREATE TRIGGER D0036U03
  NO CASCADE BEFORE UPDATE
  ON LLL_DESP_CLNDR_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0313U01
  NO CASCADE BEFORE UPDATE
  ON LLL_DTR_PROB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0037D01
  AFTER DELETE
  ON LLL_PD
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'LLL_PD',
  old.mktg_brd_cd || '|' || 
  old.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.st_date))) || '|' || 
  LTRIM(RTRIM(CHAR(old.end_date))) || '|')
 !!


CREATE TRIGGER D0037I01
  AFTER INSERT
  ON LLL_PD
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'LLL_PD',
  new.mktg_brd_cd || '|' || 
  new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.end_date))) || '|')
 !!


CREATE TRIGGER D0037U01
  AFTER UPDATE
  ON LLL_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'LLL_PD',
  new.mktg_brd_cd || '|' ||
  new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.end_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.end_date))) || '|')
 !!


CREATE TRIGGER D0037U02
  NO CASCADE BEFORE UPDATE
  ON LLL_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0635U01
  NO CASCADE BEFORE UPDATE
  ON LOCAL_AUTHORITY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LOCAL_AUTHORITY AFTER DELETE ON LOCAL_AUTHORITY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROPERTY WHERE PROPERTY.LOCAL_AUTH_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCAL_AUTHORITY  PROPERTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fde", PARENT_OWNER="", PARENT_TABLE="LOCAL_AUTHORITY"
    CHILD_OWNER="", CHILD_TABLE="PROPERTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0635_001", FK_COLUMNS="LOCAL_AUTH_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCAL_AUTHORITY because PROPERTY exists.')
 !!


CREATE TRIGGER D0596U01
  NO CASCADE BEFORE UPDATE
  ON LOCUS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LOCUS AFTER DELETE ON LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PROD_LOCUS WHERE GM_PROD_LOCUS.LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCUS  GM_PROD_LOCUS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a58", PARENT_OWNER="", PARENT_TABLE="LOCUS"
    CHILD_OWNER="", CHILD_TABLE="GM_PROD_LOCUS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0596_003", FK_COLUMNS="LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCUS because GM_PROD_LOCUS exists.')
 !!

CREATE  TRIGGER tD_LOCUS2 AFTER DELETE ON LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_PRNT_FLD_LOCUS WHERE GM_PRNT_FLD_LOCUS.LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCUS  GM_PRNT_FLD_LOCUS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008745", PARENT_OWNER="", PARENT_TABLE="LOCUS"
    CHILD_OWNER="", CHILD_TABLE="GM_PRNT_FLD_LOCUS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0596_002", FK_COLUMNS="LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCUS because GM_PRNT_FLD_LOCUS exists.')
 !!

CREATE  TRIGGER tD_LOCUS3 AFTER DELETE ON LOCUS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ALLELE WHERE ALLELE.LOCUS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCUS  ALLELE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000082f5", PARENT_OWNER="", PARENT_TABLE="LOCUS"
    CHILD_OWNER="", CHILD_TABLE="ALLELE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0596_001", FK_COLUMNS="LOCUS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCUS because ALLELE exists.')
 !!


CREATE TRIGGER D0649U01
  NO CASCADE BEFORE UPDATE
  ON LOCUS_AFFECT_CAT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LOCUS_AFFECT_CA AFTER DELETE ON LOCUS_AFFECT_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CATTLE_LOCUS WHERE CATTLE_LOCUS.LOCUS_AFFECT_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCUS_AFFECT_CAT  CATTLE_LOCUS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009934", PARENT_OWNER="", PARENT_TABLE="LOCUS_AFFECT_CAT"
    CHILD_OWNER="", CHILD_TABLE="CATTLE_LOCUS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0649_001", FK_COLUMNS="LOCUS_AFFECT_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCUS_AFFECT_CAT because CATTLE_LOCUS exists.')
 !!


CREATE TRIGGER D0155U01
  NO CASCADE BEFORE UPDATE
  ON LOCUS_ALLELE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0155I01
  NO CASCADE BEFORE INSERT
  ON LOCUS_ALLELE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM locus_allele la
    WHERE la.cattle_locus_cd = new.cattle_locus_cd
      AND la.cd <> new.cd
      AND la.allele_monitor_ind = 'Y'))
SIGNAL SQLSTATE 'Z0155'
('D0155I01: only one allele for this locus may be monitored')
 !!


CREATE TRIGGER D0155U02
  NO CASCADE BEFORE UPDATE OF 
                    allele_monitor_ind
  ON LOCUS_ALLELE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM locus_allele la
    WHERE la.cattle_locus_cd = new.cattle_locus_cd
      AND la.cd <> new.cd
      AND la.allele_monitor_ind = 'Y'))
SIGNAL SQLSTATE 'Z0155'
('D0155U02: only one allele for this locus may be monitored')
 !!


CREATE  TRIGGER tD_LOCUS_ALLELE AFTER DELETE ON LOCUS_ALLELE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_LOCUS WHERE ANML_LOCUS.CATTLE_LOCUS_CD = old.CATTLE_LOCUS_CD AND
                                             ANML_LOCUS.ALLELE_1_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* LOCUS_ALLELE  ANML_LOCUS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009542", PARENT_OWNER="", PARENT_TABLE="LOCUS_ALLELE"
    CHILD_OWNER="", CHILD_TABLE="ANML_LOCUS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0155_001", FK_COLUMNS="CATTLE_LOCUS_CD""ALLELE_1_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LOCUS_ALLELE because ANML_LOCUS exists.')
 !!


CREATE TRIGGER D0154U01
  NO CASCADE BEFORE UPDATE
  ON LOCUS_ALLELE_PAIR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0597U01
  NO CASCADE BEFORE UPDATE
  ON LOCUS_PHNTP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0411U02
  NO CASCADE BEFORE UPDATE OF 
                    cmt_cd_1
  ON LSS_TOP_ASSESS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_1 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_1) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_1 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0411U01
  NO CASCADE BEFORE UPDATE
  ON LSS_TOP_ASSESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0411I01
  NO CASCADE BEFORE INSERT
  ON LSS_TOP_ASSESS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_1 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_1) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_1 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0411I02
  NO CASCADE BEFORE INSERT
  ON LSS_TOP_ASSESS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_2 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_2) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_2 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0411I03
  NO CASCADE BEFORE INSERT
  ON LSS_TOP_ASSESS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_3 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_3) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_3 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0411U03
  NO CASCADE BEFORE UPDATE OF 
                    cmt_cd_2
  ON LSS_TOP_ASSESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_2 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_2) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_2 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0411U04
  NO CASCADE BEFORE UPDATE OF 
                    cmt_cd_3
  ON LSS_TOP_ASSESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.cmt_cd_3 != ' '
 AND NOT EXISTS
  (SELECT 1 from top_cmt_ref tcr
    WHERE tcr.cd = new.cmt_cd_3) )
SIGNAL SQLSTATE 'Z0411'
('D0411I01: cmt_cd_3 does not exist on top_cmt_ref')
 !!


CREATE TRIGGER D0342I54
  NO CASCADE BEFORE INSERT
  ON LWGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date IS NULL 
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01'
   OR new.wgt_date = 0
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01')
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL THEN 0 ELSE
  INT(new.wgt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0342I51
  NO CASCADE BEFORE INSERT
  ON LWGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0342U51
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON LWGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0342U54
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date_d
  ON LWGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date_d != new.wgt_date_d
   OR old.wgt_date_d IS NULL and new.wgt_date_d IS NOT NULL
   OR old.wgt_date_d IS NOT NULL and new.wgt_date_d IS NULL)
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL OR new.wgt_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.wgt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0342U01
  NO CASCADE BEFORE UPDATE
  ON LWGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.user_id = USER
  , new.upd_date = INT(CURRENT DATE) - 19000000
  , new.upd_date_d = CURRENT DATE
 !!


CREATE TRIGGER D0342I53
  NO CASCADE BEFORE INSERT
  ON LWGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date_d IS NULL 
  AND new.wgt_date IS NOT NULL
   OR CHAR(new.wgt_date_d,ISO) = '0001-01-01'
  AND new.wgt_date IS NOT NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0342U53
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date
  ON LWGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date != new.wgt_date
   OR old.wgt_date IS NULL AND new.wgt_date IS NOT NULL
   OR old.wgt_date IS NOT NULL AND new.wgt_date IS NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 OR new.wgt_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0342I52
  NO CASCADE BEFORE INSERT
  ON LWGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0342U52
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON LWGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0673U01
  NO CASCADE BEFORE UPDATE
  ON LWGT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0674U01
  NO CASCADE BEFORE UPDATE
  ON LWGT_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0488I51
  NO CASCADE BEFORE INSERT
  ON LWGT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.correct_date_d IS NULL 
  AND new.correct_date IS NOT NULL
   OR CHAR(new.correct_date_d,ISO) = '0001-01-01'
  AND new.correct_date IS NOT NULL)
SET new.correct_date_d =
  CASE WHEN new.correct_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.correct_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0488I52
  NO CASCADE BEFORE INSERT
  ON LWGT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.correct_date IS NULL 
  AND new.correct_date_d IS NOT NULL
  AND CHAR(new.correct_date_d,ISO) != '0001-01-01'
   OR new.correct_date = 0
  AND new.correct_date_d IS NOT NULL
  AND CHAR(new.correct_date_d,ISO) != '0001-01-01')
SET new.correct_date =
  CASE WHEN new.correct_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.correct_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.correct_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.correct_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0488U53
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date
  ON LWGT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date != new.wgt_date
   OR old.wgt_date IS NULL AND new.wgt_date IS NOT NULL
   OR old.wgt_date IS NOT NULL AND new.wgt_date IS NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 OR new.wgt_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0488I54
  NO CASCADE BEFORE INSERT
  ON LWGT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date IS NULL 
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01'
   OR new.wgt_date = 0
  AND new.wgt_date_d IS NOT NULL
  AND CHAR(new.wgt_date_d,ISO) != '0001-01-01')
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.wgt_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0488I53
  NO CASCADE BEFORE INSERT
  ON LWGT_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.wgt_date_d IS NULL 
  AND new.wgt_date IS NOT NULL
   OR CHAR(new.wgt_date_d,ISO) = '0001-01-01'
  AND new.wgt_date IS NOT NULL)
SET new.wgt_date_d =
  CASE WHEN new.wgt_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.wgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0488U01
  NO CASCADE BEFORE UPDATE
  ON LWGT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0488U54
  NO CASCADE BEFORE UPDATE OF 
                    wgt_date_d
  ON LWGT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.wgt_date_d != new.wgt_date_d
   OR old.wgt_date_d IS NULL and new.wgt_date_d IS NOT NULL
   OR old.wgt_date_d IS NOT NULL and new.wgt_date_d IS NULL)
SET new.wgt_date =
  CASE WHEN new.wgt_date_d IS NULL OR new.wgt_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.wgt_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.wgt_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0488U51
  NO CASCADE BEFORE UPDATE OF 
                    correct_date
  ON LWGT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.correct_date != new.correct_date
   OR old.correct_date IS NULL AND new.correct_date IS NOT NULL
   OR old.correct_date IS NOT NULL AND new.correct_date IS NULL)
SET new.correct_date_d =
  CASE WHEN new.correct_date = 0 OR new.correct_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.correct_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0488U52
  NO CASCADE BEFORE UPDATE OF 
                    correct_date_d
  ON LWGT_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.correct_date_d != new.correct_date_d
   OR old.correct_date_d IS NULL and new.correct_date_d IS NOT NULL
   OR old.correct_date_d IS NOT NULL and new.correct_date_d IS NULL)
SET new.correct_date =
  CASE WHEN new.correct_date_d IS NULL OR new.correct_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.correct_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.correct_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.correct_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0675U01
  NO CASCADE BEFORE UPDATE
  ON LWGT_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_LWGT_RUN AFTER DELETE ON LWGT_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LWGT_RUN_AE_BRD WHERE LWGT_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                  LWGT_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* LWGT_RUN  LWGT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000946c", PARENT_OWNER="", PARENT_TABLE="LWGT_RUN"
    CHILD_OWNER="", CHILD_TABLE="LWGT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0675_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete LWGT_RUN because LWGT_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0676U01
  NO CASCADE BEFORE UPDATE
  ON LWGT_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0615D01
  AFTER DELETE
  ON MAN_LLL_SEMEN_ADJ
  REFERENCING OLD AS OLD
  FOR EACH ROW
UPDATE insem_lll_semen ils
SET man_adj_dose_cnt = VALUE((
  SELECT SUM (qty) FROM man_lll_semen_adj lsma
  WHERE lsma.demand_date = old.demand_date
    AND lsma.insem_grp_rgn_cd = old.insem_grp_rgn_cd
    AND lsma.insem_grp_num = old.insem_grp_num
    AND lsma.mktg_brd_cd = old.mktg_brd_cd
    AND lsma.core_prod_cd = old.core_prod_cd),0)
WHERE ils.demand_date = old.demand_date
  AND ils.insem_grp_rgn_cd = old.insem_grp_rgn_cd
  AND ils.insem_grp_num = old.insem_grp_num
  AND ils.mktg_brd_cd = old.mktg_brd_cd
  AND ils.core_prod_cd = old.core_prod_cd
 !!


CREATE TRIGGER D0615I01
  AFTER INSERT
  ON MAN_LLL_SEMEN_ADJ
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE insem_lll_semen ils
SET man_adj_dose_cnt = (
  SELECT SUM (qty) FROM man_lll_semen_adj lsma
  WHERE lsma.demand_date = new.demand_date
    AND lsma.insem_grp_rgn_cd = new.insem_grp_rgn_cd
    AND lsma.insem_grp_num = new.insem_grp_num
    AND lsma.mktg_brd_cd = new.mktg_brd_cd
    AND lsma.core_prod_cd = new.core_prod_cd)
WHERE ils.demand_date = new.demand_date
  AND ils.insem_grp_rgn_cd = new.insem_grp_rgn_cd
  AND ils.insem_grp_num = new.insem_grp_num
  AND ils.mktg_brd_cd = new.mktg_brd_cd
  AND ils.core_prod_cd = new.core_prod_cd
 !!


CREATE TRIGGER D0615U01
  NO CASCADE BEFORE UPDATE
  ON MAN_LLL_SEMEN_ADJ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0615U02
  AFTER UPDATE
  ON MAN_LLL_SEMEN_ADJ
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE insem_lll_semen ils
SET man_adj_dose_cnt = (
  SELECT SUM (qty) FROM man_lll_semen_adj lsma
  WHERE lsma.demand_date = new.demand_date
    AND lsma.insem_grp_rgn_cd = new.insem_grp_rgn_cd
    AND lsma.insem_grp_num = new.insem_grp_num
    AND lsma.mktg_brd_cd = new.mktg_brd_cd
    AND lsma.core_prod_cd = new.core_prod_cd)
WHERE ils.demand_date = new.demand_date
  AND ils.insem_grp_rgn_cd = new.insem_grp_rgn_cd
  AND ils.insem_grp_num = new.insem_grp_num
  AND ils.mktg_brd_cd = new.mktg_brd_cd
  AND ils.core_prod_cd = new.core_prod_cd
 !!


CREATE TRIGGER D0245U01
  NO CASCADE BEFORE UPDATE
  ON MAP_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0020I56
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0020U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020U01
  NO CASCADE BEFORE UPDATE
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0020D02
  AFTER DELETE
  ON MATING
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO mtng_log (
  anml_key
, date
, mate_anml_key
, mtng_tp_cd
) VALUES (
  old.anml_key
, old.date_d
, old.mate_anml_key
, old.mtng_tp_cd
)
 !!


CREATE TRIGGER D0020U04
  AFTER UPDATE OF 
        anml_key,
        DATE,
        mate_anml_key,
        mtng_tp_cd
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_key != old.anml_key
   OR new.date != old.date
   OR new.mate_anml_key != old.mate_anml_key
   OR new.mtng_tp_cd != old.mtng_tp_cd)
INSERT INTO mtng_log (
  anml_key
, date
, old_anml_key
, old_date
, mate_anml_key
, mtng_tp_cd
) VALUES (
  new.anml_key
, new.date_d
, NULLIF(old.anml_key,new.anml_key)
, NULLIF(old.date_d,new.date_d)
, old.mate_anml_key
, old.mtng_tp_cd
)
 !!


CREATE TRIGGER D0020I53
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.smn_colln_date_d IS NULL 
  AND new.smn_colln_date IS NOT NULL
   OR CHAR(new.smn_colln_date_d,ISO) = '0001-01-01'
  AND new.smn_colln_date IS NOT NULL)
SET new.smn_colln_date_d =
  CASE WHEN new.smn_colln_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.smn_colln_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0020I52
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0020U53
  NO CASCADE BEFORE UPDATE OF 
                    smn_colln_date
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.smn_colln_date != new.smn_colln_date
   OR old.smn_colln_date IS NULL AND new.smn_colln_date IS NOT NULL
   OR old.smn_colln_date IS NOT NULL AND new.smn_colln_date IS NULL)
SET new.smn_colln_date_d =
  CASE WHEN new.smn_colln_date = 0 OR new.smn_colln_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.smn_colln_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020I51
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020D01
  AFTER DELETE
  ON MATING
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_mating (
  anml_key
, upd_time
, mate_anml_key
, mtng_tp_cd
, insem_ptpt_cd
, smn_batch_num
, mtng_chrg_tp_cd
, ab_only_ind
, chrg_sts_cd
, mdc_ssn
, mdc_num
, mdc_col
, mdc_line
, mtng_chrg_cd
, date_d
, smn_colln_date_d
, upd_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.mate_anml_key
, old.mtng_tp_cd
, old.insem_ptpt_cd
, old.smn_batch_num
, old.mtng_chrg_tp_cd
, old.ab_only_ind
, old.chrg_sts_cd
, old.mdc_ssn
, old.mdc_num
, old.mdc_col
, old.mdc_line
, old.mtng_chrg_cd
, old.date_d
, old.smn_colln_date_d
, old.upd_date_d
)
 !!


CREATE TRIGGER D0020I54
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.smn_colln_date IS NULL 
  AND new.smn_colln_date_d IS NOT NULL
  AND CHAR(new.smn_colln_date_d,ISO) != '0001-01-01'
   OR new.smn_colln_date = 0
  AND new.smn_colln_date_d IS NOT NULL
  AND CHAR(new.smn_colln_date_d,ISO) != '0001-01-01')
SET new.smn_colln_date =
  CASE WHEN new.smn_colln_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.smn_colln_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.smn_colln_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.smn_colln_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0020U55
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020I55
  NO CASCADE BEFORE INSERT
  ON MATING
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0020U03
  AFTER UPDATE OF 
        anml_key,
        date_d
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.date != new.date)
INSERT INTO del_mating (
  anml_key
, upd_time
, mate_anml_key
, mtng_tp_cd
, insem_ptpt_cd
, smn_batch_num
, mtng_chrg_tp_cd
, ab_only_ind
, chrg_sts_cd
, mdc_ssn
, mdc_num
, mdc_col
, mdc_line
, mtng_chrg_cd
, date_d
, smn_colln_date_d
, upd_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.mate_anml_key
, old.mtng_tp_cd
, old.insem_ptpt_cd
, old.smn_batch_num
, old.mtng_chrg_tp_cd
, old.ab_only_ind
, old.chrg_sts_cd
, old.mdc_ssn
, old.mdc_num
, old.mdc_col
, old.mdc_line
, old.mtng_chrg_cd
, old.date_d
, old.smn_colln_date_d
, old.upd_date_d
)
 !!


CREATE TRIGGER D0020U56
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0020U54
  NO CASCADE BEFORE UPDATE OF 
                    smn_colln_date_d
  ON MATING
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.smn_colln_date_d != new.smn_colln_date_d
   OR old.smn_colln_date_d IS NULL and new.smn_colln_date_d IS NOT NULL
   OR old.smn_colln_date_d IS NOT NULL and new.smn_colln_date_d IS NULL)
SET new.smn_colln_date =
  CASE WHEN new.smn_colln_date_d IS NULL OR new.smn_colln_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.smn_colln_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.smn_colln_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.smn_colln_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0383U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_COL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0384U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_COL_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0381U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_HDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0382U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_HDR_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0385U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_ROW
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0237U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_ROW_CR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0386U01
  NO CASCADE BEFORE UPDATE
  ON MDC_AI_ROW_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0380I51
  NO CASCADE BEFORE INSERT
  ON MDC_BOOK
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.desp_date_d IS NULL 
  AND new.desp_date IS NOT NULL
   OR CHAR(new.desp_date_d,ISO) = '0001-01-01'
  AND new.desp_date IS NOT NULL)
SET new.desp_date_d =
  CASE WHEN new.desp_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.desp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0380I52
  NO CASCADE BEFORE INSERT
  ON MDC_BOOK
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.desp_date IS NULL 
  AND new.desp_date_d IS NOT NULL
  AND CHAR(new.desp_date_d,ISO) != '0001-01-01'
   OR new.desp_date = 0
  AND new.desp_date_d IS NOT NULL
  AND CHAR(new.desp_date_d,ISO) != '0001-01-01')
SET new.desp_date =
  CASE WHEN new.desp_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.desp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0380U01
  NO CASCADE BEFORE UPDATE
  ON MDC_BOOK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0380U51
  NO CASCADE BEFORE UPDATE OF 
                    desp_date
  ON MDC_BOOK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.desp_date != new.desp_date
   OR old.desp_date IS NULL AND new.desp_date IS NOT NULL
   OR old.desp_date IS NOT NULL AND new.desp_date IS NULL)
SET new.desp_date_d =
  CASE WHEN new.desp_date = 0 OR new.desp_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.desp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0380U52
  NO CASCADE BEFORE UPDATE OF 
                    desp_date_d
  ON MDC_BOOK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.desp_date_d != new.desp_date_d
   OR old.desp_date_d IS NULL and new.desp_date_d IS NOT NULL
   OR old.desp_date_d IS NOT NULL and new.desp_date_d IS NULL)
SET new.desp_date =
  CASE WHEN new.desp_date_d IS NULL OR new.desp_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.desp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0278I02
  NO CASCADE BEFORE INSERT
  ON MDC_BOOK_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mdc_tp_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MDC_MTNG_TP_CD'
      AND c.cd = new.mdc_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0278'
('D0278I02: invalid mdc mating type code')
 !!


CREATE TRIGGER D0278I01
  NO CASCADE BEFORE INSERT
  ON MDC_BOOK_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.prod_tp_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MDC_BOOK_PROD_TP_CD'
      AND c.cd = new.prod_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0278'
('D0278I01: invalid prod type code')
 !!


CREATE TRIGGER D0278U02
  NO CASCADE BEFORE UPDATE OF 
                    prod_tp_cd
  ON MDC_BOOK_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.prod_tp_cd IS NOT NULL
  AND VALUE(new.prod_tp_cd,'~') != VALUE(old.prod_tp_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MDC_BOOK_PROD_TP_CD'
      AND c.cd = new.prod_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0278'
('D0278U02: invalid prod type code')
 !!


CREATE TRIGGER D0278U03
  NO CASCADE BEFORE UPDATE OF 
                    mdc_tp_cd
  ON MDC_BOOK_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.mdc_tp_cd IS NOT NULL
  AND VALUE(new.mdc_tp_cd,'~') != VALUE(old.mdc_tp_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MDC_MTNG_TP_CD'
      AND c.cd = new.mdc_tp_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0278'
('D0278U03: invalid mdc mating type code')
 !!


CREATE TRIGGER D0278U01
  NO CASCADE BEFORE UPDATE
  ON MDC_BOOK_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0396U01
  NO CASCADE BEFORE UPDATE
  ON MDC_CD_XREF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0259I51
  NO CASCADE BEFORE INSERT
  ON MDC_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date_d IS NULL 
  AND new.mtng_date IS NOT NULL
   OR CHAR(new.mtng_date_d,ISO) = '0001-01-01'
  AND new.mtng_date IS NOT NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0259I52
  NO CASCADE BEFORE INSERT
  ON MDC_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date IS NULL 
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01'
   OR new.mtng_date = 0
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01')
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0259U01
  NO CASCADE BEFORE UPDATE
  ON MDC_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0259U51
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date
  ON MDC_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date != new.mtng_date
   OR old.mtng_date IS NULL AND new.mtng_date IS NOT NULL
   OR old.mtng_date IS NOT NULL AND new.mtng_date IS NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 OR new.mtng_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0259U52
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date_d
  ON MDC_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date_d != new.mtng_date_d
   OR old.mtng_date_d IS NULL and new.mtng_date_d IS NOT NULL
   OR old.mtng_date_d IS NOT NULL and new.mtng_date_d IS NULL)
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL OR new.mtng_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.mtng_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.mtng_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0239U01
  NO CASCADE BEFORE UPDATE
  ON MDC_CLNT_CTCT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MDC_CLNT_CTCT_S AFTER DELETE ON MDC_CLNT_CTCT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_DTL_CERT WHERE MTNG_DTL_CERT.CLNT_CTCT_STS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MDC_CLNT_CTCT_STS  MTNG_DTL_CERT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009666", PARENT_OWNER="", PARENT_TABLE="MDC_CLNT_CTCT_STS"
    CHILD_OWNER="", CHILD_TABLE="MTNG_DTL_CERT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0239_001", FK_COLUMNS="CLNT_CTCT_STS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MDC_CLNT_CTCT_STS because MTNG_DTL_CERT exists.')
 !!


CREATE TRIGGER D0240U01
  NO CASCADE BEFORE UPDATE
  ON MDC_DAY_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0344U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_COL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0343U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_COL_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0346U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_HDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0345U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_HDR_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0387U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_ROW
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0388U01
  NO CASCADE BEFORE UPDATE
  ON MDC_NM_ROW_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0295I55
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295I54
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.payroll_date IS NULL 
  AND new.payroll_date_d IS NOT NULL
  AND CHAR(new.payroll_date_d,ISO) != '0001-01-01'
   OR new.payroll_date = 0
  AND new.payroll_date_d IS NOT NULL
  AND CHAR(new.payroll_date_d,ISO) != '0001-01-01')
SET new.payroll_date =
  CASE WHEN new.payroll_date_d IS NULL THEN 0 ELSE
  INT(new.payroll_date_d) - 19000000 END
 !!


CREATE TRIGGER D0295U55
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295U53
  NO CASCADE BEFORE UPDATE OF 
                    payroll_date
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.payroll_date != new.payroll_date
   OR old.payroll_date IS NULL AND new.payroll_date IS NOT NULL
   OR old.payroll_date IS NOT NULL AND new.payroll_date IS NULL)
SET new.payroll_date_d =
  CASE WHEN new.payroll_date = 0 OR new.payroll_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.payroll_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295I56
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0295U51
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date != new.mtng_date
   OR old.mtng_date IS NULL AND new.mtng_date IS NOT NULL
   OR old.mtng_date IS NOT NULL AND new.mtng_date IS NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 OR new.mtng_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295U54
  NO CASCADE BEFORE UPDATE OF 
                    payroll_date_d
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.payroll_date_d != new.payroll_date_d
   OR old.payroll_date_d IS NULL and new.payroll_date_d IS NOT NULL
   OR old.payroll_date_d IS NOT NULL and new.payroll_date_d IS NULL)
SET new.payroll_date =
  CASE WHEN new.payroll_date_d IS NULL OR new.payroll_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.payroll_date_d) - 19000000 END
 !!


CREATE TRIGGER D0295I53
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.payroll_date_d IS NULL 
  AND new.payroll_date IS NOT NULL
   OR CHAR(new.payroll_date_d,ISO) = '0001-01-01'
  AND new.payroll_date IS NOT NULL)
SET new.payroll_date_d =
  CASE WHEN new.payroll_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.payroll_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295U56
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0295I51
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date_d IS NULL 
  AND new.mtng_date IS NOT NULL
   OR CHAR(new.mtng_date_d,ISO) = '0001-01-01'
  AND new.mtng_date IS NOT NULL)
SET new.mtng_date_d =
  CASE WHEN new.mtng_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0295I52
  NO CASCADE BEFORE INSERT
  ON MDC_PAY_CLAIM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_date IS NULL 
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01'
   OR new.mtng_date = 0
  AND new.mtng_date_d IS NOT NULL
  AND CHAR(new.mtng_date_d,ISO) != '0001-01-01')
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL THEN 0 ELSE
  INT(new.mtng_date_d) - 19000000 END
 !!


CREATE TRIGGER D0295U52
  NO CASCADE BEFORE UPDATE OF 
                    mtng_date_d
  ON MDC_PAY_CLAIM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_date_d != new.mtng_date_d
   OR old.mtng_date_d IS NULL and new.mtng_date_d IS NOT NULL
   OR old.mtng_date_d IS NOT NULL and new.mtng_date_d IS NULL)
SET new.mtng_date =
  CASE WHEN new.mtng_date_d IS NULL OR new.mtng_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.mtng_date_d) - 19000000 END
 !!


CREATE TRIGGER D0241U01
  NO CASCADE BEFORE UPDATE
  ON MDC_PROC_STATS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0389U01
  NO CASCADE BEFORE UPDATE
  ON MDC_QRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MDC_QRY AFTER DELETE ON MDC_QRY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MDC_DAY_QRY WHERE MDC_DAY_QRY.MDC_QRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MDC_QRY  MDC_DAY_QRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086dc", PARENT_OWNER="", PARENT_TABLE="MDC_QRY"
    CHILD_OWNER="", CHILD_TABLE="MDC_DAY_QRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0389_001", FK_COLUMNS="MDC_QRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MDC_QRY because MDC_DAY_QRY exists.')
 !!


CREATE TRIGGER D0395I51
  NO CASCADE BEFORE INSERT
  ON MDC_QRY_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0395I52
  NO CASCADE BEFORE INSERT
  ON MDC_QRY_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0395U01
  NO CASCADE BEFORE UPDATE
  ON MDC_QRY_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0395U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON MDC_QRY_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0395U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON MDC_QRY_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0190U01
  NO CASCADE BEFORE UPDATE
  ON MILK_ABNM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MILK_ABNM AFTER DELETE ON MILK_ABNM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_TDM_RSLT WHERE HT_TDM_RSLT.MILK_ABNM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MILK_ABNM  HT_TDM_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e33", PARENT_OWNER="", PARENT_TABLE="MILK_ABNM"
    CHILD_OWNER="", CHILD_TABLE="HT_TDM_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0190_001", FK_COLUMNS="MILK_ABNM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MILK_ABNM because HT_TDM_RSLT exists.')
 !!

CREATE  TRIGGER tD_MILK_ABNM2 AFTER DELETE ON MILK_ABNM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_ANML_MILK_SAMPLE_FLASK WHERE EZ_LINK_ANML_MILK_SAMPLE_FLASK.MILK_ABNORMAL_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MILK_ABNM  EZ_LINK_ANML_MILK_SAMPLE_FLASK on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a55b", PARENT_OWNER="", PARENT_TABLE="MILK_ABNM"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_ANML_MILK_SAMPLE_FLASK"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0190_002", FK_COLUMNS="MILK_ABNORMAL_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MILK_ABNM because EZ_LINK_ANML_MILK_SAMPLE_FLASK exists.')
 !!


CREATE TRIGGER D0412U01
  NO CASCADE BEFORE UPDATE
  ON MILK_COLOUR_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0545U01
  NO CASCADE BEFORE UPDATE
  ON MILK_DTR_CMPL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0546I01
  NO CASCADE BEFORE INSERT
  ON MILK_DTR_CMPL_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0546'
('D0546I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0546I51
  NO CASCADE BEFORE INSERT
  ON MILK_DTR_CMPL_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0546I52
  NO CASCADE BEFORE INSERT
  ON MILK_DTR_CMPL_ACT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0546U01
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON MILK_DTR_CMPL_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0546'
('D0546I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0546U02
  NO CASCADE BEFORE UPDATE
  ON MILK_DTR_CMPL_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0546U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON MILK_DTR_CMPL_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0546U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON MILK_DTR_CMPL_ACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0544I51
  NO CASCADE BEFORE INSERT
  ON MILK_DTR_CMPL_RPRT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0544I52
  NO CASCADE BEFORE INSERT
  ON MILK_DTR_CMPL_RPRT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0544U01
  NO CASCADE BEFORE UPDATE
  ON MILK_DTR_CMPL_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0544U51
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON MILK_DTR_CMPL_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0544U52
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON MILK_DTR_CMPL_RPRT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_MILK_DTR_CMPL_R AFTER DELETE ON MILK_DTR_CMPL_RPRT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_DTR_CMPL_ACT WHERE MILK_DTR_CMPL_ACT.RPRT_YR = old.YR AND
                                                    MILK_DTR_CMPL_ACT.RPRT_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* MILK_DTR_CMPL_RPRT  MILK_DTR_CMPL_ACT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096b0", PARENT_OWNER="", PARENT_TABLE="MILK_DTR_CMPL_RPRT"
    CHILD_OWNER="", CHILD_TABLE="MILK_DTR_CMPL_ACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0544_002", FK_COLUMNS="RPRT_YR""RPRT_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MILK_DTR_CMPL_RPRT because MILK_DTR_CMPL_ACT exists.')
 !!

CREATE  TRIGGER tD_MILK_DTR_CMPL_2 AFTER DELETE ON MILK_DTR_CMPL_RPRT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MILK_DTR_CMPL WHERE MILK_DTR_CMPL.RPRT_YR = old.YR AND
                                                MILK_DTR_CMPL.RPRT_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* MILK_DTR_CMPL_RPRT  MILK_DTR_CMPL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009ab0", PARENT_OWNER="", PARENT_TABLE="MILK_DTR_CMPL_RPRT"
    CHILD_OWNER="", CHILD_TABLE="MILK_DTR_CMPL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0544_001", FK_COLUMNS="RPRT_YR""RPRT_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MILK_DTR_CMPL_RPRT because MILK_DTR_CMPL exists.')
 !!


CREATE TRIGGER D0495I51
  NO CASCADE BEFORE INSERT
  ON MINDA_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0495I52
  NO CASCADE BEFORE INSERT
  ON MINDA_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0495U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0495U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON MINDA_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0495U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON MINDA_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0494I51
  NO CASCADE BEFORE INSERT
  ON MINDA_CHRG_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0494I52
  NO CASCADE BEFORE INSERT
  ON MINDA_CHRG_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0494U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_CHRG_SUMM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0494U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON MINDA_CHRG_SUMM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0494U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON MINDA_CHRG_SUMM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0407U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_DWNLD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0410U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_FLD_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0410I01
  NO CASCADE BEFORE INSERT
  ON MINDA_FLD_OFFCR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != ' ')
SET new.party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
 !!


CREATE TRIGGER D0410U02
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON MINDA_FLD_OFFCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != old.ptpt_cd)
SET new.party_id = (
  CASE WHEN new.ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
  END
 !!


CREATE TRIGGER D0496I51
  NO CASCADE BEFORE INSERT
  ON MINDA_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0496I52
  NO CASCADE BEFORE INSERT
  ON MINDA_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0496U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0496U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON MINDA_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0496U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON MINDA_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0249U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_MED_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0965U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_BRTH_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0969U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_FATE_CAUSE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0971U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_HLTH_CAT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0972U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_HLTH_COND
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0974U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_HLTH_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0973U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_HLTH_PROD_CAT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0967U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_OPT_NEW_BORN_FATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0497I51
  NO CASCADE BEFORE INSERT
  ON MINDA_QLTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0497I52
  NO CASCADE BEFORE INSERT
  ON MINDA_QLTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0497U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_QLTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0497U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON MINDA_QLTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0497U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON MINDA_QLTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0368U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MINDA_SOFTWARE_ AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER WHERE MINDA_SOFTWARE_USER.MINDA_SOFTWARE_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a2d0", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_001", FK_COLUMNS="MINDA_SOFTWARE_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER exists.')
 !!

CREATE  TRIGGER tD_MINDA_SOFTWARE2 AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER_INS_RULE WHERE MINDA_SOFTWARE_USER_INS_RULE.EXIST_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER_INS_RULE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a6a3", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER_INS_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_005", FK_COLUMNS="EXIST_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER_INS_RULE exists.')
 !!

CREATE  TRIGGER tD_MINDA_SOFTWARE3 AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER_INS_RULE WHERE MINDA_SOFTWARE_USER_INS_RULE.NEW_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER_INS_RULE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000aea7", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER_INS_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_004", FK_COLUMNS="NEW_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER_INS_RULE exists.')
 !!

CREATE  TRIGGER tD_MINDA_SOFTWARE4 AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER_CAN_RULE WHERE MINDA_SOFTWARE_USER_CAN_RULE.EXIST_TP_CD_2 = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER_CAN_RULE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a2a6", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER_CAN_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_006", FK_COLUMNS="EXIST_TP_CD_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER_CAN_RULE exists.')
 !!

CREATE  TRIGGER tD_MINDA_SOFTWARE5 AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER_CAN_RULE WHERE MINDA_SOFTWARE_USER_CAN_RULE.EXIST_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER_CAN_RULE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a311", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER_CAN_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_003", FK_COLUMNS="EXIST_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER_CAN_RULE exists.')
 !!

CREATE  TRIGGER tD_MINDA_SOFTWARE6 AFTER DELETE ON MINDA_SOFTWARE_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_SOFTWARE_USER_CAN_RULE WHERE MINDA_SOFTWARE_USER_CAN_RULE.ACTIONED_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MINDA_SOFTWARE_TP  MINDA_SOFTWARE_USER_CAN_RULE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a517", PARENT_OWNER="", PARENT_TABLE="MINDA_SOFTWARE_TP"
    CHILD_OWNER="", CHILD_TABLE="MINDA_SOFTWARE_USER_CAN_RULE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0368_002", FK_COLUMNS="ACTIONED_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MINDA_SOFTWARE_TP because MINDA_SOFTWARE_USER_CAN_RULE exists.')
 !!


CREATE TRIGGER D0761U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0761U04
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MINDA_SOFTWARE_TP_CD'
      AND c.cd = new.minda_software_tp_cd) )
SIGNAL SQLSTATE 'Z0205'
('D0761U04: invalid Minda software type code')
 !!


CREATE TRIGGER D0761I03
  NO CASCADE BEFORE INSERT
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MINDA_SOFTWARE_TP_CD'
      AND c.cd = new.minda_software_tp_cd) )
SIGNAL SQLSTATE 'Z0205'
('D0761I03: invalid Minda software type code')
 !!


CREATE TRIGGER D0761U02
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_time IS NOT NULL AND
      new.can_time > CURRENT TIMESTAMP)
SIGNAL SQLSTATE 'Z0761'
('D0761U02: the cancel time must not be in the future')
 !!


CREATE TRIGGER D0761I02
  NO CASCADE BEFORE INSERT
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM minda_software_user cur
  WHERE cur.chrg_party_id = new.chrg_party_id
    AND cur.chrg_ptpt_cd = new.chrg_ptpt_cd
    AND cur.chrg_ptpt_cd_st_date = new.chrg_ptpt_cd_st_date
    AND cur.rcpnt_party_id = new.rcpnt_party_id
    AND (cur.minda_software_tp_cd = new.minda_software_tp_cd
     OR cur.minda_software_tp_cd IN ('ML','MP')
    AND new.minda_software_tp_cd IN ('ML','MP'))
    AND cur.st_time != new.st_time
    AND new.st_time <= VALUE(cur.can_time, TIMESTAMP('9999-12-31 23:59:59') )    
    AND VALUE (new.can_time, TIMESTAMP('9999-12-31 23:59:59') ) >= cur.st_time) )
SIGNAL SQLSTATE 'Z0761'
('D0761I02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0761U03
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM minda_software_user cur
  WHERE cur.chrg_party_id = new.chrg_party_id
    AND cur.chrg_ptpt_cd = new.chrg_ptpt_cd
    AND cur.chrg_ptpt_cd_st_date = new.chrg_ptpt_cd_st_date
    AND cur.rcpnt_party_id = new.rcpnt_party_id
    AND (cur.minda_software_tp_cd = new.minda_software_tp_cd
     OR cur.minda_software_tp_cd IN ('ML','MP')
    AND new.minda_software_tp_cd IN ('ML','MP'))
    AND (cur.chrg_party_id <> old.chrg_party_id
     OR cur.chrg_ptpt_cd <> old.chrg_ptpt_cd
     OR cur.chrg_ptpt_cd_st_date <> old.chrg_ptpt_cd_st_date
     OR cur.rcpnt_party_id <> old.rcpnt_party_id
     OR cur.minda_software_tp_cd <> old.minda_software_tp_cd
     OR cur.st_time <> old.st_time
     OR VALUE(cur.can_time, TIMESTAMP('9999-12-31 23:59:59')) <> VALUE(old.can_time, TIMESTAMP('9999-12-31 23:59:59')))
    AND new.st_time <= VALUE(cur.can_time, TIMESTAMP('9999-12-31 23:59:59') )    
    AND VALUE (new.can_time, TIMESTAMP('9999-12-31 23:59:59') ) >= cur.st_time) )
SIGNAL SQLSTATE 'Z0761'
('D0761U03: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0761I01
  NO CASCADE BEFORE INSERT
  ON MINDA_SOFTWARE_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.can_time IS NOT NULL AND
      new.can_time > CURRENT TIMESTAMP)
SIGNAL SQLSTATE 'Z0761'
('D0761I01: the cancel time must not be in the future')
 !!


CREATE TRIGGER D0369U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER_CAN_RULE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0370U01
  NO CASCADE BEFORE UPDATE
  ON MINDA_SOFTWARE_USER_INS_RULE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0533U01
  NO CASCADE BEFORE UPDATE
  ON MKTG_BRD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MKTG_BRD AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_QUOTA WHERE SPS_QUOTA.BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_QUOTA on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000882f", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_QUOTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_024", FK_COLUMNS="BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_QUOTA exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD2 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_FRZ_SMN WHERE MTNG_PLAN_FRZ_SMN.SIRE_MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  MTNG_PLAN_FRZ_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ca7", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_FRZ_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_018", FK_COLUMNS="SIRE_MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because MTNG_PLAN_FRZ_SMN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD3 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d0b", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_025", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD4 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_RQRD_SMN WHERE MTNG_PLAN_RQRD_SMN.SIRE_MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  MTNG_PLAN_RQRD_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009359", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_RQRD_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_019", FK_COLUMNS="SIRE_MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because MTNG_PLAN_RQRD_SMN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD5 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM STD_LIC_BULL_RANK WHERE STD_LIC_BULL_RANK.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  STD_LIC_BULL_RANK on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fa8", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="STD_LIC_BULL_RANK"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_017", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because STD_LIC_BULL_RANK exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD6 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_SAR_TRGT WHERE SPS_SAR_TRGT.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_SAR_TRGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008911", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_SAR_TRGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_016", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_SAR_TRGT exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD7 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_OPTM_ALCN WHERE SPS_OPTM_ALCN.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_OPTM_ALCN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086f2", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_OPTM_ALCN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_014", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_OPTM_ALCN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD8 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MTNG WHERE SPS_MTNG.SIRE_MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_MTNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089d7", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_MTNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_020", FK_COLUMNS="SIRE_MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_MTNG exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD9 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_LLL_UTLSTN WHERE SPS_LLL_UTLSTN.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_LLL_UTLSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087a9", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_LLL_UTLSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_013", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_LLL_UTLSTN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD10 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_INSEM_DTR WHERE SPS_INSEM_DTR.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_INSEM_DTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c0d", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_INSEM_DTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_012", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_INSEM_DTR exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD11 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_DESP_DMND WHERE SPS_DESP_DMND.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_DESP_DMND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089e8", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_DESP_DMND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_011", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_DESP_DMND exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD12 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_CTRY_TRGT WHERE SPS_CTRY_TRGT.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_CTRY_TRGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ba1", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_CTRY_TRGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_022", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_CTRY_TRGT exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD13 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_ALCN_SPLY WHERE SPS_ALCN_SPLY.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_ALCN_SPLY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000897c", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_ALCN_SPLY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_010", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_ALCN_SPLY exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD14 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_ALCN_APPROVAL WHERE SPS_ALCN_APPROVAL.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SPS_ALCN_APPROVAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b14", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SPS_ALCN_APPROVAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_023", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SPS_ALCN_APPROVAL exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD15 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH WHERE SEMEN_BATCH.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e44", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_021", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SEMEN_BATCH exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD16 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087d3", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_009", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because PRDCT_DTR_PROB exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD17 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LLL_PD WHERE LLL_PD.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  LLL_PD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008428", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="LLL_PD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_007", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because LLL_PD exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD18 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LLL_DTR_PROB WHERE LLL_DTR_PROB.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  LLL_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f90", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="LLL_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_006", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because LLL_DTR_PROB exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD19 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LAB_COLLN WHERE LAB_COLLN.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  LAB_COLLN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008419", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="LAB_COLLN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_005", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because LAB_COLLN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD20 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM FUTR_MTNG_PLAN_DTL WHERE FUTR_MTNG_PLAN_DTL.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  FUTR_MTNG_PLAN_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009585", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="FUTR_MTNG_PLAN_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_003", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because FUTR_MTNG_PLAN_DTL exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD21 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_TEAM WHERE BULL_TEAM.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  BULL_TEAM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008195", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="BULL_TEAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_002", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because BULL_TEAM exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD22 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_SZE_ADJ WHERE AB_GRP_SZE_ADJ.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  AB_GRP_SZE_ADJ on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009264", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_SZE_ADJ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_001", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because AB_GRP_SZE_ADJ exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD23 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM INSEM_LLL_SEMEN WHERE INSEM_LLL_SEMEN.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  INSEM_LLL_SEMEN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e3f", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="INSEM_LLL_SEMEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_004", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because INSEM_LLL_SEMEN exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD24 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SOF_AB_MTNG_PLAN_CHANGE WHERE SOF_AB_MTNG_PLAN_CHANGE.SIRE_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SOF_AB_MTNG_PLAN_CHANGE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009bdf", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SOF_AB_MTNG_PLAN_CHANGE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_028", FK_COLUMNS="SIRE_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SOF_AB_MTNG_PLAN_CHANGE exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD25 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_SPLR_BRAND_BRD WHERE SEMEN_SPLR_BRAND_BRD.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  SEMEN_SPLR_BRAND_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000919b", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_SPLR_BRAND_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_026", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because SEMEN_SPLR_BRAND_BRD exists.')
 !!

CREATE  TRIGGER tD_MKTG_BRD26 AFTER DELETE ON MKTG_BRD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_LLL_SMN WHERE AB_GRP_LLL_SMN.MKTG_BRD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MKTG_BRD  AB_GRP_LLL_SMN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a39", PARENT_OWNER="", PARENT_TABLE="MKTG_BRD"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_LLL_SMN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0533_027", FK_COLUMNS="MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MKTG_BRD because AB_GRP_LLL_SMN exists.')
 !!


CREATE TRIGGER D0314U01
  NO CASCADE BEFORE UPDATE
  ON MRKR_BULL_ALCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0293U62
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date_d != new.vfy_date_d
   OR old.vfy_date_d IS NULL and new.vfy_date_d IS NOT NULL
   OR old.vfy_date_d IS NOT NULL and new.vfy_date_d IS NULL)
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL OR new.vfy_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I53
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.last_valid_date_d IS NULL 
  AND new.last_valid_date IS NOT NULL
   OR CHAR(new.last_valid_date_d,ISO) = '0001-01-01'
  AND new.last_valid_date IS NOT NULL)
SET new.last_valid_date_d =
  CASE WHEN new.last_valid_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.last_valid_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I60
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U57
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date != new.rcvd_date
   OR old.rcvd_date IS NULL AND new.rcvd_date IS NOT NULL
   OR old.rcvd_date IS NOT NULL AND new.rcvd_date IS NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 OR new.rcvd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293U55
  NO CASCADE BEFORE UPDATE OF 
                    punch_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.punch_date != new.punch_date
   OR old.punch_date IS NULL AND new.punch_date IS NOT NULL
   OR old.punch_date IS NOT NULL AND new.punch_date IS NULL)
SET new.punch_date_d =
  CASE WHEN new.punch_date = 0 OR new.punch_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.punch_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293U54
  NO CASCADE BEFORE UPDATE OF 
                    last_valid_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.last_valid_date_d != new.last_valid_date_d
   OR old.last_valid_date_d IS NULL and new.last_valid_date_d IS NOT NULL
   OR old.last_valid_date_d IS NOT NULL and new.last_valid_date_d IS NULL)
SET new.last_valid_date =
  CASE WHEN new.last_valid_date_d IS NULL OR new.last_valid_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.last_valid_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U61
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date != new.vfy_date
   OR old.vfy_date IS NULL AND new.vfy_date IS NOT NULL
   OR old.vfy_date IS NOT NULL AND new.vfy_date IS NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 OR new.vfy_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I59
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293U59
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I54
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.last_valid_date IS NULL 
  AND new.last_valid_date_d IS NOT NULL
  AND CHAR(new.last_valid_date_d,ISO) != '0001-01-01'
   OR new.last_valid_date = 0
  AND new.last_valid_date_d IS NOT NULL
  AND CHAR(new.last_valid_date_d,ISO) != '0001-01-01')
SET new.last_valid_date =
  CASE WHEN new.last_valid_date_d IS NULL THEN 0 ELSE
  INT(new.last_valid_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I58
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date IS NULL 
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01'
   OR new.rcvd_date = 0
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01')
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL THEN 0 ELSE
  INT(new.rcvd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I52
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frst_valid_date IS NULL 
  AND new.frst_valid_date_d IS NOT NULL
  AND CHAR(new.frst_valid_date_d,ISO) != '0001-01-01'
   OR new.frst_valid_date = 0
  AND new.frst_valid_date_d IS NOT NULL
  AND CHAR(new.frst_valid_date_d,ISO) != '0001-01-01')
SET new.frst_valid_date =
  CASE WHEN new.frst_valid_date_d IS NULL THEN 0 ELSE
  INT(new.frst_valid_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U60
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U56
  NO CASCADE BEFORE UPDATE OF 
                    punch_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.punch_date_d != new.punch_date_d
   OR old.punch_date_d IS NULL and new.punch_date_d IS NOT NULL
   OR old.punch_date_d IS NOT NULL and new.punch_date_d IS NULL)
SET new.punch_date =
  CASE WHEN new.punch_date_d IS NULL OR new.punch_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.punch_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I62
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date IS NULL 
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01'
   OR new.vfy_date = 0
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01')
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL THEN 0 ELSE
  INT(new.vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U58
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date_d != new.rcvd_date_d
   OR old.rcvd_date_d IS NULL and new.rcvd_date_d IS NOT NULL
   OR old.rcvd_date_d IS NOT NULL and new.rcvd_date_d IS NULL)
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL OR new.rcvd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rcvd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293U53
  NO CASCADE BEFORE UPDATE OF 
                    last_valid_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.last_valid_date != new.last_valid_date
   OR old.last_valid_date IS NULL AND new.last_valid_date IS NOT NULL
   OR old.last_valid_date IS NOT NULL AND new.last_valid_date IS NULL)
SET new.last_valid_date_d =
  CASE WHEN new.last_valid_date = 0 OR new.last_valid_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.last_valid_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I55
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.punch_date_d IS NULL 
  AND new.punch_date IS NOT NULL
   OR CHAR(new.punch_date_d,ISO) = '0001-01-01'
  AND new.punch_date IS NOT NULL)
SET new.punch_date_d =
  CASE WHEN new.punch_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.punch_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I61
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date_d IS NULL 
  AND new.vfy_date IS NOT NULL
   OR CHAR(new.vfy_date_d,ISO) = '0001-01-01'
  AND new.vfy_date IS NOT NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293U52
  NO CASCADE BEFORE UPDATE OF 
                    frst_valid_date_d
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frst_valid_date_d != new.frst_valid_date_d
   OR old.frst_valid_date_d IS NULL and new.frst_valid_date_d IS NOT NULL
   OR old.frst_valid_date_d IS NOT NULL and new.frst_valid_date_d IS NULL)
SET new.frst_valid_date =
  CASE WHEN new.frst_valid_date_d IS NULL OR new.frst_valid_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.frst_valid_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I56
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.punch_date IS NULL 
  AND new.punch_date_d IS NOT NULL
  AND CHAR(new.punch_date_d,ISO) != '0001-01-01'
   OR new.punch_date = 0
  AND new.punch_date_d IS NOT NULL
  AND CHAR(new.punch_date_d,ISO) != '0001-01-01')
SET new.punch_date =
  CASE WHEN new.punch_date_d IS NULL THEN 0 ELSE
  INT(new.punch_date_d) - 19000000 END
 !!


CREATE TRIGGER D0293I51
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frst_valid_date_d IS NULL 
  AND new.frst_valid_date IS NOT NULL
   OR CHAR(new.frst_valid_date_d,ISO) = '0001-01-01'
  AND new.frst_valid_date IS NOT NULL)
SET new.frst_valid_date_d =
  CASE WHEN new.frst_valid_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_valid_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293I57
  NO CASCADE BEFORE INSERT
  ON MTNG_DTL_CERT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date_d IS NULL 
  AND new.rcvd_date IS NOT NULL
   OR CHAR(new.rcvd_date_d,ISO) = '0001-01-01'
  AND new.rcvd_date IS NOT NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0293U51
  NO CASCADE BEFORE UPDATE OF 
                    frst_valid_date
  ON MTNG_DTL_CERT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frst_valid_date != new.frst_valid_date
   OR old.frst_valid_date IS NULL AND new.frst_valid_date IS NOT NULL
   OR old.frst_valid_date IS NOT NULL AND new.frst_valid_date IS NULL)
SET new.frst_valid_date_d =
  CASE WHEN new.frst_valid_date = 0 OR new.frst_valid_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_valid_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE  TRIGGER tD_MTNG_DTL_CERT AFTER DELETE ON MTNG_DTL_CERT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MATING WHERE MATING.MDC_SSN = old.SSN AND
                                         MATING.MDC_NUM = old.NUM) > 0)
    /* erwin Builtin Trigger */
    /* MTNG_DTL_CERT  MATING on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008544", PARENT_OWNER="", PARENT_TABLE="MTNG_DTL_CERT"
    CHILD_OWNER="", CHILD_TABLE="MATING"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0293_001", FK_COLUMNS="MDC_SSN""MDC_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MTNG_DTL_CERT because MATING exists.')
 !!


CREATE TRIGGER D0097U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_PLAN_ERR_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0094U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_PLAN_ERR_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0040U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_PLAN_FRZ_SMN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0041U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_PLAN_RQRD_SMN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0315U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_RET_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MTNG_RET_GRP AFTER DELETE ON MTNG_RET_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.MTNG_RET_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* MTNG_RET_GRP  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000998c", PARENT_OWNER="", PARENT_TABLE="MTNG_RET_GRP"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0315_001", FK_COLUMNS="MTNG_RET_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MTNG_RET_GRP because PRDCT_DTR_PROB exists.')
 !!


CREATE TRIGGER D0043U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_SYST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_MTNG_SYST AFTER DELETE ON MTNG_SYST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.MTNG_SYS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MTNG_SYST  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000098bd", PARENT_OWNER="", PARENT_TABLE="MTNG_SYST"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0043_002", FK_COLUMNS="MTNG_SYS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MTNG_SYST because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_MTNG_SYST2 AFTER DELETE ON MTNG_SYST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_SYST_TECH WHERE MTNG_SYST_TECH.MTNG_SYST_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* MTNG_SYST  MTNG_SYST_TECH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089f4", PARENT_OWNER="", PARENT_TABLE="MTNG_SYST"
    CHILD_OWNER="", CHILD_TABLE="MTNG_SYST_TECH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0043_001", FK_COLUMNS="MTNG_SYST_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete MTNG_SYST because MTNG_SYST_TECH exists.')
 !!


CREATE TRIGGER D0081U01
  NO CASCADE BEFORE UPDATE
  ON MTNG_SYST_TECH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0029I51
  NO CASCADE BEFORE INSERT
  ON NB_ANML_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.partn_date_d IS NULL 
  AND new.partn_date IS NOT NULL
   OR CHAR(new.partn_date_d,ISO) = '0001-01-01'
  AND new.partn_date IS NOT NULL)
SET new.partn_date_d =
  CASE WHEN new.partn_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.partn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0029I52
  NO CASCADE BEFORE INSERT
  ON NB_ANML_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.partn_date IS NULL 
  AND new.partn_date_d IS NOT NULL
  AND CHAR(new.partn_date_d,ISO) != '0001-01-01'
   OR new.partn_date = 0
  AND new.partn_date_d IS NOT NULL
  AND CHAR(new.partn_date_d,ISO) != '0001-01-01')
SET new.partn_date =
  CASE WHEN new.partn_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.partn_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.partn_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.partn_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0029U01
  NO CASCADE BEFORE UPDATE
  ON NB_ANML_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0029U51
  NO CASCADE BEFORE UPDATE OF 
                    partn_date
  ON NB_ANML_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.partn_date != new.partn_date
   OR old.partn_date IS NULL AND new.partn_date IS NOT NULL
   OR old.partn_date IS NOT NULL AND new.partn_date IS NULL)
SET new.partn_date_d =
  CASE WHEN new.partn_date = 0 OR new.partn_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.partn_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0029U52
  NO CASCADE BEFORE UPDATE OF 
                    partn_date_d
  ON NB_ANML_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.partn_date_d != new.partn_date_d
   OR old.partn_date_d IS NULL and new.partn_date_d IS NOT NULL
   OR old.partn_date_d IS NOT NULL and new.partn_date_d IS NULL)
SET new.partn_date =
  CASE WHEN new.partn_date_d IS NULL OR new.partn_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.partn_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.partn_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.partn_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0049D01
  AFTER DELETE
  ON NC_SUBM_MODEL
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES (
  'NC_SUBM_MODEL', 
  LTRIM(RTRIM(CHAR(old.id))) || '|' || 
  old.insem_tp_cd || '|' || 
  old.brd_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.mtng_length))) || '|' ||
  old.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.rgn_id))) || '|')
 !!


CREATE TRIGGER D0049I01
  NO CASCADE BEFORE INSERT
  ON NC_SUBM_MODEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.rgn_id
        AND ga.geo_area_tp_cd = 'RGN ')
     )
-- the geographic area type must be a region
SIGNAL SQLSTATE 'Z0049'
('D0049I01: geographic area type must be a region')
 !!


CREATE TRIGGER D0049I02
  AFTER INSERT
  ON NC_SUBM_MODEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'NC_SUBM_MODEL', 
  LTRIM(RTRIM(CHAR(new.id))) || '|' ||
  new.insem_tp_cd || '|' ||
  new.brd_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.mtng_length))) || '|' ||
  new.core_prod_cd || '|' || 
  LTRIM(RTRIM(CHAR(new.rgn_id))) || '|')
 !!


CREATE TRIGGER D0049U01
  NO CASCADE BEFORE UPDATE OF 
                    rgn_id
  ON NC_SUBM_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.rgn_id
        AND ga.geo_area_tp_cd = 'RGN ')
     )
-- the geographic area type must be a region
SIGNAL SQLSTATE 'Z0049'
('D0049U01: geographic area type must be a region')
 !!


CREATE TRIGGER D0049U02
  AFTER UPDATE
  ON NC_SUBM_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'NC_SUBM_MODEL',
  LTRIM(RTRIM(CHAR(new.id))) || '|' ||
  old.insem_tp_cd || '|' ||
  old.brd_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.mtng_length))) || '|' ||
  old.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.rgn_id))) || '|' ||
  new.insem_tp_cd || '|' ||
  new.brd_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.mtng_length))) || '|' ||
  new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.rgn_id))) || '|')
 !!


CREATE TRIGGER D0049U03
  NO CASCADE BEFORE UPDATE
  ON NC_SUBM_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0050D01
  AFTER DELETE
  ON NC_SUBM_RATE
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES ('NC_SUBM_RATE', LTRIM(RTRIM(CHAR(old.model_id))) || '|')
 !!


CREATE TRIGGER D0050I01
  AFTER INSERT
  ON NC_SUBM_RATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES ('NC_SUBM_RATE', LTRIM(RTRIM(CHAR(new.model_id))) || '|')
 !!


CREATE TRIGGER D0050U01
  AFTER UPDATE
  ON NC_SUBM_RATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm) 
  VALUES ('NC_SUBM_RATE', LTRIM(RTRIM(CHAR(new.model_id))) || '|')
 !!


CREATE TRIGGER D0050U02
  NO CASCADE BEFORE UPDATE
  ON NC_SUBM_RATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0147U01
  NO CASCADE BEFORE UPDATE
  ON NEW_GIS_PT_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0148U01
  NO CASCADE BEFORE UPDATE
  ON NEW_PROP_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0192U01
  NO CASCADE BEFORE UPDATE
  ON NO_INSP_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0347I52
  NO CASCADE BEFORE INSERT
  ON NON_PRODN_TRAIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.insp_date IS NULL 
  AND new.insp_date_d IS NOT NULL
  AND CHAR(new.insp_date_d,ISO) != '0001-01-01'
   OR new.insp_date = 0
  AND new.insp_date_d IS NOT NULL
  AND CHAR(new.insp_date_d,ISO) != '0001-01-01')
SET new.insp_date =
  CASE WHEN new.insp_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.insp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.insp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.insp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0347U52
  NO CASCADE BEFORE UPDATE OF 
                    insp_date_d
  ON NON_PRODN_TRAIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.insp_date_d != new.insp_date_d
   OR old.insp_date_d IS NULL and new.insp_date_d IS NOT NULL
   OR old.insp_date_d IS NOT NULL and new.insp_date_d IS NULL)
SET new.insp_date =
  CASE WHEN new.insp_date_d IS NULL OR new.insp_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.insp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.insp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.insp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0347U01
  NO CASCADE BEFORE UPDATE
  ON NON_PRODN_TRAIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0347U51
  NO CASCADE BEFORE UPDATE OF 
                    insp_date
  ON NON_PRODN_TRAIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.insp_date != new.insp_date
   OR old.insp_date IS NULL AND new.insp_date IS NOT NULL
   OR old.insp_date IS NOT NULL AND new.insp_date IS NULL)
SET new.insp_date_d =
  CASE WHEN new.insp_date = 0 OR new.insp_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.insp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0347I51
  NO CASCADE BEFORE INSERT
  ON NON_PRODN_TRAIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.insp_date_d IS NULL 
  AND new.insp_date IS NOT NULL
   OR CHAR(new.insp_date_d,ISO) = '0001-01-01'
  AND new.insp_date IS NOT NULL)
SET new.insp_date_d =
  CASE WHEN new.insp_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.insp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0130I51
  NO CASCADE BEFORE INSERT
  ON NZ_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date_d IS NULL 
  AND new.run_date IS NOT NULL
   OR CHAR(new.run_date_d,ISO) = '0001-01-01'
  AND new.run_date IS NOT NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0130I52
  NO CASCADE BEFORE INSERT
  ON NZ_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date IS NULL 
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01'
   OR new.run_date = 0
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01')
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0130U01
  NO CASCADE BEFORE UPDATE
  ON NZ_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0130U51
  NO CASCADE BEFORE UPDATE OF 
                    run_date
  ON NZ_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date != new.run_date
   OR old.run_date IS NULL AND new.run_date IS NOT NULL
   OR old.run_date IS NOT NULL AND new.run_date IS NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 OR new.run_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0130U52
  NO CASCADE BEFORE UPDATE OF 
                    run_date_d
  ON NZ_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date_d != new.run_date_d
   OR old.run_date_d IS NULL and new.run_date_d IS NOT NULL
   OR old.run_date_d IS NOT NULL and new.run_date_d IS NULL)
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL OR new.run_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0109U01
  NO CASCADE BEFORE UPDATE
  ON NZ_POST_MAP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0197U01
  NO CASCADE BEFORE UPDATE
  ON OAD_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0198U01
  NO CASCADE BEFORE UPDATE
  ON OAD_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_OAD_RUN AFTER DELETE ON OAD_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM OAD_RUN_AE_BRD WHERE OAD_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE) > 0)
    /* erwin Builtin Trigger */
    /* OAD_RUN  OAD_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085eb", PARENT_OWNER="", PARENT_TABLE="OAD_RUN"
    CHILD_OWNER="", CHILD_TABLE="OAD_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0198_001", FK_COLUMNS="EXTR_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete OAD_RUN because OAD_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0271U01
  NO CASCADE BEFORE UPDATE
  ON OAD_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0489I51
  NO CASCADE BEFORE INSERT
  ON OLD_AE_HERD_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date_d IS NULL 
  AND new.calc_date IS NOT NULL
   OR CHAR(new.calc_date_d,ISO) = '0001-01-01'
  AND new.calc_date IS NOT NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0489I52
  NO CASCADE BEFORE INSERT
  ON OLD_AE_HERD_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.calc_date IS NULL 
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01'
   OR new.calc_date = 0
  AND new.calc_date_d IS NOT NULL
  AND CHAR(new.calc_date_d,ISO) != '0001-01-01')
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0489U01
  NO CASCADE BEFORE UPDATE
  ON OLD_AE_HERD_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0489U51
  NO CASCADE BEFORE UPDATE OF 
                    calc_date
  ON OLD_AE_HERD_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date != new.calc_date
   OR old.calc_date IS NULL AND new.calc_date IS NOT NULL
   OR old.calc_date IS NOT NULL AND new.calc_date IS NULL)
SET new.calc_date_d =
  CASE WHEN new.calc_date = 0 OR new.calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0489U52
  NO CASCADE BEFORE UPDATE OF 
                    calc_date_d
  ON OLD_AE_HERD_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.calc_date_d != new.calc_date_d
   OR old.calc_date_d IS NULL and new.calc_date_d IS NOT NULL
   OR old.calc_date_d IS NOT NULL and new.calc_date_d IS NULL)
SET new.calc_date =
  CASE WHEN new.calc_date_d IS NULL OR new.calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.calc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.calc_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0962U01
  NO CASCADE BEFORE UPDATE
  ON ON_FARM_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0092I51
  NO CASCADE BEFORE INSERT
  ON ORG_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0092I52
  NO CASCADE BEFORE INSERT
  ON ORG_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0092U01
  NO CASCADE BEFORE UPDATE
  ON ORG_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0092U51
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON ORG_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0092U52
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON ORG_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_ORG_LIST AFTER DELETE ON ORG_LIST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIST_MEMB WHERE LIST_MEMB.OWNR_PTPT_CD = old.OWNR_PTPT_CD AND
                                            LIST_MEMB.ORG_LIST_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* ORG_LIST  LIST_MEMB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e34", PARENT_OWNER="", PARENT_TABLE="ORG_LIST"
    CHILD_OWNER="", CHILD_TABLE="LIST_MEMB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0092_001", FK_COLUMNS="OWNR_PTPT_CD""ORG_LIST_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete ORG_LIST because LIST_MEMB exists.')
 !!


CREATE TRIGGER D0165U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON ORG_SV_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0165U01
  NO CASCADE BEFORE UPDATE
  ON ORG_SV_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0165U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON ORG_SV_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0165I51
  NO CASCADE BEFORE INSERT
  ON ORG_SV_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0165U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON ORG_SV_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0165I54
  NO CASCADE BEFORE INSERT
  ON ORG_SV_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0165U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON ORG_SV_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0165I53
  NO CASCADE BEFORE INSERT
  ON ORG_SV_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0165I52
  NO CASCADE BEFORE INSERT
  ON ORG_SV_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0397U01
  NO CASCADE BEFORE UPDATE
  ON OSEAS_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0012U01
  NO CASCADE BEFORE UPDATE
  ON OSEAS_ANML_PROOF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0011U01
  NO CASCADE BEFORE UPDATE
  ON OSEAS_ID_XREF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0283I51
  NO CASCADE BEFORE INSERT
  ON OTD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0283I52
  NO CASCADE BEFORE INSERT
  ON OTD_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0283U01
  NO CASCADE BEFORE UPDATE
  ON OTD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0283U51
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON OTD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0283U52
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON OTD_ANML
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284I54
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284U55
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284U52
  NO CASCADE BEFORE UPDATE OF 
                    lact_to_date_d
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.lact_to_date_d != new.lact_to_date_d
   OR old.lact_to_date_d IS NULL and new.lact_to_date_d IS NOT NULL
   OR old.lact_to_date_d IS NOT NULL and new.lact_to_date_d IS NULL)
SET new.lact_to_date =
  CASE WHEN new.lact_to_date_d IS NULL OR new.lact_to_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.lact_to_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.lact_to_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.lact_to_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284U51
  NO CASCADE BEFORE UPDATE OF 
                    lact_to_date
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.lact_to_date != new.lact_to_date
   OR old.lact_to_date IS NULL AND new.lact_to_date IS NOT NULL
   OR old.lact_to_date IS NOT NULL AND new.lact_to_date IS NULL)
SET new.lact_to_date_d =
  CASE WHEN new.lact_to_date = 0 OR new.lact_to_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.lact_to_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284I56
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284I55
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284U53
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284U54
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284I53
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284U01
  NO CASCADE BEFORE UPDATE
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0284I51
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.lact_to_date_d IS NULL 
  AND new.lact_to_date IS NOT NULL
   OR CHAR(new.lact_to_date_d,ISO) = '0001-01-01'
  AND new.lact_to_date IS NOT NULL)
SET new.lact_to_date_d =
  CASE WHEN new.lact_to_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.lact_to_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0284U56
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON OTD_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0284I52
  NO CASCADE BEFORE INSERT
  ON OTD_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.lact_to_date IS NULL 
  AND new.lact_to_date_d IS NOT NULL
  AND CHAR(new.lact_to_date_d,ISO) != '0001-01-01'
   OR new.lact_to_date = 0
  AND new.lact_to_date_d IS NOT NULL
  AND CHAR(new.lact_to_date_d,ISO) != '0001-01-01')
SET new.lact_to_date =
  CASE WHEN new.lact_to_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.lact_to_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.lact_to_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.lact_to_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_OTD_HERD AFTER DELETE ON OTD_HERD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM OTD_ANML WHERE OTD_ANML.MAP_REF = old.MAP_REF AND
                                           OTD_ANML.HERD_NUM = old.HERD_NUM AND
                                           OTD_ANML.PRINT_DATE = old.PRINT_DATE AND
                                           OTD_ANML.PRINT_TIME = old.PRINT_TIME) > 0)
    /* erwin Builtin Trigger */
    /* OTD_HERD  OTD_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009162", PARENT_OWNER="", PARENT_TABLE="OTD_HERD"
    CHILD_OWNER="", CHILD_TABLE="OTD_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0284_001", FK_COLUMNS="MAP_REF""HERD_NUM""PRINT_DATE""PRINT_TIME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete OTD_HERD because OTD_ANML exists.')
 !!


CREATE TRIGGER D0309U01
  NO CASCADE BEFORE UPDATE
  ON OUTPUT_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_OUTPUT_CAT AFTER DELETE ON OUTPUT_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_RQST WHERE RPRT_RQST.OUTPUT_CAT_PTPT_CD = old.PTPT_CD AND
                                            RPRT_RQST.OUTPUT_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* OUTPUT_CAT  RPRT_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c3", PARENT_OWNER="", PARENT_TABLE="OUTPUT_CAT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0309_001", FK_COLUMNS="OUTPUT_CAT_PTPT_CD""OUTPUT_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete OUTPUT_CAT because RPRT_RQST exists.')
 !!


CREATE TRIGGER D0567U01
  NO CASCADE BEFORE UPDATE
  ON PAR_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PAR_CLASS AFTER DELETE ON PAR_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HLTH_PROD WHERE HLTH_PROD.PAR_CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PAR_CLASS  HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ea2", PARENT_OWNER="", PARENT_TABLE="PAR_CLASS"
    CHILD_OWNER="", CHILD_TABLE="HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0567_001", FK_COLUMNS="PAR_CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PAR_CLASS because HLTH_PROD exists.')
 !!


CREATE TRIGGER D0021U01
  NO CASCADE BEFORE UPDATE
  ON PARTURITION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0021I51
  NO CASCADE BEFORE INSERT
  ON PARTURITION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0021I52
  NO CASCADE BEFORE INSERT
  ON PARTURITION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0021U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON PARTURITION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0021U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON PARTURITION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0110U02
  NO CASCADE BEFORE UPDATE
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0110D01
  AFTER DELETE
  ON PARTY
  REFERENCING OLD AS OLD
  FOR EACH ROW
DELETE FROM curr_party where (id = old.id )
 !!


CREATE TRIGGER D0110I01
  NO CASCADE BEFORE INSERT
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.srch_name = UPPER(new.name)
 !!


CREATE TRIGGER D0110U04
  AFTER UPDATE OF 
        lgl_name,
        lgl_entity_cd
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.lgl_name,' ') != VALUE(new.lgl_name,' ')
   OR VALUE(old.lgl_entity_cd,' ') != VALUE(new.lgl_entity_cd,' '))
INSERT INTO party_audit (
  party_id
, legal_name
, legal_entity_cd)
VALUES (
  old.id
, old.lgl_name
, old.lgl_entity_cd)
 !!


CREATE TRIGGER D0110D02
  AFTER DELETE
  ON PARTY
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (old.lgl_name IS NOT NULL
   OR old.lgl_entity_cd IS NOT NULL)
INSERT INTO party_audit (
  party_id
, legal_name
, legal_entity_cd)
VALUES (
  old.id
, old.lgl_name
, old.lgl_entity_cd)
 !!


CREATE TRIGGER D0110U01
  NO CASCADE BEFORE UPDATE OF 
                    name
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.srch_name = UPPER(new.name)
 !!


CREATE TRIGGER D0110I04
  NO CASCADE BEFORE INSERT
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_med_cd IS NOT NULL 
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'RPRT_MEDIUM_CD'
      AND c.cd = new.rprt_med_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110I04: invalid report medium code')
 !!


CREATE TRIGGER D0110I05
  NO CASCADE BEFORE INSERT
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.lgl_entity_cd IS NOT NULL 
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'LGL_ENTITY_CD'
      AND c.cd = new.lgl_entity_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110I05: invalid legal entity code')
 !!


CREATE TRIGGER D0110U06
  NO CASCADE BEFORE UPDATE OF 
                    rprt_med_cd
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rprt_med_cd IS NOT NULL
  AND VALUE(new.rprt_med_cd,'~') != VALUE(old.rprt_med_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'RPRT_MEDIUM_CD'
      AND c.cd = new.rprt_med_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110U06: invalid report medium code')
 !!


CREATE TRIGGER D0110U07
  NO CASCADE BEFORE UPDATE OF 
                    lgl_entity_cd
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.lgl_entity_cd IS NOT NULL
  AND VALUE(new.lgl_entity_cd,'~') != VALUE(old.lgl_entity_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'LGL_ENTITY_CD'
      AND c.cd = new.lgl_entity_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110U07: invalid legal entity code')
 !!


CREATE TRIGGER D0110I06
  NO CASCADE BEFORE INSERT
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tracka_sts_cd IS NOT NULL 
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TRACKA_STS_CD'
      AND c.cd = new.tracka_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110U08: invalid tracka status code')
 !!


CREATE TRIGGER D0110U08
  NO CASCADE BEFORE UPDATE OF 
                    tracka_sts_cd
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.tracka_sts_cd IS NOT NULL
  AND VALUE(new.tracka_sts_cd,'~') != VALUE(old.tracka_sts_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TRACKA_STS_CD'
      AND c.cd = new.tracka_sts_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0110'
('D0110U08: invalid rtacka status code')
 !!


CREATE TRIGGER D0110U05
  NO CASCADE BEFORE UPDATE OF 
                    pin
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.pin,'~~~~') != VALUE(old.pin,'~~~~'))
SET new.pin_upd_date = CURRENT DATE
 !!


CREATE TRIGGER D0110U10
  NO CASCADE BEFORE UPDATE OF 
                    pin_upd_ltr_ind
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.pin_upd_ltr_ind = 'Y'
  AND new.pin_upd_ltr_ind != VALUE(old.pin_upd_ltr_ind,'~'))
SET new.pin_upd_ltr_date = CURRENT DATE
 !!


CREATE TRIGGER D0110U03
  AFTER UPDATE
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE curr_party SET
  name = new.name,
  frst_name = new.frst_name,
  init = new.init,
  alt_name = new.alt_name,
  title = new.title,
  brth_date = new.brth_date,
  e_minda_help_ind = new.e_minda_help_ind,
  rprt_med_cd = new.rprt_med_cd,
  actv_ind = new.actv_ind,
  actv_ind_upd_date = new.actv_ind_upd_date,
  email_addr = new.email_addr,
  sort_name = VALUE(new.sort_name, ' '),
  gst_Num = new.gst_Num,
  pin = new.pin,
  pin_upd_date = new.pin_upd_date,
  pin_upd_ltr_ind = new.pin_upd_ltr_ind,
  pin_upd_ltr_date = new.pin_upd_ltr_date,
  upd_time = new.upd_time,
  susp_sv_ind = new.susp_sv_ind,
  invsmate_disc_pct = new.invsmate_disc_pct,
  invstest_disc_pct = new.invstest_disc_pct,
  logo_cd = new.logo_cd,
  srch_name = VALUE(new.srch_name, ' '),
  inet_ind = new.inet_ind,
  upd_user_id = new.upd_user_id,
  lgl_entity_cd = new.lgl_entity_cd,
  lgl_name = new.lgl_name,
  tracka_pswd = new.tracka_pswd,
  tracka_sts_cd = new.tracka_sts_cd,
  phone_ctct_name = new.phone_ctct_name,
  crm_id = new.crm_id,
  shareholder_elig_ind = new.shareholder_elig_ind,
  link_addr_ind = new.link_addr_ind,
  shareholder_elig_end_date = new.shareholder_elig_end_date
WHERE id = new.id
 !!


CREATE TRIGGER D0110I02
  AFTER INSERT
  ON PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO curr_party (
  id,
  name,
  frst_name,
  init,
  alt_name,
  title,
  brth_date,
  e_minda_help_ind,
  rprt_med_cd,
  actv_ind,
  actv_ind_upd_date,
  email_addr,
  sort_name,
  GST_Num,
  pin,
  pin_upd_date,
  pin_upd_ltr_ind,
  pin_upd_ltr_date,
  upd_time,
  susp_sv_ind,
  invsmate_disc_pct,
  invstest_disc_pct,
  logo_cd,
  srch_name,
  inet_ind,
  upd_user_id,
  lgl_entity_cd,
  lgl_name,
  tracka_pswd,
  tracka_sts_cd,
  phone_ctct_name,
  crm_id,
  shareholder_elig_ind,
  link_addr_ind,
  shareholder_elig_end_date)
VALUES (
  new.id,
  new.name,
  new.frst_name,
  new.init,
  new.alt_name,
  new.title,
  new.brth_date,
  new.e_minda_help_ind,
  new.rprt_med_cd,
  new.actv_ind,
  new.actv_ind_upd_date,
  new.email_addr,
  new.sort_name,
  new.GST_Num,
  new.pin,
  new.pin_upd_date,
  new.pin_upd_ltr_ind,
  new.pin_upd_ltr_date,
  new.upd_time,
  new.susp_sv_ind,
  new.invsmate_disc_pct,
  new.invstest_disc_pct,
  new.logo_cd,
  new.srch_name,
  new.inet_ind,
  new.upd_user_id,
  new.lgl_entity_cd,
  new.lgl_name,
  new.tracka_pswd,
  new.tracka_sts_cd,
  new.phone_ctct_name,
  new.crm_id,
  new.shareholder_elig_ind,
  new.link_addr_ind,
  new.shareholder_elig_end_date)
 !!


CREATE TRIGGER D0110U09
  AFTER UPDATE OF 
        phone_ctct_name
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
SET hd.phone_ctct_name = new.phone_ctct_name
WHERE hd.ownr_party_id = new.id
  AND hd.sr_area_ssn = (
    SELECT max(hd2.sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = hd.map_ref
      AND hd2.herd_num = hd.herd_num)
  AND EXISTS (
    SELECT 1 FROM herd h
    WHERE h.map_ref = hd.map_ref
      AND h.herd_num = hd.herd_num
      AND h.rgn_cd != ' '
      AND h.herd_cd > 0
      AND h.end_date_d IS NULL)
 !!


CREATE TRIGGER D0110U11
  AFTER UPDATE OF 
        link_addr_ind
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.link_addr_ind,'X') != VALUE(new.link_addr_ind,'X'))
UPDATE herd_dtl hd
SET hd.link_addr_ind = new.link_addr_ind
WHERE hd.ownr_party_id = new.id
  AND hd.sr_area_ssn = (
    SELECT max(hd2.sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = hd.map_ref
      AND hd2.herd_num = hd.herd_num)
  AND EXISTS (
    SELECT 1 FROM herd h
    WHERE h.map_ref = hd.map_ref
      AND h.herd_num = hd.herd_num
      AND h.rgn_cd != ' '
      AND h.herd_cd > 0
      AND h.end_date_d IS NULL)
 !!


CREATE TRIGGER D0110U12
  AFTER UPDATE OF 
        shareholder_elig_end_date
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.shareholder_elig_end_date,'2999-12-31') != VALUE(new.shareholder_elig_end_date,'2999-12-31'))
UPDATE herd_dtl hd
SET hd.shareholder_elig_end_date = new.shareholder_elig_end_date
WHERE hd.ownr_party_id = new.id
  AND hd.sr_area_ssn = (
    SELECT max(hd2.sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = hd.map_ref
      AND hd2.herd_num = hd.herd_num)
  AND EXISTS (
    SELECT 1 FROM herd h
    WHERE h.map_ref = hd.map_ref
      AND h.herd_num = hd.herd_num
      AND h.rgn_cd != ' '
      AND h.herd_cd > 0
      AND h.end_date_d IS NULL)
 !!


CREATE TRIGGER D0110U13
  AFTER UPDATE OF 
        shareholder_elig_ind
  ON PARTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.shareholder_elig_ind,'X') != VALUE(new.shareholder_elig_ind,'X'))
UPDATE herd_dtl hd
SET hd.shareholder_elig_ind = new.shareholder_elig_ind
WHERE hd.ownr_party_id = new.id
  AND hd.sr_area_ssn = (
    SELECT max(hd2.sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = hd.map_ref
      AND hd2.herd_num = hd.herd_num)
  AND EXISTS (
    SELECT 1 FROM herd h
    WHERE h.map_ref = hd.map_ref
      AND h.herd_num = hd.herd_num
      AND h.rgn_cd != ' '
      AND h.herd_cd > 0
      AND h.end_date_d IS NULL)
 !!


CREATE TRIGGER D0112I01
  AFTER INSERT
  ON PARTY_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE party_addr pa SET pa.end_date = (new.st_date - 1 DAYS) 
WHERE pa.addr_use_cd = new.addr_use_cd
  AND pa.party_id = new.party_id 
  AND pa.st_date < new.st_date
  AND pa.end_date IS NULL
 !!


CREATE TRIGGER D0112I02
  AFTER INSERT
  ON PARTY_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM party_addr cur
  WHERE cur.addr_use_cd = new.addr_use_cd
  AND cur.party_id = new.party_id
  AND cur.st_date != new.st_date
  AND new.st_date <= VALUE (cur.end_date, DATE('9999-12-31') )
  AND VALUE (new.end_date, DATE('9999-12-31') ) >= cur.st_date) )
SIGNAL SQLSTATE 'Z0112'
('D0112I02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0112U01
  AFTER UPDATE OF 
        st_date,
        addr_use_cd
  ON PARTY_ADDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE party_addr SET end_date = (new.st_date - 1 DAYS)
WHERE addr_use_cd = new.addr_use_cd
  AND party_id = new.party_id
  AND st_date != new.st_date
  AND end_date = (old.st_date - 1 DAYS)
 !!


CREATE TRIGGER D0112U02
  AFTER UPDATE OF 
        st_date,
        end_date
  ON PARTY_ADDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
SELECT 1 FROM party_addr pa
 WHERE pa.addr_use_cd = new.addr_use_cd
   AND pa.party_id = new.party_id
   AND pa.st_date != new.st_date
   AND new.st_date <= VALUE (pa.end_date, DATE('9999-12-31') )
   AND VALUE (new.end_date, DATE('9999-12-31') ) >= pa.st_date) )
SIGNAL SQLSTATE 'Z0112'
('D0112U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0112U06
  NO CASCADE BEFORE UPDATE
  ON PARTY_ADDR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0112I05
  AFTER INSERT
  ON PARTY_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (
      new.st_date <= CURRENT DATE
      AND VALUE(new.end_date, '9999-12-31') >= CURRENT DATE
     )
BEGIN ATOMIC
-- Update party table timestamp to enable changes to be identified
-- at the party level.
UPDATE party p
   SET upd_time = CURRENT TIMESTAMP
WHERE p.id = new.party_id;
-- Update curr_party if the address is effective immediately.
UPDATE curr_party cp
   SET
    (mail_addr_line_1,
     mail_addr_line_2,
     mail_addr_line_3,
     mail_addr_line_4,
     mail_addr_postcode
    ) =
   (
   SELECT
     da.line_1,
     da.line_2,
     da.line_3,
     da.line_4,
     da.postcode
   FROM disp_addr da
   WHERE da.id = new.addr_id
   ),
     care_of = new.care_of,
     attn    = new.attn
WHERE cp.id = new.party_id
  AND new.addr_use_cd = 'MAIL'
  AND new.st_date <= CURRENT DATE
  AND VALUE(new.end_date,'9999-12-31') >= CURRENT DATE
;
UPDATE curr_party cp
   SET
    (site_addr_line_1,
     site_addr_line_2,
     site_addr_line_3,
     site_addr_line_4,
     site_addr_postcode
    ) =
   (
   SELECT
     da.line_1,
     da.line_2,
     da.line_3,
     da.line_4,
     da.postcode
   FROM disp_addr da
     WHERE da.id = new.addr_id
     AND new.addr_use_cd = 'SITE'
   )
WHERE cp.id = new.party_id
  AND new.addr_use_cd = 'SITE'
  AND new.st_date <= CURRENT DATE
  AND VALUE(new.end_date,'9999-12-31') >= CURRENT DATE
;
END
 !!


CREATE TRIGGER D0112U05
  AFTER UPDATE
  ON PARTY_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
BEGIN ATOMIC
-- Update party table timestamp to enable changes to be identified
-- at the party level.
UPDATE party p
   SET upd_time = CURRENT TIMESTAMP
WHERE p.id = new.party_id
  AND new.st_date <= CURRENT DATE
  AND VALUE(new.end_date, '9999-12-31') >= CURRENT DATE;
-- Update curr_party if the address is effective immediately.
UPDATE curr_party cp
   SET
    (mail_addr_line_1,
     mail_addr_line_2,
     mail_addr_line_3,
     mail_addr_line_4,
     mail_addr_postcode
    ) =
   (
   SELECT
     da.line_1,
     da.line_2,
     da.line_3,
     da.line_4,
     da.postcode
     FROM disp_addr da
     WHERE da.id = new.addr_id
     AND new.addr_use_cd = 'MAIL'
     AND new.st_date <= CURRENT DATE
     AND VALUE(new.end_date, '9999-12-31') >= CURRENT DATE
   ),
     care_of = new.care_of,
     attn    = new.attn,
    (site_addr_line_1,
     site_addr_line_2,
     site_addr_line_3,
     site_addr_line_4,
     site_addr_postcode
    ) =
   (
   SELECT
     da.line_1,
     da.line_2,
     da.line_3,
     da.line_4,
     da.postcode
     FROM disp_addr da
     WHERE da.id = new.addr_id
     AND new.addr_use_cd = 'SITE'
     AND new.st_date <= CURRENT DATE
     AND VALUE(new.end_date, '9999-12-31') >= CURRENT DATE
   )
WHERE cp.id = new.party_id
  AND new.st_date <= CURRENT DATE
  AND VALUE(new.end_date, '9999-12-31') >= CURRENT DATE;
END
 !!


CREATE TRIGGER D0113U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_ASSOC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0114U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_ASSOC_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PARTY_ASSOC_TP AFTER DELETE ON PARTY_ASSOC_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_ASSOC WHERE PARTY_ASSOC.PARTY_ASSOC_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PARTY_ASSOC_TP  PARTY_ASSOC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009431", PARENT_OWNER="", PARENT_TABLE="PARTY_ASSOC_TP"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0114_001", FK_COLUMNS="PARTY_ASSOC_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PARTY_ASSOC_TP because PARTY_ASSOC exists.')
 !!


CREATE TRIGGER D0845U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0636U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_HLTH_FAVOURITE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0460U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0637U01
  NO CASCADE BEFORE UPDATE
  ON PARTY_PROP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0115U01
  NO CASCADE BEFORE UPDATE OF 
                    party_id,
                    party_role_cd,
                    st_date,
                    end_date
  ON PARTY_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM party_role pr
   WHERE pr.party_role_cd = new.party_role_cd
     AND pr.party_id = new.party_id
     AND pr.st_date != new.st_date
     AND pr.st_date != old.st_date
     AND new.st_date <= DATE (VALUE (pr.end_date, '9999-12-31') )
     AND DATE (VALUE (new.end_date, '9999-12-31') ) >= pr.st_date) )
SIGNAL SQLSTATE 'Z0115'
('D0115U01: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0115I01
  NO CASCADE BEFORE INSERT
  ON PARTY_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM party_role pr
   WHERE pr.party_role_cd = new.party_role_cd
     AND pr.party_id = new.party_id
     AND pr.st_date != new.st_date
     AND new.st_date <= DATE (VALUE (pr.end_date, '9999-12-31') )
     AND DATE (VALUE (new.end_date, '9999-12-31') ) >= pr.st_date) )
SIGNAL SQLSTATE 'Z0115'
('D0115I01: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0115U02
  NO CASCADE BEFORE UPDATE
  ON PARTY_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PARTY_ROLE AFTER DELETE ON PARTY_ROLE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPECIES_PARTY_ROLE WHERE SPECIES_PARTY_ROLE.PARTY_ID = old.PARTY_ID AND
                                                     SPECIES_PARTY_ROLE.PARTY_ROLE_CD = old.PARTY_ROLE_CD AND
                                                     SPECIES_PARTY_ROLE.ST_DATE = old.ST_DATE) > 0)
    /* erwin Builtin Trigger */
    /* PARTY_ROLE  SPECIES_PARTY_ROLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f54", PARENT_OWNER="", PARENT_TABLE="PARTY_ROLE"
    CHILD_OWNER="", CHILD_TABLE="SPECIES_PARTY_ROLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0115_001", FK_COLUMNS="PARTY_ID""PARTY_ROLE_CD""ST_DATE" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PARTY_ROLE because SPECIES_PARTY_ROLE exists.')
 !!


CREATE TRIGGER D0069I52
  NO CASCADE BEFORE INSERT
  ON PED_STUD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.reg_date IS NULL 
  AND new.reg_date_d IS NOT NULL
  AND CHAR(new.reg_date_d,ISO) != '0001-01-01'
   OR new.reg_date = 0
  AND new.reg_date_d IS NOT NULL
  AND CHAR(new.reg_date_d,ISO) != '0001-01-01')
SET new.reg_date =
  CASE WHEN new.reg_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.reg_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.reg_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.reg_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0069U52
  NO CASCADE BEFORE UPDATE OF 
                    reg_date_d
  ON PED_STUD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.reg_date_d != new.reg_date_d
   OR old.reg_date_d IS NULL and new.reg_date_d IS NOT NULL
   OR old.reg_date_d IS NOT NULL and new.reg_date_d IS NULL)
SET new.reg_date =
  CASE WHEN new.reg_date_d IS NULL OR new.reg_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.reg_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.reg_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.reg_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0069I51
  NO CASCADE BEFORE INSERT
  ON PED_STUD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.reg_date_d IS NULL 
  AND new.reg_date IS NOT NULL
   OR CHAR(new.reg_date_d,ISO) = '0001-01-01'
  AND new.reg_date IS NOT NULL)
SET new.reg_date_d =
  CASE WHEN new.reg_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.reg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0069U51
  NO CASCADE BEFORE UPDATE OF 
                    reg_date
  ON PED_STUD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.reg_date != new.reg_date
   OR old.reg_date IS NULL AND new.reg_date IS NOT NULL
   OR old.reg_date IS NOT NULL AND new.reg_date IS NULL)
SET new.reg_date_d =
  CASE WHEN new.reg_date = 0 OR new.reg_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.reg_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0069U01
  NO CASCADE BEFORE UPDATE
  ON PED_STUD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0116I05
  AFTER INSERT
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_tp_cd = 'E')
INSERT INTO ab_fld_empl (
  ptpt_cd
, chk_digit
, alt_area_cd
, alt_phone_num
, st_date_sts_cd
, overall_size
, frst_work_date
, empl_yrs
, insem_pay_rate
, min_insem_paid
, alias
, partner_name
, cmt
)
VALUES (
  new.anml_id_pfx_cd
, MOD(ASCII(LEFT(new.anml_id_pfx_cd,1)) - 64 + (ASCII(SUBSTR(new.anml_id_pfx_cd,2,1)) - 64) * 2 + (ASCII(SUBSTR(new.anml_id_pfx_cd,3,1)) - 64) * 4+(ASCII(SUBSTR(new.anml_id_pfx_cd,4,1)) - 64) * 8,9) + 1 
, ' '
, ' '
, 'R'
, 0
, 0
, 0
, 0
, 0
, ' '
, ' '
, ' '
)
 !!


CREATE TRIGGER D0116U04
  AFTER UPDATE OF 
        end_date
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.end_date,'2999-12-31') <= CURRENT DATE
  AND NOT EXISTS (
    SELECT 1 FROM pfx_user pu
    WHERE pu.party_id = new.party_id
      AND pu.anml_id_pfx_cd = new.anml_id_pfx_cd
      AND pu.st_date != new.st_date
      AND VALUE(pu.end_date,'2999-12-31') >= CURRENT DATE))
DELETE FROM curr_pfx_user cpu
WHERE cpu.anml_id_pfx_cd = new.anml_id_pfx_cd
  AND cpu.party_id = new.party_id
 !!


CREATE TRIGGER D0116U06
  AFTER UPDATE
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE
  AND VALUE(new.end_date,'2999-12-31') > CURRENT DATE
  AND NOT EXISTS (
    SELECT 1 FROM curr_pfx_user cpu
    WHERE cpu.party_id = new.party_id
      AND cpu.anml_id_pfx_cd = new.anml_id_pfx_cd))
INSERT INTO curr_pfx_user (
  party_id,
  anml_id_pfx_cd,
  ptpt_tp_cd)
VALUES (
  new.party_id,
  new.anml_id_pfx_cd,
  new.ptpt_tp_cd)
 !!


CREATE TRIGGER D0116D01
  AFTER DELETE
  ON PFX_USER
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (CURRENT_DATE >= old.st_date
   AND CURRENT_DATE <= VALUE(old.end_date, '9999-12-31'))
DELETE FROM curr_pfx_user
 WHERE (party_id = old.party_id
   AND anml_id_pfx_cd = old.anml_id_pfx_cd)
 !!


CREATE TRIGGER D0116I01
  AFTER INSERT
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE pfx_user SET end_date = (new.st_date - 1 DAYS)
 WHERE anml_id_pfx_cd = new.anml_id_pfx_cd
   AND st_date != new.st_date
   AND end_date IS NULL
 !!


CREATE TRIGGER D0116I02
  AFTER INSERT
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM pfx_user pu
   WHERE pu.anml_id_pfx_cd = new.anml_id_pfx_cd
     AND (pu.st_date != new.st_date OR pu.party_id != new.party_id)
     AND new.st_date <= VALUE (pu.end_date, DATE('9999-12-31') )
     AND VALUE (new.end_date, DATE('9999-12-31') ) >= pu.st_date) )
SIGNAL SQLSTATE 'Z0116'
('D0116I02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0116I04
  AFTER INSERT
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (CURRENT_DATE >= new.st_date
   AND CURRENT_DATE <= VALUE(new.end_date, '9999-12-31'))
INSERT INTO curr_pfx_user (
  party_id,
  anml_id_pfx_cd,
  ptpt_tp_cd)
VALUES (
  new.party_id,
  new.anml_id_pfx_cd,
  new.ptpt_tp_cd)
 !!


CREATE TRIGGER D0116U01
  AFTER UPDATE OF 
        st_date
  ON PFX_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE pfx_user SET end_date = (new.st_date - 1 DAYS)
  WHERE anml_id_pfx_cd = new.anml_id_pfx_cd
    AND st_date != new.st_date
    AND end_date = (old.st_date - 1 DAYS)
 !!


CREATE TRIGGER D0116U02
  AFTER UPDATE OF 
        st_date,
        end_date
  ON PFX_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM pfx_user pu
   WHERE pu.anml_id_pfx_cd = new.anml_id_pfx_cd
     AND (pu.st_date != new.st_date OR pu.party_id != new.party_id)
     AND pu.st_date != new.st_date
     AND new.st_date <= VALUE (pu.end_date, DATE('9999-12-31') )
     AND VALUE (new.end_date, DATE('9999-12-31') ) >= pu.st_date) )
SIGNAL SQLSTATE 'Z0116'
('D0116U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0116U05
  NO CASCADE BEFORE UPDATE
  ON PFX_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0116I03
  AFTER INSERT
  ON PFX_USER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE)
UPDATE party SET upd_time = CURRENT TIMESTAMP
WHERE id = new.party_id
 !!


CREATE TRIGGER D0116U03
  AFTER UPDATE
  ON PFX_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE)
UPDATE party SET upd_time = CURRENT TIMESTAMP
WHERE id = new.party_id
 !!


CREATE TRIGGER D0292U01
  NO CASCADE BEFORE UPDATE
  ON PGM_DB_SCRTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PGM_DB_SCRTY AFTER DELETE ON PGM_DB_SCRTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_TBL_SCRTY WHERE PGM_TBL_SCRTY.PGM_DB_SCRTY_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* PGM_DB_SCRTY  PGM_TBL_SCRTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008daf", PARENT_OWNER="", PARENT_TABLE="PGM_DB_SCRTY"
    CHILD_OWNER="", CHILD_TABLE="PGM_TBL_SCRTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0292_001", FK_COLUMNS="PGM_DB_SCRTY_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PGM_DB_SCRTY because PGM_TBL_SCRTY exists.')
 !!


CREATE TRIGGER D0711U01
  NO CASCADE BEFORE UPDATE
  ON PGM_RESTART
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0291U01
  NO CASCADE BEFORE UPDATE
  ON PGM_SHORT_CUT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0770U01
  NO CASCADE BEFORE UPDATE
  ON PGM_TBL_ACCESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0296U01
  NO CASCADE BEFORE UPDATE
  ON PGM_TBL_SCRTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0153U01
  NO CASCADE BEFORE UPDATE
  ON PHENOTYPE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0117U02
  NO CASCADE BEFORE UPDATE OF 
                    st_date,
                    end_date
  ON PHONE_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM phone_num pn
  WHERE
    pn.party_id = new.party_id AND
    pn.phone_num_tp_cd = new.phone_num_tp_cd AND
    pn.st_date != old.st_date AND
    new.st_date != old.st_date AND
    new.st_date <= DATE (VALUE (pn.end_date, '9999-12-31') ) AND
    DATE (VALUE (new.end_date, '9999-12-31') ) >= pn.st_date AND
   (old.st_date - 1 DAYS != DATE (VALUE (pn.end_date, '9999-12-31') )
      OR
    new.st_date <= pn.st_date)
    OR
   (
    pn.party_id = new.party_id AND
    pn.phone_num_tp_cd = new.phone_num_tp_cd AND
    pn.st_date != old.st_date AND
    DATE (VALUE (new.end_date, '9999-12-31') ) !=
    DATE (VALUE (old.end_date, '9999-12-31') ) AND
    new.st_date <= DATE (VALUE (pn.end_date, '9999-12-31') ) AND
    DATE (VALUE (new.end_date, '9999-12-31') ) >= pn.st_date
   ) ) )
SIGNAL SQLSTATE 'Z0117'
('D0117U02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0117U06
  NO CASCADE BEFORE UPDATE
  ON PHONE_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0117U01
  AFTER UPDATE OF 
        st_date,
        phone_num_tp_cd
  ON PHONE_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
UPDATE phone_num SET end_date = (new.st_date - 1 DAYS)
WHERE phone_num_tp_cd = new.phone_num_tp_cd
  AND party_id = new.party_id
  AND st_date != new.st_date
  AND end_date = (old.st_date - 1 DAYS)
 !!


CREATE TRIGGER D0117I01
  AFTER INSERT
  ON PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE phone_num SET end_date = (new.st_date - 1 DAYS)
  WHERE phone_num_tp_cd = new.phone_num_tp_cd
  AND party_id = new.party_id
  AND st_date < new.st_date
  AND end_date IS NULL
 !!


CREATE TRIGGER D0117I02
  NO CASCADE BEFORE INSERT
  ON PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (SELECT 1 FROM phone_num pn
  WHERE
    pn.phone_num_tp_cd = new.phone_num_tp_cd AND
    pn.party_id = new.party_id AND
    DATE (VALUE (new.end_date, '9999-12-31') ) >= pn.st_date AND
   (new.st_date <= pn.end_date OR
    new.st_date <= pn.st_date) ) )
SIGNAL SQLSTATE 'Z0117'
('D0117I02: the period overlaps with an existing period')
 !!


CREATE TRIGGER D0117D01
  AFTER DELETE
  ON PHONE_NUM
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (
      old.st_date <= CURRENT DATE
      AND VALUE(old.end_date, '9999-12-31') >= CURRENT_DATE
     )
BEGIN ATOMIC
UPDATE curr_party cp
SET
  ctry_cd_1 = null,
  area_cd_1 = null,
  local_num_1 = null,
  ext_1 = null,
  phone_num_1 = null
WHERE cp.id = old.party_id
AND old.phone_num_tp_cd = '1';
UPDATE Curr_party cp
SET
  ctry_cd_2 = null,
  area_cd_2 = null,
  local_num_2 = null,
  ext_2 = null,
  phone_num_2 = null
WHERE cp.id = old.party_id
AND old.phone_num_tp_cd = '2';
UPDATE Curr_party cp
SET
  ctry_cd_fax = null,
  area_cd_fax = null,
  local_num_fax = null,
  ext_fax = null,
  phone_num_fax = null
WHERE cp.id = old.party_id
AND old.phone_num_tp_cd = 'FAX';
END
 !!


CREATE TRIGGER D0117I04
  AFTER INSERT
  ON PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE
  AND VALUE(new.end_date, '9999-12-31') >= CURRENT_DATE)
BEGIN ATOMIC
UPDATE curr_party cp
SET
  ctry_cd_1 = new.ctry_cd,
  area_cd_1 = new.area_cd,
  local_num_1 = new.local_num,
  ext_1 = new.ext,
  phone_num_1 =
    CASE WHEN VALUE(new.ctry_cd, '64') = '64' THEN
      LTRIM(LTRIM(RTRIM(VALUE(new.area_cd, ' '))) || ' ') ||
      LTRIM(LTRIM(RTRIM(VALUE(new.local_num, ' '))) || ' ') ||
      LTRIM(VALUE(new.ext, ' '))
    ELSE
      '+' ||
      LTRIM(RTRIM(new.ctry_cd)) || ' ' ||
      LTRIM(LTRIM(RTRIM(VALUE(new.area_cd, ' '))) || ' ') ||
      LTRIM(LTRIM(RTRIM(VALUE(new.local_num, ' '))) || ' ') ||
      LTRIM(VALUE(new.ext, ' '))
    END
WHERE
 !!


CREATE TRIGGER D0117U04
  AFTER UPDATE
  ON PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE
  AND VALUE(new.end_date, '9999-12-31') >= CURRENT_DATE)
BEGIN ATOMIC
UPDATE curr_party cp
SET
  ctry_cd_1 = new.ctry_cd,
  area_cd_1 = new.area_cd,
  local_num_1 = new.local_num,
  ext_1 = new.ext,
  phone_num_1 =
    CASE WHEN VALUE(new.ctry_cd, '64') = '64' THEN
      LTRIM(LTRIM(RTRIM(VALUE(new.area_cd, ' '))) || ' ') ||
      LTRIM(LTRIM(RTRIM(VALUE(new.local_num, ' '))) || ' ') ||
      LTRIM(VALUE(new.ext, ' '))
    ELSE
      '+' ||
      LTRIM(RTRIM(new.ctry_cd)) || ' ' ||
      LTRIM(LTRIM(RTRIM(VALUE(new.area_cd, ' '))) || ' ') ||
      LTRIM(LTRIM(RTRIM(VALUE(new.local_num, ' '))) || ' ') ||
      LTRIM(VALUE(new.ext, ' '))
    END
WHERE
 !!


CREATE TRIGGER D0117U05
  AFTER UPDATE OF 
        end_date
  ON PHONE_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.end_date, '9999-12-31') <>
      VALUE(new.end_date, '9999-12-31')
AND VALUE(old.end_date, '9999-12-31') >= CURRENT DATE
AND VALUE(new.end_date, '9999-12-31') <= CURRENT DATE
AND NOT EXISTS (
    SELECT 1 FROM phone_num pn2
    WHERE pn2.party_id = new.party_id
      AND pn2.phone_num_tp_cd = new.phone_num_tp_cd
      AND (pn2.st_date - 1 DAYS) =
        VALUE(new.end_date, '9999-12-31')))
BEGIN ATOMIC
UPDATE curr_party cp
SET
  ctry_cd_1 = NULL,
  area_cd_1 = NULL,
  local_num_1 = NULL,
  ext_1 = NULL,
  phone_num_1 = NULL
WHERE cp.id = new.party_id
AND new.phone_num_tp_cd = '1';
UPDATE curr_party cp
SET
  ctry_cd_2 = NULL,
  area_cd_2 = NULL,
  local_num_2 = NULL,
  ext_2 = NULL,
  phone_num_2 = NULL
WHERE cp.id = new.party_id
AND new.phone_num_tp_cd = '2';
UPDATE curr_party cp
SET
  ctry_cd_fax = NULL,
  area_cd_fax = NULL,
  local_num_fax = NULL,
  ext_fax = NULL,
  phone_num_fax = NULL
WHERE cp.id = new.party_id
AND new.phone_num_tp_cd = 'FAX';
END
 !!


CREATE TRIGGER D0117I03
  AFTER INSERT
  ON PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE)
UPDATE party SET upd_time = CURRENT TIMESTAMP
WHERE id = new.party_id
 !!


CREATE TRIGGER D0117U03
  AFTER UPDATE
  ON PHONE_NUM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date <= CURRENT DATE)
UPDATE party SET upd_time = CURRENT TIMESTAMP
WHERE id = new.party_id
 !!


CREATE TRIGGER D0118U01
  NO CASCADE BEFORE UPDATE
  ON PHONE_NUM_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PHONE_NUM_TP AFTER DELETE ON PHONE_NUM_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SOF_PHONE_NUM WHERE SOF_PHONE_NUM.PHONE_NUM_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PHONE_NUM_TP  SOF_PHONE_NUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000093fb", PARENT_OWNER="", PARENT_TABLE="PHONE_NUM_TP"
    CHILD_OWNER="", CHILD_TABLE="SOF_PHONE_NUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0118_001", FK_COLUMNS="PHONE_NUM_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PHONE_NUM_TP because SOF_PHONE_NUM exists.')
 !!

CREATE  TRIGGER tD_PHONE_NUM_TP2 AFTER DELETE ON PHONE_NUM_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PHONE_NUM WHERE PHONE_NUM.PHONE_NUM_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PHONE_NUM_TP  PHONE_NUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000846d", PARENT_OWNER="", PARENT_TABLE="PHONE_NUM_TP"
    CHILD_OWNER="", CHILD_TABLE="PHONE_NUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_164", FK_COLUMNS="PHONE_NUM_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PHONE_NUM_TP because PHONE_NUM exists.')
 !!


CREATE TRIGGER D0505I51
  NO CASCADE BEFORE INSERT
  ON POOL_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0505I52
  NO CASCADE BEFORE INSERT
  ON POOL_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0505U01
  NO CASCADE BEFORE UPDATE
  ON POOL_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0505U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON POOL_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0505U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON POOL_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0303U01
  NO CASCADE BEFORE UPDATE
  ON POSITION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_POSITION AFTER DELETE ON POSITION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POSN_DEPT WHERE POSN_DEPT.POSN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* POSITION  POSN_DEPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000080be", PARENT_OWNER="", PARENT_TABLE="POSITION"
    CHILD_OWNER="", CHILD_TABLE="POSN_DEPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0303_001", FK_COLUMNS="POSN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POSITION because POSN_DEPT exists.')
 !!


CREATE TRIGGER D0598U01
  NO CASCADE BEFORE UPDATE
  ON POSN_DEPT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_POSN_DEPT AFTER DELETE ON POSN_DEPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TEAM_MATRIX WHERE TEAM_MATRIX.POSN_ID = old.POSN_ID AND
                                              TEAM_MATRIX.DEPT_ID = old.DEPT_ID) > 0)
    /* erwin Builtin Trigger */
    /* POSN_DEPT  TEAM_MATRIX on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bda", PARENT_OWNER="", PARENT_TABLE="POSN_DEPT"
    CHILD_OWNER="", CHILD_TABLE="TEAM_MATRIX"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0598_002", FK_COLUMNS="POSN_ID""DEPT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POSN_DEPT because TEAM_MATRIX exists.')
 !!

CREATE  TRIGGER tD_POSN_DEPT2 AFTER DELETE ON POSN_DEPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TABLE_STAKEHOLDER WHERE TABLE_STAKEHOLDER.POSN_ID = old.POSN_ID AND
                                                    TABLE_STAKEHOLDER.DEPT_ID = old.DEPT_ID) > 0)
    /* erwin Builtin Trigger */
    /* POSN_DEPT  TABLE_STAKEHOLDER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096cd", PARENT_OWNER="", PARENT_TABLE="POSN_DEPT"
    CHILD_OWNER="", CHILD_TABLE="TABLE_STAKEHOLDER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0598_003", FK_COLUMNS="POSN_ID""DEPT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POSN_DEPT because TABLE_STAKEHOLDER exists.')
 !!

CREATE  TRIGGER tD_POSN_DEPT3 AFTER DELETE ON POSN_DEPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EMPL_POSN WHERE EMPL_POSN.POSN_ID = old.POSN_ID AND
                                            EMPL_POSN.DEPT_ID = old.DEPT_ID) > 0)
    /* erwin Builtin Trigger */
    /* POSN_DEPT  EMPL_POSN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d7c", PARENT_OWNER="", PARENT_TABLE="POSN_DEPT"
    CHILD_OWNER="", CHILD_TABLE="EMPL_POSN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0598_001", FK_COLUMNS="POSN_ID""DEPT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POSN_DEPT because EMPL_POSN exists.')
 !!


CREATE TRIGGER D0863U01
  NO CASCADE BEFORE UPDATE
  ON POTENTIAL_BULL_PARENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_POTENTIAL_BULL_ AFTER DELETE ON POTENTIAL_BULL_PARENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POTENTIAL_BULL_PARENT_DECISION WHERE POTENTIAL_BULL_PARENT_DECISION.POTENTIAL_BULL_PARENT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* POTENTIAL_BULL_PARENT  POTENTIAL_BULL_PARENT_DECISION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000ae5d", PARENT_OWNER="", PARENT_TABLE="POTENTIAL_BULL_PARENT"
    CHILD_OWNER="", CHILD_TABLE="POTENTIAL_BULL_PARENT_DECISION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0871_001", FK_COLUMNS="POTENTIAL_BULL_PARENT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POTENTIAL_BULL_PARENT because POTENTIAL_BULL_PARENT_DECISION exists.')
 !!


CREATE TRIGGER D0864U01
  NO CASCADE BEFORE UPDATE
  ON POTENTIAL_BULL_PARENT_DECISION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
   ,new.upd_user_id = USER
 !!


CREATE TRIGGER D0864I01
  NO CASCADE BEFORE INSERT
  ON POTENTIAL_BULL_PARENT_DECISION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM bull_acq_sire_decision basd
  WHERE basd.cd = new.sire_decision_cd
    AND basd.end_date < CURRENT DATE))
SIGNAL SQLSTATE 'Z0872'
('D0872I01: bull decision code no longer used')
 !!


CREATE TRIGGER D0864U02
  NO CASCADE BEFORE UPDATE
  ON POTENTIAL_BULL_PARENT_DECISION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.sire_decision_cd,'~~') <> VALUE(new.sire_decision_cd,'~~')
 AND EXISTS (
   SELECT 1 FROM bull_acq_sire_decision basd
   WHERE basd.cd = new.sire_decision_cd
     AND basd.end_date < CURRENT DATE))
SIGNAL SQLSTATE 'Z0872'
('D0872U02: bull decision code no longer used')
 !!


CREATE TRIGGER D0864I02
  NO CASCADE BEFORE INSERT
  ON POTENTIAL_BULL_PARENT_DECISION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
  SELECT 1 FROM bull_acq_dam_dcsn badd
  WHERE badd.cd = new.dam_decision_cd
    AND badd.end_date_d < CURRENT DATE))
SIGNAL SQLSTATE 'Z0872'
('D0872I02: dam decision code no longer used')
 !!


CREATE TRIGGER D0864U03
  NO CASCADE BEFORE UPDATE
  ON POTENTIAL_BULL_PARENT_DECISION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(old.dam_decision_cd,'~~') <> VALUE(new.dam_decision_cd,'~~')
 AND EXISTS (
   SELECT 1 FROM bull_acq_dam_dcsn badd
   WHERE badd.cd = new.dam_decision_cd
     AND badd.end_date_d < CURRENT DATE))
SIGNAL SQLSTATE 'Z0872'
('D0872U03: dam decision code no longer used')
 !!


CREATE  TRIGGER tD_POTENTIAL_BULL_ AFTER DELETE ON POTENTIAL_BULL_PARENT_DECISION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_CALF_CONTRACT_SIRE_ASSUM WHERE BULL_CALF_CONTRACT_SIRE_ASSUM.BULL_PARENT_DECISION_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* POTENTIAL_BULL_PARENT_DECISION  BULL_CALF_CONTRACT_SIRE_ASSUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000b4d2", PARENT_OWNER="", PARENT_TABLE="POTENTIAL_BULL_PARENT_DECISION"
    CHILD_OWNER="", CHILD_TABLE="BULL_CALF_CONTRACT_SIRE_ASSUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0872_001", FK_COLUMNS="BULL_PARENT_DECISION_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete POTENTIAL_BULL_PARENT_DECISION because BULL_CALF_CONTRACT_SIRE_ASSUM exists.')
 !!


CREATE TRIGGER D0316U01
  NO CASCADE BEFORE UPDATE
  ON PRDCT_DTR_PROB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0258U01
  NO CASCADE BEFORE UPDATE
  ON PRE_MTNG_HEAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0051I01
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1 FROM fate_cause fc
   WHERE fc.cd = new.fate_cause_cd) )
-- the fate cause code does not exist in the fate_cause table
SIGNAL SQLSTATE 'Z0051'
('D0051I01: the fate cause code must exist in the reference table')
 !!


CREATE TRIGGER D0051I51
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_end_date_d IS NULL 
  AND new.anml_num_end_date IS NOT NULL
   OR CHAR(new.anml_num_end_date_d,ISO) = '0001-01-01'
  AND new.anml_num_end_date IS NOT NULL)
SET new.anml_num_end_date_d =
  CASE WHEN new.anml_num_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051I52
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_end_date IS NULL 
  AND new.anml_num_end_date_d IS NOT NULL
  AND CHAR(new.anml_num_end_date_d,ISO) != '0001-01-01'
   OR new.anml_num_end_date = 0
  AND new.anml_num_end_date_d IS NOT NULL
  AND CHAR(new.anml_num_end_date_d,ISO) != '0001-01-01')
SET new.anml_num_end_date =
  CASE WHEN new.anml_num_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051I53
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date_d IS NULL 
  AND new.anml_num_st_date IS NOT NULL
   OR CHAR(new.anml_num_st_date_d,ISO) = '0001-01-01'
  AND new.anml_num_st_date IS NOT NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051I54
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.anml_num_st_date IS NULL 
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01'
   OR new.anml_num_st_date = 0
  AND new.anml_num_st_date_d IS NOT NULL
  AND CHAR(new.anml_num_st_date_d,ISO) != '0001-01-01')
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051I55
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date_d IS NULL 
  AND new.xfer_in_date IS NOT NULL
   OR CHAR(new.xfer_in_date_d,ISO) = '0001-01-01'
  AND new.xfer_in_date IS NOT NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051I56
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_in_date IS NULL 
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01'
   OR new.xfer_in_date = 0
  AND new.xfer_in_date_d IS NOT NULL
  AND CHAR(new.xfer_in_date_d,ISO) != '0001-01-01')
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051I57
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_out_date_d IS NULL 
  AND new.xfer_out_date IS NOT NULL
   OR CHAR(new.xfer_out_date_d,ISO) = '0001-01-01'
  AND new.xfer_out_date IS NOT NULL)
SET new.xfer_out_date_d =
  CASE WHEN new.xfer_out_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_out_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051I58
  NO CASCADE BEFORE INSERT
  ON PREV_ANML_LOCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.xfer_out_date IS NULL 
  AND new.xfer_out_date_d IS NOT NULL
  AND CHAR(new.xfer_out_date_d,ISO) != '0001-01-01'
   OR new.xfer_out_date = 0
  AND new.xfer_out_date_d IS NOT NULL
  AND CHAR(new.xfer_out_date_d,ISO) != '0001-01-01')
SET new.xfer_out_date =
  CASE WHEN new.xfer_out_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_out_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051U01
  NO CASCADE BEFORE UPDATE OF 
                    fate_cause_cd
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1
  FROM fate_cause fc
  WHERE fc.cd = new.fate_cause_cd) )
-- the fate cause code does not exist in the fate_cause table
SIGNAL SQLSTATE 'Z0051'
('D0051U01: the fate cause code must exist in the reference table')
 !!


CREATE TRIGGER D0051U02
  NO CASCADE BEFORE UPDATE
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0051U51
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_end_date
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_end_date != new.anml_num_end_date
   OR old.anml_num_end_date IS NULL AND new.anml_num_end_date IS NOT NULL
   OR old.anml_num_end_date IS NOT NULL AND new.anml_num_end_date IS NULL)
SET new.anml_num_end_date_d =
  CASE WHEN new.anml_num_end_date = 0 OR new.anml_num_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051U52
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_end_date_d
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_end_date_d != new.anml_num_end_date_d
   OR old.anml_num_end_date_d IS NULL and new.anml_num_end_date_d IS NOT NULL
   OR old.anml_num_end_date_d IS NOT NULL and new.anml_num_end_date_d IS NULL)
SET new.anml_num_end_date =
  CASE WHEN new.anml_num_end_date_d IS NULL OR new.anml_num_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051U53
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date != new.anml_num_st_date
   OR old.anml_num_st_date IS NULL AND new.anml_num_st_date IS NOT NULL
   OR old.anml_num_st_date IS NOT NULL AND new.anml_num_st_date IS NULL)
SET new.anml_num_st_date_d =
  CASE WHEN new.anml_num_st_date = 0 OR new.anml_num_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.anml_num_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051U54
  NO CASCADE BEFORE UPDATE OF 
                    anml_num_st_date_d
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_num_st_date_d != new.anml_num_st_date_d
   OR old.anml_num_st_date_d IS NULL and new.anml_num_st_date_d IS NOT NULL
   OR old.anml_num_st_date_d IS NOT NULL and new.anml_num_st_date_d IS NULL)
SET new.anml_num_st_date =
  CASE WHEN new.anml_num_st_date_d IS NULL OR new.anml_num_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.anml_num_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.anml_num_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051U55
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date != new.xfer_in_date
   OR old.xfer_in_date IS NULL AND new.xfer_in_date IS NOT NULL
   OR old.xfer_in_date IS NOT NULL AND new.xfer_in_date IS NULL)
SET new.xfer_in_date_d =
  CASE WHEN new.xfer_in_date = 0 OR new.xfer_in_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_in_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051U56
  NO CASCADE BEFORE UPDATE OF 
                    xfer_in_date_d
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_in_date_d != new.xfer_in_date_d
   OR old.xfer_in_date_d IS NULL and new.xfer_in_date_d IS NOT NULL
   OR old.xfer_in_date_d IS NOT NULL and new.xfer_in_date_d IS NULL)
SET new.xfer_in_date =
  CASE WHEN new.xfer_in_date_d IS NULL OR new.xfer_in_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_in_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_in_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051U57
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_date
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_out_date != new.xfer_out_date
   OR old.xfer_out_date IS NULL AND new.xfer_out_date IS NOT NULL
   OR old.xfer_out_date IS NOT NULL AND new.xfer_out_date IS NULL)
SET new.xfer_out_date_d =
  CASE WHEN new.xfer_out_date = 0 OR new.xfer_out_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.xfer_out_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0051U58
  NO CASCADE BEFORE UPDATE OF 
                    xfer_out_date_d
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.xfer_out_date_d != new.xfer_out_date_d
   OR old.xfer_out_date_d IS NULL and new.xfer_out_date_d IS NOT NULL
   OR old.xfer_out_date_d IS NOT NULL and new.xfer_out_date_d IS NULL)
SET new.xfer_out_date =
  CASE WHEN new.xfer_out_date_d IS NULL OR new.xfer_out_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.xfer_out_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.xfer_out_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0051D01
  AFTER DELETE
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_prev_anml_locn (
  anml_key
, upd_time
, map_ref
, herd_num
, cow_num_alpha
, cow_num
, num
, fate_cd
, fate_cause_cd
, export_ctry_cd
, rcd_date
, xfer_in_date_d
, xfer_out_date_d
, anml_num_st_date_d
, anml_num_end_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.cow_num_alpha
, old.cow_num
, old.num
, old.fate_cd
, old.fate_cause_cd
, old.export_ctry_cd
, old.rcd_date
, old.xfer_in_date_d
, old.xfer_out_date_d
, old.anml_num_st_date_d
, old.anml_num_end_date_d
)
 !!


CREATE TRIGGER D0051U03
  AFTER UPDATE OF 
        anml_key,
        xfer_in_date_d,
        anml_num_st_date_d
  ON PREV_ANML_LOCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key
   OR old.xfer_in_date_d != new.xfer_in_date_d
   OR old.anml_num_st_date_d != new.anml_num_st_date_d)
INSERT INTO del_prev_anml_locn (
  anml_key
, upd_time
, map_ref
, herd_num
, cow_num_alpha
, cow_num
, num
, fate_cd
, fate_cause_cd
, export_ctry_cd
, rcd_date
, xfer_in_date_d
, xfer_out_date_d
, anml_num_st_date_d
, anml_num_end_date_d
) VALUES (
  old.anml_key
, old.upd_time
, old.map_ref
, old.herd_num
, old.cow_num_alpha
, old.cow_num
, old.num
, old.fate_cd
, old.fate_cause_cd
, old.export_ctry_cd
, old.rcd_date
, old.xfer_in_date_d
, old.xfer_out_date_d
, old.anml_num_st_date_d
, old.anml_num_end_date_d
)
 !!


CREATE TRIGGER D0356I01
  NO CASCADE BEFORE INSERT
  ON PRGNY_HDBK_DFLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss1
    WHERE new.prgny_hdbk_sect_id = hss1.id
      and new.bsoc_party_id = hss1.bsoc_party_id)
   OR new.sire_hdbk_sect_id IS NOT NULL
  AND NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss2
    WHERE new.sire_hdbk_sect_id = hss2.id
      and new.bsoc_party_id = hss2.bsoc_party_id)
   OR new.dam_hdbk_sect_id IS NOT NULL
  AND NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss3
    WHERE new.dam_hdbk_sect_id = hss3.id
      and new.bsoc_party_id = hss3.bsoc_party_id))
SIGNAL SQLSTATE 'Z0356'
('D0356I01: herdbook section status is for different breed soc')
 !!


CREATE TRIGGER D0356U01
  NO CASCADE BEFORE UPDATE
  ON PRGNY_HDBK_DFLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss1
    WHERE new.prgny_hdbk_sect_id = hss1.id
      and new.bsoc_party_id = hss1.bsoc_party_id)
   OR new.sire_hdbk_sect_id IS NOT NULL
  AND NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss2
    WHERE new.sire_hdbk_sect_id = hss2.id
      and new.bsoc_party_id = hss2.bsoc_party_id)
   OR new.dam_hdbk_sect_id IS NOT NULL
  AND NOT EXISTS (
  SELECT 1 from hdbk_sect_sts hss3
    WHERE new.dam_hdbk_sect_id = hss3.id
      and new.bsoc_party_id = hss3.bsoc_party_id))
SIGNAL SQLSTATE 'Z0356'
('D0356U01: herdbook section status is for different breed soc')
 !!


CREATE TRIGGER D0356U02
  NO CASCADE BEFORE UPDATE
  ON PRGNY_HDBK_DFLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0256U01
  NO CASCADE BEFORE UPDATE
  ON PROD_CLASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROD_CLASS AFTER DELETE ON PROD_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_PROD_CLASS WHERE TRACE_PROD_CLASS.PROD_CLASS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROD_CLASS  TRACE_PROD_CLASS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000898f", PARENT_OWNER="", PARENT_TABLE="PROD_CLASS"
    CHILD_OWNER="", CHILD_TABLE="TRACE_PROD_CLASS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0256_001", FK_COLUMNS="PROD_CLASS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROD_CLASS because TRACE_PROD_CLASS exists.')
 !!


CREATE TRIGGER D0052U01
  NO CASCADE BEFORE UPDATE
  ON PROD_PRSRVTN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0277D01
  AFTER DELETE
  ON PROGESTERONE_SYNC
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  old.map_ref,
  old.herd_num,
  old.ssn,
  old.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0277I01
  AFTER INSERT
  ON PROGESTERONE_SYNC
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  new.map_ref,
  new.herd_num,
  new.ssn,
  new.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0277U01
  AFTER UPDATE OF 
        trtmt_proc_cd,
        in_date,
        out_date,
        trtd_time,
        blanket_prgst_days
  ON PROGESTERONE_SYNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  new.map_ref,
  new.herd_num,
  new.ssn,
  new.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0277U02
  NO CASCADE BEFORE UPDATE
  ON PROGESTERONE_SYNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0285U01
  NO CASCADE BEFORE UPDATE
  ON PROGRAM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROGRAM AFTER DELETE ON PROGRAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM THIRD_PARTY_PGM_EXEC_AUTH WHERE THIRD_PARTY_PGM_EXEC_AUTH.PGM_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* PROGRAM  THIRD_PARTY_PGM_EXEC_AUTH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a156", PARENT_OWNER="", PARENT_TABLE="PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="THIRD_PARTY_PGM_EXEC_AUTH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0285_005", FK_COLUMNS="PGM_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROGRAM because THIRD_PARTY_PGM_EXEC_AUTH exists.')
 !!

CREATE  TRIGGER tD_PROGRAM2 AFTER DELETE ON PROGRAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_SHORT_CUT WHERE PGM_SHORT_CUT.PGM_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* PROGRAM  PGM_SHORT_CUT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a60", PARENT_OWNER="", PARENT_TABLE="PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="PGM_SHORT_CUT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0285_003", FK_COLUMNS="PGM_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROGRAM because PGM_SHORT_CUT exists.')
 !!

CREATE  TRIGGER tD_PROGRAM3 AFTER DELETE ON PROGRAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_DB_SCRTY WHERE PGM_DB_SCRTY.PGM_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* PROGRAM  PGM_DB_SCRTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d1d", PARENT_OWNER="", PARENT_TABLE="PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="PGM_DB_SCRTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0285_002", FK_COLUMNS="PGM_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROGRAM because PGM_DB_SCRTY exists.')
 !!

CREATE  TRIGGER tD_PROGRAM4 AFTER DELETE ON PROGRAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM APPL_PGM WHERE APPL_PGM.PGM_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* PROGRAM  APPL_PGM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008363", PARENT_OWNER="", PARENT_TABLE="PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="APPL_PGM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0285_001", FK_COLUMNS="PGM_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROGRAM because APPL_PGM exists.')
 !!

CREATE  TRIGGER tD_PROGRAM5 AFTER DELETE ON PROGRAM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_TBL_ACCESS WHERE PGM_TBL_ACCESS.PGM_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* PROGRAM  PGM_TBL_ACCESS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f98", PARENT_OWNER="", PARENT_TABLE="PROGRAM"
    CHILD_OWNER="", CHILD_TABLE="PGM_TBL_ACCESS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0285_004", FK_COLUMNS="PGM_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROGRAM because PGM_TBL_ACCESS exists.')
 !!


CREATE TRIGGER D0156U01
  NO CASCADE BEFORE UPDATE
  ON PROJ_ALGORITHM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROJ_ALGORITHM AFTER DELETE ON PROJ_ALGORITHM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROPERTY WHERE PROPERTY.PROJ_ALGORITHM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROJ_ALGORITHM  PROPERTY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b62", PARENT_OWNER="", PARENT_TABLE="PROJ_ALGORITHM"
    CHILD_OWNER="", CHILD_TABLE="PROPERTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0156_001", FK_COLUMNS="PROJ_ALGORITHM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROJ_ALGORITHM because PROPERTY exists.')
 !!


CREATE TRIGGER D0149U01
  NO CASCADE BEFORE UPDATE
  ON PROP_DISTNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0462I01
  NO CASCADE BEFORE INSERT
  ON PROP_SSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from sr_area sa
    WHERE sa.rm_area_rgn_cd = new.rm_area_rgn_cd
      AND sa.rm_area_cd_n = new.rm_area_cd
      AND sa.dm_area_cd = new.dm_area_cd
      AND sa.cd = new.sr_area_cd
      AND sa.ssn = new.sr_area_ssn) )
SIGNAL SQLSTATE 'Z0462'
('D0642I01: sales rep does not exist on sr_area')
 !!


CREATE TRIGGER D0462U02
  NO CASCADE BEFORE UPDATE OF 
                    sr_area_cd,
                    rm_area_cd
  ON PROP_SSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from sr_area sa
    WHERE sa.rm_area_rgn_cd = new.rm_area_rgn_cd
      AND sa.rm_area_cd_n = new.rm_area_cd
      AND sa.dm_area_cd = new.dm_area_cd
      AND sa.cd = new.sr_area_cd
      AND sa.ssn = new.sr_area_ssn) )
SIGNAL SQLSTATE 'Z0462'
('D0642U02: sales rep does not exist on sr_area')
 !!


CREATE TRIGGER D0462U01
  NO CASCADE BEFORE UPDATE
  ON PROP_SSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0462U03
  AFTER UPDATE
  ON PROP_SSN
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.sr_area_ssn = new.sr_area_ssn
 !!


CREATE TRIGGER D0095U02
  AFTER UPDATE OF 
        rgn_cd
  ON PROPERTY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rgn_cd != old.rgn_cd)
UPDATE herd h SET
  h.rgn_cd = new.rgn_cd
WHERE map_ref = new.map_ref
  AND h.rgn_cd != ' '
  AND h.end_date_d IS NULL
 !!


CREATE TRIGGER D0095U01
  NO CASCADE BEFORE UPDATE
  ON PROPERTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0095I01
  NO CASCADE BEFORE INSERT
  ON PROPERTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (map_ref is null)
SET map_ref = CHAR('G' || RIGHT('00000000' || LTRIM(RTRIM(CHAR(id))),9))
 !!


CREATE TRIGGER D0095U03
  AFTER UPDATE
  ON PROPERTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
UPDATE herd_dtl hd
  SET hd.sv_dtl_upd_date_d = CURRENT DATE
WHERE hd.map_ref = new.map_ref
  AND hd.sr_area_ssn = (
    SELECT MAX(sr_area_ssn)
    FROM herd_dtl hd2
    WHERE hd2.map_ref = new.map_ref)
 !!


CREATE  TRIGGER tD_PROPERTY AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD WHERE HERD.MAP_REF = old.MAP_REF) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007e52", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_004", FK_COLUMNS="MAP_REF" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because HERD exists.')
 !!

CREATE  TRIGGER tD_PROPERTY2 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_HLTH_TREATMENT WHERE TRACE_HLTH_TREATMENT.PROP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  TRACE_HLTH_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bed", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="TRACE_HLTH_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_008", FK_COLUMNS="PROP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because TRACE_HLTH_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_PROPERTY3 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_MVMT WHERE TRACE_MVMT.PROP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  TRACE_MVMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000894f", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="TRACE_MVMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_007", FK_COLUMNS="PROP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because TRACE_MVMT exists.')
 !!

CREATE  TRIGGER tD_PROPERTY4 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_PROP WHERE PARTY_PROP.PROP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  PARTY_PROP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008216", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="PARTY_PROP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_006", FK_COLUMNS="PROP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because PARTY_PROP exists.')
 !!

CREATE  TRIGGER tD_PROPERTY5 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROP_DISTNC WHERE PROP_DISTNC.MAP_REF_2 = old.MAP_REF) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  PROP_DISTNC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087f4", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="PROP_DISTNC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_005", FK_COLUMNS="MAP_REF_2" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because PROP_DISTNC exists.')
 !!

CREATE  TRIGGER tD_PROPERTY6 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROP_DISTNC WHERE PROP_DISTNC.MAP_REF_1 = old.MAP_REF) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  PROP_DISTNC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000087a4", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="PROP_DISTNC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_002", FK_COLUMNS="MAP_REF_1" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because PROP_DISTNC exists.')
 !!

CREATE  TRIGGER tD_PROPERTY7 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GIS_PT_PROP_DISTNC WHERE GIS_PT_PROP_DISTNC.MAP_REF = old.MAP_REF) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  GIS_PT_PROP_DISTNC on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086cd", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="GIS_PT_PROP_DISTNC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_003", FK_COLUMNS="MAP_REF" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because GIS_PT_PROP_DISTNC exists.')
 !!

CREATE  TRIGGER tD_PROPERTY8 AFTER DELETE ON PROPERTY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_EMPL_WKLD_CNSTR WHERE AB_EMPL_WKLD_CNSTR.BASE_MAP_REF = old.MAP_REF) > 0)
    /* erwin Builtin Trigger */
    /* PROPERTY  AB_EMPL_WKLD_CNSTR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a35", PARENT_OWNER="", PARENT_TABLE="PROPERTY"
    CHILD_OWNER="", CHILD_TABLE="AB_EMPL_WKLD_CNSTR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0095_001", FK_COLUMNS="BASE_MAP_REF" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROPERTY because AB_EMPL_WKLD_CNSTR exists.')
 !!


CREATE TRIGGER D0276D01
  AFTER DELETE
  ON PROSTAGLANDIN_SYNC
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  old.map_ref,
  old.herd_num,
  old.ssn,
  old.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0276I01
  AFTER INSERT
  ON PROSTAGLANDIN_SYNC
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  new.map_ref,
  new.herd_num,
  new.ssn,
  new.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0276U01
  AFTER UPDATE OF 
        prstgl_inj_date,
        pre_inj_days
  ON PROSTAGLANDIN_SYNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO ab_mtng_plan_log (
  map_ref,
  herd_num,
  ssn,
  num,
  upd_time)
VALUES (
  new.map_ref,
  new.herd_num,
  new.ssn,
  new.mtng_plan_num,
  CURRENT TIMESTAMP)
 !!


CREATE TRIGGER D0276U02
  NO CASCADE BEFORE UPDATE
  ON PROSTAGLANDIN_SYNC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0783U01
  NO CASCADE BEFORE UPDATE
  ON PROT_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0784U01
  NO CASCADE BEFORE UPDATE
  ON PROT_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0785U01
  NO CASCADE BEFORE UPDATE
  ON PROT_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROT_RUN AFTER DELETE ON PROT_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROT_RUN_AE_BRD WHERE PROT_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                  PROT_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* PROT_RUN  PROT_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ffb", PARENT_OWNER="", PARENT_TABLE="PROT_RUN"
    CHILD_OWNER="", CHILD_TABLE="PROT_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0785_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROT_RUN because PROT_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0786U01
  NO CASCADE BEFORE UPDATE
  ON PROT_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0876U01
  NO CASCADE BEFORE UPDATE
  ON PROVING_SCHEME
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROVING_SCHEME AFTER DELETE ON PROVING_SCHEME
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_APPROACH WHERE BULL_ACQ_APPROACH.PROVING_SCHEME_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME  BULL_ACQ_APPROACH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f3e", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_APPROACH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0876_003", FK_COLUMNS="PROVING_SCHEME_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME because BULL_ACQ_APPROACH exists.')
 !!

CREATE  TRIGGER tD_PROVING_SCHEME2 AFTER DELETE ON PROVING_SCHEME
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM POTENTIAL_BULL_PARENT WHERE POTENTIAL_BULL_PARENT.PROVING_SCHEME_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME  POTENTIAL_BULL_PARENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009786", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME"
    CHILD_OWNER="", CHILD_TABLE="POTENTIAL_BULL_PARENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0876_002", FK_COLUMNS="PROVING_SCHEME_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME because POTENTIAL_BULL_PARENT exists.')
 !!

CREATE  TRIGGER tD_PROVING_SCHEME3 AFTER DELETE ON PROVING_SCHEME
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_CALF_CONTRACT_ASSUM WHERE BULL_CALF_CONTRACT_ASSUM.PROVING_SCHEME_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME  BULL_CALF_CONTRACT_ASSUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009a0a", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME"
    CHILD_OWNER="", CHILD_TABLE="BULL_CALF_CONTRACT_ASSUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0876_005", FK_COLUMNS="PROVING_SCHEME_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME because BULL_CALF_CONTRACT_ASSUM exists.')
 !!

CREATE  TRIGGER tD_PROVING_SCHEME4 AFTER DELETE ON PROVING_SCHEME
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_CALF_ASSUM WHERE BULL_CALF_ASSUM.PROVING_SCHEME_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME  BULL_CALF_ASSUM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000979f", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME"
    CHILD_OWNER="", CHILD_TABLE="BULL_CALF_ASSUM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0876_004", FK_COLUMNS="PROVING_SCHEME_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME because BULL_CALF_ASSUM exists.')
 !!

CREATE  TRIGGER tD_PROVING_SCHEME5 AFTER DELETE ON PROVING_SCHEME
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BULL_ACQ_MGR WHERE BULL_ACQ_MGR.PROVING_SCHEME_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME  BULL_ACQ_MGR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091bc", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME"
    CHILD_OWNER="", CHILD_TABLE="BULL_ACQ_MGR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0876_001", FK_COLUMNS="PROVING_SCHEME_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME because BULL_ACQ_MGR exists.')
 !!


CREATE TRIGGER D0855U01
  NO CASCADE BEFORE UPDATE
  ON PROVING_SCHEME_INDEX
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PROVING_SCHEME_ AFTER DELETE ON PROVING_SCHEME_INDEX
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROVING_SCHEME_INDEX_ECON_WGT WHERE PROVING_SCHEME_INDEX_ECON_WGT.INDEX_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PROVING_SCHEME_INDEX  PROVING_SCHEME_INDEX_ECON_WGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a28e", PARENT_OWNER="", PARENT_TABLE="PROVING_SCHEME_INDEX"
    CHILD_OWNER="", CHILD_TABLE="PROVING_SCHEME_INDEX_ECON_WGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0855_001", FK_COLUMNS="INDEX_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PROVING_SCHEME_INDEX because PROVING_SCHEME_INDEX_ECON_WGT exists.')
 !!


CREATE TRIGGER D0856U01
  NO CASCADE BEFORE UPDATE
  ON PROVING_SCHEME_INDEX_ECON_WGT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0498U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0712U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_DISC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0363U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0363U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON PTPT_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0363U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON PTPT_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0363U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON PTPT_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0363I52
  NO CASCADE BEFORE INSERT
  ON PTPT_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0363I53
  NO CASCADE BEFORE INSERT
  ON PTPT_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0363I51
  NO CASCADE BEFORE INSERT
  ON PTPT_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0363U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON PTPT_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0363I54
  NO CASCADE BEFORE INSERT
  ON PTPT_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0250I01
  NO CASCADE BEFORE INSERT
  ON PTPT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from ptpt_rqst_ref prr
    WHERE prr.cd = new.rqst_id
      AND VALUE(prr.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0250'
('D0250I01: invalid request id')
 !!


CREATE TRIGGER D0250U02
  NO CASCADE BEFORE UPDATE OF 
                    rqst_id
  ON PTPT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_id IS NOT NULL
  AND VALUE(new.rqst_id,'~') != VALUE(old.rqst_id,'~')
  AND NOT EXISTS
  (SELECT 1 from ptpt_rqst_ref prr
    WHERE prr.cd = new.rqst_id
      AND VALUE(prr.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0250'
('D0250U02: invalid request id')
 !!


CREATE TRIGGER D0250U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0252U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_RQST_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_PTPT_RQST_REF AFTER DELETE ON PTPT_RQST_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PTPT_RQST WHERE PTPT_RQST.RQST_ID = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* PTPT_RQST_REF  PTPT_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d8d", PARENT_OWNER="", PARENT_TABLE="PTPT_RQST_REF"
    CHILD_OWNER="", CHILD_TABLE="PTPT_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0252_001", FK_COLUMNS="RQST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete PTPT_RQST_REF because PTPT_RQST exists.')
 !!


CREATE TRIGGER D0169I01
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_SUIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rvw_ptpt_cd) )
SIGNAL SQLSTATE 'Z0169'
('D0169I01: rvw_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0169I51
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_SUIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rvw_date_d IS NULL 
  AND new.rvw_date IS NOT NULL
   OR CHAR(new.rvw_date_d,ISO) = '0001-01-01'
  AND new.rvw_date IS NOT NULL)
SET new.rvw_date_d =
  CASE WHEN new.rvw_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rvw_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0169I52
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_SUIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rvw_date IS NULL 
  AND new.rvw_date_d IS NOT NULL
  AND CHAR(new.rvw_date_d,ISO) != '0001-01-01'
   OR new.rvw_date = 0
  AND new.rvw_date_d IS NOT NULL
  AND CHAR(new.rvw_date_d,ISO) != '0001-01-01')
SET new.rvw_date =
  CASE WHEN new.rvw_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rvw_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rvw_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rvw_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0169U01
  NO CASCADE BEFORE UPDATE OF 
                    rvw_ptpt_cd
  ON PTPT_SV_SUIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.rvw_ptpt_cd) )
SIGNAL SQLSTATE 'Z0169'
('D0169I01: rvw_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0169U02
  NO CASCADE BEFORE UPDATE
  ON PTPT_SV_SUIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0169U51
  NO CASCADE BEFORE UPDATE OF 
                    rvw_date
  ON PTPT_SV_SUIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rvw_date != new.rvw_date
   OR old.rvw_date IS NULL AND new.rvw_date IS NOT NULL
   OR old.rvw_date IS NOT NULL AND new.rvw_date IS NULL)
SET new.rvw_date_d =
  CASE WHEN new.rvw_date = 0 OR new.rvw_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rvw_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0169U52
  NO CASCADE BEFORE UPDATE OF 
                    rvw_date_d
  ON PTPT_SV_SUIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rvw_date_d != new.rvw_date_d
   OR old.rvw_date_d IS NULL and new.rvw_date_d IS NOT NULL
   OR old.rvw_date_d IS NOT NULL and new.rvw_date_d IS NULL)
SET new.rvw_date =
  CASE WHEN new.rvw_date_d IS NULL OR new.rvw_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rvw_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rvw_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rvw_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0371U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0371I52
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0371U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0371I51
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0371I53
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0371U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0371I54
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0371U02
  NO CASCADE BEFORE UPDATE
  ON PTPT_SV_USE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0371D01
  AFTER DELETE
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO ptpt_sv_use_hist (
  upd_time,
  ptpt_cd,
  org_ptpt_cd,
  sv_tp_cd,
  yr,
  st_date,
  end_date,
  sof_ind,
  ord_ind,
  cmt)
VALUES (
  CURRENT TIMESTAMP,
  old.ptpt_cd,
  old.org_ptpt_cd,
  old.sv_tp_cd,
  old.yr,
  old.st_date,
  old.end_date,
  old.sof_ind,
  old.ord_ind,
  old.cmt)
 !!


CREATE TRIGGER D0371U01
  AFTER UPDATE
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO ptpt_sv_use_hist (
  upd_time,
  ptpt_cd,
  org_ptpt_cd,
  sv_tp_cd,
  yr,
  st_date,
  end_date,
  sof_ind,
  ord_ind,
  cmt)
VALUES (
  CURRENT TIMESTAMP,
  old.ptpt_cd,
  old.org_ptpt_cd,
  old.sv_tp_cd,
  old.yr,
  old.st_date,
  old.end_date,
  old.sof_ind,
  old.ord_ind,
  old.cmt)
 !!


CREATE TRIGGER D0371U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON PTPT_SV_USE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0390I51
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0390U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON PTPT_SV_USE_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0390U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON PTPT_SV_USE_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0390I52
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0390U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON PTPT_SV_USE_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0390U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON PTPT_SV_USE_HIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0390I54
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0390I53
  NO CASCADE BEFORE INSERT
  ON PTPT_SV_USE_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0390U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_SV_USE_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0219I52
  NO CASCADE BEFORE INSERT
  ON PTPT_XMIT_AUTH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date IS NULL 
  AND new.expiry_date_d IS NOT NULL
  AND CHAR(new.expiry_date_d,ISO) != '0001-01-01'
   OR new.expiry_date = 0
  AND new.expiry_date_d IS NOT NULL
  AND CHAR(new.expiry_date_d,ISO) != '0001-01-01')
SET new.expiry_date =
  CASE WHEN new.expiry_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.expiry_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0219U01
  NO CASCADE BEFORE UPDATE
  ON PTPT_XMIT_AUTH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0219U52
  NO CASCADE BEFORE UPDATE OF 
                    expiry_date_d
  ON PTPT_XMIT_AUTH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.expiry_date_d != new.expiry_date_d
   OR old.expiry_date_d IS NULL and new.expiry_date_d IS NOT NULL
   OR old.expiry_date_d IS NOT NULL and new.expiry_date_d IS NULL)
SET new.expiry_date =
  CASE WHEN new.expiry_date_d IS NULL OR new.expiry_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.expiry_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.expiry_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0219I51
  NO CASCADE BEFORE INSERT
  ON PTPT_XMIT_AUTH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date_d IS NULL 
  AND new.expiry_date IS NOT NULL
   OR CHAR(new.expiry_date_d,ISO) = '0001-01-01'
  AND new.expiry_date IS NOT NULL)
SET new.expiry_date_d =
  CASE WHEN new.expiry_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.expiry_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0219U51
  NO CASCADE BEFORE UPDATE OF 
                    expiry_date
  ON PTPT_XMIT_AUTH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.expiry_date != new.expiry_date
   OR old.expiry_date IS NULL AND new.expiry_date IS NOT NULL
   OR old.expiry_date IS NOT NULL AND new.expiry_date IS NULL)
SET new.expiry_date_d =
  CASE WHEN new.expiry_date = 0 OR new.expiry_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.expiry_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0220U01
  NO CASCADE BEFORE UPDATE
  ON RCVD_FILE_CONTNS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0218I51
  NO CASCADE BEFORE INSERT
  ON RCVD_FILE_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date_d IS NULL 
  AND new.rcvd_date IS NOT NULL
   OR CHAR(new.rcvd_date_d,ISO) = '0001-01-01'
  AND new.rcvd_date IS NOT NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0218I52
  NO CASCADE BEFORE INSERT
  ON RCVD_FILE_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcvd_date IS NULL 
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01'
   OR new.rcvd_date = 0
  AND new.rcvd_date_d IS NOT NULL
  AND CHAR(new.rcvd_date_d,ISO) != '0001-01-01')
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcvd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0218U01
  NO CASCADE BEFORE UPDATE
  ON RCVD_FILE_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0218U51
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date
  ON RCVD_FILE_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date != new.rcvd_date
   OR old.rcvd_date IS NULL AND new.rcvd_date IS NOT NULL
   OR old.rcvd_date IS NOT NULL AND new.rcvd_date IS NULL)
SET new.rcvd_date_d =
  CASE WHEN new.rcvd_date = 0 OR new.rcvd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcvd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0218U52
  NO CASCADE BEFORE UPDATE OF 
                    rcvd_date_d
  ON RCVD_FILE_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcvd_date_d != new.rcvd_date_d
   OR old.rcvd_date_d IS NULL and new.rcvd_date_d IS NOT NULL
   OR old.rcvd_date_d IS NOT NULL and new.rcvd_date_d IS NULL)
SET new.rcvd_date =
  CASE WHEN new.rcvd_date_d IS NULL OR new.rcvd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcvd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcvd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE  TRIGGER tD_RCVD_FILE_LOG AFTER DELETE ON RCVD_FILE_LOG
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RCVD_FILE_CONTNS WHERE RCVD_FILE_CONTNS.RCVD_FILE_XMIT_ID = old.XMIT_ID) > 0)
    /* erwin Builtin Trigger */
    /* RCVD_FILE_LOG  RCVD_FILE_CONTNS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096a5", PARENT_OWNER="", PARENT_TABLE="RCVD_FILE_LOG"
    CHILD_OWNER="", CHILD_TABLE="RCVD_FILE_CONTNS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0218_001", FK_COLUMNS="RCVD_FILE_XMIT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RCVD_FILE_LOG because RCVD_FILE_CONTNS exists.')
 !!


CREATE TRIGGER D0217U01
  NO CASCADE BEFORE UPDATE
  ON RCVD_FILE_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0838U01
  NO CASCADE BEFORE UPDATE
  ON REG_ANML_MVMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0181U01
  NO CASCADE BEFORE UPDATE
  ON REPORT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REPORT AFTER DELETE ON REPORT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_VARIANT WHERE RPRT_VARIANT.RPRT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* REPORT  RPRT_VARIANT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008053", PARENT_OWNER="", PARENT_TABLE="REPORT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_VARIANT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0181_003", FK_COLUMNS="RPRT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REPORT because RPRT_VARIANT exists.')
 !!

CREATE  TRIGGER tD_REPORT2 AFTER DELETE ON REPORT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_TEXT WHERE RPRT_TEXT.RPRT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* REPORT  RPRT_TEXT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000080af", PARENT_OWNER="", PARENT_TABLE="REPORT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_TEXT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0181_002", FK_COLUMNS="RPRT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REPORT because RPRT_TEXT exists.')
 !!

CREATE  TRIGGER tD_REPORT3 AFTER DELETE ON REPORT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PRPS WHERE RPRT_PRPS.RPRT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* REPORT  RPRT_PRPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007bc4", PARENT_OWNER="", PARENT_TABLE="REPORT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PRPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0181_001", FK_COLUMNS="RPRT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REPORT because RPRT_PRPS exists.')
 !!

CREATE  TRIGGER tD_REPORT4 AFTER DELETE ON REPORT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AVAIL_RPRT_DLVRY WHERE AVAIL_RPRT_DLVRY.RPRT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* REPORT  AVAIL_RPRT_DLVRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086f5", PARENT_OWNER="", PARENT_TABLE="REPORT"
    CHILD_OWNER="", CHILD_TABLE="AVAIL_RPRT_DLVRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0181_004", FK_COLUMNS="RPRT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REPORT because AVAIL_RPRT_DLVRY exists.')
 !!


CREATE TRIGGER D0753U01
  NO CASCADE BEFORE UPDATE
  ON REPORT_FORM_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REPORT_FORM_REF AFTER DELETE ON REPORT_FORM_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BATCH_JOB_REPORT WHERE BATCH_JOB_REPORT.FORM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* REPORT_FORM_REF  BATCH_JOB_REPORT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000098f8", PARENT_OWNER="", PARENT_TABLE="REPORT_FORM_REF"
    CHILD_OWNER="", CHILD_TABLE="BATCH_JOB_REPORT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0753_001", FK_COLUMNS="FORM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REPORT_FORM_REF because BATCH_JOB_REPORT exists.')
 !!


CREATE TRIGGER D0677U01
  NO CASCADE BEFORE UPDATE
  ON RESIDUAL_SURV_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0678U01
  NO CASCADE BEFORE UPDATE
  ON RESIDUAL_SURV_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0679U01
  NO CASCADE BEFORE UPDATE
  ON RESIDUAL_SURV_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RESIDUAL_SURV_R AFTER DELETE ON RESIDUAL_SURV_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RESIDUAL_SURV_RUN_AE_BRD WHERE RESIDUAL_SURV_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                           RESIDUAL_SURV_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* RESIDUAL_SURV_RUN  RESIDUAL_SURV_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a185", PARENT_OWNER="", PARENT_TABLE="RESIDUAL_SURV_RUN"
    CHILD_OWNER="", CHILD_TABLE="RESIDUAL_SURV_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0679_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RESIDUAL_SURV_RUN because RESIDUAL_SURV_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0680U01
  NO CASCADE BEFORE UPDATE
  ON RESIDUAL_SURV_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0361U01
  NO CASCADE BEFORE UPDATE
  ON RET_STRAW
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0700I01
  NO CASCADE BEFORE INSERT
  ON REVIEW_ANSWER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from review_qstn q
   WHERE q.id = new.qstn_id
     AND q.answer_tp_cd = 
       CASE WHEN new.text_answer IS NOT NULL THEN 'A'
            WHEN new.num_answer IS NOT NULL THEN 'N'
            WHEN new.date_answer IS NOT NULL THEN 'D'
            WHEN new.time_answer IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0700U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_ANSWER
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0700U02
  NO CASCADE BEFORE UPDATE
  ON REVIEW_ANSWER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from review_qstn q
   WHERE q.id = new.qstn_id
     AND q.answer_tp_cd = 
       CASE WHEN new.text_answer IS NOT NULL THEN 'A'
            WHEN new.num_answer IS NOT NULL THEN 'N'
            WHEN new.date_answer IS NOT NULL THEN 'D'
            WHEN new.time_answer IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0701U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_HDR AFTER DELETE ON REVIEW_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_VERSION WHERE REVIEW_VERSION.REVIEW_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_HDR  REVIEW_VERSION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008832", PARENT_OWNER="", PARENT_TABLE="REVIEW_HDR"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_VERSION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0701_001", FK_COLUMNS="REVIEW_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_HDR because REVIEW_VERSION exists.')
 !!

CREATE  TRIGGER tD_REVIEW_HDR2 AFTER DELETE ON REVIEW_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SET WHERE REVIEW_SET.REVIEW_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_HDR  REVIEW_SET on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089c1", PARENT_OWNER="", PARENT_TABLE="REVIEW_HDR"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0701_002", FK_COLUMNS="REVIEW_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_HDR because REVIEW_SET exists.')
 !!


CREATE TRIGGER D0702I01
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANSWER_TP_CD'
      AND c.cd = new.answer_tp_cd) )
SIGNAL SQLSTATE 'Z0702'
('D0702I01: invalid answer type code')
 !!


CREATE TRIGGER D0702I02
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_correct_answer_value_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.id = new.min_correct_answer_value_id
      AND new.answer_tp_cd = 
        CASE WHEN a.text IS NOT NULL THEN 'A'
             WHEN a.number IS NOT NULL THEN 'N'
             WHEN a.date IS NOT NULL THEN 'D'
             WHEN a.time IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0702I03
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.max_correct_answer_value_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.id = new.max_correct_answer_value_id
      AND new.answer_tp_cd = 
        CASE WHEN a.text IS NOT NULL THEN 'A'
             WHEN a.number IS NOT NULL THEN 'N'
             WHEN a.date IS NOT NULL THEN 'D'
             WHEN a.time IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0702I04
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_correct_answer_value_id IS NOT NULL
  AND new.max_correct_answer_value_id IS NOT NULL
  AND new.answer_tp_cd IN ('D','T','N')
  AND EXISTS (
     SELECT 1
     FROM answer_value a1
        , answer_value a2
     WHERE a1.id = new.min_correct_answer_value_id
       AND a2.id = new.max_correct_answer_value_id
       AND (VALUE(a1.number,-9999999) > VALUE(a2.number,9999999)
         OR VALUE(a1.date,'0001-01-01') > VALUE(a2.date,'2999-12-31')
         OR VALUE(a1.time,'00:00:00') > VALUE(a2.time,'23:59:59'))))
SIGNAL SQLSTATE 'Z0702'
('D0702I04: min answer must not be greater than max answer')
 !!


CREATE TRIGGER D0702U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0702U02
  NO CASCADE BEFORE UPDATE OF 
                    answer_tp_cd
  ON REVIEW_QSTN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.answer_tp_cd != new.answer_tp_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANSWER_TP_CD'
      AND c.cd = new.answer_tp_cd) )
SIGNAL SQLSTATE 'Z0702'
('D0702U02: invalid answer type code')
 !!


CREATE TRIGGER D0702U03
  NO CASCADE BEFORE UPDATE OF 
                    min_correct_answer_value_id
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_correct_answer_value_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.id = new.min_correct_answer_value_id
      AND new.answer_tp_cd = 
        CASE WHEN a.text IS NOT NULL THEN 'A'
             WHEN a.number IS NOT NULL THEN 'N'
             WHEN a.date IS NOT NULL THEN 'D'
             WHEN a.time IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0702U04
  NO CASCADE BEFORE UPDATE OF 
                    max_correct_answer_value_id
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.max_correct_answer_value_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.id = new.max_correct_answer_value_id
      AND new.answer_tp_cd = 
        CASE WHEN a.text IS NOT NULL THEN 'A'
             WHEN a.number IS NOT NULL THEN 'N'
             WHEN a.date IS NOT NULL THEN 'D'
             WHEN a.time IS NOT NULL THEN 'T' END
 !!


CREATE TRIGGER D0702U05
  NO CASCADE BEFORE UPDATE OF 
                    answer_tp_cd,
                    min_correct_answer_value_id,
                    max_correct_answer_value_id
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.min_correct_answer_value_id IS NOT NULL
  AND new.max_correct_answer_value_id IS NOT NULL
  AND new.answer_tp_cd IN ('D','T','N')
  AND EXISTS (
     SELECT 1
     FROM answer_value a1
        , answer_value a2
     WHERE a1.id = new.min_correct_answer_value_id
       AND a2.id = new.max_correct_answer_value_id
       AND (VALUE(a1.number,-9999999) > VALUE(a2.number,9999999)
         OR VALUE(a1.date,'0001-01-01') > VALUE(a2.date,'2999-12-31')
         OR VALUE(a1.time,'00:00:00') > VALUE(a2.time,'23:59:59'))))
SIGNAL SQLSTATE 'Z0702'
('D0702U05: min answer must not be greater than max answer')
 !!


CREATE TRIGGER D0702I05
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.answer_set_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.answer_set_id = new.answer_set_id) )
SIGNAL SQLSTATE 'Z0702'
('D0702I05: answer set has no values')
 !!


CREATE TRIGGER D0702U06
  NO CASCADE BEFORE UPDATE OF 
                    answer_set_id
  ON REVIEW_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.answer_set_id IS NOT NULL 
  AND NOT EXISTS (
    SELECT 1 FROM answer_value a
    WHERE a.answer_set_id = new.answer_set_id) )
SIGNAL SQLSTATE 'Z0702'
('D0702U06: answer set has no values')
 !!


CREATE  TRIGGER tD_REVIEW_QSTN AFTER DELETE ON REVIEW_QSTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SECT_QSTN WHERE REVIEW_SECT_QSTN.QSTN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_QSTN  REVIEW_SECT_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000095b5", PARENT_OWNER="", PARENT_TABLE="REVIEW_QSTN"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SECT_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0702_001", FK_COLUMNS="QSTN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_QSTN because REVIEW_SECT_QSTN exists.')
 !!

CREATE  TRIGGER tD_REVIEW_QSTN2 AFTER DELETE ON REVIEW_QSTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN_SUMM WHERE REVIEW_QSTN_SUMM.QSTN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_QSTN  REVIEW_QSTN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092f7", PARENT_OWNER="", PARENT_TABLE="REVIEW_QSTN"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0702_002", FK_COLUMNS="QSTN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_QSTN because REVIEW_QSTN_SUMM exists.')
 !!


CREATE TRIGGER D0696I01
  NO CASCADE BEFORE INSERT
  ON REVIEW_QSTN_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'REVIEW_QUESTION_SUMMARY_METHOD_CD'
      AND c.cd = new.summ_method_cd) )
SIGNAL SQLSTATE 'Z0696'
('D0696I01: invalid summary method code')
 !!


CREATE TRIGGER D0696U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_QSTN_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0696U02
  NO CASCADE BEFORE UPDATE OF 
                    summ_method_cd
  ON REVIEW_QSTN_SUMM
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'REVIEW_QUESTION_SUMMARY_METHOD_CD'
      AND c.cd = new.summ_method_cd) )
SIGNAL SQLSTATE 'Z0696'
('D0696U02: invalid summary method code')
 !!


CREATE TRIGGER D0703U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SECT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0704U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SECT_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_SECT_HDR AFTER DELETE ON REVIEW_SECT_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SECT_VERSION WHERE REVIEW_SECT_VERSION.SECT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_SECT_HDR  REVIEW_SECT_VERSION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009cfd", PARENT_OWNER="", PARENT_TABLE="REVIEW_SECT_HDR"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SECT_VERSION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0704_001", FK_COLUMNS="SECT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_SECT_HDR because REVIEW_SECT_VERSION exists.')
 !!


CREATE TRIGGER D0705U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SECT_QSTN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_SECT_QST AFTER DELETE ON REVIEW_SECT_QSTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_ANSWER WHERE REVIEW_ANSWER.SECT_ID = old.SECT_ID AND
                                                REVIEW_ANSWER.SECT_VERSION = old.SECT_VERSION AND
                                                REVIEW_ANSWER.QSTN_ID = old.QSTN_ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_SECT_QSTN  REVIEW_ANSWER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c99", PARENT_OWNER="", PARENT_TABLE="REVIEW_SECT_QSTN"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_ANSWER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0705_001", FK_COLUMNS="SECT_ID""SECT_VERSION""QSTN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_SECT_QSTN because REVIEW_ANSWER exists.')
 !!


CREATE TRIGGER D0706U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SECT_VERSION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_SECT_VER AFTER DELETE ON REVIEW_SECT_VERSION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SECT_QSTN WHERE REVIEW_SECT_QSTN.SECT_ID = old.SECT_ID AND
                                                   REVIEW_SECT_QSTN.SECT_VERSION = old.VERSION) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_SECT_VERSION  REVIEW_SECT_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a054", PARENT_OWNER="", PARENT_TABLE="REVIEW_SECT_VERSION"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SECT_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0706_002", FK_COLUMNS="SECT_ID""SECT_VERSION" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_SECT_VERSION because REVIEW_SECT_QSTN exists.')
 !!

CREATE  TRIGGER tD_REVIEW_SECT_VE2 AFTER DELETE ON REVIEW_SECT_VERSION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SECT WHERE REVIEW_SECT.SECT_ID = old.SECT_ID AND
                                              REVIEW_SECT.SECT_VERSION = old.VERSION) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_SECT_VERSION  REVIEW_SECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009938", PARENT_OWNER="", PARENT_TABLE="REVIEW_SECT_VERSION"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0706_001", FK_COLUMNS="SECT_ID""SECT_VERSION" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_SECT_VERSION because REVIEW_SECT exists.')
 !!


CREATE TRIGGER D0707U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SET
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0708U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_SET_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_SET_HDR AFTER DELETE ON REVIEW_SET_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SET WHERE REVIEW_SET.SET_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_SET_HDR  REVIEW_SET on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008874", PARENT_OWNER="", PARENT_TABLE="REVIEW_SET_HDR"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0708_001", FK_COLUMNS="SET_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_SET_HDR because REVIEW_SET exists.')
 !!


CREATE TRIGGER D0709U01
  NO CASCADE BEFORE UPDATE
  ON REVIEW_VERSION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_REVIEW_VERSION AFTER DELETE ON REVIEW_VERSION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_SECT WHERE REVIEW_SECT.REVIEW_ID = old.REVIEW_ID AND
                                              REVIEW_SECT.REVIEW_VERSION = old.VERSION) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_VERSION  REVIEW_SECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092cc", PARENT_OWNER="", PARENT_TABLE="REVIEW_VERSION"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_SECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0709_002", FK_COLUMNS="REVIEW_ID""REVIEW_VERSION" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_VERSION because REVIEW_SECT exists.')
 !!

CREATE  TRIGGER tD_REVIEW_VERSION2 AFTER DELETE ON REVIEW_VERSION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN_SUMM WHERE REVIEW_QSTN_SUMM.REVIEW_ID = old.REVIEW_ID AND
                                                   REVIEW_QSTN_SUMM.REVIEW_VERSION = old.VERSION) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_VERSION  REVIEW_QSTN_SUMM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097da", PARENT_OWNER="", PARENT_TABLE="REVIEW_VERSION"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN_SUMM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0709_003", FK_COLUMNS="REVIEW_ID""REVIEW_VERSION" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_VERSION because REVIEW_QSTN_SUMM exists.')
 !!

CREATE  TRIGGER tD_REVIEW_VERSION3 AFTER DELETE ON REVIEW_VERSION
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_TECH_REVIEW_RESPONSE WHERE AB_TECH_REVIEW_RESPONSE.REVIEW_ID = old.REVIEW_ID AND
                                                          AB_TECH_REVIEW_RESPONSE.REVIEW_VERSION = old.VERSION) > 0)
    /* erwin Builtin Trigger */
    /* REVIEW_VERSION  AB_TECH_REVIEW_RESPONSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a488", PARENT_OWNER="", PARENT_TABLE="REVIEW_VERSION"
    CHILD_OWNER="", CHILD_TABLE="AB_TECH_REVIEW_RESPONSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0709_001", FK_COLUMNS="REVIEW_ID""REVIEW_VERSION" */
     SIGNAL SQLSTATE '75001' ('Cannot delete REVIEW_VERSION because AB_TECH_REVIEW_RESPONSE exists.')
 !!


CREATE TRIGGER D0365U01
  NO CASCADE BEFORE UPDATE
  ON RM_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0365I01
  NO CASCADE BEFORE INSERT
  ON RM_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != ' ')
SET new.party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
 !!


CREATE TRIGGER D0365U02
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON RM_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != old.ptpt_cd)
SET new.party_id = (
  CASE WHEN new.ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
  END
 !!


CREATE TRIGGER D0157U01
  NO CASCADE BEFORE UPDATE
  ON ROAD_ARC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0362U01
  NO CASCADE BEFORE UPDATE
  ON ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0458U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_CLASS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0616U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_DATASET
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_DATASET AFTER DELETE ON RPRT_DATASET
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM RPRT_DATASET
      WHERE
        RPRT_DATASET.MASTER_ID = old.ID
 !!


CREATE TRIGGER D0182U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_DLVRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_DLVRY AFTER DELETE ON RPRT_DLVRY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AVAIL_RPRT_DLVRY WHERE AVAIL_RPRT_DLVRY.RPRT_DLVRY_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_DLVRY  AVAIL_RPRT_DLVRY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009420", PARENT_OWNER="", PARENT_TABLE="RPRT_DLVRY"
    CHILD_OWNER="", CHILD_TABLE="AVAIL_RPRT_DLVRY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0182_001", FK_COLUMNS="RPRT_DLVRY_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_DLVRY because AVAIL_RPRT_DLVRY exists.')
 !!


CREATE TRIGGER D0851U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_ERR_RSN_REF
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_ERR_RSN_RE AFTER DELETE ON RPRT_ERR_RSN_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM COMP_RPRT_RQST WHERE COMP_RPRT_RQST.RPRT_ERR_RSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_ERR_RSN_REF  COMP_RPRT_RQST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099f8", PARENT_OWNER="", PARENT_TABLE="RPRT_ERR_RSN_REF"
    CHILD_OWNER="", CHILD_TABLE="COMP_RPRT_RQST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0851_001", FK_COLUMNS="RPRT_ERR_RSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_ERR_RSN_REF because COMP_RPRT_RQST exists.')
 !!


CREATE TRIGGER D0183U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_INFO
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_INFO AFTER DELETE ON RPRT_INFO
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PRPS WHERE RPRT_PRPS.RPRT_INFO_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_INFO  RPRT_PRPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000085e5", PARENT_OWNER="", PARENT_TABLE="RPRT_INFO"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PRPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0183_001", FK_COLUMNS="RPRT_INFO_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_INFO because RPRT_PRPS exists.')
 !!


CREATE TRIGGER D0184U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_PARM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_PARM AFTER DELETE ON RPRT_PARM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEL_RPRT_PARM_VAL WHERE SEL_RPRT_PARM_VAL.RPRT_PARM_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_PARM  SEL_RPRT_PARM_VAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096ab", PARENT_OWNER="", PARENT_TABLE="RPRT_PARM"
    CHILD_OWNER="", CHILD_TABLE="SEL_RPRT_PARM_VAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0184_002", FK_COLUMNS="RPRT_PARM_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_PARM because SEL_RPRT_PARM_VAL exists.')
 !!

CREATE  TRIGGER tD_RPRT_PARM2 AFTER DELETE ON RPRT_PARM
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
    DELETE FROM RPRT_PARM
      WHERE
        RPRT_PARM.PRNT_RPRT_PARM_ID = old.ID
 !!


CREATE TRIGGER D0185U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_PARM_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_PARM_REF AFTER DELETE ON RPRT_PARM_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PARM_VAL WHERE RPRT_PARM_VAL.RPRT_PARM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_PARM_REF  RPRT_PARM_VAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f58", PARENT_OWNER="", PARENT_TABLE="RPRT_PARM_REF"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PARM_VAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0185_002", FK_COLUMNS="RPRT_PARM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_PARM_REF because RPRT_PARM_VAL exists.')
 !!

CREATE  TRIGGER tD_RPRT_PARM_REF2 AFTER DELETE ON RPRT_PARM_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PARM WHERE RPRT_PARM.RPRT_PARM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_PARM_REF  RPRT_PARM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008910", PARENT_OWNER="", PARENT_TABLE="RPRT_PARM_REF"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PARM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0185_001", FK_COLUMNS="RPRT_PARM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_PARM_REF because RPRT_PARM exists.')
 !!


CREATE TRIGGER D0193U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_PARM_VAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_PARM_VAL AFTER DELETE ON RPRT_PARM_VAL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEL_RPRT_PARM_VAL WHERE SEL_RPRT_PARM_VAL.RPRT_PARM_VAL_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_PARM_VAL  SEL_RPRT_PARM_VAL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097d6", PARENT_OWNER="", PARENT_TABLE="RPRT_PARM_VAL"
    CHILD_OWNER="", CHILD_TABLE="SEL_RPRT_PARM_VAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0193_001", FK_COLUMNS="RPRT_PARM_VAL_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_PARM_VAL because SEL_RPRT_PARM_VAL exists.')
 !!


CREATE TRIGGER D0194U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_PRPS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0047I54
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0047I52
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(new.print_date_d) - 19000000 END
 !!


CREATE TRIGGER D0047U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0047U51
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0047U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.rqst_date_d) - 19000000 END
 !!


CREATE TRIGGER D0047I51
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0047U52
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.print_date_d) - 19000000 END
 !!


CREATE TRIGGER D0047I53
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0047U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0047D01
  AFTER DELETE
  ON RPRT_RQST
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO del_rprt_rqst (
  map_ref
, herd_num
, chrg_ptpt_cd
, rprt_tp_cd
, num
, ssn
, upd_time
, rqrd_date
, rqst_date
, output_cat_ptpt_cd
, output_cat_cd
, one_off_ind
, rprt_medium_cd
, print_date
, print_time
, anml_cnt
, rprt_chrg_cd
, pgm_id
, user_id
, rcpnt_ptpt_cd
, copy_cnt
, anml_key
, acct_xmit_ind
, desp_inst
, parm
, rqst_date_d
, print_date_d
, submit_cd
, id
) VALUES (
  old.map_ref
, old.herd_num
, old.chrg_ptpt_cd
, old.rprt_tp_cd
, old.num
, old.ssn
, old.upd_time
, old.rqrd_date
, old.rqst_date
, old.output_cat_ptpt_cd
, old.output_cat_cd
, old.one_off_ind
, old.rprt_medium_cd
, old.print_date
, old.print_time
, old.anml_cnt
, old.rprt_chrg_cd
, old.pgm_id
, old.user_id
, old.rcpnt_ptpt_cd
, old.copy_cnt
, old.anml_key
, old.acct_xmit_ind
, old.desp_inst
, old.parm
, old.rqst_date_d
, old.print_date_d
, old.submit_cd
, old.id
)
 !!


CREATE TRIGGER D0047U02
  AFTER UPDATE OF 
        map_ref,
        herd_num,
        chrg_ptpt_cd,
        rprt_tp_cd,
        num
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.map_ref != new.map_ref
   OR old.herd_num != new.herd_num
   OR old.chrg_ptpt_cd != new.chrg_ptpt_cd
   OR old.rprt_tp_cd != new.rprt_tp_cd
   OR old.num != new.num)
INSERT INTO del_rprt_rqst (
  map_ref
, herd_num
, chrg_ptpt_cd
, rprt_tp_cd
, num
, ssn
, upd_time
, rqrd_date
, rqst_date
, output_cat_ptpt_cd
, output_cat_cd
, one_off_ind
, rprt_medium_cd
, print_date
, print_time
, anml_cnt
, rprt_chrg_cd
, pgm_id
, user_id
, rcpnt_ptpt_cd
, copy_cnt
, anml_key
, acct_xmit_ind
, desp_inst
, parm
--, ext_parm_xml
, rqst_date_d
, print_date_d
, submit_cd
, id
) VALUES (
  old.map_ref
, old.herd_num
, old.chrg_ptpt_cd
, old.rprt_tp_cd
, old.num
, old.ssn
, old.upd_time
, old.rqrd_date
, old.rqst_date
, old.output_cat_ptpt_cd
, old.output_cat_cd
, old.one_off_ind
, old.rprt_medium_cd
, old.print_date
, old.print_time
, old.anml_cnt
, old.rprt_chrg_cd
, old.pgm_id
, old.user_id
, old.rcpnt_ptpt_cd
, old.copy_cnt
, old.anml_key
, old.acct_xmit_ind
, old.desp_inst
, old.parm
--, old.ext_parm_xml
, old.rqst_date_d
, old.print_date_d
, old.submit_cd
, old.id
)
 !!


CREATE TRIGGER D0047U03
  NO CASCADE BEFORE UPDATE OF 
                    rprt_tp_cd
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rprt_tp_cd != new.rprt_tp_cd
  AND NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0047'
('D0047U03: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0047I01
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS(
    SELECT 1 FROM rprt_tp rt
    WHERE rt.cd = new.rprt_tp_cd))
SIGNAL SQLSTATE 'Z0047'
('D0047I01: rprt_tp_cd must exist on table rprt_tp')
 !!


CREATE TRIGGER D0047I02
  NO CASCADE BEFORE INSERT
  ON RPRT_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.submit_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'RPRT_RQST_SUBMIT_CD'
      AND c.cd = new.submit_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0047'
('D0047I02: invalid submit code code')
 !!


CREATE TRIGGER D0047U04
  NO CASCADE BEFORE UPDATE OF 
                    submit_cd
  ON RPRT_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.submit_cd IS NOT NULL
  AND VALUE(new.submit_cd,'~') != VALUE(old.submit_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'RPRT_RQST_SUBMIT_CD'
      AND c.cd = new.submit_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0047'
('D0047U04: invalid submit code code')
 !!


CREATE TRIGGER D0617U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_SEL_CAT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_SEL_CAT AFTER DELETE ON RPRT_SEL_CAT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REPORT WHERE REPORT.RPRT_SEL_CAT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_SEL_CAT  REPORT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d3f", PARENT_OWNER="", PARENT_TABLE="RPRT_SEL_CAT"
    CHILD_OWNER="", CHILD_TABLE="REPORT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0617_001", FK_COLUMNS="RPRT_SEL_CAT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_SEL_CAT because REPORT exists.')
 !!


CREATE TRIGGER D0618U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_TEMPLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0619U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_TEMPLATE_BAND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_TEMPLATE_B AFTER DELETE ON RPRT_TEMPLATE_BAND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_TEMPLATE WHERE RPRT_TEMPLATE.TEMPLATE_BAND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_TEMPLATE_BAND  RPRT_TEMPLATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009298", PARENT_OWNER="", PARENT_TABLE="RPRT_TEMPLATE_BAND"
    CHILD_OWNER="", CHILD_TABLE="RPRT_TEMPLATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0619_001", FK_COLUMNS="TEMPLATE_BAND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_TEMPLATE_BAND because RPRT_TEMPLATE exists.')
 !!


CREATE TRIGGER D0620U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_TEMPLATE_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_TEMPLATE_R AFTER DELETE ON RPRT_TEMPLATE_REF
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_TEMPLATE WHERE RPRT_TEMPLATE.RPRT_TEMPLATE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_TEMPLATE_REF  RPRT_TEMPLATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000975f", PARENT_OWNER="", PARENT_TABLE="RPRT_TEMPLATE_REF"
    CHILD_OWNER="", CHILD_TABLE="RPRT_TEMPLATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0620_001", FK_COLUMNS="RPRT_TEMPLATE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_TEMPLATE_REF because RPRT_TEMPLATE exists.')
 !!


CREATE TRIGGER D0624U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_TEXT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0173I01
  NO CASCADE BEFORE INSERT
  ON RPRT_TP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.fear_prod_id IS NOT NULL 
  AND EXISTS (
    SELECT 1 from rprt_tp rt
    WHERE rt.fear_prod_id = new.fear_prod_id))
SIGNAL SQLSTATE 'Z0173'
('D0173I01: fear product id must be unique')
 !!


CREATE TRIGGER D0173U02
  NO CASCADE BEFORE UPDATE OF 
                    fear_prod_id
  ON RPRT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.fear_prod_id IS NOT NULL 
  AND new.fear_prod_id != VALUE(old.fear_prod_id,-123456)
  AND EXISTS (
    SELECT 1 from rprt_tp rt
    WHERE rt.fear_prod_id = new.fear_prod_id
))
SIGNAL SQLSTATE 'Z0173'
('D0173U02: fear product id must be unique')
 !!


CREATE TRIGGER D0173U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0246U01
  NO CASCADE BEFORE UPDATE
  ON RPRT_VARIANT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RPRT_VARIANT AFTER DELETE ON RPRT_VARIANT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_TEMPLATE WHERE RPRT_TEMPLATE.RPRT_VARIANT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_VARIANT  RPRT_TEMPLATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009155", PARENT_OWNER="", PARENT_TABLE="RPRT_VARIANT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_TEMPLATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0246_003", FK_COLUMNS="RPRT_VARIANT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_VARIANT because RPRT_TEMPLATE exists.')
 !!

CREATE  TRIGGER tD_RPRT_VARIANT2 AFTER DELETE ON RPRT_VARIANT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PARM WHERE RPRT_PARM.RPRT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_VARIANT  RPRT_PARM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000084f7", PARENT_OWNER="", PARENT_TABLE="RPRT_VARIANT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PARM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0246_001", FK_COLUMNS="RPRT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_VARIANT because RPRT_PARM exists.')
 !!

CREATE  TRIGGER tD_RPRT_VARIANT3 AFTER DELETE ON RPRT_VARIANT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_DATASET WHERE RPRT_DATASET.RPRT_VARIANT_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* RPRT_VARIANT  RPRT_DATASET on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000089e3", PARENT_OWNER="", PARENT_TABLE="RPRT_VARIANT"
    CHILD_OWNER="", CHILD_TABLE="RPRT_DATASET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0246_002", FK_COLUMNS="RPRT_VARIANT_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RPRT_VARIANT because RPRT_DATASET exists.')
 !!


CREATE TRIGGER D0053U01
  NO CASCADE BEFORE UPDATE
  ON RQRD_SMN_ADJ_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RQRD_SMN_ADJ_RS AFTER DELETE ON RQRD_SMN_ADJ_RSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MAN_LLL_SEMEN_ADJ WHERE MAN_LLL_SEMEN_ADJ.ADJ_RSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RQRD_SMN_ADJ_RSN  MAN_LLL_SEMEN_ADJ on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009560", PARENT_OWNER="", PARENT_TABLE="RQRD_SMN_ADJ_RSN"
    CHILD_OWNER="", CHILD_TABLE="MAN_LLL_SEMEN_ADJ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0053_002", FK_COLUMNS="ADJ_RSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RQRD_SMN_ADJ_RSN because MAN_LLL_SEMEN_ADJ exists.')
 !!


CREATE TRIGGER D0158U01
  NO CASCADE BEFORE UPDATE
  ON RSLV_MTHD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_RSLV_MTHD AFTER DELETE ON RSLV_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_UPD_RSLV_ERR WHERE HERD_UPD_RSLV_ERR.RSLV_MTHD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* RSLV_MTHD  HERD_UPD_RSLV_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000936d", PARENT_OWNER="", PARENT_TABLE="RSLV_MTHD"
    CHILD_OWNER="", CHILD_TABLE="HERD_UPD_RSLV_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0158_001", FK_COLUMNS="RSLV_MTHD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete RSLV_MTHD because HERD_UPD_RSLV_ERR exists.')
 !!


CREATE TRIGGER D0841U01
  NO CASCADE BEFORE UPDATE
  ON SAMPLE_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SAMPLE_TEST AFTER DELETE ON SAMPLE_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAMPLE_TEST_PARENT WHERE SAMPLE_TEST_PARENT.SAMPLE_TEST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SAMPLE_TEST  SAMPLE_TEST_PARENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000945a", PARENT_OWNER="", PARENT_TABLE="SAMPLE_TEST"
    CHILD_OWNER="", CHILD_TABLE="SAMPLE_TEST_PARENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0841_001", FK_COLUMNS="SAMPLE_TEST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAMPLE_TEST because SAMPLE_TEST_PARENT exists.')
 !!


CREATE TRIGGER D0868U01
  NO CASCADE BEFORE UPDATE
  ON SAMPLE_TEST_PARENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0867U01
  NO CASCADE BEFORE UPDATE
  ON SAMPLE_TEST_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SAMPLE_TEST_RSL AFTER DELETE ON SAMPLE_TEST_RSLT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAMPLE_TEST WHERE SAMPLE_TEST.SAMPLE_TEST_RSLT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SAMPLE_TEST_RSLT  SAMPLE_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099c7", PARENT_OWNER="", PARENT_TABLE="SAMPLE_TEST_RSLT"
    CHILD_OWNER="", CHILD_TABLE="SAMPLE_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0867_001", FK_COLUMNS="SAMPLE_TEST_RSLT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAMPLE_TEST_RSLT because SAMPLE_TEST exists.')
 !!


CREATE TRIGGER D0953U01
  NO CASCADE BEFORE UPDATE
  ON SAP_AB_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SAP_AB_PROD AFTER DELETE ON SAP_AB_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.SAP_BACKUP_YRLG_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SAP_AB_PROD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009695", PARENT_OWNER="", PARENT_TABLE="SAP_AB_PROD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0953_004", FK_COLUMNS="SAP_BACKUP_YRLG_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAP_AB_PROD because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_SAP_AB_PROD2 AFTER DELETE ON SAP_AB_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.SAP_BACKUP_COW_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SAP_AB_PROD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094f8", PARENT_OWNER="", PARENT_TABLE="SAP_AB_PROD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0953_003", FK_COLUMNS="SAP_BACKUP_COW_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAP_AB_PROD because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_SAP_AB_PROD3 AFTER DELETE ON SAP_AB_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.SAP_YRLG_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SAP_AB_PROD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000940a", PARENT_OWNER="", PARENT_TABLE="SAP_AB_PROD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0953_002", FK_COLUMNS="SAP_YRLG_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAP_AB_PROD because LIC_SAP_AB_PROD exists.')
 !!

CREATE  TRIGGER tD_SAP_AB_PROD4 AFTER DELETE ON SAP_AB_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_SAP_AB_PROD WHERE LIC_SAP_AB_PROD.SAP_COW_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SAP_AB_PROD  LIC_SAP_AB_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009039", PARENT_OWNER="", PARENT_TABLE="SAP_AB_PROD"
    CHILD_OWNER="", CHILD_TABLE="LIC_SAP_AB_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0953_001", FK_COLUMNS="SAP_COW_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAP_AB_PROD because LIC_SAP_AB_PROD exists.')
 !!


CREATE TRIGGER D0922U01
  NO CASCADE BEFORE UPDATE
  ON SAP_INTERFACE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SAP_INTERFACE AFTER DELETE ON SAP_INTERFACE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAP_LIC_ORDER WHERE SAP_LIC_ORDER.SAP_INTERFACE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SAP_INTERFACE  SAP_LIC_ORDER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009148", PARENT_OWNER="", PARENT_TABLE="SAP_INTERFACE"
    CHILD_OWNER="", CHILD_TABLE="SAP_LIC_ORDER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0922_001", FK_COLUMNS="SAP_INTERFACE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SAP_INTERFACE because SAP_LIC_ORDER exists.')
 !!


CREATE TRIGGER D0105U01
  NO CASCADE BEFORE UPDATE
  ON SAP_LIC_ORDER
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0772I01
  NO CASCADE BEFORE INSERT
  ON SAR_DESP_ORDER
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from geo_area ga
    WHERE ga.id = new.SAR_id and ga.geo_area_tp_cd = 'SAR'))
SIGNAL SQLSTATE 'Z0772'
('D0772I01: the SAR_id must have an area type code of SAR')
 !!


CREATE TRIGGER D0772U01
  NO CASCADE BEFORE UPDATE
  ON SAR_DESP_ORDER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0772U02
  NO CASCADE BEFORE UPDATE OF 
                    SAR_id
  ON SAR_DESP_ORDER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from geo_area ga
    WHERE ga.id = new.SAR_id and ga.geo_area_tp_cd = 'SAR'))
SIGNAL SQLSTATE 'Z0772'
('D0772U02: the SAR_id must have an area type code of SAR')
 !!


CREATE TRIGGER D0565I01
  NO CASCADE BEFORE INSERT
  ON SC_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0565'
('D0565I01: invalid ae source code')
 !!


CREATE TRIGGER D0565U01
  NO CASCADE BEFORE UPDATE
  ON SC_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0565U02
  NO CASCADE BEFORE UPDATE OF 
                    ae_source_cd
  ON SC_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0565'
('D0565U02: invalid ae source code')
 !!


CREATE TRIGGER D0160U01
  NO CASCADE BEFORE UPDATE
  ON SC_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0207U01
  NO CASCADE BEFORE UPDATE
  ON SC_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SC_RUN AFTER DELETE ON SC_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SC_RUN_AE_BRD WHERE SC_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                SC_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* SC_RUN  SC_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000967d", PARENT_OWNER="", PARENT_TABLE="SC_RUN"
    CHILD_OWNER="", CHILD_TABLE="SC_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0207_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SC_RUN because SC_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0272U01
  NO CASCADE BEFORE UPDATE
  ON SC_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0530U01
  NO CASCADE BEFORE UPDATE
  ON SCC_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0261I51
  NO CASCADE BEFORE INSERT
  ON SCC_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0261I52
  NO CASCADE BEFORE INSERT
  ON SCC_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0261U01
  NO CASCADE BEFORE UPDATE
  ON SCC_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0261U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON SCC_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0261U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON SCC_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0195U01
  NO CASCADE BEFORE UPDATE
  ON SEASON
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SEASON AFTER DELETE ON SEASON
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM RPRT_PRPS WHERE RPRT_PRPS.SSN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SEASON  RPRT_PRPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008134", PARENT_OWNER="", PARENT_TABLE="SEASON"
    CHILD_OWNER="", CHILD_TABLE="RPRT_PRPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0195_001", FK_COLUMNS="SSN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SEASON because RPRT_PRPS exists.')
 !!


CREATE TRIGGER D0196U01
  NO CASCADE BEFORE UPDATE
  ON SEL_RPRT_PARM_VAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0612I01
  NO CASCADE BEFORE INSERT
  ON SEMEN_BATCH
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.colln_year = YEAR(new.colln_date)
 !!


CREATE TRIGGER D0612U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_BATCH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (YEAR(old.colln_date) != YEAR(new.colln_date))
SET new.colln_year = YEAR(new.colln_date)
 !!


CREATE TRIGGER D0612U02
  NO CASCADE BEFORE UPDATE
  ON SEMEN_BATCH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0612I02
  NO CASCADE BEFORE INSERT
  ON SEMEN_BATCH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.colln_year >= 2003
  AND (new.final_vol IS NULL OR new.final_conc IS NULL)
  AND EXISTS (
    SELECT 1 FROM lab_proc_mthd lpm
    WHERE lpm.cd = new.proc_method_cd
      AND lpm.smn_prsrvtn_cd = 'LLL'))
SIGNAL SQLSTATE 'Z0612'
('D0612I02: final_vol and final_conc mandatory for LLL')
 !!


CREATE TRIGGER D0612U03
  NO CASCADE BEFORE UPDATE
  ON SEMEN_BATCH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.colln_year >= 2003
  AND (new.final_vol IS NULL OR new.final_conc IS NULL)
  AND EXISTS (
    SELECT 1 FROM lab_proc_mthd lpm
    WHERE lpm.cd = new.proc_method_cd
      AND lpm.smn_prsrvtn_cd = 'LLL'))
SIGNAL SQLSTATE 'Z0612'
('D0612U03: final_vol and final_conc mandatory for LLL')
 !!


CREATE  TRIGGER tD_SEMEN_BATCH AFTER DELETE ON SEMEN_BATCH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_BATCH_MKT WHERE SEMEN_BATCH_MKT.BATCH_NUM = old.NUM AND
                                                  SEMEN_BATCH_MKT.COLLN_YEAR = old.COLLN_YEAR) > 0)
    /* erwin Builtin Trigger */
    /* SEMEN_BATCH  SEMEN_BATCH_MKT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000096df", PARENT_OWNER="", PARENT_TABLE="SEMEN_BATCH"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_BATCH_MKT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0612_002", FK_COLUMNS="BATCH_NUM""COLLN_YEAR" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SEMEN_BATCH because SEMEN_BATCH_MKT exists.')
 !!

CREATE  TRIGGER tD_SEMEN_BATCH2 AFTER DELETE ON SEMEN_BATCH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DESP_LLL_SEMEN WHERE DESP_LLL_SEMEN.SEMEN_BATCH_NUM = old.NUM AND
                                                 DESP_LLL_SEMEN.SEMEN_COLLN_YEAR = old.COLLN_YEAR) > 0)
    /* erwin Builtin Trigger */
    /* SEMEN_BATCH  DESP_LLL_SEMEN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009ccd", PARENT_OWNER="", PARENT_TABLE="SEMEN_BATCH"
    CHILD_OWNER="", CHILD_TABLE="DESP_LLL_SEMEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0612_001", FK_COLUMNS="SEMEN_BATCH_NUM""SEMEN_COLLN_YEAR" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SEMEN_BATCH because DESP_LLL_SEMEN exists.')
 !!


CREATE TRIGGER D0802U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_BATCH_MKT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0801U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_MORPHOLOGY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0801U02
  AFTER UPDATE
  ON SEMEN_MORPHOLOGY
  
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0801I01
  AFTER INSERT
  ON SEMEN_MORPHOLOGY
  
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0801D01
  AFTER DELETE
  ON SEMEN_MORPHOLOGY
  
  FOR EACH ROW
UPDATE lab_refresh_ctrl SET update_num = update_num + 1 WHERE id = 1
 !!


CREATE TRIGGER D0574U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_ORDER_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0573U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0573I01
  NO CASCADE BEFORE INSERT
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dam_anml_key IS NOT NULL)
SET new.breeder_party_id = (
  SELECT baa.breeder_party_id
  FROM bull_acq_approach baa
  WHERE baa.dam_anml_key = new.dam_anml_key
    AND baa.ssn = new.ssn
    AND baa.num = new.bull_acq_num)
 !!


CREATE TRIGGER D0573U02
  NO CASCADE BEFORE UPDATE OF 
                    dam_anml_key,
                    ssn,
                    bull_acq_num,
                    breeder_party_id
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dam_anml_key IS NOT NULL)
SET new.breeder_party_id = (
  SELECT baa.breeder_party_id
  FROM bull_acq_approach baa
  WHERE baa.dam_anml_key = new.dam_anml_key
    AND baa.ssn = new.ssn
    AND baa.num = new.bull_acq_num)
 !!


CREATE TRIGGER D0573I02
  NO CASCADE BEFORE INSERT
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_ORDER_RSN_CD'
      AND c.cd = new.rsn_cd) )
SIGNAL SQLSTATE 'Z0573'
('D0573I02: invalid semen order reason code')
 !!


CREATE TRIGGER D0573U03
  NO CASCADE BEFORE UPDATE OF 
                    rsn_cd
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_ORDER_RSN_CD'
      AND c.cd = new.rsn_cd) )
SIGNAL SQLSTATE 'Z0573'
('D0573I02: invalid semen order reason code')
 !!


CREATE TRIGGER D0573I03
  NO CASCADE BEFORE INSERT
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'INSEM_TP_CD'
      AND c.cd = new.insem_tp_cd) )
SIGNAL SQLSTATE 'Z0573'
('D0573I03: invalid insemination type code')
 !!


CREATE TRIGGER D0573U04
  NO CASCADE BEFORE UPDATE
  ON SEMEN_ORDER_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'INSEM_TP_CD'
      AND c.cd = new.insem_tp_cd) )
SIGNAL SQLSTATE 'Z0573'
('D0573U04: invalid insemination type code')
 !!


CREATE  TRIGGER tD_SEMEN_ORDER_HDR AFTER DELETE ON SEMEN_ORDER_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_ORDER_DTL WHERE SEMEN_ORDER_DTL.SEMEN_ORDER_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SEMEN_ORDER_HDR  SEMEN_ORDER_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009254", PARENT_OWNER="", PARENT_TABLE="SEMEN_ORDER_HDR"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_ORDER_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0573_001", FK_COLUMNS="SEMEN_ORDER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SEMEN_ORDER_HDR because SEMEN_ORDER_DTL exists.')
 !!


CREATE TRIGGER D0647U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_SPLR_BRAND_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0647I01
  NO CASCADE BEFORE INSERT
  ON SEMEN_SPLR_BRAND_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 
   FROM smn_splr_brand spb
      , datamate_prod dp
   WHERE new.semen_splr_brand_cd = spb.cd
     AND spb.datamate_prod_cd = dp.cd
     AND dp.brd_restrict_ind = 'Y'))
SIGNAL SQLSTATE 'Z0647'
('D0647I01: cannot specify breed for this brand')
 !!


CREATE TRIGGER D0490U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_SPLR_BRAND_PRESERV
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0853D01
  AFTER DELETE
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO semen_stock_prod_cd_conv_hist (
  prod_cd_conv_id
, upd_time
, lab_market_cd
, upd_user_id
, prod_tp_cd)
VALUES (
  old.id
, old.upd_time
, old.lab_market_cd
, old.upd_user_id
, old.prod_tp_cd)
 !!


CREATE TRIGGER D0853U02
  AFTER UPDATE
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO semen_stock_prod_cd_conv_hist (
  prod_cd_conv_id
, upd_time
, lab_market_cd
, upd_user_id
, prod_tp_cd)
VALUES (
  old.id
, old.upd_time
, old.lab_market_cd
, old.upd_user_id
, old.prod_tp_cd)
 !!


CREATE TRIGGER D0853U01
  NO CASCADE BEFORE UPDATE
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0853I01
  NO CASCADE BEFORE INSERT
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_STOCK_PROD_TP_CD'
      AND c.cd = new.prod_tp_cd) )
SIGNAL SQLSTATE 'Z0853'
('D0853I01: product type code')
 !!


CREATE TRIGGER D0853U03
  NO CASCADE BEFORE UPDATE OF 
                    prod_tp_cd
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.prod_tp_cd != old.prod_tp_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_STOCK_PROD_TP_CD'
      AND c.cd = new.prod_tp_cd) )
SIGNAL SQLSTATE 'Z0853'
('D0853U03: product type code')
 !!


CREATE TRIGGER D0853U04
  NO CASCADE BEFORE UPDATE OF 
                    material_append_cd
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.material_append_cd != old.material_append_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_STOCK_MATERIAL_APPEND_CD'
      AND c.cd = new.material_append_cd) )
SIGNAL SQLSTATE 'Z0853'
('D0853U04: material append code')
 !!


CREATE TRIGGER D0853I02
  NO CASCADE BEFORE INSERT
  ON SEMEN_STOCK_PROD_CD_CONV
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.material_append_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SEMEN_STOCK_MATERIAL_APPEND_CD'
      AND c.cd = new.material_append_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0853'
('D0853I02: material append code')
 !!


CREATE TRIGGER D0119U01
  NO CASCADE BEFORE UPDATE
  ON SEQ_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0643U01
  NO CASCADE BEFORE UPDATE
  ON SESS_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0075U01
  NO CASCADE BEFORE UPDATE
  ON SESS_PROPERTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0477U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_AHB_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0478U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_BRTH_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0479U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_HLTH_TREATMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0480U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_INVC
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0481U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_INVC_LINE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0482U01
  NO CASCADE BEFORE UPDATE
  ON SESS_TRACE_MVMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0305U01
  NO CASCADE BEFORE UPDATE
  ON SHR_REG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0970I01
  NO CASCADE BEFORE INSERT
  ON SIL_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from animal a
    WHERE a.anml_key = new.anml_key
      AND a.spcs_cd = 'S') )
SIGNAL SQLSTATE 'Z0970'
('D0970I01: animal species must be ''S''')
 !!


CREATE TRIGGER D0970U02
  NO CASCADE BEFORE UPDATE OF 
                    anml_key
  ON SIL_ANML_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.anml_key != new.anml_key 
  AND NOT EXISTS
  (SELECT 1 from animal a
    WHERE a.anml_key = new.anml_key
      AND a.spcs_cd = 'S') )
SIGNAL SQLSTATE 'Z0970'
('D0970U02: animal species must be ''S''')
 !!


CREATE TRIGGER D0970U01
  NO CASCADE BEFORE UPDATE
  ON SIL_ANML_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0551I51
  NO CASCADE BEFORE INSERT
  ON SIRE_CLVG_DIFF
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.extr_date_d IS NULL 
  AND new.extr_date IS NOT NULL
   OR CHAR(new.extr_date_d,ISO) = '0001-01-01'
  AND new.extr_date IS NOT NULL)
SET new.extr_date_d =
  CASE WHEN new.extr_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.extr_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0551I52
  NO CASCADE BEFORE INSERT
  ON SIRE_CLVG_DIFF
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.extr_date IS NULL 
  AND new.extr_date_d IS NOT NULL
  AND CHAR(new.extr_date_d,ISO) != '0001-01-01'
   OR new.extr_date = 0
  AND new.extr_date_d IS NOT NULL
  AND CHAR(new.extr_date_d,ISO) != '0001-01-01')
SET new.extr_date =
  CASE WHEN new.extr_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.extr_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.extr_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.extr_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0551U01
  NO CASCADE BEFORE UPDATE
  ON SIRE_CLVG_DIFF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0551U51
  NO CASCADE BEFORE UPDATE OF 
                    extr_date
  ON SIRE_CLVG_DIFF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.extr_date != new.extr_date
   OR old.extr_date IS NULL AND new.extr_date IS NOT NULL
   OR old.extr_date IS NOT NULL AND new.extr_date IS NULL)
SET new.extr_date_d =
  CASE WHEN new.extr_date = 0 OR new.extr_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.extr_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0551U52
  NO CASCADE BEFORE UPDATE OF 
                    extr_date_d
  ON SIRE_CLVG_DIFF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.extr_date_d != new.extr_date_d
   OR old.extr_date_d IS NULL and new.extr_date_d IS NOT NULL
   OR old.extr_date_d IS NOT NULL and new.extr_date_d IS NULL)
SET new.extr_date =
  CASE WHEN new.extr_date_d IS NULL OR new.extr_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.extr_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.extr_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.extr_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0167U01
  NO CASCADE BEFORE UPDATE
  ON SMN_ABNM
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0054U01
  AFTER UPDATE OF 
        sps_sync_sfty_mrgn,
        sps_nc_sfty_mrgn,
        prstgl_days
  ON SMN_ALCN_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name)
  VALUES ('SMN_ALCN_CTRL')
 !!


CREATE TRIGGER D0054U02
  NO CASCADE BEFORE UPDATE
  ON SMN_ALCN_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0301U01
  NO CASCADE BEFORE UPDATE
  ON SMN_ALCN_FACT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0367U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON SMN_BATCH_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0367I53
  NO CASCADE BEFORE INSERT
  ON SMN_BATCH_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0367U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON SMN_BATCH_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0367I54
  NO CASCADE BEFORE INSERT
  ON SMN_BATCH_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0367I52
  NO CASCADE BEFORE INSERT
  ON SMN_BATCH_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0367I51
  NO CASCADE BEFORE INSERT
  ON SMN_BATCH_CHRG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0367U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON SMN_BATCH_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0367U01
  NO CASCADE BEFORE UPDATE
  ON SMN_BATCH_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0367U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON SMN_BATCH_CHRG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0101U01
  NO CASCADE BEFORE UPDATE
  ON SMN_DEMAND_RECALC
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0300I51
  NO CASCADE BEFORE INSERT
  ON SMN_DESP_RGN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.desp_date_d IS NULL 
  AND new.desp_date IS NOT NULL
   OR CHAR(new.desp_date_d,ISO) = '0001-01-01'
  AND new.desp_date IS NOT NULL)
SET new.desp_date_d =
  CASE WHEN new.desp_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.desp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0300I52
  NO CASCADE BEFORE INSERT
  ON SMN_DESP_RGN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.desp_date IS NULL 
  AND new.desp_date_d IS NOT NULL
  AND CHAR(new.desp_date_d,ISO) != '0001-01-01'
   OR new.desp_date = 0
  AND new.desp_date_d IS NOT NULL
  AND CHAR(new.desp_date_d,ISO) != '0001-01-01')
SET new.desp_date =
  CASE WHEN new.desp_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.desp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0300U01
  NO CASCADE BEFORE UPDATE
  ON SMN_DESP_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0300U51
  NO CASCADE BEFORE UPDATE OF 
                    desp_date
  ON SMN_DESP_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.desp_date != new.desp_date
   OR old.desp_date IS NULL AND new.desp_date IS NOT NULL
   OR old.desp_date IS NOT NULL AND new.desp_date IS NULL)
SET new.desp_date_d =
  CASE WHEN new.desp_date = 0 OR new.desp_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.desp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0300U52
  NO CASCADE BEFORE UPDATE OF 
                    desp_date_d
  ON SMN_DESP_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.desp_date_d != new.desp_date_d
   OR old.desp_date_d IS NULL and new.desp_date_d IS NOT NULL
   OR old.desp_date_d IS NOT NULL and new.desp_date_d IS NULL)
SET new.desp_date =
  CASE WHEN new.desp_date_d IS NULL OR new.desp_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.desp_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.desp_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0297I01
  NO CASCADE BEFORE INSERT
  ON SMN_DIST_PT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.smn_alcn_rgn_id
        AND ga.geo_area_tp_cd = 'SAR ')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0297'
('D0297I01: geographic area type must be a semen allocation region')
 !!


CREATE TRIGGER D0297U01
  NO CASCADE BEFORE UPDATE OF 
                    smn_alcn_rgn_id
  ON SMN_DIST_PT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS (
        SELECT 1 FROM geo_area ga
        WHERE ga.id = new.smn_alcn_rgn_id
        AND ga.geo_area_tp_cd = 'SAR ')
     )
-- the geographic area type must be a semen allocation region
SIGNAL SQLSTATE 'Z0297'
('D0297U01: geographic area type must be a semen allocation region')
 !!


CREATE TRIGGER D0297U02
  AFTER UPDATE OF 
        smn_alcn_rgn_id
  ON SMN_DIST_PT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.smn_alcn_rgn_id != old.smn_alcn_rgn_id)
INSERT INTO smn_demand_recalc (tbl_name, parm)
VALUES (
  'SMN_DIST_PT', new.rgn_cd || '|' ||
  LTRIM(RTRIM (CHAR (new.num))) || '|'
)
 !!


CREATE TRIGGER D0297U03
  NO CASCADE BEFORE UPDATE
  ON SMN_DIST_PT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0056U01
  NO CASCADE BEFORE UPDATE
  ON SMN_PRSRVTN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SMN_PRSRVTN AFTER DELETE ON SMN_PRSRVTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM DMATE_SEMEN_STOCK_ITEM WHERE DMATE_SEMEN_STOCK_ITEM.SEMEN_PRESERV_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_PRSRVTN  DMATE_SEMEN_STOCK_ITEM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009677", PARENT_OWNER="", PARENT_TABLE="SMN_PRSRVTN"
    CHILD_OWNER="", CHILD_TABLE="DMATE_SEMEN_STOCK_ITEM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0056_004", FK_COLUMNS="SEMEN_PRESERV_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_PRSRVTN because DMATE_SEMEN_STOCK_ITEM exists.')
 !!

CREATE  TRIGGER tD_SMN_PRSRVTN2 AFTER DELETE ON SMN_PRSRVTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_SPLR_BRAND_PRESERV WHERE SEMEN_SPLR_BRAND_PRESERV.SEMEN_PRESERV_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_PRSRVTN  SEMEN_SPLR_BRAND_PRESERV on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a2c6", PARENT_OWNER="", PARENT_TABLE="SMN_PRSRVTN"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_SPLR_BRAND_PRESERV"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0056_003", FK_COLUMNS="SEMEN_PRESERV_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_PRSRVTN because SEMEN_SPLR_BRAND_PRESERV exists.')
 !!

CREATE  TRIGGER tD_SMN_PRSRVTN3 AFTER DELETE ON SMN_PRSRVTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROD_PRSRVTN WHERE PROD_PRSRVTN.SMN_PRSRVTN_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_PRSRVTN  PROD_PRSRVTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cf6", PARENT_OWNER="", PARENT_TABLE="SMN_PRSRVTN"
    CHILD_OWNER="", CHILD_TABLE="PROD_PRSRVTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0056_001", FK_COLUMNS="SMN_PRSRVTN_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_PRSRVTN because PROD_PRSRVTN exists.')
 !!

CREATE  TRIGGER tD_SMN_PRSRVTN4 AFTER DELETE ON SMN_PRSRVTN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_SEMEN_BATCH WHERE TECH_SEMEN_BATCH.SEMEN_PRESERV_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_PRSRVTN  TECH_SEMEN_BATCH on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000977a", PARENT_OWNER="", PARENT_TABLE="SMN_PRSRVTN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SEMEN_BATCH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0056_002", FK_COLUMNS="SEMEN_PRESERV_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_PRSRVTN because TECH_SEMEN_BATCH exists.')
 !!


CREATE TRIGGER D0549I01
  NO CASCADE BEFORE INSERT
  ON SMN_SPLR_BRAND
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.core_prod_cd IS NOT NULL
  AND new.datamate_prod_cd IS NOT NULL
  AND EXISTS (
    SELECT 1 FROM smn_splr_brand spb
    WHERE new.core_prod_cd = spb.core_prod_cd
      AND new.datamate_prod_cd != spb.datamate_prod_cd))
SIGNAL SQLSTATE 'Z0549'
('D0549I01: row exists with same core prod but different datamate prod')
 !!


CREATE TRIGGER D0549U02
  NO CASCADE BEFORE UPDATE OF 
                    core_prod_cd,
                    datamate_prod_cd
  ON SMN_SPLR_BRAND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.core_prod_cd IS NOT NULL
  AND new.datamate_prod_cd IS NOT NULL
  AND EXISTS (
    SELECT 1 FROM smn_splr_brand spb
    WHERE new.cd != spb.cd
      AND new.core_prod_cd = spb.core_prod_cd
      AND new.datamate_prod_cd != spb.datamate_prod_cd))
SIGNAL SQLSTATE 'Z0549'
('D0549U02: row exists with same core prod but different datamate prod')
 !!


CREATE TRIGGER D0549U01
  NO CASCADE BEFORE UPDATE
  ON SMN_SPLR_BRAND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SMN_SPLR_BRAND AFTER DELETE ON SMN_SPLR_BRAND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_SPLR_BRAND_PRESERV WHERE SEMEN_SPLR_BRAND_PRESERV.SEMEN_SPLR_BRAND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_SPLR_BRAND  SEMEN_SPLR_BRAND_PRESERV on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a416", PARENT_OWNER="", PARENT_TABLE="SMN_SPLR_BRAND"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_SPLR_BRAND_PRESERV"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0549_002", FK_COLUMNS="SEMEN_SPLR_BRAND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_SPLR_BRAND because SEMEN_SPLR_BRAND_PRESERV exists.')
 !!

CREATE  TRIGGER tD_SMN_SPLR_BRAND2 AFTER DELETE ON SMN_SPLR_BRAND
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SEMEN_SPLR_BRAND_BRD WHERE SEMEN_SPLR_BRAND_BRD.SEMEN_SPLR_BRAND_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMN_SPLR_BRAND  SEMEN_SPLR_BRAND_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009f5b", PARENT_OWNER="", PARENT_TABLE="SMN_SPLR_BRAND"
    CHILD_OWNER="", CHILD_TABLE="SEMEN_SPLR_BRAND_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0549_001", FK_COLUMNS="SEMEN_SPLR_BRAND_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMN_SPLR_BRAND because SEMEN_SPLR_BRAND_BRD exists.')
 !!


CREATE TRIGGER D0437U01
  NO CASCADE BEFORE UPDATE
  ON SMN_SPLY_AUDIT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0204U01
  NO CASCADE BEFORE UPDATE
  ON SMN_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0510U01
  NO CASCADE BEFORE UPDATE
  ON SMPL_COLLN_MTHD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SMPL_COLLN_MTHD AFTER DELETE ON SMPL_COLLN_MTHD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_DT_PLAN WHERE HERD_DT_PLAN.SMPL_COLLN_MTHD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SMPL_COLLN_MTHD  HERD_DT_PLAN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099f6", PARENT_OWNER="", PARENT_TABLE="SMPL_COLLN_MTHD"
    CHILD_OWNER="", CHILD_TABLE="HERD_DT_PLAN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0510_001", FK_COLUMNS="SMPL_COLLN_MTHD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SMPL_COLLN_MTHD because HERD_DT_PLAN exists.')
 !!


CREATE TRIGGER D0191U01
  NO CASCADE BEFORE UPDATE
  ON SMPL_NON_USE_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0401U01
  NO CASCADE BEFORE UPDATE
  ON SOF_AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0401i51
  NO CASCADE BEFORE INSERT
  ON SOF_AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0401I52
  NO CASCADE BEFORE INSERT
  ON SOF_AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0401I53
  NO CASCADE BEFORE INSERT
  ON SOF_AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0401I54
  NO CASCADE BEFORE INSERT
  ON SOF_AB_MTNG_PLAN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0401U51
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON SOF_AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0401U53
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON SOF_AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0401U52
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON SOF_AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0401U54
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON SOF_AB_MTNG_PLAN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0850U01
  NO CASCADE BEFORE UPDATE
  ON SOF_AB_MTNG_PLAN_CHANGE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0485U01
  NO CASCADE BEFORE UPDATE
  ON SOF_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0405U01
  NO CASCADE BEFORE UPDATE
  ON SOF_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0403U01
  NO CASCADE BEFORE UPDATE
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0403I51
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_d IS NULL 
  AND new.clvg_st_date IS NOT NULL
   OR CHAR(new.clvg_st_date_d,ISO) = '0001-01-01'
  AND new.clvg_st_date IS NOT NULL)
SET new.clvg_st_date_d =
  CASE WHEN new.clvg_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I52
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date IS NULL 
  AND new.clvg_st_date_d IS NOT NULL
  AND CHAR(new.clvg_st_date_d,ISO) != '0001-01-01'
   OR new.clvg_st_date = 0
  AND new.clvg_st_date_d IS NOT NULL
  AND CHAR(new.clvg_st_date_d,ISO) != '0001-01-01')
SET new.clvg_st_date =
  CASE WHEN new.clvg_st_date_d IS NULL THEN 0 ELSE
  INT(new.clvg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403I53
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.punch_date_d IS NULL 
  AND new.punch_date IS NOT NULL
   OR CHAR(new.punch_date_d,ISO) = '0001-01-01'
  AND new.punch_date IS NOT NULL)
SET new.punch_date_d =
  CASE WHEN new.punch_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.punch_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I54
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.punch_date IS NULL 
  AND new.punch_date_d IS NOT NULL
  AND CHAR(new.punch_date_d,ISO) != '0001-01-01'
   OR new.punch_date = 0
  AND new.punch_date_d IS NOT NULL
  AND CHAR(new.punch_date_d,ISO) != '0001-01-01')
SET new.punch_date =
  CASE WHEN new.punch_date_d IS NULL THEN 0 ELSE
  INT(new.punch_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403I55
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date_d IS NULL 
  AND new.vfy_date IS NOT NULL
   OR CHAR(new.vfy_date_d,ISO) = '0001-01-01'
  AND new.vfy_date IS NOT NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I56
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date IS NULL 
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01'
   OR new.vfy_date = 0
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01')
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL THEN 0 ELSE
  INT(new.vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403I57
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date_d IS NULL 
  AND new.proc_date IS NOT NULL
   OR CHAR(new.proc_date_d,ISO) = '0001-01-01'
  AND new.proc_date IS NOT NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I58
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date IS NULL 
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01'
   OR new.proc_date = 0
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01')
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL THEN 0 ELSE
  INT(new.proc_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403I59
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_2_d IS NULL 
  AND new.clvg_st_date_2 IS NOT NULL
   OR CHAR(new.clvg_st_date_2_d,ISO) = '0001-01-01'
  AND new.clvg_st_date_2 IS NOT NULL)
SET new.clvg_st_date_2_d =
  CASE WHEN new.clvg_st_date_2 = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I60
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_st_date_2 IS NULL 
  AND new.clvg_st_date_2_d IS NOT NULL
  AND CHAR(new.clvg_st_date_2_d,ISO) != '0001-01-01'
   OR new.clvg_st_date_2 = 0
  AND new.clvg_st_date_2_d IS NOT NULL
  AND CHAR(new.clvg_st_date_2_d,ISO) != '0001-01-01')
SET new.clvg_st_date_2 =
  CASE WHEN new.clvg_st_date_2_d IS NULL THEN 0 ELSE
  INT(new.clvg_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0403I61
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_1_d IS NULL 
  AND new.mtng_st_date_1 IS NOT NULL
   OR CHAR(new.mtng_st_date_1_d,ISO) = '0001-01-01'
  AND new.mtng_st_date_1 IS NOT NULL)
SET new.mtng_st_date_1_d =
  CASE WHEN new.mtng_st_date_1 = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_1+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I62
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_1 IS NULL 
  AND new.mtng_st_date_1_d IS NOT NULL
  AND CHAR(new.mtng_st_date_1_d,ISO) != '0001-01-01'
   OR new.mtng_st_date_1 = 0
  AND new.mtng_st_date_1_d IS NOT NULL
  AND CHAR(new.mtng_st_date_1_d,ISO) != '0001-01-01')
SET new.mtng_st_date_1 =
  CASE WHEN new.mtng_st_date_1_d IS NULL THEN 0 ELSE
  INT(new.mtng_st_date_1_d) - 19000000 END
 !!


CREATE TRIGGER D0403I63
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_2_d IS NULL 
  AND new.mtng_st_date_2 IS NOT NULL
   OR CHAR(new.mtng_st_date_2_d,ISO) = '0001-01-01'
  AND new.mtng_st_date_2 IS NOT NULL)
SET new.mtng_st_date_2_d =
  CASE WHEN new.mtng_st_date_2 = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I64
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mtng_st_date_2 IS NULL 
  AND new.mtng_st_date_2_d IS NOT NULL
  AND CHAR(new.mtng_st_date_2_d,ISO) != '0001-01-01'
   OR new.mtng_st_date_2 = 0
  AND new.mtng_st_date_2_d IS NOT NULL
  AND CHAR(new.mtng_st_date_2_d,ISO) != '0001-01-01')
SET new.mtng_st_date_2 =
  CASE WHEN new.mtng_st_date_2_d IS NULL THEN 0 ELSE
  INT(new.mtng_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0403I65
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mvmt_date_d IS NULL 
  AND new.mvmt_date IS NOT NULL
   OR CHAR(new.mvmt_date_d,ISO) = '0001-01-01'
  AND new.mvmt_date IS NOT NULL)
SET new.mvmt_date_d =
  CASE WHEN new.mvmt_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mvmt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403I66
  NO CASCADE BEFORE INSERT
  ON SOF_HERD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.mvmt_date IS NULL 
  AND new.mvmt_date_d IS NOT NULL
  AND CHAR(new.mvmt_date_d,ISO) != '0001-01-01'
   OR new.mvmt_date = 0
  AND new.mvmt_date_d IS NOT NULL
  AND CHAR(new.mvmt_date_d,ISO) != '0001-01-01')
SET new.mvmt_date =
  CASE WHEN new.mvmt_date_d IS NULL THEN 0 ELSE
  INT(new.mvmt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403U51
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date != new.clvg_st_date
   OR old.clvg_st_date IS NULL AND new.clvg_st_date IS NOT NULL
   OR old.clvg_st_date IS NOT NULL AND new.clvg_st_date IS NULL)
SET new.clvg_st_date_d =
  CASE WHEN new.clvg_st_date = 0 OR new.clvg_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U52
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_d != new.clvg_st_date_d
   OR old.clvg_st_date_d IS NULL and new.clvg_st_date_d IS NOT NULL
   OR old.clvg_st_date_d IS NOT NULL and new.clvg_st_date_d IS NULL)
SET new.clvg_st_date =
  CASE WHEN new.clvg_st_date_d IS NULL OR new.clvg_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.clvg_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403U55
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date != new.vfy_date
   OR old.vfy_date IS NULL AND new.vfy_date IS NOT NULL
   OR old.vfy_date IS NOT NULL AND new.vfy_date IS NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 OR new.vfy_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U53
  NO CASCADE BEFORE UPDATE OF 
                    punch_date
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.punch_date != new.punch_date
   OR old.punch_date IS NULL AND new.punch_date IS NOT NULL
   OR old.punch_date IS NOT NULL AND new.punch_date IS NULL)
SET new.punch_date_d =
  CASE WHEN new.punch_date = 0 OR new.punch_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.punch_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U54
  NO CASCADE BEFORE UPDATE OF 
                    punch_date_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.punch_date_d != new.punch_date_d
   OR old.punch_date_d IS NULL and new.punch_date_d IS NOT NULL
   OR old.punch_date_d IS NOT NULL and new.punch_date_d IS NULL)
SET new.punch_date =
  CASE WHEN new.punch_date_d IS NULL OR new.punch_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.punch_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403U56
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date_d != new.vfy_date_d
   OR old.vfy_date_d IS NULL and new.vfy_date_d IS NOT NULL
   OR old.vfy_date_d IS NOT NULL and new.vfy_date_d IS NULL)
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL OR new.vfy_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403U59
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_2
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_2 != new.clvg_st_date_2
   OR old.clvg_st_date_2 IS NULL AND new.clvg_st_date_2 IS NOT NULL
   OR old.clvg_st_date_2 IS NOT NULL AND new.clvg_st_date_2 IS NULL)
SET new.clvg_st_date_2_d =
  CASE WHEN new.clvg_st_date_2 = 0 OR new.clvg_st_date_2 IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U60
  NO CASCADE BEFORE UPDATE OF 
                    clvg_st_date_2_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_st_date_2_d != new.clvg_st_date_2_d
   OR old.clvg_st_date_2_d IS NULL and new.clvg_st_date_2_d IS NOT NULL
   OR old.clvg_st_date_2_d IS NOT NULL and new.clvg_st_date_2_d IS NULL)
SET new.clvg_st_date_2 =
  CASE WHEN new.clvg_st_date_2_d IS NULL OR new.clvg_st_date_2_d = '0001-01-01' THEN 0 ELSE
  INT(new.clvg_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0403U61
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_1
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_1 != new.mtng_st_date_1
   OR old.mtng_st_date_1 IS NULL AND new.mtng_st_date_1 IS NOT NULL
   OR old.mtng_st_date_1 IS NOT NULL AND new.mtng_st_date_1 IS NULL)
SET new.mtng_st_date_1_d =
  CASE WHEN new.mtng_st_date_1 = 0 OR new.mtng_st_date_1 IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_1+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U62
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_1_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_1_d != new.mtng_st_date_1_d
   OR old.mtng_st_date_1_d IS NULL and new.mtng_st_date_1_d IS NOT NULL
   OR old.mtng_st_date_1_d IS NOT NULL and new.mtng_st_date_1_d IS NULL)
SET new.mtng_st_date_1 =
  CASE WHEN new.mtng_st_date_1_d IS NULL OR new.mtng_st_date_1_d = '0001-01-01' THEN 0 ELSE
  INT(new.mtng_st_date_1_d) - 19000000 END
 !!


CREATE TRIGGER D0403U63
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_2
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_2 != new.mtng_st_date_2
   OR old.mtng_st_date_2 IS NULL AND new.mtng_st_date_2 IS NOT NULL
   OR old.mtng_st_date_2 IS NOT NULL AND new.mtng_st_date_2 IS NULL)
SET new.mtng_st_date_2_d =
  CASE WHEN new.mtng_st_date_2 = 0 OR new.mtng_st_date_2 IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mtng_st_date_2+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U64
  NO CASCADE BEFORE UPDATE OF 
                    mtng_st_date_2_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mtng_st_date_2_d != new.mtng_st_date_2_d
   OR old.mtng_st_date_2_d IS NULL and new.mtng_st_date_2_d IS NOT NULL
   OR old.mtng_st_date_2_d IS NOT NULL and new.mtng_st_date_2_d IS NULL)
SET new.mtng_st_date_2 =
  CASE WHEN new.mtng_st_date_2_d IS NULL OR new.mtng_st_date_2_d = '0001-01-01' THEN 0 ELSE
  INT(new.mtng_st_date_2_d) - 19000000 END
 !!


CREATE TRIGGER D0403U65
  NO CASCADE BEFORE UPDATE OF 
                    mvmt_date
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mvmt_date != new.mvmt_date
   OR old.mvmt_date IS NULL AND new.mvmt_date IS NOT NULL
   OR old.mvmt_date IS NOT NULL AND new.mvmt_date IS NULL)
SET new.mvmt_date_d =
  CASE WHEN new.mvmt_date = 0 OR new.mvmt_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.mvmt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U66
  NO CASCADE BEFORE UPDATE OF 
                    mvmt_date_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.mvmt_date_d != new.mvmt_date_d
   OR old.mvmt_date_d IS NULL and new.mvmt_date_d IS NOT NULL
   OR old.mvmt_date_d IS NOT NULL and new.mvmt_date_d IS NULL)
SET new.mvmt_date =
  CASE WHEN new.mvmt_date_d IS NULL OR new.mvmt_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.mvmt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0403U57
  NO CASCADE BEFORE UPDATE OF 
                    proc_date
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date != new.proc_date
   OR old.proc_date IS NULL AND new.proc_date IS NOT NULL
   OR old.proc_date IS NOT NULL AND new.proc_date IS NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 OR new.proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0403U58
  NO CASCADE BEFORE UPDATE OF 
                    proc_date_d
  ON SOF_HERD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date_d != new.proc_date_d
   OR old.proc_date_d IS NULL and new.proc_date_d IS NOT NULL
   OR old.proc_date_d IS NOT NULL and new.proc_date_d IS NULL)
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL OR new.proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.proc_date_d) - 19000000 END
 !!


CREATE TRIGGER D0098U01
  NO CASCADE BEFORE UPDATE
  ON SOF_HT_VISIT_DATE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0402U01
  NO CASCADE BEFORE UPDATE
  ON SOF_HT_VST_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0402I51
  NO CASCADE BEFORE INSERT
  ON SOF_HT_VST_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_first_visit_date IS NULL 
  AND new.frst_opt_a_date IS NOT NULL
   OR CHAR(new.pref_first_visit_date,ISO) = '0001-01-01'
  AND new.frst_opt_a_date IS NOT NULL)
SET new.pref_first_visit_date =
  CASE WHEN new.frst_opt_a_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_opt_a_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0402I52
  NO CASCADE BEFORE INSERT
  ON SOF_HT_VST_RQST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.frst_opt_a_date IS NULL 
  AND new.pref_first_visit_date IS NOT NULL
  AND CHAR(new.pref_first_visit_date,ISO) != '0001-01-01'
   OR new.frst_opt_a_date = 0
  AND new.pref_first_visit_date IS NOT NULL
  AND CHAR(new.pref_first_visit_date,ISO) != '0001-01-01')
SET new.frst_opt_a_date =
  CASE WHEN new.pref_first_visit_date IS NULL THEN 0 ELSE
  INT(new.pref_first_visit_date) - 19000000 END
 !!


CREATE TRIGGER D0402U51
  NO CASCADE BEFORE UPDATE OF 
                    frst_opt_a_date
  ON SOF_HT_VST_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.frst_opt_a_date != new.frst_opt_a_date
   OR old.frst_opt_a_date IS NULL AND new.frst_opt_a_date IS NOT NULL
   OR old.frst_opt_a_date IS NOT NULL AND new.frst_opt_a_date IS NULL)
SET new.pref_first_visit_date =
  CASE WHEN new.frst_opt_a_date = 0 OR new.frst_opt_a_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.frst_opt_a_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0402U52
  NO CASCADE BEFORE UPDATE OF 
                    pref_first_visit_date
  ON SOF_HT_VST_RQST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pref_first_visit_date != new.pref_first_visit_date
   OR old.pref_first_visit_date IS NULL and new.pref_first_visit_date IS NOT NULL
   OR old.pref_first_visit_date IS NOT NULL and new.pref_first_visit_date IS NULL)
SET new.frst_opt_a_date =
  CASE WHEN new.pref_first_visit_date IS NULL OR new.pref_first_visit_date = '0001-01-01' THEN 0 ELSE
  INT(new.pref_first_visit_date) - 19000000 END
 !!


CREATE TRIGGER D0525U01
  NO CASCADE BEFORE UPDATE
  ON SOF_KMAR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0486U01
  NO CASCADE BEFORE UPDATE
  ON SOF_PARTY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0487U01
  NO CASCADE BEFORE UPDATE
  ON SOF_PHONE_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0436U01
  NO CASCADE BEFORE UPDATE
  ON SOF_RCPT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0569U01
  NO CASCADE BEFORE UPDATE
  ON SPCS_HLTH_PROD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0007U01
  NO CASCADE BEFORE UPDATE
  ON SPECIES
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SPECIES AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD WHERE HERD.SPCS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  HERD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007d38", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="HERD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_008", FK_COLUMNS="SPCS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because HERD exists.')
 !!

CREATE  TRIGGER tD_SPECIES2 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPCS_HLTH_PROD WHERE SPCS_HLTH_PROD.SPCS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  SPCS_HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c7d", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="SPCS_HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_001", FK_COLUMNS="SPCS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because SPCS_HLTH_PROD exists.')
 !!

CREATE  TRIGGER tD_SPECIES3 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CARCASS_CATEGORY WHERE CARCASS_CATEGORY.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  CARCASS_CATEGORY on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c6", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="CARCASS_CATEGORY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_006", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because CARCASS_CATEGORY exists.')
 !!

CREATE  TRIGGER tD_SPECIES4 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_TEST_METER_NOZZLE WHERE HERD_TEST_METER_NOZZLE.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  HERD_TEST_METER_NOZZLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009548", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="HERD_TEST_METER_NOZZLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_013", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because HERD_TEST_METER_NOZZLE exists.')
 !!

CREATE  TRIGGER tD_SPECIES5 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_SUBM WHERE GM_SUBM.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  GM_SUBM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007c05", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="GM_SUBM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_016", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because GM_SUBM exists.')
 !!

CREATE  TRIGGER tD_SPECIES6 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HERD_TEST_FLASK_TP WHERE HERD_TEST_FLASK_TP.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  HERD_TEST_FLASK_TP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008f22", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="HERD_TEST_FLASK_TP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_015", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because HERD_TEST_FLASK_TP exists.')
 !!

CREATE  TRIGGER tD_SPECIES7 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM EZ_LINK_FARM_VISIT WHERE EZ_LINK_FARM_VISIT.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  EZ_LINK_FARM_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a5d", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="EZ_LINK_FARM_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_014", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because EZ_LINK_FARM_VISIT exists.')
 !!

CREATE  TRIGGER tD_SPECIES8 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM WEIGHT_VALIDATION WHERE WEIGHT_VALIDATION.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  WEIGHT_VALIDATION on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000086da", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="WEIGHT_VALIDATION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_007", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because WEIGHT_VALIDATION exists.')
 !!

CREATE  TRIGGER tD_SPECIES9 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPECIES_MINDA_OPT WHERE SPECIES_MINDA_OPT.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  SPECIES_MINDA_OPT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c7d", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="SPECIES_MINDA_OPT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_012", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because SPECIES_MINDA_OPT exists.')
 !!

CREATE  TRIGGER tD_SPECIES10 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPECIES_PARTY_ROLE WHERE SPECIES_PARTY_ROLE.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  SPECIES_PARTY_ROLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091bc", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="SPECIES_PARTY_ROLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_004", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because SPECIES_PARTY_ROLE exists.')
 !!

CREATE  TRIGGER tD_SPECIES11 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPECIES_BATCH_UPD_ERR WHERE SPECIES_BATCH_UPD_ERR.SPECIES_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  SPECIES_BATCH_UPD_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091ae", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="SPECIES_BATCH_UPD_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_003", FK_COLUMNS="SPECIES_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because SPECIES_BATCH_UPD_ERR exists.')
 !!

CREATE  TRIGGER tD_SPECIES12 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MKTG_BRD WHERE MKTG_BRD.SPCS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  MKTG_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008cf7", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="MKTG_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_010", FK_COLUMNS="SPCS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because MKTG_BRD exists.')
 !!

CREATE  TRIGGER tD_SPECIES13 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM BREED WHERE BREED.SPCS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  BREED on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007982", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="BREED"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_009", FK_COLUMNS="SPCS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because BREED exists.')
 !!

CREATE  TRIGGER tD_SPECIES14 AFTER DELETE ON SPECIES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM GM_ANML WHERE GM_ANML.SPCS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES  GM_ANML on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007d45", PARENT_OWNER="", PARENT_TABLE="SPECIES"
    CHILD_OWNER="", CHILD_TABLE="GM_ANML"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0007_002", FK_COLUMNS="SPCS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES because GM_ANML exists.')
 !!


CREATE TRIGGER D0964U01
  NO CASCADE BEFORE UPDATE
  ON SPECIES_BATCH_UPD_ERR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0976I01
  NO CASCADE BEFORE INSERT
  ON SPECIES_MINDA_OPT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.minda_opt_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MINDA_OPT_CD'
      AND c.cd = new.minda_opt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0976'
('D0976I01: invalid minda option code')
 !!


CREATE TRIGGER D0976U01
  NO CASCADE BEFORE UPDATE
  ON SPECIES_MINDA_OPT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0976U02
  NO CASCADE BEFORE UPDATE OF 
                    minda_opt_cd
  ON SPECIES_MINDA_OPT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.minda_opt_cd IS NOT NULL
  AND VALUE(new.minda_opt_cd,'~') != VALUE(old.minda_opt_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'MINDA_OPT_CD'
      AND c.cd = new.minda_opt_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0976'
('D0976U02: invalid minda option code')
 !!


CREATE  TRIGGER tD_SPECIES_MINDA_O AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ON_FARM_PROD WHERE ON_FARM_PROD.SPECIES_CD = old.SPECIES_CD AND
                                               ON_FARM_PROD.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  ON_FARM_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009117", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="ON_FARM_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_008", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because ON_FARM_PROD exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_2 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_NEW_BORN_FATE WHERE MINDA_OPT_NEW_BORN_FATE.SPECIES_CD = old.SPECIES_CD AND
                                                          MINDA_OPT_NEW_BORN_FATE.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_NEW_BORN_FATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a215", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_NEW_BORN_FATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_005", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_NEW_BORN_FATE exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_3 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_PROD WHERE MINDA_OPT_HLTH_PROD.SPECIES_CD = old.SPECIES_CD AND
                                                      MINDA_OPT_HLTH_PROD.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c63", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_002", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_HLTH_PROD exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_4 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_PROD_CAT WHERE MINDA_OPT_HLTH_PROD_CAT.SPECIES_CD = old.SPECIES_CD AND
                                                          MINDA_OPT_HLTH_PROD_CAT.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_HLTH_PROD_CAT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009e1f", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_PROD_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_001", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_HLTH_PROD_CAT exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_5 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_COND WHERE MINDA_OPT_HLTH_COND.SPECIES_CD = old.SPECIES_CD AND
                                                      MINDA_OPT_HLTH_COND.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_HLTH_COND on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009b0e", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_COND"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_004", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_HLTH_COND exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_6 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_HLTH_CAT WHERE MINDA_OPT_HLTH_CAT.SPECIES_CD = old.SPECIES_CD AND
                                                     MINDA_OPT_HLTH_CAT.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_HLTH_CAT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009c8e", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_HLTH_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_003", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_HLTH_CAT exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_7 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_FATE_CAUSE WHERE MINDA_OPT_FATE_CAUSE.SPECIES_CD = old.SPECIES_CD AND
                                                       MINDA_OPT_FATE_CAUSE.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_FATE_CAUSE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099b8", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_FATE_CAUSE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_006", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_FATE_CAUSE exists.')
 !!

CREATE  TRIGGER tD_SPECIES_MINDA_8 AFTER DELETE ON SPECIES_MINDA_OPT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_BRTH_CMT WHERE MINDA_OPT_BRTH_CMT.SPECIES_CD = old.SPECIES_CD AND
                                                     MINDA_OPT_BRTH_CMT.MINDA_OPT_CD = old.MINDA_OPT_CD) > 0)
    /* erwin Builtin Trigger */
    /* SPECIES_MINDA_OPT  MINDA_OPT_BRTH_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009834", PARENT_OWNER="", PARENT_TABLE="SPECIES_MINDA_OPT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_BRTH_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0976_007", FK_COLUMNS="SPECIES_CD""MINDA_OPT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPECIES_MINDA_OPT because MINDA_OPT_BRTH_CMT exists.')
 !!


CREATE TRIGGER D0975U01
  NO CASCADE BEFORE UPDATE
  ON SPECIES_PARTY_ROLE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0238U03
  NO CASCADE BEFORE UPDATE OF 
                    accept_marker_bull_ind
  ON SPS_ALCN_APPROVAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.accept_marker_bull_ind = 'Y' and new.accept_marker_bull_ind = 'N')
SIGNAL SQLSTATE 'Z0238'
('D0238U02: cannot change accept marker bull indicator back to ''N''')
 !!


CREATE TRIGGER D0238U01
  NO CASCADE BEFORE UPDATE
  ON SPS_ALCN_APPROVAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0238U02
  NO CASCADE BEFORE UPDATE OF 
                    accept_ind
  ON SPS_ALCN_APPROVAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.accept_ind = 'Y' and new.accept_ind = 'N')
SIGNAL SQLSTATE 'Z0238'
('D0238U02: cannot change accept indicator back to ''N''')
 !!


CREATE TRIGGER D0431I01
  NO CASCADE BEFORE INSERT
  ON SPS_ALCN_SPLY
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from semen_batch sb
    WHERE sb.num = new.smn_batch_num))
SIGNAL SQLSTATE 'Z0431'
('D0431I01: batch does not exist on semen_batch')
 !!


CREATE TRIGGER D0431U01
  NO CASCADE BEFORE UPDATE
  ON SPS_ALCN_SPLY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from semen_batch sb
    WHERE sb.num = new.smn_batch_num))
SIGNAL SQLSTATE 'Z0431'
('D0431U01: batch does not exist on semen_batch')
 !!


CREATE TRIGGER D0431U02
  NO CASCADE BEFORE UPDATE
  ON SPS_ALCN_SPLY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0548I53
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_st_date_d IS NULL 
  AND new.ab_st_date IS NOT NULL
   OR CHAR(new.ab_st_date_d,ISO) = '0001-01-01'
  AND new.ab_st_date IS NOT NULL)
SET new.ab_st_date_d =
  CASE WHEN new.ab_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548I54
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_st_date IS NULL 
  AND new.ab_st_date_d IS NOT NULL
  AND CHAR(new.ab_st_date_d,ISO) != '0001-01-01'
   OR new.ab_st_date = 0
  AND new.ab_st_date_d IS NOT NULL
  AND CHAR(new.ab_st_date_d,ISO) != '0001-01-01')
SET new.ab_st_date =
  CASE WHEN new.ab_st_date_d IS NULL THEN 0 ELSE
  INT(new.ab_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548U53
  NO CASCADE BEFORE UPDATE OF 
                    ab_st_date
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_st_date != new.ab_st_date
   OR old.ab_st_date IS NULL AND new.ab_st_date IS NOT NULL
   OR old.ab_st_date IS NOT NULL AND new.ab_st_date IS NULL)
SET new.ab_st_date_d =
  CASE WHEN new.ab_st_date = 0 OR new.ab_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548U52
  NO CASCADE BEFORE UPDATE OF 
                    ab_end_date_d
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_end_date_d != new.ab_end_date_d
   OR old.ab_end_date_d IS NULL and new.ab_end_date_d IS NOT NULL
   OR old.ab_end_date_d IS NOT NULL and new.ab_end_date_d IS NULL)
SET new.ab_end_date =
  CASE WHEN new.ab_end_date_d IS NULL OR new.ab_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ab_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548U54
  NO CASCADE BEFORE UPDATE OF 
                    ab_st_date_d
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_st_date_d != new.ab_st_date_d
   OR old.ab_st_date_d IS NULL and new.ab_st_date_d IS NOT NULL
   OR old.ab_st_date_d IS NOT NULL and new.ab_st_date_d IS NULL)
SET new.ab_st_date =
  CASE WHEN new.ab_st_date_d IS NULL OR new.ab_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.ab_st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548U60
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548I57
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548U59
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548I51
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_end_date_d IS NULL 
  AND new.ab_end_date IS NOT NULL
   OR CHAR(new.ab_end_date_d,ISO) = '0001-01-01'
  AND new.ab_end_date IS NOT NULL)
SET new.ab_end_date_d =
  CASE WHEN new.ab_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548U56
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548I52
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ab_end_date IS NULL 
  AND new.ab_end_date_d IS NOT NULL
  AND CHAR(new.ab_end_date_d,ISO) != '0001-01-01'
   OR new.ab_end_date = 0
  AND new.ab_end_date_d IS NOT NULL
  AND CHAR(new.ab_end_date_d,ISO) != '0001-01-01')
SET new.ab_end_date =
  CASE WHEN new.ab_end_date_d IS NULL THEN 0 ELSE
  INT(new.ab_end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548I56
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(new.end_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548I58
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548U55
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548U51
  NO CASCADE BEFORE UPDATE OF 
                    ab_end_date
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ab_end_date != new.ab_end_date
   OR old.ab_end_date IS NULL AND new.ab_end_date IS NOT NULL
   OR old.ab_end_date IS NOT NULL AND new.ab_end_date IS NULL)
SET new.ab_end_date_d =
  CASE WHEN new.ab_end_date = 0 OR new.ab_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ab_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548U58
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.st_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548U01
  NO CASCADE BEFORE UPDATE
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0548U57
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON SPS_BSNS_RULE_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548I60
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0548I59
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0548I55
  NO CASCADE BEFORE INSERT
  ON SPS_BSNS_RULE_CTRL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0433U01
  NO CASCADE BEFORE UPDATE
  ON SPS_BULL_EST_DTRS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0317U01
  NO CASCADE BEFORE UPDATE
  ON SPS_BULL_NRR_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SPS_BULL_NRR_GR AFTER DELETE ON SPS_BULL_NRR_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PRDCT_DTR_PROB WHERE PRDCT_DTR_PROB.BULL_NRR_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SPS_BULL_NRR_GRP  PRDCT_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fb5", PARENT_OWNER="", PARENT_TABLE="SPS_BULL_NRR_GRP"
    CHILD_OWNER="", CHILD_TABLE="PRDCT_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0317_002", FK_COLUMNS="BULL_NRR_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPS_BULL_NRR_GRP because PRDCT_DTR_PROB exists.')
 !!

CREATE  TRIGGER tD_SPS_BULL_NRR_G2 AFTER DELETE ON SPS_BULL_NRR_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LLL_DTR_PROB WHERE LLL_DTR_PROB.BULL_NRR_GRP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SPS_BULL_NRR_GRP  LLL_DTR_PROB on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092c7", PARENT_OWNER="", PARENT_TABLE="SPS_BULL_NRR_GRP"
    CHILD_OWNER="", CHILD_TABLE="LLL_DTR_PROB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0317_001", FK_COLUMNS="BULL_NRR_GRP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPS_BULL_NRR_GRP because LLL_DTR_PROB exists.')
 !!


CREATE TRIGGER D0318U01
  NO CASCADE BEFORE UPDATE
  ON SPS_CTRY_TRGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0432U01
  NO CASCADE BEFORE UPDATE
  ON SPS_DESP_DMND
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0409U01
  NO CASCADE BEFORE UPDATE
  ON SPS_DTR_SVY_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0319U01
  NO CASCADE BEFORE UPDATE
  ON SPS_HERD_DTRS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0322U01
  NO CASCADE BEFORE UPDATE
  ON SPS_INSEM_DTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0323U01
  NO CASCADE BEFORE UPDATE
  ON SPS_LLL_UTLSTN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0048U75
  NO CASCADE BEFORE UPDATE OF 
                    upd_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date != new.upd_date
   OR old.upd_date IS NULL AND new.upd_date IS NOT NULL
   OR old.upd_date IS NOT NULL AND new.upd_date IS NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 OR new.upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U61
  NO CASCADE BEFORE UPDATE OF 
                    lwgt_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.lwgt_date != new.lwgt_date
   OR old.lwgt_date IS NULL AND new.lwgt_date IS NOT NULL
   OR old.lwgt_date IS NOT NULL AND new.lwgt_date IS NULL)
SET new.lwgt_date_d =
  CASE WHEN new.lwgt_date = 0 OR new.lwgt_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.lwgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U70
  NO CASCADE BEFORE UPDATE OF 
                    test_hfr_calc_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_hfr_calc_date_d != new.test_hfr_calc_date_d
   OR old.test_hfr_calc_date_d IS NULL and new.test_hfr_calc_date_d IS NOT NULL
   OR old.test_hfr_calc_date_d IS NOT NULL and new.test_hfr_calc_date_d IS NULL)
SET new.test_hfr_calc_date =
  CASE WHEN new.test_hfr_calc_date_d IS NULL OR new.test_hfr_calc_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.test_hfr_calc_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I57
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hfr_calf_upd_date_d IS NULL 
  AND new.hfr_calf_upd_date IS NOT NULL
   OR CHAR(new.hfr_calf_upd_date_d,ISO) = '0001-01-01'
  AND new.hfr_calf_upd_date IS NOT NULL)
SET new.hfr_calf_upd_date_d =
  CASE WHEN new.hfr_calf_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hfr_calf_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U52
  NO CASCADE BEFORE UPDATE OF 
                    accp_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.accp_date_d != new.accp_date_d
   OR old.accp_date_d IS NULL and new.accp_date_d IS NOT NULL
   OR old.accp_date_d IS NOT NULL and new.accp_date_d IS NULL)
SET new.accp_date =
  CASE WHEN new.accp_date_d IS NULL OR new.accp_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.accp_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I58
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.hfr_calf_upd_date IS NULL 
  AND new.hfr_calf_upd_date_d IS NOT NULL
  AND CHAR(new.hfr_calf_upd_date_d,ISO) != '0001-01-01'
   OR new.hfr_calf_upd_date = 0
  AND new.hfr_calf_upd_date_d IS NOT NULL
  AND CHAR(new.hfr_calf_upd_date_d,ISO) != '0001-01-01')
SET new.hfr_calf_upd_date =
  CASE WHEN new.hfr_calf_upd_date_d IS NULL THEN 0 ELSE
  INT(new.hfr_calf_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U54
  NO CASCADE BEFORE UPDATE OF 
                    appl_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.appl_date_d != new.appl_date_d
   OR old.appl_date_d IS NULL and new.appl_date_d IS NOT NULL
   OR old.appl_date_d IS NOT NULL and new.appl_date_d IS NULL)
SET new.appl_date =
  CASE WHEN new.appl_date_d IS NULL OR new.appl_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.appl_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U55
  NO CASCADE BEFORE UPDATE OF 
                    clvg_upd_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_upd_date != new.clvg_upd_date
   OR old.clvg_upd_date IS NULL AND new.clvg_upd_date IS NOT NULL
   OR old.clvg_upd_date IS NOT NULL AND new.clvg_upd_date IS NULL)
SET new.clvg_upd_date_d =
  CASE WHEN new.clvg_upd_date = 0 OR new.clvg_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I53
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.appl_date_d IS NULL 
  AND new.appl_date IS NOT NULL
   OR CHAR(new.appl_date_d,ISO) = '0001-01-01'
  AND new.appl_date IS NOT NULL)
SET new.appl_date_d =
  CASE WHEN new.appl_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.appl_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I72
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.top_insp_date IS NULL 
  AND new.top_insp_date_d IS NOT NULL
  AND CHAR(new.top_insp_date_d,ISO) != '0001-01-01'
   OR new.top_insp_date = 0
  AND new.top_insp_date_d IS NOT NULL
  AND CHAR(new.top_insp_date_d,ISO) != '0001-01-01')
SET new.top_insp_date =
  CASE WHEN new.top_insp_date_d IS NULL THEN 0 ELSE
  INT(new.top_insp_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U51
  NO CASCADE BEFORE UPDATE OF 
                    accp_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.accp_date != new.accp_date
   OR old.accp_date IS NULL AND new.accp_date IS NOT NULL
   OR old.accp_date IS NOT NULL AND new.accp_date IS NULL)
SET new.accp_date_d =
  CASE WHEN new.accp_date = 0 OR new.accp_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.accp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I67
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_vfy_date_d IS NULL 
  AND new.tag_vfy_date IS NOT NULL
   OR CHAR(new.tag_vfy_date_d,ISO) = '0001-01-01'
  AND new.tag_vfy_date IS NOT NULL)
SET new.tag_vfy_date_d =
  CASE WHEN new.tag_vfy_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.tag_vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U71
  NO CASCADE BEFORE UPDATE OF 
                    top_insp_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.top_insp_date != new.top_insp_date
   OR old.top_insp_date IS NULL AND new.top_insp_date IS NOT NULL
   OR old.top_insp_date IS NOT NULL AND new.top_insp_date IS NULL)
SET new.top_insp_date_d =
  CASE WHEN new.top_insp_date = 0 OR new.top_insp_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.top_insp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U72
  NO CASCADE BEFORE UPDATE OF 
                    top_insp_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.top_insp_date_d != new.top_insp_date_d
   OR old.top_insp_date_d IS NULL and new.top_insp_date_d IS NOT NULL
   OR old.top_insp_date_d IS NOT NULL and new.top_insp_date_d IS NULL)
SET new.top_insp_date =
  CASE WHEN new.top_insp_date_d IS NULL OR new.top_insp_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.top_insp_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U53
  NO CASCADE BEFORE UPDATE OF 
                    appl_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.appl_date != new.appl_date
   OR old.appl_date IS NULL AND new.appl_date IS NOT NULL
   OR old.appl_date IS NOT NULL AND new.appl_date IS NULL)
SET new.appl_date_d =
  CASE WHEN new.appl_date = 0 OR new.appl_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.appl_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U68
  NO CASCADE BEFORE UPDATE OF 
                    tag_vfy_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.tag_vfy_date_d != new.tag_vfy_date_d
   OR old.tag_vfy_date_d IS NULL and new.tag_vfy_date_d IS NOT NULL
   OR old.tag_vfy_date_d IS NOT NULL and new.tag_vfy_date_d IS NULL)
SET new.tag_vfy_date =
  CASE WHEN new.tag_vfy_date_d IS NULL OR new.tag_vfy_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.tag_vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U69
  NO CASCADE BEFORE UPDATE OF 
                    test_hfr_calc_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_hfr_calc_date != new.test_hfr_calc_date
   OR old.test_hfr_calc_date IS NULL AND new.test_hfr_calc_date IS NOT NULL
   OR old.test_hfr_calc_date IS NOT NULL AND new.test_hfr_calc_date IS NULL)
SET new.test_hfr_calc_date_d =
  CASE WHEN new.test_hfr_calc_date = 0 OR new.test_hfr_calc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_hfr_calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I55
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_upd_date_d IS NULL 
  AND new.clvg_upd_date IS NOT NULL
   OR CHAR(new.clvg_upd_date_d,ISO) = '0001-01-01'
  AND new.clvg_upd_date IS NOT NULL)
SET new.clvg_upd_date_d =
  CASE WHEN new.clvg_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.clvg_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I69
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_hfr_calc_date_d IS NULL 
  AND new.test_hfr_calc_date IS NOT NULL
   OR CHAR(new.test_hfr_calc_date_d,ISO) = '0001-01-01'
  AND new.test_hfr_calc_date IS NOT NULL)
SET new.test_hfr_calc_date_d =
  CASE WHEN new.test_hfr_calc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_hfr_calc_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I65
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_hfr_upd_date_d IS NULL 
  AND new.tag_hfr_upd_date IS NOT NULL
   OR CHAR(new.tag_hfr_upd_date_d,ISO) = '0001-01-01'
  AND new.tag_hfr_upd_date IS NOT NULL)
SET new.tag_hfr_upd_date_d =
  CASE WHEN new.tag_hfr_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.tag_hfr_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I66
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_hfr_upd_date IS NULL 
  AND new.tag_hfr_upd_date_d IS NOT NULL
  AND CHAR(new.tag_hfr_upd_date_d,ISO) != '0001-01-01'
   OR new.tag_hfr_upd_date = 0
  AND new.tag_hfr_upd_date_d IS NOT NULL
  AND CHAR(new.tag_hfr_upd_date_d,ISO) != '0001-01-01')
SET new.tag_hfr_upd_date =
  CASE WHEN new.tag_hfr_upd_date_d IS NULL THEN 0 ELSE
  INT(new.tag_hfr_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U60
  NO CASCADE BEFORE UPDATE OF 
                    insem_cow_upd_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.insem_cow_upd_date_d != new.insem_cow_upd_date_d
   OR old.insem_cow_upd_date_d IS NULL and new.insem_cow_upd_date_d IS NOT NULL
   OR old.insem_cow_upd_date_d IS NOT NULL and new.insem_cow_upd_date_d IS NULL)
SET new.insem_cow_upd_date =
  CASE WHEN new.insem_cow_upd_date_d IS NULL OR new.insem_cow_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.insem_cow_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U59
  NO CASCADE BEFORE UPDATE OF 
                    insem_cow_upd_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.insem_cow_upd_date != new.insem_cow_upd_date
   OR old.insem_cow_upd_date IS NULL AND new.insem_cow_upd_date IS NOT NULL
   OR old.insem_cow_upd_date IS NOT NULL AND new.insem_cow_upd_date IS NULL)
SET new.insem_cow_upd_date_d =
  CASE WHEN new.insem_cow_upd_date = 0 OR new.insem_cow_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.insem_cow_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I71
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.top_insp_date_d IS NULL 
  AND new.top_insp_date IS NOT NULL
   OR CHAR(new.top_insp_date_d,ISO) = '0001-01-01'
  AND new.top_insp_date IS NOT NULL)
SET new.top_insp_date_d =
  CASE WHEN new.top_insp_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.top_insp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U58
  NO CASCADE BEFORE UPDATE OF 
                    hfr_calf_upd_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hfr_calf_upd_date_d != new.hfr_calf_upd_date_d
   OR old.hfr_calf_upd_date_d IS NULL and new.hfr_calf_upd_date_d IS NOT NULL
   OR old.hfr_calf_upd_date_d IS NOT NULL and new.hfr_calf_upd_date_d IS NULL)
SET new.hfr_calf_upd_date =
  CASE WHEN new.hfr_calf_upd_date_d IS NULL OR new.hfr_calf_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.hfr_calf_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I68
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.tag_vfy_date IS NULL 
  AND new.tag_vfy_date_d IS NOT NULL
  AND CHAR(new.tag_vfy_date_d,ISO) != '0001-01-01'
   OR new.tag_vfy_date = 0
  AND new.tag_vfy_date_d IS NOT NULL
  AND CHAR(new.tag_vfy_date_d,ISO) != '0001-01-01')
SET new.tag_vfy_date =
  CASE WHEN new.tag_vfy_date_d IS NULL THEN 0 ELSE
  INT(new.tag_vfy_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U56
  NO CASCADE BEFORE UPDATE OF 
                    clvg_upd_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.clvg_upd_date_d != new.clvg_upd_date_d
   OR old.clvg_upd_date_d IS NULL and new.clvg_upd_date_d IS NOT NULL
   OR old.clvg_upd_date_d IS NOT NULL and new.clvg_upd_date_d IS NULL)
SET new.clvg_upd_date =
  CASE WHEN new.clvg_upd_date_d IS NULL OR new.clvg_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.clvg_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I76
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date IS NULL 
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01'
   OR new.upd_date = 0
  AND new.upd_date_d IS NOT NULL
  AND CHAR(new.upd_date_d,ISO) != '0001-01-01')
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I56
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.clvg_upd_date IS NULL 
  AND new.clvg_upd_date_d IS NOT NULL
  AND CHAR(new.clvg_upd_date_d,ISO) != '0001-01-01'
   OR new.clvg_upd_date = 0
  AND new.clvg_upd_date_d IS NOT NULL
  AND CHAR(new.clvg_upd_date_d,ISO) != '0001-01-01')
SET new.clvg_upd_date =
  CASE WHEN new.clvg_upd_date_d IS NULL THEN 0 ELSE
  INT(new.clvg_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I59
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.insem_cow_upd_date_d IS NULL 
  AND new.insem_cow_upd_date IS NOT NULL
   OR CHAR(new.insem_cow_upd_date_d,ISO) = '0001-01-01'
  AND new.insem_cow_upd_date IS NOT NULL)
SET new.insem_cow_upd_date_d =
  CASE WHEN new.insem_cow_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.insem_cow_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I75
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_date_d IS NULL 
  AND new.upd_date IS NOT NULL
   OR CHAR(new.upd_date_d,ISO) = '0001-01-01'
  AND new.upd_date IS NOT NULL)
SET new.upd_date_d =
  CASE WHEN new.upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U62
  NO CASCADE BEFORE UPDATE OF 
                    lwgt_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.lwgt_date_d != new.lwgt_date_d
   OR old.lwgt_date_d IS NULL and new.lwgt_date_d IS NOT NULL
   OR old.lwgt_date_d IS NOT NULL and new.lwgt_date_d IS NULL)
SET new.lwgt_date =
  CASE WHEN new.lwgt_date_d IS NULL OR new.lwgt_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.lwgt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U76
  NO CASCADE BEFORE UPDATE OF 
                    upd_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.upd_date_d != new.upd_date_d
   OR old.upd_date_d IS NULL and new.upd_date_d IS NOT NULL
   OR old.upd_date_d IS NOT NULL and new.upd_date_d IS NULL)
SET new.upd_date =
  CASE WHEN new.upd_date_d IS NULL OR new.upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I54
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.appl_date IS NULL 
  AND new.appl_date_d IS NOT NULL
  AND CHAR(new.appl_date_d,ISO) != '0001-01-01'
   OR new.appl_date = 0
  AND new.appl_date_d IS NOT NULL
  AND CHAR(new.appl_date_d,ISO) != '0001-01-01')
SET new.appl_date =
  CASE WHEN new.appl_date_d IS NULL THEN 0 ELSE
  INT(new.appl_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U02
  NO CASCADE BEFORE UPDATE
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0048U66
  NO CASCADE BEFORE UPDATE OF 
                    tag_hfr_upd_date_d
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.tag_hfr_upd_date_d != new.tag_hfr_upd_date_d
   OR old.tag_hfr_upd_date_d IS NULL and new.tag_hfr_upd_date_d IS NOT NULL
   OR old.tag_hfr_upd_date_d IS NOT NULL and new.tag_hfr_upd_date_d IS NULL)
SET new.tag_hfr_upd_date =
  CASE WHEN new.tag_hfr_upd_date_d IS NULL OR new.tag_hfr_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(new.tag_hfr_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I01
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0048'
('D0048I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0048U57
  NO CASCADE BEFORE UPDATE OF 
                    hfr_calf_upd_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.hfr_calf_upd_date != new.hfr_calf_upd_date
   OR old.hfr_calf_upd_date IS NULL AND new.hfr_calf_upd_date IS NOT NULL
   OR old.hfr_calf_upd_date IS NOT NULL AND new.hfr_calf_upd_date IS NULL)
SET new.hfr_calf_upd_date_d =
  CASE WHEN new.hfr_calf_upd_date = 0 OR new.hfr_calf_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.hfr_calf_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I52
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.accp_date IS NULL 
  AND new.accp_date_d IS NOT NULL
  AND CHAR(new.accp_date_d,ISO) != '0001-01-01'
   OR new.accp_date = 0
  AND new.accp_date_d IS NOT NULL
  AND CHAR(new.accp_date_d,ISO) != '0001-01-01')
SET new.accp_date =
  CASE WHEN new.accp_date_d IS NULL THEN 0 ELSE
  INT(new.accp_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I62
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.lwgt_date IS NULL 
  AND new.lwgt_date_d IS NOT NULL
  AND CHAR(new.lwgt_date_d,ISO) != '0001-01-01'
   OR new.lwgt_date = 0
  AND new.lwgt_date_d IS NOT NULL
  AND CHAR(new.lwgt_date_d,ISO) != '0001-01-01')
SET new.lwgt_date =
  CASE WHEN new.lwgt_date_d IS NULL THEN 0 ELSE
  INT(new.lwgt_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048I51
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.accp_date_d IS NULL 
  AND new.accp_date IS NOT NULL
   OR CHAR(new.accp_date_d,ISO) = '0001-01-01'
  AND new.accp_date IS NOT NULL)
SET new.accp_date_d =
  CASE WHEN new.accp_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.accp_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I61
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.lwgt_date_d IS NULL 
  AND new.lwgt_date IS NOT NULL
   OR CHAR(new.lwgt_date_d,ISO) = '0001-01-01'
  AND new.lwgt_date IS NOT NULL)
SET new.lwgt_date_d =
  CASE WHEN new.lwgt_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.lwgt_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U01
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd) )
SIGNAL SQLSTATE 'Z0048'
('D0048I01: ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0048I60
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.insem_cow_upd_date IS NULL 
  AND new.insem_cow_upd_date_d IS NOT NULL
  AND CHAR(new.insem_cow_upd_date_d,ISO) != '0001-01-01'
   OR new.insem_cow_upd_date = 0
  AND new.insem_cow_upd_date_d IS NOT NULL
  AND CHAR(new.insem_cow_upd_date_d,ISO) != '0001-01-01')
SET new.insem_cow_upd_date =
  CASE WHEN new.insem_cow_upd_date_d IS NULL THEN 0 ELSE
  INT(new.insem_cow_upd_date_d) - 19000000 END
 !!


CREATE TRIGGER D0048U67
  NO CASCADE BEFORE UPDATE OF 
                    tag_vfy_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.tag_vfy_date != new.tag_vfy_date
   OR old.tag_vfy_date IS NULL AND new.tag_vfy_date IS NOT NULL
   OR old.tag_vfy_date IS NOT NULL AND new.tag_vfy_date IS NULL)
SET new.tag_vfy_date_d =
  CASE WHEN new.tag_vfy_date = 0 OR new.tag_vfy_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.tag_vfy_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048U65
  NO CASCADE BEFORE UPDATE OF 
                    tag_hfr_upd_date
  ON SPS_MEMB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.tag_hfr_upd_date != new.tag_hfr_upd_date
   OR old.tag_hfr_upd_date IS NULL AND new.tag_hfr_upd_date IS NOT NULL
   OR old.tag_hfr_upd_date IS NOT NULL AND new.tag_hfr_upd_date IS NULL)
SET new.tag_hfr_upd_date_d =
  CASE WHEN new.tag_hfr_upd_date = 0 OR new.tag_hfr_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.tag_hfr_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0048I70
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_hfr_calc_date IS NULL 
  AND new.test_hfr_calc_date_d IS NOT NULL
  AND CHAR(new.test_hfr_calc_date_d,ISO) != '0001-01-01'
   OR new.test_hfr_calc_date = 0
  AND new.test_hfr_calc_date_d IS NOT NULL
  AND CHAR(new.test_hfr_calc_date_d,ISO) != '0001-01-01')
SET new.test_hfr_calc_date =
  CASE WHEN new.test_hfr_calc_date_d IS NULL THEN 0 ELSE
  INT(new.test_hfr_calc_date_d) - 19000000 END
 !!


CREATE  TRIGGER tD_SPS_MEMB AFTER DELETE ON SPS_MEMB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_MEMB_CMT WHERE SPS_MEMB_CMT.PTPT_CD = old.PTPT_CD AND
                                               SPS_MEMB_CMT.SSN = old.SSN) > 0)
    /* erwin Builtin Trigger */
    /* SPS_MEMB  SPS_MEMB_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d71", PARENT_OWNER="", PARENT_TABLE="SPS_MEMB"
    CHILD_OWNER="", CHILD_TABLE="SPS_MEMB_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0048_002", FK_COLUMNS="PTPT_CD""SSN" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPS_MEMB because SPS_MEMB_CMT exists.')
 !!

CREATE  TRIGGER tD_SPS_MEMB2 AFTER DELETE ON SPS_MEMB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPS_OBLGN_CHNG WHERE SPS_OBLGN_CHNG.PTPT_CD = old.PTPT_CD AND
                                                 SPS_OBLGN_CHNG.SSN = old.SSN) > 0)
    /* erwin Builtin Trigger */
    /* SPS_MEMB  SPS_OBLGN_CHNG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bdd", PARENT_OWNER="", PARENT_TABLE="SPS_MEMB"
    CHILD_OWNER="", CHILD_TABLE="SPS_OBLGN_CHNG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0048_001", FK_COLUMNS="PTPT_CD""SSN" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SPS_MEMB because SPS_OBLGN_CHNG exists.')
 !!


CREATE TRIGGER D0731I01
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
    (SELECT 1 from sps_memb sm
      WHERE sm.ptpt_cd = new.ptpt_cd
        AND sm.ssn = new.ssn) )
  SIGNAL SQLSTATE 'Z0731'  ('D0731I01: sps_memb does not exist')
 !!


CREATE TRIGGER D0731U02
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd,
                    ssn
  ON SPS_MEMB_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.ptpt_cd != new.ptpt_cd
    OR old.ssn != new.ssn)
   AND NOT EXISTS
    (SELECT 1 from sps_memb sm
      WHERE sm.ptpt_cd = new.ptpt_cd
        AND sm.ssn = new.ssn))
  SIGNAL SQLSTATE 'Z0731'  ('D0730I01: sps_memb does not exist')
 !!


CREATE TRIGGER D0731U01
  NO CASCADE BEFORE UPDATE
  ON SPS_MEMB_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0731I02
  NO CASCADE BEFORE INSERT
  ON SPS_MEMB_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0731U03
  NO CASCADE BEFORE UPDATE OF 
                    cmt
  ON SPS_MEMB_CMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', cmt) > 0)
  SET new.cmt = replace(cmt,x'0D0A','  ')
 !!


CREATE TRIGGER D0324U01
  NO CASCADE BEFORE UPDATE
  ON SPS_MTNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0434U01
  NO CASCADE BEFORE UPDATE
  ON SPS_MTNG_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0055I51
  NO CASCADE BEFORE INSERT
  ON SPS_OBLGN_CHNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0055I52
  NO CASCADE BEFORE INSERT
  ON SPS_OBLGN_CHNG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0055U01
  NO CASCADE BEFORE UPDATE
  ON SPS_OBLGN_CHNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0055U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON SPS_OBLGN_CHNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0055U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON SPS_OBLGN_CHNG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0602I01
  NO CASCADE BEFORE INSERT
  ON SPS_OPTM_ALCN
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from semen_batch sb
    WHERE sb.num = new.smn_batch_num))
SIGNAL SQLSTATE 'Z0602'
('D0602I01: batch does not exist on semen_batch')
 !!


CREATE TRIGGER D0602U01
  NO CASCADE BEFORE UPDATE
  ON SPS_OPTM_ALCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from semen_batch sb
    WHERE sb.num = new.smn_batch_num))
SIGNAL SQLSTATE 'Z0602'
('D0602U01: batch does not exist on semen_batch')
 !!


CREATE TRIGGER D0602U02
  NO CASCADE BEFORE UPDATE
  ON SPS_OPTM_ALCN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0430U01
  NO CASCADE BEFORE UPDATE
  ON SPS_PRDCT_DTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0547I54
  NO CASCADE BEFORE INSERT
  ON SPS_QUOTA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ttl_upd_date IS NULL 
  AND new.ttl_upd_date_d IS NOT NULL
  AND CHAR(new.ttl_upd_date_d,ISO) != '0001-01-01'
   OR new.ttl_upd_date = 0
  AND new.ttl_upd_date_d IS NOT NULL
  AND CHAR(new.ttl_upd_date_d,ISO) != '0001-01-01')
SET new.ttl_upd_date =
  CASE WHEN new.ttl_upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.ttl_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.ttl_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.ttl_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0547U52
  NO CASCADE BEFORE UPDATE OF 
                    alcn_upd_date_d
  ON SPS_QUOTA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_upd_date_d != new.alcn_upd_date_d
   OR old.alcn_upd_date_d IS NULL and new.alcn_upd_date_d IS NOT NULL
   OR old.alcn_upd_date_d IS NOT NULL and new.alcn_upd_date_d IS NULL)
SET new.alcn_upd_date =
  CASE WHEN new.alcn_upd_date_d IS NULL OR new.alcn_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0547U51
  NO CASCADE BEFORE UPDATE OF 
                    alcn_upd_date
  ON SPS_QUOTA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.alcn_upd_date != new.alcn_upd_date
   OR old.alcn_upd_date IS NULL AND new.alcn_upd_date IS NOT NULL
   OR old.alcn_upd_date IS NOT NULL AND new.alcn_upd_date IS NULL)
SET new.alcn_upd_date_d =
  CASE WHEN new.alcn_upd_date = 0 OR new.alcn_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0547U54
  NO CASCADE BEFORE UPDATE OF 
                    ttl_upd_date_d
  ON SPS_QUOTA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ttl_upd_date_d != new.ttl_upd_date_d
   OR old.ttl_upd_date_d IS NULL and new.ttl_upd_date_d IS NOT NULL
   OR old.ttl_upd_date_d IS NOT NULL and new.ttl_upd_date_d IS NULL)
SET new.ttl_upd_date =
  CASE WHEN new.ttl_upd_date_d IS NULL OR new.ttl_upd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.ttl_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.ttl_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.ttl_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0547I52
  NO CASCADE BEFORE INSERT
  ON SPS_QUOTA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_upd_date IS NULL 
  AND new.alcn_upd_date_d IS NOT NULL
  AND CHAR(new.alcn_upd_date_d,ISO) != '0001-01-01'
   OR new.alcn_upd_date = 0
  AND new.alcn_upd_date_d IS NOT NULL
  AND CHAR(new.alcn_upd_date_d,ISO) != '0001-01-01')
SET new.alcn_upd_date =
  CASE WHEN new.alcn_upd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.alcn_upd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.alcn_upd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.alcn_upd_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0547U01
  NO CASCADE BEFORE UPDATE
  ON SPS_QUOTA
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0547U53
  NO CASCADE BEFORE UPDATE OF 
                    ttl_upd_date
  ON SPS_QUOTA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.ttl_upd_date != new.ttl_upd_date
   OR old.ttl_upd_date IS NULL AND new.ttl_upd_date IS NOT NULL
   OR old.ttl_upd_date IS NOT NULL AND new.ttl_upd_date IS NULL)
SET new.ttl_upd_date_d =
  CASE WHEN new.ttl_upd_date = 0 OR new.ttl_upd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ttl_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0547I53
  NO CASCADE BEFORE INSERT
  ON SPS_QUOTA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ttl_upd_date_d IS NULL 
  AND new.ttl_upd_date IS NOT NULL
   OR CHAR(new.ttl_upd_date_d,ISO) = '0001-01-01'
  AND new.ttl_upd_date IS NOT NULL)
SET new.ttl_upd_date_d =
  CASE WHEN new.ttl_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.ttl_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0547I51
  NO CASCADE BEFORE INSERT
  ON SPS_QUOTA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.alcn_upd_date_d IS NULL 
  AND new.alcn_upd_date IS NOT NULL
   OR CHAR(new.alcn_upd_date_d,ISO) = '0001-01-01'
  AND new.alcn_upd_date IS NOT NULL)
SET new.alcn_upd_date_d =
  CASE WHEN new.alcn_upd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.alcn_upd_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0774U01
  NO CASCADE BEFORE UPDATE
  ON SPS_SALE_STOCK_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0774I02
  NO CASCADE BEFORE INSERT
  ON SPS_SALE_STOCK_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from geo_area ga
    WHERE ga.id = new.province_id and ga.geo_area_tp_cd = 'PROV'))
SIGNAL SQLSTATE 'Z0774'
('D0774I02: the province_id must have an area type code of PROV')
 !!


CREATE TRIGGER D0774U02
  NO CASCADE BEFORE UPDATE
  ON SPS_SALE_STOCK_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from geo_area ga
    WHERE ga.id = new.province_id and ga.geo_area_tp_cd = 'PROV'))
SIGNAL SQLSTATE 'Z0774'
('D0774U02: the province_id must have an area type code of PROV')
 !!


CREATE TRIGGER D0774I03
  NO CASCADE BEFORE INSERT
  ON SPS_SALE_STOCK_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date < CURRENT DATE)
SIGNAL SQLSTATE 'Z0774'
('D0774I03: expiry date must not be in the past')
 !!


CREATE TRIGGER D0774U03
  NO CASCADE BEFORE UPDATE OF 
                    expiry_date
  ON SPS_SALE_STOCK_LIST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.expiry_date < CURRENT DATE)
SIGNAL SQLSTATE 'Z0774'
('D0774U03: expiry date must not be in the past')
 !!


CREATE TRIGGER D0774I01
  NO CASCADE BEFORE INSERT
  ON SPS_SALE_STOCK_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from curr_pfx_user cpu
    WHERE cpu.anml_id_pfx_cd = new.login_ptpt_cd))
SIGNAL SQLSTATE 'Z0774'
('D0774I01: login_ptpt_cd must exist on curr_pfx_user')
 !!


CREATE TRIGGER D0774I04
  NO CASCADE BEFORE INSERT
  ON SPS_SALE_STOCK_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', stock_dtl) > 0)
  SET new.stock_dtl = replace(stock_dtl,x'0D0A','  ')
 !!


CREATE TRIGGER D0774U04
  NO CASCADE BEFORE UPDATE OF 
                    stock_dtl
  ON SPS_SALE_STOCK_LIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', stock_dtl) > 0)
  SET new.stock_dtl = replace(stock_dtl,x'0D0A','  ')
 !!


CREATE TRIGGER D0429U01
  NO CASCADE BEFORE UPDATE
  ON SPS_SAR_BULL_TRGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0325U01
  NO CASCADE BEFORE UPDATE
  ON SPS_SAR_TRGT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0428U01
  NO CASCADE BEFORE UPDATE
  ON SPS_TRGT_CTRL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0348I01
  NO CASCADE BEFORE INSERT
  ON SR_AREA
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != ' ')
SET new.party_id = (
  SELECT pu.party_id
  FROM curr_pfx_user pu
  WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
 !!


CREATE TRIGGER D0348U01
  NO CASCADE BEFORE UPDATE
  ON SR_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0348U02
  NO CASCADE BEFORE UPDATE OF 
                    ptpt_cd
  ON SR_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.ptpt_cd != old.ptpt_cd)
SET new.party_id = (
  CASE WHEN new.ptpt_cd = ' ' THEN NULL ELSE (
    SELECT pu.party_id
    FROM curr_pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ptpt_cd)
  END
 !!


CREATE TRIGGER D0348D01
  NO CASCADE BEFORE DELETE
  ON SR_AREA
  REFERENCING OLD AS OLD
  FOR EACH ROW
WHEN (
     EXISTS (
    SELECT 1 FROM prop_ssn ps
    WHERE old.rm_area_rgn_cd = ps.rm_area_rgn_cd
      AND old.rm_area_cd_n = ps.rm_area_cd
      AND old.dm_area_cd = ps.dm_area_cd
      AND old.cd = ps.sr_area_cd
      AND old.ssn = ps.sr_area_ssn) 
OR   EXISTS (
    SELECT 1 FROM herd_dtl hd
    WHERE old.rm_area_rgn_cd = hd.rm_area_rgn_cd
      AND old.dm_area_cd = hd.dm_area_cd
      AND old.cd = hd.sr_area_cd
      AND old.ssn = hd.sr_area_ssn) )
SIGNAL SQLSTATE 'Z0348'
('D0348U03: old sales rep cd exists on prop_ssn or herd_dtl')
 !!


CREATE TRIGGER D0348U03
  NO CASCADE BEFORE UPDATE OF 
                    cd
  ON SR_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (
     (new.rm_area_rgn_cd != old.rm_area_rgn_cd
   OR new.dm_area_cd != old.dm_area_cd
   OR new.cd != old.cd
   OR new.ssn != old.ssn)
AND (EXISTS (
    SELECT 1 FROM prop_ssn ps
    WHERE old.rm_area_rgn_cd = ps.rm_area_rgn_cd
      AND old.rm_area_cd_n = ps.rm_area_cd
      AND old.dm_area_cd = ps.dm_area_cd
      AND old.cd = ps.sr_area_cd
      AND old.ssn = ps.sr_area_ssn) 
OR   EXISTS (
    SELECT 1 FROM herd_dtl hd
    WHERE old.rm_area_rgn_cd = hd.rm_area_rgn_cd
      AND old.dm_area_cd = hd.dm_area_cd
      AND old.cd = hd.sr_area_cd
      AND old.ssn = hd.sr_area_ssn) ) )
SIGNAL SQLSTATE 'Z0348'
('D0348U03: old sales rep cd exists on prop_ssn or herd_dtl')
 !!


CREATE TRIGGER D0372U01
  NO CASCADE BEFORE UPDATE
  ON STAT_DIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0131I51
  NO CASCADE BEFORE INSERT
  ON STAT_DIST_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date_d IS NULL 
  AND new.run_date IS NOT NULL
   OR CHAR(new.run_date_d,ISO) = '0001-01-01'
  AND new.run_date IS NOT NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0131I52
  NO CASCADE BEFORE INSERT
  ON STAT_DIST_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date IS NULL 
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01'
   OR new.run_date = 0
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01')
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0131U01
  NO CASCADE BEFORE UPDATE
  ON STAT_DIST_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0131U51
  NO CASCADE BEFORE UPDATE OF 
                    run_date
  ON STAT_DIST_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date != new.run_date
   OR old.run_date IS NULL AND new.run_date IS NOT NULL
   OR old.run_date IS NOT NULL AND new.run_date IS NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 OR new.run_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0131U52
  NO CASCADE BEFORE UPDATE OF 
                    run_date_d
  ON STAT_DIST_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date_d != new.run_date_d
   OR old.run_date_d IS NULL and new.run_date_d IS NOT NULL
   OR old.run_date_d IS NOT NULL and new.run_date_d IS NULL)
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL OR new.run_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0132U52
  NO CASCADE BEFORE UPDATE OF 
                    pd_end_date_d
  ON STAT_DIST_HT_TTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pd_end_date_d != new.pd_end_date_d
   OR old.pd_end_date_d IS NULL and new.pd_end_date_d IS NOT NULL
   OR old.pd_end_date_d IS NOT NULL and new.pd_end_date_d IS NULL)
SET new.pd_end_date =
  CASE WHEN new.pd_end_date_d IS NULL OR new.pd_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pd_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pd_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pd_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0132U01
  NO CASCADE BEFORE UPDATE
  ON STAT_DIST_HT_TTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0132I51
  NO CASCADE BEFORE INSERT
  ON STAT_DIST_HT_TTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pd_end_date_d IS NULL 
  AND new.pd_end_date IS NOT NULL
   OR CHAR(new.pd_end_date_d,ISO) = '0001-01-01'
  AND new.pd_end_date IS NOT NULL)
SET new.pd_end_date_d =
  CASE WHEN new.pd_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pd_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0132U51
  NO CASCADE BEFORE UPDATE OF 
                    pd_end_date
  ON STAT_DIST_HT_TTL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pd_end_date != new.pd_end_date
   OR old.pd_end_date IS NULL AND new.pd_end_date IS NOT NULL
   OR old.pd_end_date IS NOT NULL AND new.pd_end_date IS NULL)
SET new.pd_end_date_d =
  CASE WHEN new.pd_end_date = 0 OR new.pd_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pd_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0132I52
  NO CASCADE BEFORE INSERT
  ON STAT_DIST_HT_TTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pd_end_date IS NULL 
  AND new.pd_end_date_d IS NOT NULL
  AND CHAR(new.pd_end_date_d,ISO) != '0001-01-01'
   OR new.pd_end_date = 0
  AND new.pd_end_date_d IS NOT NULL
  AND CHAR(new.pd_end_date_d,ISO) != '0001-01-01')
SET new.pd_end_date =
  CASE WHEN new.pd_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pd_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pd_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pd_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0099U01
  NO CASCADE BEFORE UPDATE
  ON STAT_RGN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0133I51
  NO CASCADE BEFORE INSERT
  ON STAT_RGN_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date_d IS NULL 
  AND new.run_date IS NOT NULL
   OR CHAR(new.run_date_d,ISO) = '0001-01-01'
  AND new.run_date IS NOT NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0133I52
  NO CASCADE BEFORE INSERT
  ON STAT_RGN_AE_AVG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.run_date IS NULL 
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01'
   OR new.run_date = 0
  AND new.run_date_d IS NOT NULL
  AND CHAR(new.run_date_d,ISO) != '0001-01-01')
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0133U01
  NO CASCADE BEFORE UPDATE
  ON STAT_RGN_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0133U51
  NO CASCADE BEFORE UPDATE OF 
                    run_date
  ON STAT_RGN_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date != new.run_date
   OR old.run_date IS NULL AND new.run_date IS NOT NULL
   OR old.run_date IS NOT NULL AND new.run_date IS NULL)
SET new.run_date_d =
  CASE WHEN new.run_date = 0 OR new.run_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.run_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0133U52
  NO CASCADE BEFORE UPDATE OF 
                    run_date_d
  ON STAT_RGN_AE_AVG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.run_date_d != new.run_date_d
   OR old.run_date_d IS NULL and new.run_date_d IS NOT NULL
   OR old.run_date_d IS NOT NULL and new.run_date_d IS NULL)
SET new.run_date =
  CASE WHEN new.run_date_d IS NULL OR new.run_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.run_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.run_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.run_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0404U01
  NO CASCADE BEFORE UPDATE
  ON STD_AR_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0030U01
  NO CASCADE BEFORE UPDATE
  ON STD_BRTH_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_STD_BRTH_CMT AFTER DELETE ON STD_BRTH_CMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM NB_ANML_CMT WHERE NB_ANML_CMT.BRTH_CMT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_BRTH_CMT  NB_ANML_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091f1", PARENT_OWNER="", PARENT_TABLE="STD_BRTH_CMT"
    CHILD_OWNER="", CHILD_TABLE="NB_ANML_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0030_001", FK_COLUMNS="BRTH_CMT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_BRTH_CMT because NB_ANML_CMT exists.')
 !!

CREATE  TRIGGER tD_STD_BRTH_CMT2 AFTER DELETE ON STD_BRTH_CMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MINDA_OPT_BRTH_CMT WHERE MINDA_OPT_BRTH_CMT.STD_BRTH_CMT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_BRTH_CMT  MINDA_OPT_BRTH_CMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009676", PARENT_OWNER="", PARENT_TABLE="STD_BRTH_CMT"
    CHILD_OWNER="", CHILD_TABLE="MINDA_OPT_BRTH_CMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0030_002", FK_COLUMNS="STD_BRTH_CMT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_BRTH_CMT because MINDA_OPT_BRTH_CMT exists.')
 !!


CREATE TRIGGER D0869U01
  NO CASCADE BEFORE UPDATE
  ON STD_DATA_NAME
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0513U01
  NO CASCADE BEFORE UPDATE
  ON STD_DT_STS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_STD_DT_STS AFTER DELETE ON STD_DT_STS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_DT_STS WHERE ANML_DT_STS.DT_STS_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_DT_STS  ANML_DT_STS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008c0d", PARENT_OWNER="", PARENT_TABLE="STD_DT_STS"
    CHILD_OWNER="", CHILD_TABLE="ANML_DT_STS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0513_001", FK_COLUMNS="DT_STS_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_DT_STS because ANML_DT_STS exists.')
 !!


CREATE TRIGGER D0059U01
  NO CASCADE BEFORE UPDATE
  ON STD_LIC_BULL_RANK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_STD_LIC_BULL_RA AFTER DELETE ON STD_LIC_BULL_RANK
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM LIC_BULL_RANK WHERE LIC_BULL_RANK.RANK_CD = old.CD AND
                                                LIC_BULL_RANK.MKTG_BRD_CD = old.MKTG_BRD_CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_LIC_BULL_RANK  LIC_BULL_RANK on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009bab", PARENT_OWNER="", PARENT_TABLE="STD_LIC_BULL_RANK"
    CHILD_OWNER="", CHILD_TABLE="LIC_BULL_RANK"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0059_001", FK_COLUMNS="RANK_CD""MKTG_BRD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_LIC_BULL_RANK because LIC_BULL_RANK exists.')
 !!


CREATE TRIGGER D0120U01
  NO CASCADE BEFORE UPDATE
  ON STD_PARTY_ROLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_STD_PARTY_ROLE AFTER DELETE ON STD_PARTY_ROLE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PARTY_ROLE WHERE PARTY_ROLE.PARTY_ROLE_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_PARTY_ROLE  PARTY_ROLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d6d", PARENT_OWNER="", PARENT_TABLE="STD_PARTY_ROLE"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ROLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0120_001", FK_COLUMNS="PARTY_ROLE_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_PARTY_ROLE because PARTY_ROLE exists.')
 !!


CREATE TRIGGER D0499U01
  NO CASCADE BEFORE UPDATE
  ON STD_PTPT_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0406U01
  NO CASCADE BEFORE UPDATE
  ON STD_SOF_ERR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_STD_SOF_ERR AFTER DELETE ON STD_SOF_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM MTNG_PLAN_ERR_HIST WHERE MTNG_PLAN_ERR_HIST.STD_SOF_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_SOF_ERR  MTNG_PLAN_ERR_HIST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000900e", PARENT_OWNER="", PARENT_TABLE="STD_SOF_ERR"
    CHILD_OWNER="", CHILD_TABLE="MTNG_PLAN_ERR_HIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0406_003", FK_COLUMNS="STD_SOF_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_SOF_ERR because MTNG_PLAN_ERR_HIST exists.')
 !!

CREATE  TRIGGER tD_STD_SOF_ERR2 AFTER DELETE ON STD_SOF_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_MTNG_PLAN_ERR WHERE AB_MTNG_PLAN_ERR.STD_SOF_ERR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_SOF_ERR  AB_MTNG_PLAN_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097da", PARENT_OWNER="", PARENT_TABLE="STD_SOF_ERR"
    CHILD_OWNER="", CHILD_TABLE="AB_MTNG_PLAN_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0406_002", FK_COLUMNS="STD_SOF_ERR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_SOF_ERR because AB_MTNG_PLAN_ERR exists.')
 !!

CREATE  TRIGGER tD_STD_SOF_ERR3 AFTER DELETE ON STD_SOF_ERR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AB_GRP_ERR WHERE AB_GRP_ERR.STD_SOF_ERR = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* STD_SOF_ERR  AB_GRP_ERR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e94", PARENT_OWNER="", PARENT_TABLE="STD_SOF_ERR"
    CHILD_OWNER="", CHILD_TABLE="AB_GRP_ERR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0406_001", FK_COLUMNS="STD_SOF_ERR" */
     SIGNAL SQLSTATE '75001' ('Cannot delete STD_SOF_ERR because AB_GRP_ERR exists.')
 !!


CREATE TRIGGER D0121U01
  NO CASCADE BEFORE UPDATE
  ON STR_SIDE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0088U01
  NO CASCADE BEFORE UPDATE
  ON SUBJ_AREA
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0645U01
  NO CASCADE BEFORE UPDATE
  ON SUPPLIER_EID_DTL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0644U01
  NO CASCADE BEFORE UPDATE
  ON SUPPLIER_EID_HDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SUPPLIER_EID_HD AFTER DELETE ON SUPPLIER_EID_HDR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SUPPLIER_EID_DTL WHERE SUPPLIER_EID_DTL.HDR_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* SUPPLIER_EID_HDR  SUPPLIER_EID_DTL on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000902e", PARENT_OWNER="", PARENT_TABLE="SUPPLIER_EID_HDR"
    CHILD_OWNER="", CHILD_TABLE="SUPPLIER_EID_DTL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0644_001", FK_COLUMNS="HDR_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SUPPLIER_EID_HDR because SUPPLIER_EID_DTL exists.')
 !!


CREATE TRIGGER D0122U01
  NO CASCADE BEFORE UPDATE
  ON SV_TP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_SV_TP AFTER DELETE ON SV_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ORG_SV_TP WHERE ORG_SV_TP.SV_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SV_TP  ORG_SV_TP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008a25", PARENT_OWNER="", PARENT_TABLE="SV_TP"
    CHILD_OWNER="", CHILD_TABLE="ORG_SV_TP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0122_002", FK_COLUMNS="SV_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SV_TP because ORG_SV_TP exists.')
 !!

CREATE  TRIGGER tD_SV_TP2 AFTER DELETE ON SV_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_SCHED WHERE HT_SCHED.SERVICE_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SV_TP  HT_SCHED on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000884d", PARENT_OWNER="", PARENT_TABLE="SV_TP"
    CHILD_OWNER="", CHILD_TABLE="HT_SCHED"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0122_004", FK_COLUMNS="SERVICE_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SV_TP because HT_SCHED exists.')
 !!

CREATE  TRIGGER tD_SV_TP3 AFTER DELETE ON SV_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM HT_SCHED_VISIT WHERE HT_SCHED_VISIT.SERVICE_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SV_TP  HT_SCHED_VISIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000899c", PARENT_OWNER="", PARENT_TABLE="SV_TP"
    CHILD_OWNER="", CHILD_TABLE="HT_SCHED_VISIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0122_005", FK_COLUMNS="SERVICE_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SV_TP because HT_SCHED_VISIT exists.')
 !!

CREATE  TRIGGER tD_SV_TP4 AFTER DELETE ON SV_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRAIT_SV WHERE TRAIT_SV.SV_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SV_TP  TRAIT_SV on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008294", PARENT_OWNER="", PARENT_TABLE="SV_TP"
    CHILD_OWNER="", CHILD_TABLE="TRAIT_SV"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0122_003", FK_COLUMNS="SV_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SV_TP because TRAIT_SV exists.')
 !!

CREATE  TRIGGER tD_SV_TP5 AFTER DELETE ON SV_TP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SV_TP_DESCR WHERE SV_TP_DESCR.CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* SV_TP  SV_TP_DESCR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000080d3", PARENT_OWNER="", PARENT_TABLE="SV_TP"
    CHILD_OWNER="", CHILD_TABLE="SV_TP_DESCR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0122_001", FK_COLUMNS="CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete SV_TP because SV_TP_DESCR exists.')
 !!


CREATE TRIGGER D0717U01
  NO CASCADE BEFORE UPDATE
  ON SV_TP_DESCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0070D01
  AFTER DELETE
  ON SYNC_FRZ_LLL_PD
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_FRZ_LLL_PD', old.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.end_date))) || '|')
 !!


CREATE TRIGGER D0070I01
  AFTER INSERT
  ON SYNC_FRZ_LLL_PD
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_FRZ_LLL_PD', new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.end_date))) || '|')
 !!


CREATE TRIGGER D0070U01
  AFTER UPDATE OF 
        st_date,
        end_date
  ON SYNC_FRZ_LLL_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_FRZ_LLL_PD',
  new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.end_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.end_date))) || '|')
 !!


CREATE TRIGGER D0070U02
  NO CASCADE BEFORE UPDATE
  ON SYNC_FRZ_LLL_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0064D01
  AFTER DELETE
  ON SYNC_SCALE
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_SCALE',
   old.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.anml_cnt))) || '|' ||
  LTRIM(RTRIM(CHAR(old.frz_lll_st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.lll_pct))) || '|')
 !!


CREATE TRIGGER D0064I01
  AFTER INSERT
  ON SYNC_SCALE
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_SCALE',
   new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.anml_cnt))) || '|' ||
  LTRIM(RTRIM(CHAR(new.frz_lll_st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.lll_pct))) || ' ')
 !!


CREATE TRIGGER D0064U01
  AFTER UPDATE
  ON SYNC_SCALE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_SCALE',
   new.core_prod_cd || '|' ||
  LTRIM(RTRIM(CHAR(old.anml_cnt))) || '|' ||
  LTRIM(RTRIM(CHAR(old.frz_lll_st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(old.lll_pct))) || '|' ||
  LTRIM(RTRIM(CHAR(new.anml_cnt))) || '|' ||
  LTRIM(RTRIM(CHAR(new.frz_lll_st_date))) || '|' ||
  LTRIM(RTRIM(CHAR(new.lll_pct))) || '|')
 !!


CREATE TRIGGER D0064U02
  NO CASCADE BEFORE UPDATE
  ON SYNC_SCALE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0065D01
  AFTER DELETE
  ON SYNC_SUBM_MODEL
  REFERENCING OLD AS OLD
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
   VALUES (
  'SYNC_SUBM_MODEL',
  LTRIM(RTRIM(CHAR(old.id))) || '|' ||
  LTRIM(RTRIM(CHAR(old.avg_tech_nrr))) || '|' ||
  old.sync_tech_cd || '|' ||
  old.stock_class_cd || '|')
 !!


CREATE TRIGGER D0065I01
  AFTER INSERT
  ON SYNC_SUBM_MODEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_SUBM_MODEL',
  LTRIM(RTRIM(CHAR(new.id))) || '|' ||
  LTRIM(RTRIM(CHAR(new.avg_tech_nrr))) || '|' ||
  new.sync_tech_cd || '|' ||
  new.stock_class_cd || '|')
 !!


CREATE TRIGGER D0065U01
  AFTER UPDATE
  ON SYNC_SUBM_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
INSERT INTO smn_demand_recalc (tbl_name, parm)
  VALUES (
  'SYNC_SUBM_MODEL',
  LTRIM(RTRIM(CHAR(new.id))) || '|' ||
  LTRIM(RTRIM(CHAR(old.avg_tech_nrr))) || '|' ||
  old.sync_tech_cd || '|' ||
  old.stock_class_cd || '|' ||
  LTRIM(RTRIM(CHAR(new.avg_tech_nrr))) || '|' ||
  new.sync_tech_cd || '|' ||
  new.stock_class_cd || '|')
 !!


CREATE TRIGGER D0065U02
  NO CASCADE BEFORE UPDATE
  ON SYNC_SUBM_MODEL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0066U01
  NO CASCADE BEFORE UPDATE
  ON SYNC_SUBM_RATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0067U01
  NO CASCADE BEFORE UPDATE
  ON SYNC_TECH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0071I01
  NO CASCADE BEFORE INSERT
  ON TAG_BRTH_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ord_ptpt_cd) )
SIGNAL SQLSTATE 'Z0071'
('D0071I01: ord_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0071U01
  NO CASCADE BEFORE UPDATE OF 
                    ord_ptpt_cd
  ON TAG_BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.ord_ptpt_cd) )
SIGNAL SQLSTATE 'Z0071'
('D0071I01: ord_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0071U02
  NO CASCADE BEFORE UPDATE
  ON TAG_BRTH_ID
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0307U01
  NO CASCADE BEFORE UPDATE
  ON TANK
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TANK AFTER DELETE ON TANK
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TANK_QUADRANT WHERE TANK_QUADRANT.TANK_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TANK  TANK_QUADRANT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008918", PARENT_OWNER="", PARENT_TABLE="TANK"
    CHILD_OWNER="", CHILD_TABLE="TANK_QUADRANT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0307_001", FK_COLUMNS="TANK_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TANK because TANK_QUADRANT exists.')
 !!


CREATE TRIGGER D0308U01
  NO CASCADE BEFORE UPDATE
  ON TANK_QUADRANT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0916I01
  NO CASCADE BEFORE INSERT
  ON TDM_DROPPED_TEST_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TDM_DROPPED_TEST_RSN_CD'
      AND c.cd = LTRIM(CHAR(new.rsn_cd))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0916'
('D0916I01: invalid reason code')
 !!


CREATE TRIGGER D0916U01
  NO CASCADE BEFORE UPDATE
  ON TDM_DROPPED_TEST_LOG
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0916U02
  NO CASCADE BEFORE UPDATE
  ON TDM_DROPPED_TEST_LOG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.rsn_cd IS NOT NULL
 AND VALUE(old.rsn_cd,-1) != new.rsn_cd
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TDM_DROPPED_TEST_RSN_CD'
      AND c.cd = LTRIM(CHAR(new.rsn_cd))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0916'
('D0916U02: invalid reason code')
 !!


CREATE TRIGGER D0890U01
  NO CASCADE BEFORE UPDATE
  ON TDM_HERD_TEST_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0062U01
  NO CASCADE BEFORE UPDATE
  ON TDM_SPS_ANML
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0328U01
  NO CASCADE BEFORE UPDATE
  ON TEAM_MATRIX
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0572U01
  NO CASCADE BEFORE UPDATE
  ON TECH_DIY_SMN_DLVRY
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0044U01
  NO CASCADE BEFORE UPDATE
  ON TECH_PERFORMANCE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0394I51
  NO CASCADE BEFORE INSERT
  ON TECH_PYMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date_d IS NULL 
  AND new.proc_date IS NOT NULL
   OR CHAR(new.proc_date_d,ISO) = '0001-01-01'
  AND new.proc_date IS NOT NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0394I52
  NO CASCADE BEFORE INSERT
  ON TECH_PYMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date IS NULL 
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01'
   OR new.proc_date = 0
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01')
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0394I53
  NO CASCADE BEFORE INSERT
  ON TECH_PYMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.work_sht_date_d IS NULL 
  AND new.work_sht_date IS NOT NULL
   OR CHAR(new.work_sht_date_d,ISO) = '0001-01-01'
  AND new.work_sht_date IS NOT NULL)
SET new.work_sht_date_d =
  CASE WHEN new.work_sht_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.work_sht_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0394I54
  NO CASCADE BEFORE INSERT
  ON TECH_PYMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.work_sht_date IS NULL 
  AND new.work_sht_date_d IS NOT NULL
  AND CHAR(new.work_sht_date_d,ISO) != '0001-01-01'
   OR new.work_sht_date = 0
  AND new.work_sht_date_d IS NOT NULL
  AND CHAR(new.work_sht_date_d,ISO) != '0001-01-01')
SET new.work_sht_date =
  CASE WHEN new.work_sht_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.work_sht_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.work_sht_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.work_sht_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0394U01
  NO CASCADE BEFORE UPDATE
  ON TECH_PYMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0394U51
  NO CASCADE BEFORE UPDATE OF 
                    proc_date
  ON TECH_PYMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date != new.proc_date
   OR old.proc_date IS NULL AND new.proc_date IS NOT NULL
   OR old.proc_date IS NOT NULL AND new.proc_date IS NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 OR new.proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0394U52
  NO CASCADE BEFORE UPDATE OF 
                    proc_date_d
  ON TECH_PYMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date_d != new.proc_date_d
   OR old.proc_date_d IS NULL and new.proc_date_d IS NOT NULL
   OR old.proc_date_d IS NOT NULL and new.proc_date_d IS NULL)
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL OR new.proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0394U53
  NO CASCADE BEFORE UPDATE OF 
                    work_sht_date
  ON TECH_PYMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.work_sht_date != new.work_sht_date
   OR old.work_sht_date IS NULL AND new.work_sht_date IS NOT NULL
   OR old.work_sht_date IS NOT NULL AND new.work_sht_date IS NULL)
SET new.work_sht_date_d =
  CASE WHEN new.work_sht_date = 0 OR new.work_sht_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.work_sht_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0394U54
  NO CASCADE BEFORE UPDATE OF 
                    work_sht_date_d
  ON TECH_PYMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.work_sht_date_d != new.work_sht_date_d
   OR old.work_sht_date_d IS NULL and new.work_sht_date_d IS NOT NULL
   OR old.work_sht_date_d IS NOT NULL and new.work_sht_date_d IS NULL)
SET new.work_sht_date =
  CASE WHEN new.work_sht_date_d IS NULL OR new.work_sht_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.work_sht_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.work_sht_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.work_sht_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0888U01
  NO CASCADE BEFORE UPDATE
  ON TECH_SEMEN_BATCH
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0888I01
  NO CASCADE BEFORE INSERT
  ON TECH_SEMEN_BATCH
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.semen_preserv_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SMN_PRSRVTN_CD'
      AND c.cd = new.semen_preserv_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0888'
('D0888I01: invalid semen preservation code')
 !!


CREATE TRIGGER D0888U02
  NO CASCADE BEFORE UPDATE OF 
                    semen_preserv_cd
  ON TECH_SEMEN_BATCH
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.semen_preserv_cd IS NOT NULL
  AND VALUE(new.semen_preserv_cd,'~') != VALUE(old.semen_preserv_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SMN_PRSRVTN_CD'
      AND c.cd = new.semen_preserv_cd
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0888'
('D0888U02: invalid semen preservation code')
 !!


CREATE  TRIGGER tD_TECH_SEMEN_BATC AFTER DELETE ON TECH_SEMEN_BATCH
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TECH_SEMEN_STOCK_TRANS WHERE TECH_SEMEN_STOCK_TRANS.TECH_SEMEN_BATCH_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TECH_SEMEN_BATCH  TECH_SEMEN_STOCK_TRANS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009804", PARENT_OWNER="", PARENT_TABLE="TECH_SEMEN_BATCH"
    CHILD_OWNER="", CHILD_TABLE="TECH_SEMEN_STOCK_TRANS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0888_001", FK_COLUMNS="TECH_SEMEN_BATCH_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TECH_SEMEN_BATCH because TECH_SEMEN_STOCK_TRANS exists.')
 !!


CREATE TRIGGER D0889U01
  NO CASCADE BEFORE UPDATE
  ON TECH_SEMEN_STOCK_TRANS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0889I01
  NO CASCADE BEFORE INSERT
  ON TECH_SEMEN_STOCK_TRANS
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.trans_cd IS NOT NULL
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TECH_SEMEN_STOCK_TRANS_CD'
      AND c.cd = LTRIM(CHAR(new.trans_cd))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0889'
('D0889I01: invalid trans code')
 !!


CREATE TRIGGER D0889U02
  NO CASCADE BEFORE UPDATE
  ON TECH_SEMEN_STOCK_TRANS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (VALUE(new.trans_cd,'~') != VALUE(old.trans_cd,'~')
  AND NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'TECH_SEMEN_STOCK_TRANS_CD'
      AND c.cd = LTRIM(CHAR(new.trans_cd))
      AND VALUE(c.expiry_date,CURRENT DATE) >= CURRENT DATE) )
SIGNAL SQLSTATE 'Z0889'
('D0889U02: invalid trans code')
 !!


CREATE TRIGGER D0379I51
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date_d IS NULL 
  AND new.end_date IS NOT NULL
   OR CHAR(new.end_date_d,ISO) = '0001-01-01'
  AND new.end_date IS NOT NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0379U53
  NO CASCADE BEFORE UPDATE OF 
                    st_date
  ON TECH_TRN_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date != new.st_date
   OR old.st_date IS NULL AND new.st_date IS NOT NULL
   OR old.st_date IS NOT NULL AND new.st_date IS NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 OR new.st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0379U54
  NO CASCADE BEFORE UPDATE OF 
                    st_date_d
  ON TECH_TRN_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_date_d != new.st_date_d
   OR old.st_date_d IS NULL and new.st_date_d IS NOT NULL
   OR old.st_date_d IS NOT NULL and new.st_date_d IS NULL)
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL OR new.st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0379I52
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_date IS NULL 
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01'
   OR new.end_date = 0
  AND new.end_date_d IS NOT NULL
  AND CHAR(new.end_date_d,ISO) != '0001-01-01')
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0379U51
  NO CASCADE BEFORE UPDATE OF 
                    end_date
  ON TECH_TRN_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date != new.end_date
   OR old.end_date IS NULL AND new.end_date IS NOT NULL
   OR old.end_date IS NOT NULL AND new.end_date IS NULL)
SET new.end_date_d =
  CASE WHEN new.end_date = 0 OR new.end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0379U52
  NO CASCADE BEFORE UPDATE OF 
                    end_date_d
  ON TECH_TRN_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_date_d != new.end_date_d
   OR old.end_date_d IS NULL and new.end_date_d IS NOT NULL
   OR old.end_date_d IS NOT NULL and new.end_date_d IS NULL)
SET new.end_date =
  CASE WHEN new.end_date_d IS NULL OR new.end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0379I53
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date_d IS NULL 
  AND new.st_date IS NOT NULL
   OR CHAR(new.st_date_d,ISO) = '0001-01-01'
  AND new.st_date IS NOT NULL)
SET new.st_date_d =
  CASE WHEN new.st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0379U01
  NO CASCADE BEFORE UPDATE
  ON TECH_TRN_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0379I54
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_date IS NULL 
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01'
   OR new.st_date = 0
  AND new.st_date_d IS NOT NULL
  AND CHAR(new.st_date_d,ISO) != '0001-01-01')
SET new.st_date =
  CASE WHEN new.st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0378U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON TECH_TRN_SCHED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0378I51
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0378U01
  NO CASCADE BEFORE UPDATE
  ON TECH_TRN_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0378I52
  NO CASCADE BEFORE INSERT
  ON TECH_TRN_SCHED
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0378U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON TECH_TRN_SCHED
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0150U01
  NO CASCADE BEFORE UPDATE
  ON TECH_VST_CNSTR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0392U51
  NO CASCADE BEFORE UPDATE OF 
                    proc_date
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date != new.proc_date
   OR old.proc_date IS NULL AND new.proc_date IS NOT NULL
   OR old.proc_date IS NOT NULL AND new.proc_date IS NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 OR new.proc_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0392U01
  NO CASCADE BEFORE UPDATE
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0392U54
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date_d
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date_d != new.rcd_date_d
   OR old.rcd_date_d IS NULL and new.rcd_date_d IS NOT NULL
   OR old.rcd_date_d IS NOT NULL and new.rcd_date_d IS NULL)
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL OR new.rcd_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392I52
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date IS NULL 
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01'
   OR new.proc_date = 0
  AND new.proc_date_d IS NOT NULL
  AND CHAR(new.proc_date_d,ISO) != '0001-01-01')
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392U52
  NO CASCADE BEFORE UPDATE OF 
                    proc_date_d
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.proc_date_d != new.proc_date_d
   OR old.proc_date_d IS NULL and new.proc_date_d IS NOT NULL
   OR old.proc_date_d IS NOT NULL and new.proc_date_d IS NULL)
SET new.proc_date =
  CASE WHEN new.proc_date_d IS NULL OR new.proc_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.proc_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.proc_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392I56
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date IS NULL 
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01'
   OR new.vfy_date = 0
  AND new.vfy_date_d IS NOT NULL
  AND CHAR(new.vfy_date_d,ISO) != '0001-01-01')
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.vfy_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.vfy_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.vfy_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392U56
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date_d
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date_d != new.vfy_date_d
   OR old.vfy_date_d IS NULL and new.vfy_date_d IS NOT NULL
   OR old.vfy_date_d IS NOT NULL and new.vfy_date_d IS NULL)
SET new.vfy_date =
  CASE WHEN new.vfy_date_d IS NULL OR new.vfy_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.vfy_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.vfy_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.vfy_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392I55
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.vfy_date_d IS NULL 
  AND new.vfy_date IS NOT NULL
   OR CHAR(new.vfy_date_d,ISO) = '0001-01-01'
  AND new.vfy_date IS NOT NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0392I51
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.proc_date_d IS NULL 
  AND new.proc_date IS NOT NULL
   OR CHAR(new.proc_date_d,ISO) = '0001-01-01'
  AND new.proc_date IS NOT NULL)
SET new.proc_date_d =
  CASE WHEN new.proc_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.proc_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0392I54
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date IS NULL 
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01'
   OR new.rcd_date = 0
  AND new.rcd_date_d IS NOT NULL
  AND CHAR(new.rcd_date_d,ISO) != '0001-01-01')
SET new.rcd_date =
  CASE WHEN new.rcd_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rcd_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rcd_date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0392I53
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rcd_date_d IS NULL 
  AND new.rcd_date IS NOT NULL
   OR CHAR(new.rcd_date_d,ISO) = '0001-01-01'
  AND new.rcd_date IS NOT NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0392U53
  NO CASCADE BEFORE UPDATE OF 
                    rcd_date
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rcd_date != new.rcd_date
   OR old.rcd_date IS NULL AND new.rcd_date IS NOT NULL
   OR old.rcd_date IS NOT NULL AND new.rcd_date IS NULL)
SET new.rcd_date_d =
  CASE WHEN new.rcd_date = 0 OR new.rcd_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rcd_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0392U55
  NO CASCADE BEFORE UPDATE OF 
                    vfy_date
  ON TECH_WORK_SHT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.vfy_date != new.vfy_date
   OR old.vfy_date IS NULL AND new.vfy_date IS NOT NULL
   OR old.vfy_date IS NOT NULL AND new.vfy_date IS NULL)
SET new.vfy_date_d =
  CASE WHEN new.vfy_date = 0 OR new.vfy_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.vfy_date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0393I51
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT_LINE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0393I52
  NO CASCADE BEFORE INSERT
  ON TECH_WORK_SHT_LINE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0393U01
  NO CASCADE BEFORE UPDATE
  ON TECH_WORK_SHT_LINE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0393U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON TECH_WORK_SHT_LINE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0393U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON TECH_WORK_SHT_LINE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) END
 !!


CREATE TRIGGER D0375I51
  NO CASCADE BEFORE INSERT
  ON TECH_WORKLOAD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_end_date_d IS NULL 
  AND new.pref_end_date IS NOT NULL
   OR CHAR(new.pref_end_date_d,ISO) = '0001-01-01'
  AND new.pref_end_date IS NOT NULL)
SET new.pref_end_date_d =
  CASE WHEN new.pref_end_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pref_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0375I54
  NO CASCADE BEFORE INSERT
  ON TECH_WORKLOAD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_st_date IS NULL 
  AND new.pref_st_date_d IS NOT NULL
  AND CHAR(new.pref_st_date_d,ISO) != '0001-01-01'
   OR new.pref_st_date = 0
  AND new.pref_st_date_d IS NOT NULL
  AND CHAR(new.pref_st_date_d,ISO) != '0001-01-01')
SET new.pref_st_date =
  CASE WHEN new.pref_st_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pref_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pref_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pref_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0375I53
  NO CASCADE BEFORE INSERT
  ON TECH_WORKLOAD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_st_date_d IS NULL 
  AND new.pref_st_date IS NOT NULL
   OR CHAR(new.pref_st_date_d,ISO) = '0001-01-01'
  AND new.pref_st_date IS NOT NULL)
SET new.pref_st_date_d =
  CASE WHEN new.pref_st_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pref_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0375I52
  NO CASCADE BEFORE INSERT
  ON TECH_WORKLOAD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.pref_end_date IS NULL 
  AND new.pref_end_date_d IS NOT NULL
  AND CHAR(new.pref_end_date_d,ISO) != '0001-01-01'
   OR new.pref_end_date = 0
  AND new.pref_end_date_d IS NOT NULL
  AND CHAR(new.pref_end_date_d,ISO) != '0001-01-01')
SET new.pref_end_date =
  CASE WHEN new.pref_end_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pref_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pref_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pref_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0375U54
  NO CASCADE BEFORE UPDATE OF 
                    pref_st_date_d
  ON TECH_WORKLOAD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pref_st_date_d != new.pref_st_date_d
   OR old.pref_st_date_d IS NULL and new.pref_st_date_d IS NOT NULL
   OR old.pref_st_date_d IS NOT NULL and new.pref_st_date_d IS NULL)
SET new.pref_st_date =
  CASE WHEN new.pref_st_date_d IS NULL OR new.pref_st_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pref_st_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pref_st_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pref_st_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0375U52
  NO CASCADE BEFORE UPDATE OF 
                    pref_end_date_d
  ON TECH_WORKLOAD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pref_end_date_d != new.pref_end_date_d
   OR old.pref_end_date_d IS NULL and new.pref_end_date_d IS NOT NULL
   OR old.pref_end_date_d IS NOT NULL and new.pref_end_date_d IS NULL)
SET new.pref_end_date =
  CASE WHEN new.pref_end_date_d IS NULL OR new.pref_end_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.pref_end_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.pref_end_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.pref_end_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0375U53
  NO CASCADE BEFORE UPDATE OF 
                    pref_st_date
  ON TECH_WORKLOAD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pref_st_date != new.pref_st_date
   OR old.pref_st_date IS NULL AND new.pref_st_date IS NOT NULL
   OR old.pref_st_date IS NOT NULL AND new.pref_st_date IS NULL)
SET new.pref_st_date_d =
  CASE WHEN new.pref_st_date = 0 OR new.pref_st_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pref_st_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0375U51
  NO CASCADE BEFORE UPDATE OF 
                    pref_end_date
  ON TECH_WORKLOAD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.pref_end_date != new.pref_end_date
   OR old.pref_end_date IS NULL AND new.pref_end_date IS NOT NULL
   OR old.pref_end_date IS NOT NULL AND new.pref_end_date IS NULL)
SET new.pref_end_date_d =
  CASE WHEN new.pref_end_date = 0 OR new.pref_end_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.pref_end_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0375U01
  NO CASCADE BEFORE UPDATE
  ON TECH_WORKLOAD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0842U01
  NO CASCADE BEFORE UPDATE
  ON TEST_VAR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TEST_VAR AFTER DELETE ON TEST_VAR
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SAMPLE_TEST WHERE SAMPLE_TEST.TEST_VAR_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TEST_VAR  SAMPLE_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008435", PARENT_OWNER="", PARENT_TABLE="TEST_VAR"
    CHILD_OWNER="", CHILD_TABLE="SAMPLE_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0842_001", FK_COLUMNS="TEST_VAR_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TEST_VAR because SAMPLE_TEST exists.')
 !!


CREATE TRIGGER D0846I01
  NO CASCADE BEFORE INSERT
  ON THIRD_PARTY_PGM_EXEC_AUTH
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0263U01
  NO CASCADE BEFORE UPDATE
  ON TOP_ASSESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0718U01
  NO CASCADE BEFORE UPDATE
  ON TOP_ASSESS_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0681U01
  NO CASCADE BEFORE UPDATE
  ON TOP_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0682U01
  NO CASCADE BEFORE UPDATE
  ON TOP_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0274U01
  NO CASCADE BEFORE UPDATE
  ON TOP_CMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0128U01
  NO CASCADE BEFORE UPDATE
  ON TOP_CMT_REF
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0129U01
  NO CASCADE BEFORE UPDATE
  ON TOP_INSP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0683U01
  NO CASCADE BEFORE UPDATE
  ON TOP_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TOP_RUN AFTER DELETE ON TOP_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOP_RUN_AE_BRD WHERE TOP_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                 TOP_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* TOP_RUN  TOP_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d78", PARENT_OWNER="", PARENT_TABLE="TOP_RUN"
    CHILD_OWNER="", CHILD_TABLE="TOP_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0683_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TOP_RUN because TOP_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0684U01
  NO CASCADE BEFORE UPDATE
  ON TOP_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0208I01
  NO CASCADE BEFORE INSERT
  ON TOT_LONG_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0208'
('D0208I01: invalid ae source code')
 !!


CREATE TRIGGER D0208U01
  NO CASCADE BEFORE UPDATE
  ON TOT_LONG_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0208U02
  NO CASCADE BEFORE UPDATE
  ON TOT_LONG_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0208'
('D0208U02: invalid ae source code')
 !!


CREATE TRIGGER D0161U01
  NO CASCADE BEFORE UPDATE
  ON TOT_LONG_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0209U01
  NO CASCADE BEFORE UPDATE
  ON TOT_LONG_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TOT_LONG_RUN AFTER DELETE ON TOT_LONG_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TOT_LONG_RUN_AE_BRD WHERE TOT_LONG_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                      TOT_LONG_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* TOT_LONG_RUN  TOT_LONG_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000097ff", PARENT_OWNER="", PARENT_TABLE="TOT_LONG_RUN"
    CHILD_OWNER="", CHILD_TABLE="TOT_LONG_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0209_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TOT_LONG_RUN because TOT_LONG_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0273U01
  NO CASCADE BEFORE UPDATE
  ON TOT_LONG_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0633U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_AHB_NUM
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0483U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ANML_NOTE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0634U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_BRTH_ID
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0484U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_CLIENT_ADDR
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0911U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_DIARY
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0825U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_ELEMENT AFTER DELETE ON TRACE_ELEMENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_TEST WHERE TRACE_ELEMENT_TEST.TRACE_ELEMENT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT  TRACE_ELEMENT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a27f", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0825_001", FK_COLUMNS="TRACE_ELEMENT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT because TRACE_ELEMENT_TEST exists.')
 !!


CREATE TRIGGER D0834U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_DESP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_ELEMENT_D AFTER DELETE ON TRACE_ELEMENT_DESP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_DESP_SAMPLE WHERE TRACE_ELEMENT_DESP_SAMPLE.TRACE_ELEMENT_DESP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT_DESP  TRACE_ELEMENT_DESP_SAMPLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a9f8", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT_DESP"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_DESP_SAMPLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0834_001", FK_COLUMNS="TRACE_ELEMENT_DESP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT_DESP because TRACE_ELEMENT_DESP_SAMPLE exists.')
 !!


CREATE TRIGGER D0836U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_DESP_SAMPLE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0835U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_JOB
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_ELEMENT_J AFTER DELETE ON TRACE_ELEMENT_JOB
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_RSLT WHERE TRACE_ELEMENT_RSLT.TRACE_ELEMENT_JOB_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT_JOB  TRACE_ELEMENT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009ca5", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT_JOB"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0835_001", FK_COLUMNS="TRACE_ELEMENT_JOB_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT_JOB because TRACE_ELEMENT_RSLT exists.')
 !!


CREATE TRIGGER D0837U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0827U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_SAMPLE_REJ_RSN
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_ELEMENT_S AFTER DELETE ON TRACE_ELEMENT_SAMPLE_REJ_RSN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_TEST WHERE TRACE_ELEMENT_TEST.SAMPLE_REJ_RSN_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT_SAMPLE_REJ_RSN  TRACE_ELEMENT_TEST on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000af0f", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT_SAMPLE_REJ_RSN"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_TEST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0827_001", FK_COLUMNS="SAMPLE_REJ_RSN_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT_SAMPLE_REJ_RSN because TRACE_ELEMENT_TEST exists.')
 !!


CREATE TRIGGER D0826U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_ELEMENT_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
  , new.upd_user_id = USER
 !!


CREATE TRIGGER D0826I01
  NO CASCADE BEFORE INSERT
  ON TRACE_ELEMENT_TEST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.visit_num = 1 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_1 = 0)
   OR new.visit_num = 2 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_2 = 0)
   OR new.visit_num = 3 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_3 = 0)
   OR new.visit_num = 4 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_4 = 0)
   OR new.visit_num = 5 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_5 = 0)
   OR new.visit_num = 6 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_6 = 0)
   OR new.visit_num = 7 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_7 = 0)
   OR new.visit_num = 8 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_8 = 0)
   OR new.visit_num = 9 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_9 = 0)
   OR new.visit_num = 10 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_10 = 0)
   OR new.visit_num = 11 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_11 = 0)
   OR new.visit_num = 12 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_12 = 0)
     )
SIGNAL SQLSTATE 'Z0826'
('D0826I01: herd test visit num not in herd_test_sv')
 !!


CREATE TRIGGER D0826U02
  NO CASCADE BEFORE UPDATE OF 
                    visit_num
  ON TRACE_ELEMENT_TEST
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.visit_num != old.visit_num 
AND  (new.visit_num = 1 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_1 = 0)
   OR new.visit_num = 2 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_2 = 0)
   OR new.visit_num = 3 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_3 = 0)
   OR new.visit_num = 4 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_4 = 0)
   OR new.visit_num = 5 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_5 = 0)
   OR new.visit_num = 6 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_6 = 0)
   OR new.visit_num = 7 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_7 = 0)
   OR new.visit_num = 8 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_8 = 0)
   OR new.visit_num = 9 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_9 = 0)
   OR new.visit_num = 10 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_10 = 0)
   OR new.visit_num = 11 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_11 = 0)
   OR new.visit_num = 12 AND EXISTS (
        SELECT 1 FROM herd_test_sv hts
        WHERE hts.map_ref = new.map_ref
          AND hts.herd_num = new.herd_num
          AND hts.ssn = new.ssn
          AND pd_12 = 0)
     ) )
SIGNAL SQLSTATE 'Z0826'
('D0826U01: herd test visit num not in herd_test_sv')
 !!


CREATE  TRIGGER tD_TRACE_ELEMENT_T AFTER DELETE ON TRACE_ELEMENT_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_RSLT WHERE TRACE_ELEMENT_RSLT.TRACE_ELEMENT_TEST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT_TEST  TRACE_ELEMENT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a500", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT_TEST"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0826_002", FK_COLUMNS="TRACE_ELEMENT_TEST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT_TEST because TRACE_ELEMENT_RSLT exists.')
 !!

CREATE  TRIGGER tD_TRACE_ELEMENT_2 AFTER DELETE ON TRACE_ELEMENT_TEST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_DESP_SAMPLE WHERE TRACE_ELEMENT_DESP_SAMPLE.TRACE_ELEMENT_TEST_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_ELEMENT_TEST  TRACE_ELEMENT_DESP_SAMPLE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000aefa", PARENT_OWNER="", PARENT_TABLE="TRACE_ELEMENT_TEST"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_DESP_SAMPLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0826_001", FK_COLUMNS="TRACE_ELEMENT_TEST_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_ELEMENT_TEST because TRACE_ELEMENT_DESP_SAMPLE exists.')
 !!


CREATE TRIGGER D0638U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_HLTH_TREATMENT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0639U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_INVC
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_INVC AFTER DELETE ON TRACE_INVC
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_INVC_LINE WHERE TRACE_INVC_LINE.INVC_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_INVC  TRACE_INVC_LINE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008d31", PARENT_OWNER="", PARENT_TABLE="TRACE_INVC"
    CHILD_OWNER="", CHILD_TABLE="TRACE_INVC_LINE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0639_001", FK_COLUMNS="INVC_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_INVC because TRACE_INVC_LINE exists.')
 !!


CREATE TRIGGER D0640U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_INVC_LINE
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_INVC_LINE AFTER DELETE ON TRACE_INVC_LINE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_HLTH_TREATMENT WHERE TRACE_HLTH_TREATMENT.INVC_ID = old.INVC_ID AND
                                                       TRACE_HLTH_TREATMENT.LINE_NUM = old.LINE_NUM) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_INVC_LINE  TRACE_HLTH_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000a17d", PARENT_OWNER="", PARENT_TABLE="TRACE_INVC_LINE"
    CHILD_OWNER="", CHILD_TABLE="TRACE_HLTH_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0640_002", FK_COLUMNS="INVC_ID""LINE_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_INVC_LINE because TRACE_HLTH_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_TRACE_INVC_LIN2 AFTER DELETE ON TRACE_INVC_LINE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_MVMT WHERE TRACE_MVMT.INVC_ID = old.INVC_ID AND
                                             TRACE_MVMT.LINE_NUM = old.LINE_NUM) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_INVC_LINE  TRACE_MVMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000094a0", PARENT_OWNER="", PARENT_TABLE="TRACE_INVC_LINE"
    CHILD_OWNER="", CHILD_TABLE="TRACE_MVMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0640_001", FK_COLUMNS="INVC_ID""LINE_NUM" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_INVC_LINE because TRACE_MVMT exists.')
 !!


CREATE TRIGGER D0641U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_MVMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0641U02
  NO CASCADE BEFORE UPDATE OF 
                    invc_id,
                    line_num
  ON TRACE_MVMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.invc_id IS NOT NULL
  AND new.line_num IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 FROM trace_invc_line til
    WHERE til.invc_id = new.invc_id
      AND til.line_num = new.line_num
      AND til.prod_cd = new.mvmt_tp_cd))
SIGNAL SQLSTATE 'Z0641'
('D0641U02: movement type must match product code on invoice')
 !!


CREATE TRIGGER D0641I01
  NO CASCADE BEFORE INSERT
  ON TRACE_MVMT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.invc_id IS NOT NULL
  AND new.line_num IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 FROM trace_invc_line til
    WHERE til.invc_id = new.invc_id
      AND til.line_num = new.line_num
      AND til.prod_cd = new.mvmt_tp_cd))
SIGNAL SQLSTATE 'Z0641'
('D0641I01: movement type must match product code on invoice')
 !!


CREATE TRIGGER D0642U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0642I01
  NO CASCADE BEFORE INSERT
  ON TRACE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', use) > 0)
  SET new.use = replace(use,x'0D0A','  ')
 !!


CREATE TRIGGER D0642U02
  NO CASCADE BEFORE UPDATE OF 
                    use
  ON TRACE_PROD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (LOCATE(x'0D0A', use) > 0)
  SET new.use = replace(use,x'0D0A','  ')
 !!


CREATE  TRIGGER tD_TRACE_PROD AFTER DELETE ON TRACE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_PROD_CLASS WHERE TRACE_PROD_CLASS.TRACE_PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_PROD  TRACE_PROD_CLASS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fac", PARENT_OWNER="", PARENT_TABLE="TRACE_PROD"
    CHILD_OWNER="", CHILD_TABLE="TRACE_PROD_CLASS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0642_004", FK_COLUMNS="TRACE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_PROD because TRACE_PROD_CLASS exists.')
 !!

CREATE  TRIGGER tD_TRACE_PROD2 AFTER DELETE ON TRACE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_MVMT WHERE TRACE_MVMT.MVMT_TP_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_PROD  TRACE_MVMT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000863d", PARENT_OWNER="", PARENT_TABLE="TRACE_PROD"
    CHILD_OWNER="", CHILD_TABLE="TRACE_MVMT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0642_001", FK_COLUMNS="MVMT_TP_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_PROD because TRACE_MVMT exists.')
 !!

CREATE  TRIGGER tD_TRACE_PROD3 AFTER DELETE ON TRACE_PROD
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_INVC_LINE WHERE TRACE_INVC_LINE.PROD_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_PROD  TRACE_INVC_LINE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008fa9", PARENT_OWNER="", PARENT_TABLE="TRACE_PROD"
    CHILD_OWNER="", CHILD_TABLE="TRACE_INVC_LINE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0642_002", FK_COLUMNS="PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_PROD because TRACE_INVC_LINE exists.')
 !!


CREATE TRIGGER D0257U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_PROD_CLASS
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACE_PROD_CLAS AFTER DELETE ON TRACE_PROD_CLASS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CUST_TRACE_PROD WHERE CUST_TRACE_PROD.PROD_CLASS_CD = old.PROD_CLASS_CD AND
                                                  CUST_TRACE_PROD.TRACE_PROD_CD = old.TRACE_PROD_CD) > 0)
    /* erwin Builtin Trigger */
    /* TRACE_PROD_CLASS  CUST_TRACE_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009840", PARENT_OWNER="", PARENT_TABLE="TRACE_PROD_CLASS"
    CHILD_OWNER="", CHILD_TABLE="CUST_TRACE_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0642_003", FK_COLUMNS="PROD_CLASS_CD""TRACE_PROD_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACE_PROD_CLASS because CUST_TRACE_PROD exists.')
 !!


CREATE TRIGGER D0910U01
  NO CASCADE BEFORE UPDATE
  ON TRACE_SUBSCRIPTION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRACKA_CLIENT_F AFTER DELETE ON TRACKA_CLIENT_FILE_GROUP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_CLIENT_FILE_GROUPS WHERE TRACKA_CLIENT_FILE_GROUPS.GROUP_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_CLIENT_FILE_GROUP  TRACKA_CLIENT_FILE_GROUPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009df8", PARENT_OWNER="", PARENT_TABLE="TRACKA_CLIENT_FILE_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_CLIENT_FILE_GROUPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0899_001", FK_COLUMNS="GROUP_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_CLIENT_FILE_GROUP because TRACKA_CLIENT_FILE_GROUPS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_CLIENT_F NO CASCADE BEFORE UPDATE ON TRACKA_CLIENT_FILE_GROUP
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_CLIENT_FILE_GROUP WHERE TRACKA_CLIENT_FILE_GROUP.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_CLIENT_FILE_GROUPS WHERE TRACKA_CLIENT_FILE_GROUPS.GROUP_ID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_CLIENT_FILE_GROUP  TRACKA_CLIENT_FILE_GROUPS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000a429", PARENT_OWNER="", PARENT_TABLE="TRACKA_CLIENT_FILE_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_CLIENT_FILE_GROUPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0899_001", FK_COLUMNS="GROUP_ID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_CLIENT_FILE_GROUP because TRACKA_CLIENT_FILE_GROUPS exists.')
 !!


CREATE  TRIGGER tD_TRACKA_CLIENT_F AFTER DELETE ON TRACKA_CLIENT_FILES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_CLIENT_FILE_GROUPS WHERE TRACKA_CLIENT_FILE_GROUPS.FILE_ID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_CLIENT_FILES  TRACKA_CLIENT_FILE_GROUPS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009891", PARENT_OWNER="", PARENT_TABLE="TRACKA_CLIENT_FILES"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_CLIENT_FILE_GROUPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0901_001", FK_COLUMNS="FILE_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_CLIENT_FILES because TRACKA_CLIENT_FILE_GROUPS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_CLIENT_F NO CASCADE BEFORE UPDATE ON TRACKA_CLIENT_FILES
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_CLIENT_FILES WHERE TRACKA_CLIENT_FILES.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_CLIENT_FILE_GROUPS WHERE TRACKA_CLIENT_FILE_GROUPS.FILE_ID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_CLIENT_FILES  TRACKA_CLIENT_FILE_GROUPS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009614", PARENT_OWNER="", PARENT_TABLE="TRACKA_CLIENT_FILES"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_CLIENT_FILE_GROUPS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0901_001", FK_COLUMNS="FILE_ID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_CLIENT_FILES because TRACKA_CLIENT_FILE_GROUPS exists.')
 !!


CREATE  TRIGGER tD_TRACKA_DATABASE AFTER DELETE ON TRACKA_DATABASES
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_DATABASE_FIELDS WHERE TRACKA_DATABASE_FIELDS.DID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_DATABASES  TRACKA_DATABASE_FIELDS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000091c9", PARENT_OWNER="", PARENT_TABLE="TRACKA_DATABASES"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_DATABASE_FIELDS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0909_001", FK_COLUMNS="DID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_DATABASES because TRACKA_DATABASE_FIELDS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_DATABASE NO CASCADE BEFORE UPDATE ON TRACKA_DATABASES
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_DATABASES WHERE TRACKA_DATABASES.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_DATABASE_FIELDS WHERE TRACKA_DATABASE_FIELDS.DID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_DATABASES  TRACKA_DATABASE_FIELDS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009132", PARENT_OWNER="", PARENT_TABLE="TRACKA_DATABASES"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_DATABASE_FIELDS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0909_001", FK_COLUMNS="DID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_DATABASES because TRACKA_DATABASE_FIELDS exists.')
 !!


CREATE  TRIGGER tD_TRACKA_LIBRARY AFTER DELETE ON TRACKA_LIBRARY
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_LIBRARY_FILES WHERE TRACKA_LIBRARY_FILES.AID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_LIBRARY  TRACKA_LIBRARY_FILES on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009cf2", PARENT_OWNER="", PARENT_TABLE="TRACKA_LIBRARY"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_LIBRARY_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0929_001", FK_COLUMNS="AID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_LIBRARY because TRACKA_LIBRARY_FILES exists.')
 !!

CREATE  TRIGGER tU_TRACKA_LIBRARY NO CASCADE BEFORE UPDATE ON TRACKA_LIBRARY
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_LIBRARY WHERE TRACKA_LIBRARY.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_LIBRARY_FILES WHERE TRACKA_LIBRARY_FILES.AID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_LIBRARY  TRACKA_LIBRARY_FILES on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000094cc", PARENT_OWNER="", PARENT_TABLE="TRACKA_LIBRARY"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_LIBRARY_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0929_001", FK_COLUMNS="AID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_LIBRARY because TRACKA_LIBRARY_FILES exists.')
 !!


CREATE  TRIGGER tD_TRACKA_MAIL_CON AFTER DELETE ON TRACKA_MAIL_CONTENT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAIL_CONTENT_DATA WHERE TRACKA_MAIL_CONTENT_DATA.MCID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAIL_CONTENT  TRACKA_MAIL_CONTENT_DATA on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009ad7", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAIL_CONTENT"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_CONTENT_DATA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0936_001", FK_COLUMNS="MCID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAIL_CONTENT because TRACKA_MAIL_CONTENT_DATA exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAIL_CON NO CASCADE BEFORE UPDATE ON TRACKA_MAIL_CONTENT
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAIL_CONTENT WHERE TRACKA_MAIL_CONTENT.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAIL_CONTENT_DATA WHERE TRACKA_MAIL_CONTENT_DATA.MCID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAIL_CONTENT  TRACKA_MAIL_CONTENT_DATA on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009d42", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAIL_CONTENT"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_CONTENT_DATA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0936_001", FK_COLUMNS="MCID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAIL_CONTENT because TRACKA_MAIL_CONTENT_DATA exists.')
 !!


CREATE  TRIGGER tD_TRACKA_MAIL_LIS AFTER DELETE ON TRACKA_MAIL_LIST
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAIL_LIST_EMAILS WHERE TRACKA_MAIL_LIST_EMAILS.MLID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAIL_LIST  TRACKA_MAIL_LIST_EMAILS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009625", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAIL_LIST"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_LIST_EMAILS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0939_001", FK_COLUMNS="MLID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAIL_LIST because TRACKA_MAIL_LIST_EMAILS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAIL_LIS NO CASCADE BEFORE UPDATE ON TRACKA_MAIL_LIST
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAIL_LIST WHERE TRACKA_MAIL_LIST.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAIL_LIST_EMAILS WHERE TRACKA_MAIL_LIST_EMAILS.MLID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAIL_LIST  TRACKA_MAIL_LIST_EMAILS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009959", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAIL_LIST"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_LIST_EMAILS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0939_001", FK_COLUMNS="MLID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAIL_LIST because TRACKA_MAIL_LIST_EMAILS exists.')
 !!


CREATE  TRIGGER tD_TRACKA_MAILER AFTER DELETE ON TRACKA_MAILER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAILER_SENT WHERE TRACKA_MAILER_SENT.MID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAILER  TRACKA_MAILER_SENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009240", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_SENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_004", FK_COLUMNS="MID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAILER because TRACKA_MAILER_SENT exists.')
 !!

CREATE  TRIGGER tD_TRACKA_MAILER2 AFTER DELETE ON TRACKA_MAILER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAILER_GROUP WHERE TRACKA_MAILER_GROUP.MID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAILER  TRACKA_MAILER_GROUP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000092f1", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_003", FK_COLUMNS="MID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAILER because TRACKA_MAILER_GROUP exists.')
 !!

CREATE  TRIGGER tD_TRACKA_MAILER3 AFTER DELETE ON TRACKA_MAILER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAILER_EMAILS WHERE TRACKA_MAILER_EMAILS.MID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAILER  TRACKA_MAILER_EMAILS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008ddb", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_EMAILS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_002", FK_COLUMNS="MID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAILER because TRACKA_MAILER_EMAILS exists.')
 !!

CREATE  TRIGGER tD_TRACKA_MAILER4 AFTER DELETE ON TRACKA_MAILER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MAIL_CONTENT_LOG WHERE TRACKA_MAIL_CONTENT_LOG.MID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MAILER  TRACKA_MAIL_CONTENT_LOG on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000974f", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_CONTENT_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_001", FK_COLUMNS="MID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MAILER because TRACKA_MAIL_CONTENT_LOG exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAILER NO CASCADE BEFORE UPDATE ON TRACKA_MAILER
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAILER WHERE TRACKA_MAILER.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAILER_SENT WHERE TRACKA_MAILER_SENT.MID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAILER  TRACKA_MAILER_SENT on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0000956e", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_SENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_004", FK_COLUMNS="MID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAILER because TRACKA_MAILER_SENT exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAILER2 NO CASCADE BEFORE UPDATE ON TRACKA_MAILER
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAILER WHERE TRACKA_MAILER.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAILER_GROUP WHERE TRACKA_MAILER_GROUP.MID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAILER  TRACKA_MAILER_GROUP on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00008c67", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_003", FK_COLUMNS="MID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAILER because TRACKA_MAILER_GROUP exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAILER3 NO CASCADE BEFORE UPDATE ON TRACKA_MAILER
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAILER WHERE TRACKA_MAILER.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAILER_EMAILS WHERE TRACKA_MAILER_EMAILS.MID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAILER  TRACKA_MAILER_EMAILS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009222", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAILER_EMAILS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_002", FK_COLUMNS="MID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAILER because TRACKA_MAILER_EMAILS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MAILER4 NO CASCADE BEFORE UPDATE ON TRACKA_MAILER
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MAILER WHERE TRACKA_MAILER.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_MAIL_CONTENT_LOG WHERE TRACKA_MAIL_CONTENT_LOG.MID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MAILER  TRACKA_MAIL_CONTENT_LOG on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009508", PARENT_OWNER="", PARENT_TABLE="TRACKA_MAILER"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MAIL_CONTENT_LOG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0941_001", FK_COLUMNS="MID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MAILER because TRACKA_MAIL_CONTENT_LOG exists.')
 !!


CREATE  TRIGGER tD_TRACKA_MENU AFTER DELETE ON TRACKA_MENU
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MENU_SECURE WHERE TRACKA_MENU_SECURE.MENU_ID = old.MENU_ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MENU  TRACKA_MENU_SECURE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000905b", PARENT_OWNER="", PARENT_TABLE="TRACKA_MENU"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MENU_SECURE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0946_002", FK_COLUMNS="MENU_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MENU because TRACKA_MENU_SECURE exists.')
 !!

CREATE  TRIGGER tD_TRACKA_MENU2 AFTER DELETE ON TRACKA_MENU
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_MENU_CLIENT_FILES WHERE TRACKA_MENU_CLIENT_FILES.MENU_ID = old.MENU_ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_MENU  TRACKA_MENU_CLIENT_FILES on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099c2", PARENT_OWNER="", PARENT_TABLE="TRACKA_MENU"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MENU_CLIENT_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0946_001", FK_COLUMNS="MENU_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_MENU because TRACKA_MENU_CLIENT_FILES exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MENU NO CASCADE BEFORE UPDATE ON TRACKA_MENU
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MENU WHERE TRACKA_MENU.MENU_ID <> new.MENU_ID) > 0) AND
((SELECT count(*) FROM TRACKA_MENU_SECURE WHERE TRACKA_MENU_SECURE.MENU_ID = old.MENU_ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MENU  TRACKA_MENU_SECURE on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00008fa3", PARENT_OWNER="", PARENT_TABLE="TRACKA_MENU"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MENU_SECURE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0946_002", FK_COLUMNS="MENU_ID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MENU because TRACKA_MENU_SECURE exists.')
 !!

CREATE  TRIGGER tU_TRACKA_MENU2 NO CASCADE BEFORE UPDATE ON TRACKA_MENU
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_MENU WHERE TRACKA_MENU.MENU_ID <> new.MENU_ID) > 0) AND
((SELECT count(*) FROM TRACKA_MENU_CLIENT_FILES WHERE TRACKA_MENU_CLIENT_FILES.MENU_ID = old.MENU_ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_MENU  TRACKA_MENU_CLIENT_FILES on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000094bb", PARENT_OWNER="", PARENT_TABLE="TRACKA_MENU"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_MENU_CLIENT_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0946_001", FK_COLUMNS="MENU_ID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_MENU because TRACKA_MENU_CLIENT_FILES exists.')
 !!


CREATE  TRIGGER tD_TRACKA_SECTIONS AFTER DELETE ON TRACKA_SECTIONS
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_SECTIONS_FILES WHERE TRACKA_SECTIONS_FILES.AID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_SECTIONS  TRACKA_SECTIONS_FILES on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009673", PARENT_OWNER="", PARENT_TABLE="TRACKA_SECTIONS"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_SECTIONS_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0954_001", FK_COLUMNS="AID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_SECTIONS because TRACKA_SECTIONS_FILES exists.')
 !!

CREATE  TRIGGER tU_TRACKA_SECTIONS NO CASCADE BEFORE UPDATE ON TRACKA_SECTIONS
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_SECTIONS WHERE TRACKA_SECTIONS.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_SECTIONS_FILES WHERE TRACKA_SECTIONS_FILES.AID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_SECTIONS  TRACKA_SECTIONS_FILES on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000092da", PARENT_OWNER="", PARENT_TABLE="TRACKA_SECTIONS"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_SECTIONS_FILES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0954_001", FK_COLUMNS="AID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_SECTIONS because TRACKA_SECTIONS_FILES exists.')
 !!


CREATE  TRIGGER tD_TRACKA_WEBSITE AFTER DELETE ON TRACKA_WEBSITE
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACKA_WEBSITE_USERS WHERE TRACKA_WEBSITE_USERS.SID = old.ID) > 0)
    /* erwin Builtin Trigger */
    /* TRACKA_WEBSITE  TRACKA_WEBSITE_USERS on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009960", PARENT_OWNER="", PARENT_TABLE="TRACKA_WEBSITE"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_WEBSITE_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0961_001", FK_COLUMNS="SID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRACKA_WEBSITE because TRACKA_WEBSITE_USERS exists.')
 !!

CREATE  TRIGGER tU_TRACKA_WEBSITE NO CASCADE BEFORE UPDATE ON TRACKA_WEBSITE
    REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW MODE DB2SQL
WHEN (((SELECT count(*) FROM TRACKA_WEBSITE WHERE TRACKA_WEBSITE.ID <> new.ID) > 0) AND
((SELECT count(*) FROM TRACKA_WEBSITE_USERS WHERE TRACKA_WEBSITE_USERS.SID = old.ID) > 0))
  /* erwin Builtin Trigger */
  /* TRACKA_WEBSITE  TRACKA_WEBSITE_USERS on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00009938", PARENT_OWNER="", PARENT_TABLE="TRACKA_WEBSITE"
    CHILD_OWNER="", CHILD_TABLE="TRACKA_WEBSITE_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0961_001", FK_COLUMNS="SID" */
       SIGNAL SQLSTATE '75001' ('Cannot update TRACKA_WEBSITE because TRACKA_WEBSITE_USERS exists.')
 !!


CREATE TRIGGER D0874U01
  NO CASCADE BEFORE UPDATE
  ON TRAIT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRAIT AFTER DELETE ON TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM AREA_TRAIT WHERE AREA_TRAIT.TRAIT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRAIT  AREA_TRAIT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000084a0", PARENT_OWNER="", PARENT_TABLE="TRAIT"
    CHILD_OWNER="", CHILD_TABLE="AREA_TRAIT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0866_001", FK_COLUMNS="TRAIT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRAIT because AREA_TRAIT exists.')
 !!

CREATE  TRIGGER tD_TRAIT2 AFTER DELETE ON TRAIT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROVING_SCHEME_INDEX_ECON_WGT WHERE PROVING_SCHEME_INDEX_ECON_WGT.TRAIT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRAIT  PROVING_SCHEME_INDEX_ECON_WGT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009907", PARENT_OWNER="", PARENT_TABLE="TRAIT"
    CHILD_OWNER="", CHILD_TABLE="PROVING_SCHEME_INDEX_ECON_WGT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0866_002", FK_COLUMNS="TRAIT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRAIT because PROVING_SCHEME_INDEX_ECON_WGT exists.')
 !!


CREATE TRIGGER D0124U01
  NO CASCADE BEFORE UPDATE
  ON TRAIT_SV
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0125U01
  NO CASCADE BEFORE UPDATE
  ON TRAIT_VAL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_TRAIT_VAL AFTER DELETE ON TRAIT_VAL
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRAIT_VAL_DESCR WHERE TRAIT_VAL_DESCR.TRAIT_CD = old.TRAIT_CD AND
                                                  TRAIT_VAL_DESCR.CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* TRAIT_VAL  TRAIT_VAL_DESCR on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000941f", PARENT_OWNER="", PARENT_TABLE="TRAIT_VAL"
    CHILD_OWNER="", CHILD_TABLE="TRAIT_VAL_DESCR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0125_001", FK_COLUMNS="TRAIT_CD""CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete TRAIT_VAL because TRAIT_VAL_DESCR exists.')
 !!


CREATE TRIGGER D0719U01
  NO CASCADE BEFORE UPDATE
  ON TRAIT_VAL_DESCR
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0507I51
  NO CASCADE BEFORE INSERT
  ON UNID_ANML_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date_d IS NULL 
  AND new.test_date IS NOT NULL
   OR CHAR(new.test_date_d,ISO) = '0001-01-01'
  AND new.test_date IS NOT NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0507I52
  NO CASCADE BEFORE INSERT
  ON UNID_ANML_DT_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.test_date IS NULL 
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01'
   OR new.test_date = 0
  AND new.test_date_d IS NOT NULL
  AND CHAR(new.test_date_d,ISO) != '0001-01-01')
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0507U01
  NO CASCADE BEFORE UPDATE
  ON UNID_ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0507U51
  NO CASCADE BEFORE UPDATE OF 
                    test_date
  ON UNID_ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date != new.test_date
   OR old.test_date IS NULL AND new.test_date IS NOT NULL
   OR old.test_date IS NOT NULL AND new.test_date IS NULL)
SET new.test_date_d =
  CASE WHEN new.test_date = 0 OR new.test_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.test_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0507U52
  NO CASCADE BEFORE UPDATE OF 
                    test_date_d
  ON UNID_ANML_DT_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.test_date_d != new.test_date_d
   OR old.test_date_d IS NULL and new.test_date_d IS NOT NULL
   OR old.test_date_d IS NOT NULL and new.test_date_d IS NULL)
SET new.test_date =
  CASE WHEN new.test_date_d IS NULL OR new.test_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.test_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.test_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.test_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0519I51
  NO CASCADE BEFORE INSERT
  ON UNID_ANML_DT_TAG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date_d IS NULL 
  AND new.date IS NOT NULL
   OR CHAR(new.date_d,ISO) = '0001-01-01'
  AND new.date IS NOT NULL)
SET new.date_d =
  CASE WHEN new.date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0519I52
  NO CASCADE BEFORE INSERT
  ON UNID_ANML_DT_TAG
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.date IS NULL 
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01'
   OR new.date = 0
  AND new.date_d IS NOT NULL
  AND CHAR(new.date_d,ISO) != '0001-01-01')
SET new.date =
  CASE WHEN new.date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0519U01
  NO CASCADE BEFORE UPDATE
  ON UNID_ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0519U51
  NO CASCADE BEFORE UPDATE OF 
                    DATE
  ON UNID_ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date != new.date
   OR old.date IS NULL AND new.date IS NOT NULL
   OR old.date IS NOT NULL AND new.date IS NULL)
SET new.date_d =
  CASE WHEN new.date = 0 OR new.date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0519U52
  NO CASCADE BEFORE UPDATE OF 
                    date_d
  ON UNID_ANML_DT_TAG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.date_d != new.date_d
   OR old.date_d IS NULL and new.date_d IS NOT NULL
   OR old.date_d IS NOT NULL and new.date_d IS NULL)
SET new.date =
  CASE WHEN new.date_d IS NULL OR new.date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0558U01
  NO CASCADE BEFORE UPDATE
  ON UNIT_OF_MSMT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_UNIT_OF_MSMT AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM SPCS_HLTH_PROD WHERE SPCS_HLTH_PROD.STD_DOSE_UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  SPCS_HLTH_PROD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009215", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="SPCS_HLTH_PROD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_002", FK_COLUMNS="STD_DOSE_UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because SPCS_HLTH_PROD exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT2 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM ANML_MEDICAL_TREATMENT WHERE ANML_MEDICAL_TREATMENT.DOSE_UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  ANML_MEDICAL_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="000099c1", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="ANML_MEDICAL_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_006", FK_COLUMNS="DOSE_UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because ANML_MEDICAL_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT3 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_HLTH_TREATMENT WHERE TRACE_HLTH_TREATMENT.DOSE_UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  TRACE_HLTH_TREATMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00009114", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="TRACE_HLTH_TREATMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_008", FK_COLUMNS="DOSE_UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because TRACE_HLTH_TREATMENT exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT4 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM REVIEW_QSTN WHERE REVIEW_QSTN.UNIT_OF_MSMT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  REVIEW_QSTN on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000960c", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="REVIEW_QSTN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_007", FK_COLUMNS="UNIT_OF_MSMT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because REVIEW_QSTN exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT5 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT_RSLT WHERE TRACE_ELEMENT_RSLT.UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  TRACE_ELEMENT_RSLT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008e2b", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT_RSLT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_005", FK_COLUMNS="UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because TRACE_ELEMENT_RSLT exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT6 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM TRACE_ELEMENT WHERE TRACE_ELEMENT.UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  TRACE_ELEMENT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008bf3", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="TRACE_ELEMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_004", FK_COLUMNS="UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because TRACE_ELEMENT exists.')
 !!

CREATE  TRIGGER tD_UNIT_OF_MSMT7 AFTER DELETE ON UNIT_OF_MSMT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM UOM_XLATE WHERE UOM_XLATE.UOM_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* UNIT_OF_MSMT  UOM_XLATE on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008dc4", PARENT_OWNER="", PARENT_TABLE="UNIT_OF_MSMT"
    CHILD_OWNER="", CHILD_TABLE="UOM_XLATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0558_003", FK_COLUMNS="UOM_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete UNIT_OF_MSMT because UOM_XLATE exists.')
 !!


CREATE TRIGGER D0078U01
  NO CASCADE BEFORE UPDATE
  ON UOM_XLATE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0726U01
  NO CASCADE BEFORE UPDATE
  ON USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_USER AFTER DELETE ON USER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM WORK_GRP_USER WHERE WORK_GRP_USER.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* USER  WORK_GRP_USER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00007ff5", PARENT_OWNER="", PARENT_TABLE="USER"
    CHILD_OWNER="", CHILD_TABLE="WORK_GRP_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0726_001", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete USER because WORK_GRP_USER exists.')
 !!

CREATE  TRIGGER tD_USER2 AFTER DELETE ON USER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM WORK_GRP WHERE WORK_GRP.MGR_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* USER  WORK_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008401", PARENT_OWNER="", PARENT_TABLE="USER"
    CHILD_OWNER="", CHILD_TABLE="WORK_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0726_002", FK_COLUMNS="MGR_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete USER because WORK_GRP exists.')
 !!

CREATE  TRIGGER tD_USER3 AFTER DELETE ON USER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROGRAM WHERE PROGRAM.OWNER_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* USER  PROGRAM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008167", PARENT_OWNER="", PARENT_TABLE="USER"
    CHILD_OWNER="", CHILD_TABLE="PROGRAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0726_004", FK_COLUMNS="OWNER_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete USER because PROGRAM exists.')
 !!

CREATE  TRIGGER tD_USER4 AFTER DELETE ON USER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PROGRAM WHERE PROGRAM.CONTACT_USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* USER  PROGRAM on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008547", PARENT_OWNER="", PARENT_TABLE="USER"
    CHILD_OWNER="", CHILD_TABLE="PROGRAM"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0726_003", FK_COLUMNS="CONTACT_USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete USER because PROGRAM exists.')
 !!

CREATE  TRIGGER tD_USER5 AFTER DELETE ON USER
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM PGM_SHORT_CUT WHERE PGM_SHORT_CUT.USER_ID = old.USER_ID) > 0)
    /* erwin Builtin Trigger */
    /* USER  PGM_SHORT_CUT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000862f", PARENT_OWNER="", PARENT_TABLE="USER"
    CHILD_OWNER="", CHILD_TABLE="PGM_SHORT_CUT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0726_005", FK_COLUMNS="USER_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete USER because PGM_SHORT_CUT exists.')
 !!


CREATE TRIGGER D0359I01
  NO CASCADE BEFORE INSERT
  ON VACANT_INSEM_PD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.oth_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.oth_ptpt_cd) )
SIGNAL SQLSTATE 'Z0359'
('D0359I01: oth_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0359U01
  NO CASCADE BEFORE UPDATE
  ON VACANT_INSEM_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0359U02
  NO CASCADE BEFORE UPDATE
  ON VACANT_INSEM_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.upd_user_id IS NULL)
SIGNAL SQLSTATE 'Z0359'
('D0359U02: upd_user_id must be supplied on update')
 !!


CREATE TRIGGER D0359U03
  NO CASCADE BEFORE UPDATE
  ON VACANT_INSEM_PD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.oth_ptpt_cd IS NOT NULL
AND NOT EXISTS
  (SELECT 1 from pfx_user pu
    WHERE pu.anml_id_pfx_cd = new.oth_ptpt_cd) )
SIGNAL SQLSTATE 'Z0359'
('D0359U03: oth_ptpt_cd does not exist on pfx_user')
 !!


CREATE TRIGGER D0540U01
  NO CASCADE BEFORE UPDATE
  ON VFY_RSLT
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_VFY_RSLT AFTER DELETE ON VFY_RSLT
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM CALF_DEFECT WHERE CALF_DEFECT.VFY_RSLT_CD = old.CD) > 0)
    /* erwin Builtin Trigger */
    /* VFY_RSLT  CALF_DEFECT on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000895f", PARENT_OWNER="", PARENT_TABLE="VFY_RSLT"
    CHILD_OWNER="", CHILD_TABLE="CALF_DEFECT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0540_001", FK_COLUMNS="VFY_RSLT_CD" */
     SIGNAL SQLSTATE '75001' ('Cannot delete VFY_RSLT because CALF_DEFECT exists.')
 !!


CREATE TRIGGER D0787U01
  NO CASCADE BEFORE UPDATE
  ON VOL_BV_RSLT
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0788U01
  NO CASCADE BEFORE UPDATE
  ON VOL_BV_RSLT_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0789U01
  NO CASCADE BEFORE UPDATE
  ON VOL_RUN
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_VOL_RUN AFTER DELETE ON VOL_RUN
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM VOL_RUN_AE_BRD WHERE VOL_RUN_AE_BRD.EXTR_DATE = old.EXTR_DATE AND
                                                 VOL_RUN_AE_BRD.GEO_AREA_ID = old.GEO_AREA_ID) > 0)
    /* erwin Builtin Trigger */
    /* VOL_RUN  VOL_RUN_AE_BRD on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008eaf", PARENT_OWNER="", PARENT_TABLE="VOL_RUN"
    CHILD_OWNER="", CHILD_TABLE="VOL_RUN_AE_BRD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0789_001", FK_COLUMNS="EXTR_DATE""GEO_AREA_ID" */
     SIGNAL SQLSTATE '75001' ('Cannot delete VOL_RUN because VOL_RUN_AE_BRD exists.')
 !!


CREATE TRIGGER D0790U01
  NO CASCADE BEFORE UPDATE
  ON VOL_RUN_AE_BRD
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0279U01
  NO CASCADE BEFORE UPDATE
  ON WEB_SERVER_SESS
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0750I01
  NO CASCADE BEFORE INSERT
  ON WEIGHT_VALIDATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (EXISTS (
    SELECT 1 FROM weight_validation wv
     WHERE wv.species_cd = new.species_cd
       AND wv.event_cd = new.event_cd
       AND wv.sex_cd = new.sex_cd
       AND new.min_age_days <= wv.max_age_days
       AND new.max_age_days >= wv.min_age_days))
SIGNAL SQLSTATE 'Z0750'
('D0750I01: the age range overlaps with an existing age range')
 !!


CREATE TRIGGER D0750U01
  NO CASCADE BEFORE UPDATE
  ON WEIGHT_VALIDATION
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0750U02
  NO CASCADE BEFORE UPDATE OF 
                    species_cd,
                    event_cd,
                    sex_cd,
                    min_age_days,
                    max_age_days
  ON WEIGHT_VALIDATION
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN ((old.min_age_days != new.min_age_days
    OR old.max_age_days != new.max_age_days)
  AND EXISTS (
    SELECT 1 FROM weight_validation wv
     WHERE wv.species_cd = new.species_cd
       AND wv.event_cd = new.event_cd
       AND wv.sex_cd = new.sex_cd
       AND wv.min_age_days != old.min_age_days
       AND new.min_age_days <= wv.max_age_days
       AND new.max_age_days >= wv.min_age_days))
SIGNAL SQLSTATE 'Z0750'
('D0750U02: the age range overlaps with an existing age range')
 !!


CREATE TRIGGER D0287I01
  NO CASCADE BEFORE INSERT
  ON WORK_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.org_ptpt_cd is not null and NOT EXISTS
  (SELECT 1 from curr_pfx_user cpu
    WHERE cpu.anml_id_pfx_cd = new.org_ptpt_cd and ptpt_tp_cd in ('B',
'L','N','S') ))
SIGNAL SQLSTATE 'Z0287'
('D0287I01: org_ptpt_cd must exist on curr_pfx_user with ptpt_tp B,L,N,
S')
 !!


CREATE TRIGGER D0287U02
  NO CASCADE BEFORE UPDATE OF 
                    org_ptpt_cd
  ON WORK_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.org_ptpt_cd is not null and NOT EXISTS
  (SELECT 1 from curr_pfx_user cpu
    WHERE cpu.anml_id_pfx_cd = new.org_ptpt_cd
and ptpt_tp_cd in ('B','L','N','S') ))
SIGNAL SQLSTATE 'Z0287'
('D0287U02: org_ptpt_cd must exist on curr_pfx_user with ptpt_tp B,L,N,
S')
 !!


CREATE TRIGGER D0287I02
  NO CASCADE BEFORE INSERT
  ON WORK_GRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.dept_party_id is not null and NOT EXISTS
  (SELECT 1 from party_role pr
    WHERE pr.party_id = new.dept_party_id and pr.party_role_cd in 
('LDPT','BSOC') and pr.end_date is null ))
SIGNAL SQLSTATE 'Z0287'
('D0287I02: dept_party_id must have a role of LDPT or BSOC')
 !!


CREATE TRIGGER D0287U03
  NO CASCADE BEFORE UPDATE
  ON WORK_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (new.dept_party_id is not null and NOT EXISTS
  (SELECT 1 from party_role pr
    WHERE pr.party_id = new.dept_party_id and pr.party_role_cd in 
('LDPT','BSOC') and pr.end_date is null ))
SIGNAL SQLSTATE 'Z0287'
('D0287I02: dept_party_id must have a role of LDPT or BSOC')
 !!


CREATE TRIGGER D0287U01
  NO CASCADE BEFORE UPDATE
  ON WORK_GRP
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE  TRIGGER tD_WORK_GRP AFTER DELETE ON WORK_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM WORK_GRP_USER WHERE WORK_GRP_USER.WORK_GRP_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* WORK_GRP  WORK_GRP_USER on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="0000888c", PARENT_OWNER="", PARENT_TABLE="WORK_GRP"
    CHILD_OWNER="", CHILD_TABLE="WORK_GRP_USER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0287_002", FK_COLUMNS="WORK_GRP_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete WORK_GRP because WORK_GRP_USER exists.')
 !!

CREATE  TRIGGER tD_WORK_GRP2 AFTER DELETE ON WORK_GRP
   REFERENCING OLD AS OLD FOR EACH ROW MODE DB2SQL
WHEN ((SELECT count(*) FROM APPL_WORK_GRP WHERE APPL_WORK_GRP.WORK_GRP_NAME = old.NAME) > 0)
    /* erwin Builtin Trigger */
    /* WORK_GRP  APPL_WORK_GRP on parent delete no action */
  /* ERWIN_RELATION:CHECKSUM="00008b86", PARENT_OWNER="", PARENT_TABLE="WORK_GRP"
    CHILD_OWNER="", CHILD_TABLE="APPL_WORK_GRP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK0287_001", FK_COLUMNS="WORK_GRP_NAME" */
     SIGNAL SQLSTATE '75001' ('Cannot delete WORK_GRP because APPL_WORK_GRP exists.')
 !!


CREATE TRIGGER D0290U01
  NO CASCADE BEFORE UPDATE
  ON WORK_GRP_USER
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0200I55
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sale_date_d IS NULL 
  AND new.sale_date IS NOT NULL
   OR CHAR(new.sale_date_d,ISO) = '0001-01-01'
  AND new.sale_date IS NOT NULL)
SET new.sale_date_d =
  CASE WHEN new.sale_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sale_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0200I51
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date_d IS NULL 
  AND new.print_date IS NOT NULL
   OR CHAR(new.print_date_d,ISO) = '0001-01-01'
  AND new.print_date IS NOT NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0200U54
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date_d
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date_d != new.rqst_date_d
   OR old.rqst_date_d IS NULL and new.rqst_date_d IS NOT NULL
   OR old.rqst_date_d IS NOT NULL and new.rqst_date_d IS NULL)
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL OR new.rqst_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200U52
  NO CASCADE BEFORE UPDATE OF 
                    print_date_d
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date_d != new.print_date_d
   OR old.print_date_d IS NULL and new.print_date_d IS NOT NULL
   OR old.print_date_d IS NOT NULL and new.print_date_d IS NULL)
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL OR new.print_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200I56
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.sale_date IS NULL 
  AND new.sale_date_d IS NOT NULL
  AND CHAR(new.sale_date_d,ISO) != '0001-01-01'
   OR new.sale_date = 0
  AND new.sale_date_d IS NOT NULL
  AND CHAR(new.sale_date_d,ISO) != '0001-01-01')
SET new.sale_date =
  CASE WHEN new.sale_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.sale_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.sale_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.sale_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200I54
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date IS NULL 
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01'
   OR new.rqst_date = 0
  AND new.rqst_date_d IS NOT NULL
  AND CHAR(new.rqst_date_d,ISO) != '0001-01-01')
SET new.rqst_date =
  CASE WHEN new.rqst_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.rqst_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.rqst_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200I52
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.print_date IS NULL 
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01'
   OR new.print_date = 0
  AND new.print_date_d IS NOT NULL
  AND CHAR(new.print_date_d,ISO) != '0001-01-01')
SET new.print_date =
  CASE WHEN new.print_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.print_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.print_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.print_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200U01
  NO CASCADE BEFORE UPDATE
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0200U51
  NO CASCADE BEFORE UPDATE OF 
                    print_date
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.print_date != new.print_date
   OR old.print_date IS NULL AND new.print_date IS NOT NULL
   OR old.print_date IS NOT NULL AND new.print_date IS NULL)
SET new.print_date_d =
  CASE WHEN new.print_date = 0 OR new.print_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.print_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0200U53
  NO CASCADE BEFORE UPDATE OF 
                    rqst_date
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.rqst_date != new.rqst_date
   OR old.rqst_date IS NULL AND new.rqst_date IS NOT NULL
   OR old.rqst_date IS NOT NULL AND new.rqst_date IS NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 OR new.rqst_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0200U55
  NO CASCADE BEFORE UPDATE OF 
                    sale_date
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sale_date != new.sale_date
   OR old.sale_date IS NULL AND new.sale_date IS NOT NULL
   OR old.sale_date IS NOT NULL AND new.sale_date IS NULL)
SET new.sale_date_d =
  CASE WHEN new.sale_date = 0 OR new.sale_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.sale_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0200U56
  NO CASCADE BEFORE UPDATE OF 
                    sale_date_d
  ON XFER_CARD
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.sale_date_d != new.sale_date_d
   OR old.sale_date_d IS NULL and new.sale_date_d IS NOT NULL
   OR old.sale_date_d IS NOT NULL and new.sale_date_d IS NULL)
SET new.sale_date =
  CASE WHEN new.sale_date_d IS NULL OR new.sale_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.sale_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.sale_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.sale_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0200I53
  NO CASCADE BEFORE INSERT
  ON XFER_CARD
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.rqst_date_d IS NULL 
  AND new.rqst_date IS NOT NULL
   OR CHAR(new.rqst_date_d,ISO) = '0001-01-01'
  AND new.rqst_date IS NOT NULL)
SET new.rqst_date_d =
  CASE WHEN new.rqst_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.rqst_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0202I51
  NO CASCADE BEFORE INSERT
  ON XFER_CARD_RNGE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_brth_date_d IS NULL 
  AND new.end_brth_date IS NOT NULL
   OR CHAR(new.end_brth_date_d,ISO) = '0001-01-01'
  AND new.end_brth_date IS NOT NULL)
SET new.end_brth_date_d =
  CASE WHEN new.end_brth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0202I52
  NO CASCADE BEFORE INSERT
  ON XFER_CARD_RNGE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.end_brth_date IS NULL 
  AND new.end_brth_date_d IS NOT NULL
  AND CHAR(new.end_brth_date_d,ISO) != '0001-01-01'
   OR new.end_brth_date = 0
  AND new.end_brth_date_d IS NOT NULL
  AND CHAR(new.end_brth_date_d,ISO) != '0001-01-01')
SET new.end_brth_date =
  CASE WHEN new.end_brth_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0202I53
  NO CASCADE BEFORE INSERT
  ON XFER_CARD_RNGE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_brth_date_d IS NULL 
  AND new.st_brth_date IS NOT NULL
   OR CHAR(new.st_brth_date_d,ISO) = '0001-01-01'
  AND new.st_brth_date IS NOT NULL)
SET new.st_brth_date_d =
  CASE WHEN new.st_brth_date = 0 THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0202I54
  NO CASCADE BEFORE INSERT
  ON XFER_CARD_RNGE
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (new.st_brth_date IS NULL 
  AND new.st_brth_date_d IS NOT NULL
  AND CHAR(new.st_brth_date_d,ISO) != '0001-01-01'
   OR new.st_brth_date = 0
  AND new.st_brth_date_d IS NOT NULL
  AND CHAR(new.st_brth_date_d,ISO) != '0001-01-01')
SET new.st_brth_date =
  CASE WHEN new.st_brth_date_d IS NULL THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0202U01
  NO CASCADE BEFORE UPDATE
  ON XFER_CARD_RNGE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0202U51
  NO CASCADE BEFORE UPDATE OF 
                    end_brth_date
  ON XFER_CARD_RNGE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_brth_date != new.end_brth_date
   OR old.end_brth_date IS NULL AND new.end_brth_date IS NOT NULL
   OR old.end_brth_date IS NOT NULL AND new.end_brth_date IS NULL)
SET new.end_brth_date_d =
  CASE WHEN new.end_brth_date = 0 OR new.end_brth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.end_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0202U52
  NO CASCADE BEFORE UPDATE OF 
                    end_brth_date_d
  ON XFER_CARD_RNGE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.end_brth_date_d != new.end_brth_date_d
   OR old.end_brth_date_d IS NULL and new.end_brth_date_d IS NOT NULL
   OR old.end_brth_date_d IS NOT NULL and new.end_brth_date_d IS NULL)
SET new.end_brth_date =
  CASE WHEN new.end_brth_date_d IS NULL OR new.end_brth_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.end_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.end_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0202U53
  NO CASCADE BEFORE UPDATE OF 
                    st_brth_date
  ON XFER_CARD_RNGE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_brth_date != new.st_brth_date
   OR old.st_brth_date IS NULL AND new.st_brth_date IS NOT NULL
   OR old.st_brth_date IS NOT NULL AND new.st_brth_date IS NULL)
SET new.st_brth_date_d =
  CASE WHEN new.st_brth_date = 0 OR new.st_brth_date IS NULL THEN NULL ELSE
  DATE(INSERT(INSERT(CHAR(new.st_brth_date+19000000),7,0,'-'),5,0,'-')) END
 !!


CREATE TRIGGER D0202U54
  NO CASCADE BEFORE UPDATE OF 
                    st_brth_date_d
  ON XFER_CARD_RNGE
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
WHEN (old.st_brth_date_d != new.st_brth_date_d
   OR old.st_brth_date_d IS NULL and new.st_brth_date_d IS NOT NULL
   OR old.st_brth_date_d IS NOT NULL and new.st_brth_date_d IS NULL)
SET new.st_brth_date =
  CASE WHEN new.st_brth_date_d IS NULL OR new.st_brth_date_d = '0001-01-01' THEN 0 ELSE
  INT(SUBSTR(CHAR(new.st_brth_date_d,ISO),1,4) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),6,2) ||
      SUBSTR(CHAR(new.st_brth_date_d,ISO),9,2)) - 19000000 END
 !!


CREATE TRIGGER D0461U01
  NO CASCADE BEFORE UPDATE
  ON XFER_EXCL
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0570I01
  NO CASCADE BEFORE INSERT
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0570'
('D0570I01: invalid sample regime code')
 !!


CREATE TRIGGER D0570I02
  NO CASCADE BEFORE INSERT
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SSN_CD'
      AND c.cd = LTRIM(CHAR(INT(new.ssn_cd)))) )
SIGNAL SQLSTATE 'Z0570'
('D0570I02: invalid season code')
 !!


CREATE TRIGGER D0570I03
  NO CASCADE BEFORE INSERT
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0570'
('D0570I03: invalid age group code')
 !!


CREATE TRIGGER D0570U01
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0570U02
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SAMPLE_REGIME_CD'
      AND c.cd = LTRIM(CHAR(new.sample_regime_cd))) )
SIGNAL SQLSTATE 'Z0570'
('D0570U02: invalid sample regime code')
 !!


CREATE TRIGGER D0570U03
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'SSN_CD'
      AND c.cd = LTRIM(CHAR(INT(new.ssn_cd)))) )
SIGNAL SQLSTATE 'Z0570'
('D0570U03: invalid season code')
 !!


CREATE TRIGGER D0570U04
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_CGRP
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'ANML_AGE_GRP_CD'
      AND c.cd = LTRIM(CHAR(INT(new.age_grp_cd)))) )
SIGNAL SQLSTATE 'Z0570'
('D0570U04: invalid age group code')
 !!


CREATE TRIGGER D0571U01
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_FULL_MODEL
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0579I01
  NO CASCADE BEFORE INSERT
  ON YLD_DEV_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0579'
('D0579I01: invalid ae source code')
 !!


CREATE TRIGGER D0579U01
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
SET new.upd_time = CURRENT TIMESTAMP
 !!


CREATE TRIGGER D0579U02
  NO CASCADE BEFORE UPDATE
  ON YLD_DEV_HIST
  REFERENCING NEW AS NEW
  FOR EACH ROW
WHEN (NOT EXISTS
  (SELECT 1 from cd_ref c
    WHERE c.col_name = 'AE_SOURCE_CD'
      AND c.cd = new.ae_source_cd) )
SIGNAL SQLSTATE 'Z0579'
('D0579U02: invalid ae source code')
 !!

