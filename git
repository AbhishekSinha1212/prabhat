
CREATE TYPE Classword_Id AS BIGINT
FINAL;

CREATE TYPE Classword_Amt AS DECIMAL(18,4)
FINAL;

CREATE TYPE Classword_Cnt AS INTEGER
FINAL;

CREATE TYPE Classword_Qty AS DECIMAL(18,4)
FINAL;

CREATE TYPE Classword_Rate AS DECIMAL(9,5)
FINAL;

CREATE TYPE Classword_Meas AS DECIMAL(18,4)
FINAL;

CREATE TYPE Classword_Pct AS DECIMAL(9,4)
FINAL;

CREATE TYPE DAI_Batch_Id AS BIGINT
FINAL;

CREATE TYPE Valid_From_Date AS DATE
FINAL;

CREATE TYPE VLD_TO_DT AS DATE
FINAL;

CREATE TYPE DAI_Create_Dttm AS TIMESTAMP(0)
FINAL;

CREATE TYPE DAI_Update_Dttm AS TIMESTAMP(0)
FINAL;

CREATE TYPE Classword_Blob AS BLOB()
FINAL;

CREATE TYPE Current_Ind AS CHAR(1)
FINAL;

CREATE TYPE System_Valid_From_Date AS TIMESTAMP(0)
FINAL;

CREATE TYPE System_Valid_To_Date AS TIMESTAMP(0)
FINAL;

CREATE  TABLE BUSINESS_AREA
(

	Business_Area_Cd     VARCHAR(50) NOT NULL 
		TITLE 'Business Area Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE BUSINESS_AREA
	ADD CONSTRAINT XPKBUSINESS_AREA PRIMARY KEY (Business_Area_Cd);

CREATE  TABLE BUSINESS_UNIT
(

	Business_Unit_Cd     VARCHAR(50) NOT NULL 
		TITLE 'Business Unit Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE BUSINESS_UNIT
	ADD CONSTRAINT XPKBUSINESS_UNIT PRIMARY KEY (Business_Unit_Cd);

CREATE  TABLE COMPANY_CODE
(

	Company_Cd           VARCHAR(50) NOT NULL 
		TITLE 'Company Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE COMPANY_CODE
	ADD CONSTRAINT XPKCOMPANY_CODE PRIMARY KEY (Company_Cd);

CREATE  TABLE CONTROLLING_AREA
(

	Controlling_Area_Cd  VARCHAR(50) NOT NULL 
		TITLE 'Controlling Area Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE CONTROLLING_AREA
	ADD CONSTRAINT XPKCONTROLLING_AREA PRIMARY KEY (Controlling_Area_Cd);

CREATE  TABLE COST_CENTER
(

	Cost_Center_Cd       VARCHAR(50) NOT NULL 
		TITLE 'Cost Center Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE COST_CENTER
	ADD CONSTRAINT XPKCOST_CENTER PRIMARY KEY (Cost_Center_Cd);

CREATE MULTISET  TABLE COUNTRY
(

	Country_Cd           VARCHAR(50) NOT NULL 
		TITLE 'Country Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Country_Name         VARCHAR(100) NULL 
		TITLE 'Country Name'
		CHARACTER SET UNICODE
		CASESPECIFIC,
	Country_ISO_Cd       VARCHAR(50) NULL 
		TITLE 'Country ISO Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Data_Acquisition_Integration_Create_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Create Dttm',
	Data_Acquisition_Integration_Update_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Update Dttm',
	Source_System_Cd     VARCHAR(50) NOT NULL 
		TITLE 'Source System Cd'
		UPPERCASE
		NOT CASESPECIFIC
)
	PRIMARY INDEX XIE1CTRY
	 (
			Country_Cd
	 );

ALTER TABLE COUNTRY
	ADD CONSTRAINT XPKCTRY PRIMARY KEY (Country_Cd);

CREATE MULTISET  TABLE CURRENCY
(

	Currency_Cd          VARCHAR(50) NOT NULL 
		TITLE 'Currency Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Currency_Name        VARCHAR(100) NULL 
		TITLE 'Currency Name'
		CHARACTER SET UNICODE
		CASESPECIFIC
);

ALTER TABLE CURRENCY
	ADD CONSTRAINT XPKCRNCY PRIMARY KEY (Currency_Cd);

CREATE MULTISET  TABLE FISCAL_YEAR_VARIANT
(

	Posting_Period_Cnt   Classword_Cnt NULL 
		TITLE 'Posting Period Cnt',
	Special_Period_Cnt   Classword_Cnt NULL 
		TITLE 'Special Period Cnt',
	Calendar_Year_Ind    CHAR(1) NULL 
		TITLE 'Calendar Year Ind'
		NOT CASESPECIFIC
		 CONSTRAINT Indicator_1288960511 CHECK ( Calendar_Year_Ind IN ('Y', 'N') ),
	Year_Dependent_Ind   CHAR(1) NULL 
		TITLE 'Year Dependent Ind'
		NOT CASESPECIFIC
		 CONSTRAINT Indicator_219754000 CHECK ( Year_Dependent_Ind IN ('Y', 'N') ),
	Fiscal_Year_Variant_Cd VARCHAR(50) NOT NULL 
		TITLE 'Fiscal Year Variant Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Data_Acquisition_Integration_Create_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Create Dttm',
	Data_Acquisition_Integration_Update_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Update Dttm'
)
	 UNIQUE PRIMARY INDEX XPKFISC_YR_VRNT
	 (
			Fiscal_Year_Variant_Cd
	 );

CREATE  TABLE FRANCHISE
(

	Franchise_Cd         VARCHAR(50) NOT NULL 
		TITLE 'Franchise Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE FRANCHISE
	ADD CONSTRAINT XPKFRANCHISE PRIMARY KEY (Franchise_Cd);

CREATE  TABLE GL_ACCOUNTING_UNIT
(

	GL_Accounting_Unit_Cd VARCHAR(50) NOT NULL 
		TITLE 'GL Accounting Unit Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE GL_ACCOUNTING_UNIT
	ADD CONSTRAINT XPKGL_ACCOUNTING_UNIT PRIMARY KEY (GL_Accounting_Unit_Cd);

CREATE MULTISET  TABLE LANGUAGE
(

	Language_Cd          VARCHAR(50) NOT NULL 
		TITLE 'Language Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Language_Desc        VARCHAR(250) NULL 
		TITLE 'Language Desc'
		CHARACTER SET UNICODE
		CASESPECIFIC,
	Data_Acquisition_Integration_Create_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Create Dttm',
	Data_Acquisition_Integration_Update_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Update Dttm',
	Source_System_Cd     VARCHAR(50) NULL 
		TITLE 'Source System Cd'
		UPPERCASE
		NOT CASESPECIFIC
)
	 UNIQUE PRIMARY INDEX XPKLANG
	 (
			Language_Cd
	 );

CREATE  TABLE LEGAL_ENTITY
(

	Legal_Entity_Cd      VARCHAR(50) NOT NULL 
		TITLE 'Legal Entity Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE LEGAL_ENTITY
	ADD CONSTRAINT XPKLEGAL_ENTITY PRIMARY KEY (Legal_Entity_Cd);

CREATE  TABLE MANAGEMENT_REPORTING_COMPANY
(

	Management_Reporting_Company_Cd VARCHAR(50) NOT NULL 
		TITLE 'Management Reporting Company Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE MANAGEMENT_REPORTING_COMPANY
	ADD CONSTRAINT XPKMANAGEMENT_REPORTING_COMPANY PRIMARY KEY (Management_Reporting_Company_Cd);

CREATE  TABLE ORGANIZATION_UNIT
(

	Organization_Unit_Cd VARCHAR(50) NOT NULL 
		TITLE 'Organization Unit Cd'
		UPPERCASE
		NOT CASESPECIFIC
);

ALTER TABLE ORGANIZATION_UNIT
	ADD CONSTRAINT XPKORGANIZATION_UNIT PRIMARY KEY (Organization_Unit_Cd);

CREATE MULTISET  TABLE POSTING_PERIOD_VARIANT
(

	Posting_Period_Variant_Cd VARCHAR(50) NOT NULL 
		TITLE 'Posting Period Variant Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	ETL_Insert_Process_Run_Id Classword_Id NOT NULL 
		TITLE 'ETL Insert Process Run Id',
	ETL_Source_Extract_Insert_Process_Run_Id Classword_Id NOT NULL 
		TITLE 'ETL Source Extract Insert Process Run Id',
	ETL_Update_Process_Run_Id Classword_Id NULL 
		TITLE 'ETL Update Process Run Id',
	ETL_Source_Extract_Update_Process_Run_Id Classword_Id NULL 
		TITLE 'ETL Source Extract Update Process Run Id'
)
	PRIMARY INDEX XIE1PSTNG_PER_VRNT
	 (
			Posting_Period_Variant_Cd
	 );

ALTER TABLE POSTING_PERIOD_VARIANT
	ADD CONSTRAINT XPKPSTNG_PER_VRNT PRIMARY KEY (Posting_Period_Variant_Cd);

CREATE MULTISET  TABLE REGION
(

	Region_Cd            VARCHAR(50) NOT NULL 
		TITLE 'Region Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Region_Desc          VARCHAR(250) NULL 
		TITLE 'Region Desc'
		CHARACTER SET UNICODE
		CASESPECIFIC,
	Data_Acquisition_Integration_Create_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Create Dttm',
	Data_Acquisition_Integration_Update_Dttm TIMESTAMP(0) NULL 
		TITLE 'Data Acquisition Integration Update Dttm'
)
	 UNIQUE PRIMARY INDEX XPKRGN
	 (
			Region_Cd
	 );

CREATE  TABLE TAX_TYPE
(

	Tax_Type_Cd          VARCHAR(50) NOT NULL 
		TITLE 'Tax Type Cd'
		UPPERCASE
		NOT CASESPECIFIC,
	Tax_Type_Desc        VARCHAR(250) NULL 
		TITLE 'Tax Type Desc'
		CHARACTER SET UNICODE
		CASESPECIFIC,
	ETL_Insert_Process_Run_Id Classword_Id NOT NULL 
		TITLE 'ETL Insert Process Run Id',
	ETL_Source_Extract_Insert_Process_Run_Id Classword_Id NOT NULL 
		TITLE 'ETL Source Extract Insert Process Run Id',
	ETL_Update_Process_Run_Id Classword_Id NULL 
		TITLE 'ETL Update Process Run Id',
	ETL_Source_Extract_Update_Process_Run_Id Classword_Id NULL 
		TITLE 'ETL Source Extract Update Process Run Id',
	Source_System_Cd     VARCHAR(50) NULL 
		TITLE 'Source System Cd'
		UPPERCASE
		NOT CASESPECIFIC
)
	 UNIQUE PRIMARY INDEX XPKTAX_TYPE
	 (
			Tax_Type_Cd
	 );

CREATE TRIGGER tD_BUSINESS_AREA AFTER DELETE ON BUSINESS_AREA
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on BUSINESS_AREA */
    /* BUSINESS_AREA  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000c475", PARENT_OWNER="", PARENT_TABLE="BUSINESS_AREA"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2775", FK_COLUMNS="Business_Area_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Business_Area_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Business_Area_Cd = oldtable.Business_Area_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_BUSINESS_AREA AFTER UPDATE ON BUSINESS_AREA
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM BUSINESS_AREA, oldtable, newtable WHERE oldtable.Business_Area_Cd <> newtable.Business_Area_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on BUSINESS_AREA */
  /* BUSINESS_AREA  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000c475", PARENT_OWNER="", PARENT_TABLE="BUSINESS_AREA"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2775", FK_COLUMNS="Business_Area_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Business_Area_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Business_Area_Cd = oldtable.Business_Area_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_BUSINESS_UNIT AFTER DELETE ON BUSINESS_UNIT
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on BUSINESS_UNIT */
    /* BUSINESS_UNIT  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b882", PARENT_OWNER="", PARENT_TABLE="BUSINESS_UNIT"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2776", FK_COLUMNS="Business_Unit_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Business_Unit_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Business_Unit_Cd = oldtable.Business_Unit_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_BUSINESS_UNIT AFTER UPDATE ON BUSINESS_UNIT
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM BUSINESS_UNIT, oldtable, newtable WHERE oldtable.Business_Unit_Cd <> newtable.Business_Unit_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on BUSINESS_UNIT */
  /* BUSINESS_UNIT  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000b882", PARENT_OWNER="", PARENT_TABLE="BUSINESS_UNIT"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2776", FK_COLUMNS="Business_Unit_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Business_Unit_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Business_Unit_Cd = oldtable.Business_Unit_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_COMPANY_CODE AFTER DELETE ON COMPANY_CODE
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on COMPANY_CODE */
    /* COMPANY_CODE  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b4f9", PARENT_OWNER="", PARENT_TABLE="COMPANY_CODE"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2751", FK_COLUMNS="Company_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Company_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Company_Cd = oldtable.Company_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_COMPANY_CODE AFTER UPDATE ON COMPANY_CODE
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM COMPANY_CODE, oldtable, newtable WHERE oldtable.Company_Cd <> newtable.Company_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on COMPANY_CODE */
  /* COMPANY_CODE  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000b4f9", PARENT_OWNER="", PARENT_TABLE="COMPANY_CODE"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2751", FK_COLUMNS="Company_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Company_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Company_Cd = oldtable.Company_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_COST_CENTER AFTER DELETE ON COST_CENTER
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on COST_CENTER */
    /* COST_CENTER  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000bdda", PARENT_OWNER="", PARENT_TABLE="COST_CENTER"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2752", FK_COLUMNS="Cost_Center_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Cost_Center_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Cost_Center_Cd = oldtable.Cost_Center_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_COST_CENTER AFTER UPDATE ON COST_CENTER
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM COST_CENTER, oldtable, newtable WHERE oldtable.Cost_Center_Cd <> newtable.Cost_Center_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on COST_CENTER */
  /* COST_CENTER  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000bdda", PARENT_OWNER="", PARENT_TABLE="COST_CENTER"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2752", FK_COLUMNS="Cost_Center_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Cost_Center_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Cost_Center_Cd = oldtable.Cost_Center_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_COUNTRY AFTER DELETE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on COUNTRY */
    /* COUNTRY  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000be79", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2773", FK_COLUMNS="Assignment_Country_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Assignment_Country_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Assignment_Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tD_COUNTRY2 AFTER DELETE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on COUNTRY */
    /* COUNTRY  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b4ad", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2753", FK_COLUMNS="Tax_Country_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Tax_Country_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Tax_Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tD_COUNTRY3 AFTER DELETE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on COUNTRY */
    /* COUNTRY  PARTY_ADDRESS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b8c5", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ADDRESS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2230", FK_COLUMNS="Country_Cd" */
    UPDATE PARTY_ADDRESS
      SET
        /* %SetFK(,NULL) */
        Country_Cd = NULL
      WHERE
        /* %JoinFKPK(PARTY_ADDRESS,oldtable," = "," AND") */
        PARTY_ADDRESS.Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_COUNTRY AFTER UPDATE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM COUNTRY, oldtable, newtable WHERE oldtable.Country_Cd <> newtable.Country_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on COUNTRY */
  /* COUNTRY  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000be79", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2773", FK_COLUMNS="Assignment_Country_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Assignment_Country_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Assignment_Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_COUNTRY2 AFTER UPDATE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM COUNTRY, oldtable, newtable WHERE oldtable.Country_Cd <> newtable.Country_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on COUNTRY */
  /* COUNTRY  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000b4ad", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2753", FK_COLUMNS="Tax_Country_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Tax_Country_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Tax_Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_COUNTRY3 AFTER UPDATE ON COUNTRY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM COUNTRY, oldtable, newtable WHERE oldtable.Country_Cd <> newtable.Country_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on COUNTRY */
  /* COUNTRY  PARTY_ADDRESS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000b8c5", PARENT_OWNER="", PARENT_TABLE="COUNTRY"
    CHILD_OWNER="", CHILD_TABLE="PARTY_ADDRESS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2230", FK_COLUMNS="Country_Cd" */
     UPDATE PARTY_ADDRESS
       SET
         /* %SetFK(,NULL) */
         Country_Cd = NULL
       WHERE
         /* %JoinFKPK(PARTY_ADDRESS,oldtable," = "," AND") */
         PARTY_ADDRESS.Country_Cd = oldtable.Country_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_CURRENCY AFTER DELETE ON CURRENCY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM DOCUMENT, oldtable WHERE DOCUMENT.Local_Currency_Cd = oldtable.Currency_Cd))
  /* erwin Builtin Trigger */
  /* DELETE trigger on CURRENCY */
  /* CURRENCY  DOCUMENT on parent delete restrict */
  /* ERWIN_RELATION:CHECKSUM="00008357", PARENT_OWNER="", PARENT_TABLE="CURRENCY"
    CHILD_OWNER="", CHILD_TABLE="DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2272", FK_COLUMNS="Local_Currency_Cd" */
   ABORT 'Cannot delete CURRENCY because DOCUMENT exists.'
-- erwin Builtin Trigger
;

CREATE TRIGGER tD_CURRENCY2 AFTER DELETE ON CURRENCY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM DOCUMENT, oldtable WHERE DOCUMENT.Document_Currency_Cd = oldtable.Currency_Cd))
  /* erwin Builtin Trigger */
  /* DELETE trigger on CURRENCY */
  /* CURRENCY  DOCUMENT on parent delete restrict */
  /* ERWIN_RELATION:CHECKSUM="00007ef5", PARENT_OWNER="", PARENT_TABLE="CURRENCY"
    CHILD_OWNER="", CHILD_TABLE="DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2268", FK_COLUMNS="Document_Currency_Cd" */
   ABORT 'Cannot delete CURRENCY because DOCUMENT exists.'
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_CURRENCY AFTER UPDATE ON CURRENCY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN ( (0 < (SELECT count(*) FROM CURRENCY, oldtable, newtable WHERE oldtable.Currency_Cd <> newtable.Currency_Cd)) AND
     (0 < (SELECT count(*) FROM DOCUMENT, oldtable WHERE DOCUMENT.Local_Currency_Cd = oldtable.Currency_Cd)))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on CURRENCY */
  /* CURRENCY  DOCUMENT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00008982", PARENT_OWNER="", PARENT_TABLE="CURRENCY"
    CHILD_OWNER="", CHILD_TABLE="DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2272", FK_COLUMNS="Local_Currency_Cd" */
       ABORT 'Cannot update CURRENCY because DOCUMENT exists.'
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_CURRENCY2 AFTER UPDATE ON CURRENCY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN ( (0 < (SELECT count(*) FROM CURRENCY, oldtable, newtable WHERE oldtable.Currency_Cd <> newtable.Currency_Cd)) AND
     (0 < (SELECT count(*) FROM DOCUMENT, oldtable WHERE DOCUMENT.Document_Currency_Cd = oldtable.Currency_Cd)))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on CURRENCY */
  /* CURRENCY  DOCUMENT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00007fe4", PARENT_OWNER="", PARENT_TABLE="CURRENCY"
    CHILD_OWNER="", CHILD_TABLE="DOCUMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2268", FK_COLUMNS="Document_Currency_Cd" */
       ABORT 'Cannot update CURRENCY because DOCUMENT exists.'
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_LEGAL_ENTITY AFTER DELETE ON LEGAL_ENTITY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on LEGAL_ENTITY */
    /* LEGAL_ENTITY  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000be27", PARENT_OWNER="", PARENT_TABLE="LEGAL_ENTITY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2749", FK_COLUMNS="Legal_Entity_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Legal_Entity_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Legal_Entity_Cd = oldtable.Legal_Entity_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_LEGAL_ENTITY AFTER UPDATE ON LEGAL_ENTITY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM LEGAL_ENTITY, oldtable, newtable WHERE oldtable.Legal_Entity_Cd <> newtable.Legal_Entity_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on LEGAL_ENTITY */
  /* LEGAL_ENTITY  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000be27", PARENT_OWNER="", PARENT_TABLE="LEGAL_ENTITY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2749", FK_COLUMNS="Legal_Entity_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Legal_Entity_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Legal_Entity_Cd = oldtable.Legal_Entity_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_MANAGEMENT_REPORTING_COMPAN AFTER DELETE ON MANAGEMENT_REPORTING_COMPANY
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on MANAGEMENT_REPORTING_COMPANY */
    /* MANAGEMENT_REPORTING_COMPANY  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000def3", PARENT_OWNER="", PARENT_TABLE="MANAGEMENT_REPORTING_COMPANY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2750", FK_COLUMNS="Management_Reporting_Company_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Management_Reporting_Company_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Management_Reporting_Company_Cd = oldtable.Management_Reporting_Company_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_MANAGEMENT_REPORTING_COMPAN AFTER UPDATE ON MANAGEMENT_REPORTING_COMPANY
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM MANAGEMENT_REPORTING_COMPANY, oldtable, newtable WHERE oldtable.Management_Reporting_Company_Cd <> newtable.Management_Reporting_Company_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on MANAGEMENT_REPORTING_COMPANY */
  /* MANAGEMENT_REPORTING_COMPANY  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000def3", PARENT_OWNER="", PARENT_TABLE="MANAGEMENT_REPORTING_COMPANY"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2750", FK_COLUMNS="Management_Reporting_Company_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Management_Reporting_Company_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Management_Reporting_Company_Cd = oldtable.Management_Reporting_Company_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_ORGANIZATION_UNIT AFTER DELETE ON ORGANIZATION_UNIT
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on ORGANIZATION_UNIT */
    /* ORGANIZATION_UNIT  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000c076", PARENT_OWNER="", PARENT_TABLE="ORGANIZATION_UNIT"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2765", FK_COLUMNS="Organization_Unit_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Organization_Unit_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Organization_Unit_Cd = oldtable.Organization_Unit_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_ORGANIZATION_UNIT AFTER UPDATE ON ORGANIZATION_UNIT
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM ORGANIZATION_UNIT, oldtable, newtable WHERE oldtable.Organization_Unit_Cd <> newtable.Organization_Unit_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on ORGANIZATION_UNIT */
  /* ORGANIZATION_UNIT  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000c076", PARENT_OWNER="", PARENT_TABLE="ORGANIZATION_UNIT"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2765", FK_COLUMNS="Organization_Unit_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Organization_Unit_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Organization_Unit_Cd = oldtable.Organization_Unit_Cd
-- erwin Builtin Trigger
;


CREATE TRIGGER tD_REGION AFTER DELETE ON REGION
   REFERENCING OLD TABLE AS OLDTABLE FOR EACH ROW
    /* erwin Builtin Trigger */
    /* DELETE trigger on REGION */
    /* REGION  ASSOCIATE on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000c09d", PARENT_OWNER="", PARENT_TABLE="REGION"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2774", FK_COLUMNS="Assignment_Region_Cd" */
    UPDATE ASSOCIATE
      SET
        /* %SetFK(,NULL) */
        Assignment_Region_Cd = NULL
      WHERE
        /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
        ASSOCIATE.Assignment_Region_Cd = oldtable.Region_Cd
-- erwin Builtin Trigger
;

CREATE TRIGGER tU_REGION AFTER UPDATE ON REGION
   REFERENCING OLD TABLE AS OLDTABLE NEW TABLE AS NEWTABLE FOR EACH ROW
   WHEN (0 < (SELECT count(*) FROM REGION, oldtable, newtable WHERE oldtable.Region_Cd <> newtable.Region_Cd))
  /* erwin Builtin Trigger */
  /* UPDATE trigger on REGION */
  /* REGION  ASSOCIATE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000c09d", PARENT_OWNER="", PARENT_TABLE="REGION"
    CHILD_OWNER="", CHILD_TABLE="ASSOCIATE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2774", FK_COLUMNS="Assignment_Region_Cd" */
     UPDATE ASSOCIATE
       SET
         /* %SetFK(,NULL) */
         Assignment_Region_Cd = NULL
       WHERE
         /* %JoinFKPK(ASSOCIATE,oldtable," = "," AND") */
         ASSOCIATE.Assignment_Region_Cd = oldtable.Region_Cd
-- erwin Builtin Trigger
;

